var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: !0 });
const UNINITIALIZED = Symbol(), NAMESPACE_SVG = "http://www.w3.org/2000/svg";
function is_capture_event(name) {
  return name.endsWith("capture") && name !== "gotpointercapture" && name !== "lostpointercapture";
}
__name(is_capture_event, "is_capture_event");
const DELEGATED_EVENTS = [
  "beforeinput",
  "click",
  "change",
  "dblclick",
  "contextmenu",
  "focusin",
  "focusout",
  "input",
  "keydown",
  "keyup",
  "mousedown",
  "mousemove",
  "mouseout",
  "mouseover",
  "mouseup",
  "pointerdown",
  "pointermove",
  "pointerout",
  "pointerover",
  "pointerup",
  "touchend",
  "touchmove",
  "touchstart"
];
function is_delegated(event_name) {
  return DELEGATED_EVENTS.includes(event_name);
}
__name(is_delegated, "is_delegated");
const ATTRIBUTE_ALIASES = {
  // no `class: 'className'` because we handle that separately
  formnovalidate: "formNoValidate",
  ismap: "isMap",
  nomodule: "noModule",
  playsinline: "playsInline",
  readonly: "readOnly",
  defaultvalue: "defaultValue",
  defaultchecked: "defaultChecked",
  srcobject: "srcObject"
};
function normalize_attribute(name) {
  return name = name.toLowerCase(), ATTRIBUTE_ALIASES[name] ?? name;
}
__name(normalize_attribute, "normalize_attribute");
const PASSIVE_EVENTS = ["touchstart", "touchmove"];
function is_passive_event(name) {
  return PASSIVE_EVENTS.includes(name);
}
__name(is_passive_event, "is_passive_event");
const DEV = !1;
var is_array = Array.isArray, index_of = Array.prototype.indexOf, array_from = Array.from, define_property = Object.defineProperty, get_descriptor = Object.getOwnPropertyDescriptor, get_descriptors = Object.getOwnPropertyDescriptors, object_prototype = Object.prototype, array_prototype = Array.prototype, get_prototype_of = Object.getPrototypeOf;
function is_function(thing) {
  return typeof thing == "function";
}
__name(is_function, "is_function");
const noop = /* @__PURE__ */ __name(() => {
}, "noop");
function is_promise(value) {
  return typeof value?.then == "function";
}
__name(is_promise, "is_promise");
function run(fn) {
  return fn();
}
__name(run, "run");
function run_all(arr) {
  for (var i2 = 0; i2 < arr.length; i2++)
    arr[i2]();
}
__name(run_all, "run_all");
const DERIVED = 2, EFFECT = 4, RENDER_EFFECT = 8, BLOCK_EFFECT = 16, BRANCH_EFFECT = 32, ROOT_EFFECT = 64, BOUNDARY_EFFECT = 128, UNOWNED = 256, DISCONNECTED = 512, CLEAN = 1024, DIRTY = 2048, MAYBE_DIRTY = 4096, INERT = 8192, DESTROYED = 16384, EFFECT_RAN = 32768, EFFECT_TRANSPARENT = 65536, LEGACY_DERIVED_PROP = 1 << 17, HEAD_EFFECT = 1 << 19, EFFECT_HAS_DERIVED = 1 << 20, STATE_SYMBOL = Symbol("$state"), LEGACY_PROPS = Symbol("legacy props"), LOADING_ATTR_SYMBOL = Symbol("");
function equals(value) {
  return value === this.v;
}
__name(equals, "equals");
function safe_not_equal(a2, b2) {
  return a2 != a2 ? b2 == b2 : a2 !== b2 || a2 !== null && typeof a2 == "object" || typeof a2 == "function";
}
__name(safe_not_equal, "safe_not_equal");
function not_equal(a2, b2) {
  return a2 !== b2;
}
__name(not_equal, "not_equal");
function safe_equals(value) {
  return !safe_not_equal(value, this.v);
}
__name(safe_equals, "safe_equals");
function effect_in_teardown(rune) {
  throw new Error("https://svelte.dev/e/effect_in_teardown");
}
__name(effect_in_teardown, "effect_in_teardown");
function effect_in_unowned_derived() {
  throw new Error("https://svelte.dev/e/effect_in_unowned_derived");
}
__name(effect_in_unowned_derived, "effect_in_unowned_derived");
function effect_orphan(rune) {
  throw new Error("https://svelte.dev/e/effect_orphan");
}
__name(effect_orphan, "effect_orphan");
function effect_update_depth_exceeded() {
  throw new Error("https://svelte.dev/e/effect_update_depth_exceeded");
}
__name(effect_update_depth_exceeded, "effect_update_depth_exceeded");
function props_invalid_value(key) {
  throw new Error("https://svelte.dev/e/props_invalid_value");
}
__name(props_invalid_value, "props_invalid_value");
function state_descriptors_fixed() {
  throw new Error("https://svelte.dev/e/state_descriptors_fixed");
}
__name(state_descriptors_fixed, "state_descriptors_fixed");
function state_prototype_fixed() {
  throw new Error("https://svelte.dev/e/state_prototype_fixed");
}
__name(state_prototype_fixed, "state_prototype_fixed");
function state_unsafe_local_read() {
  throw new Error("https://svelte.dev/e/state_unsafe_local_read");
}
__name(state_unsafe_local_read, "state_unsafe_local_read");
function state_unsafe_mutation() {
  throw new Error("https://svelte.dev/e/state_unsafe_mutation");
}
__name(state_unsafe_mutation, "state_unsafe_mutation");
let legacy_mode_flag = !1, tracing_mode_flag = !1;
function enable_legacy_mode_flag() {
  legacy_mode_flag = !0;
}
__name(enable_legacy_mode_flag, "enable_legacy_mode_flag");
function source(v2, stack) {
  var signal = {
    f: 0,
    // TODO ideally we could skip this altogether, but it causes type errors
    v: v2,
    reactions: null,
    equals,
    rv: 0,
    wv: 0
  };
  return signal;
}
__name(source, "source");
function state(v2) {
  return /* @__PURE__ */ push_derived_source(source(v2));
}
__name(state, "state");
// @__NO_SIDE_EFFECTS__
function mutable_source(initial_value, immutable = !1) {
  const s2 = source(initial_value);
  return immutable || (s2.equals = safe_equals), legacy_mode_flag && component_context !== null && component_context.l !== null && (component_context.l.s ??= []).push(s2), s2;
}
__name(mutable_source, "mutable_source");
function mutable_state(v2, immutable = !1) {
  return /* @__PURE__ */ push_derived_source(/* @__PURE__ */ mutable_source(v2, immutable));
}
__name(mutable_state, "mutable_state");
// @__NO_SIDE_EFFECTS__
function push_derived_source(source2) {
  return active_reaction !== null && active_reaction.f & DERIVED && (derived_sources === null ? set_derived_sources([source2]) : derived_sources.push(source2)), source2;
}
__name(push_derived_source, "push_derived_source");
function mutate(source2, value) {
  return set(
    source2,
    untrack(() => get(source2))
  ), value;
}
__name(mutate, "mutate");
function set(source2, value) {
  return active_reaction !== null && is_runes() && active_reaction.f & (DERIVED | BLOCK_EFFECT) && // If the source was created locally within the current derived, then
  // we allow the mutation.
  (derived_sources === null || !derived_sources.includes(source2)) && state_unsafe_mutation(), internal_set(source2, value);
}
__name(set, "set");
function internal_set(source2, value) {
  return source2.equals(value) || (source2.v, source2.v = value, source2.wv = increment_write_version(), mark_reactions(source2, DIRTY), is_runes() && active_effect !== null && active_effect.f & CLEAN && !(active_effect.f & BRANCH_EFFECT) && (new_deps !== null && new_deps.includes(source2) ? (set_signal_status(active_effect, DIRTY), schedule_effect(active_effect)) : untracked_writes === null ? set_untracked_writes([source2]) : untracked_writes.push(source2))), value;
}
__name(internal_set, "internal_set");
function mark_reactions(signal, status) {
  var reactions = signal.reactions;
  if (reactions !== null)
    for (var runes = is_runes(), length = reactions.length, i2 = 0; i2 < length; i2++) {
      var reaction = reactions[i2], flags = reaction.f;
      flags & DIRTY || !runes && reaction === active_effect || (set_signal_status(reaction, status), flags & (CLEAN | UNOWNED) && (flags & DERIVED ? mark_reactions(
        /** @type {Derived} */
        reaction,
        MAYBE_DIRTY
      ) : schedule_effect(
        /** @type {Effect} */
        reaction
      )));
    }
}
__name(mark_reactions, "mark_reactions");
let hydrating = !1;
function proxy(value, parent = null, prev) {
  if (typeof value != "object" || value === null || STATE_SYMBOL in value)
    return value;
  const prototype = get_prototype_of(value);
  if (prototype !== object_prototype && prototype !== array_prototype)
    return value;
  var sources = /* @__PURE__ */ new Map(), is_proxied_array = is_array(value), version = source(0);
  is_proxied_array && sources.set("length", source(
    /** @type {any[]} */
    value.length
  ));
  var metadata;
  return new Proxy(
    /** @type {any} */
    value,
    {
      defineProperty(_, prop2, descriptor) {
        (!("value" in descriptor) || descriptor.configurable === !1 || descriptor.enumerable === !1 || descriptor.writable === !1) && state_descriptors_fixed();
        var s2 = sources.get(prop2);
        return s2 === void 0 ? (s2 = source(descriptor.value), sources.set(prop2, s2)) : set(s2, proxy(descriptor.value, metadata)), !0;
      },
      deleteProperty(target, prop2) {
        var s2 = sources.get(prop2);
        if (s2 === void 0)
          prop2 in target && sources.set(prop2, source(UNINITIALIZED));
        else {
          if (is_proxied_array && typeof prop2 == "string") {
            var ls = (
              /** @type {Source<number>} */
              sources.get("length")
            ), n2 = Number(prop2);
            Number.isInteger(n2) && n2 < ls.v && set(ls, n2);
          }
          set(s2, UNINITIALIZED), update_version(version);
        }
        return !0;
      },
      get(target, prop2, receiver) {
        if (prop2 === STATE_SYMBOL)
          return value;
        var s2 = sources.get(prop2), exists = prop2 in target;
        if (s2 === void 0 && (!exists || get_descriptor(target, prop2)?.writable) && (s2 = source(proxy(exists ? target[prop2] : UNINITIALIZED, metadata)), sources.set(prop2, s2)), s2 !== void 0) {
          var v2 = get(s2);
          return v2 === UNINITIALIZED ? void 0 : v2;
        }
        return Reflect.get(target, prop2, receiver);
      },
      getOwnPropertyDescriptor(target, prop2) {
        var descriptor = Reflect.getOwnPropertyDescriptor(target, prop2);
        if (descriptor && "value" in descriptor) {
          var s2 = sources.get(prop2);
          s2 && (descriptor.value = get(s2));
        } else if (descriptor === void 0) {
          var source2 = sources.get(prop2), value2 = source2?.v;
          if (source2 !== void 0 && value2 !== UNINITIALIZED)
            return {
              enumerable: !0,
              configurable: !0,
              value: value2,
              writable: !0
            };
        }
        return descriptor;
      },
      has(target, prop2) {
        if (prop2 === STATE_SYMBOL)
          return !0;
        var s2 = sources.get(prop2), has = s2 !== void 0 && s2.v !== UNINITIALIZED || Reflect.has(target, prop2);
        if (s2 !== void 0 || active_effect !== null && (!has || get_descriptor(target, prop2)?.writable)) {
          s2 === void 0 && (s2 = source(has ? proxy(target[prop2], metadata) : UNINITIALIZED), sources.set(prop2, s2));
          var value2 = get(s2);
          if (value2 === UNINITIALIZED)
            return !1;
        }
        return has;
      },
      set(target, prop2, value2, receiver) {
        var s2 = sources.get(prop2), has = prop2 in target;
        if (is_proxied_array && prop2 === "length")
          for (var i2 = value2; i2 < /** @type {Source<number>} */
          s2.v; i2 += 1) {
            var other_s = sources.get(i2 + "");
            other_s !== void 0 ? set(other_s, UNINITIALIZED) : i2 in target && (other_s = source(UNINITIALIZED), sources.set(i2 + "", other_s));
          }
        s2 === void 0 ? (!has || get_descriptor(target, prop2)?.writable) && (s2 = source(void 0), set(s2, proxy(value2, metadata)), sources.set(prop2, s2)) : (has = s2.v !== UNINITIALIZED, set(s2, proxy(value2, metadata)));
        var descriptor = Reflect.getOwnPropertyDescriptor(target, prop2);
        if (descriptor?.set && descriptor.set.call(receiver, value2), !has) {
          if (is_proxied_array && typeof prop2 == "string") {
            var ls = (
              /** @type {Source<number>} */
              sources.get("length")
            ), n2 = Number(prop2);
            Number.isInteger(n2) && n2 >= ls.v && set(ls, n2 + 1);
          }
          update_version(version);
        }
        return !0;
      },
      ownKeys(target) {
        get(version);
        var own_keys = Reflect.ownKeys(target).filter((key2) => {
          var source3 = sources.get(key2);
          return source3 === void 0 || source3.v !== UNINITIALIZED;
        });
        for (var [key, source2] of sources)
          source2.v !== UNINITIALIZED && !(key in target) && own_keys.push(key);
        return own_keys;
      },
      setPrototypeOf() {
        state_prototype_fixed();
      }
    }
  );
}
__name(proxy, "proxy");
function update_version(signal, d2 = 1) {
  set(signal, signal.v + d2);
}
__name(update_version, "update_version");
function get_proxied_value(value) {
  return value !== null && typeof value == "object" && STATE_SYMBOL in value ? value[STATE_SYMBOL] : value;
}
__name(get_proxied_value, "get_proxied_value");
function is(a2, b2) {
  return Object.is(get_proxied_value(a2), get_proxied_value(b2));
}
__name(is, "is");
var $window, first_child_getter, next_sibling_getter;
function init_operations() {
  if ($window === void 0) {
    $window = window;
    var element_prototype = Element.prototype, node_prototype = Node.prototype;
    first_child_getter = get_descriptor(node_prototype, "firstChild").get, next_sibling_getter = get_descriptor(node_prototype, "nextSibling").get, element_prototype.__click = void 0, element_prototype.__className = "", element_prototype.__attributes = null, element_prototype.__styles = null, element_prototype.__e = void 0, Text.prototype.__t = void 0;
  }
}
__name(init_operations, "init_operations");
function create_text(value = "") {
  return document.createTextNode(value);
}
__name(create_text, "create_text");
// @__NO_SIDE_EFFECTS__
function get_first_child(node) {
  return first_child_getter.call(node);
}
__name(get_first_child, "get_first_child");
// @__NO_SIDE_EFFECTS__
function get_next_sibling(node) {
  return next_sibling_getter.call(node);
}
__name(get_next_sibling, "get_next_sibling");
function child(node, is_text) {
  return /* @__PURE__ */ get_first_child(node);
}
__name(child, "child");
function first_child(fragment, is_text) {
  {
    var first = (
      /** @type {DocumentFragment} */
      /* @__PURE__ */ get_first_child(
        /** @type {Node} */
        fragment
      )
    );
    return first instanceof Comment && first.data === "" ? /* @__PURE__ */ get_next_sibling(first) : first;
  }
}
__name(first_child, "first_child");
function sibling(node, count = 1, is_text = !1) {
  let next_sibling = node;
  for (; count--; )
    next_sibling = /** @type {TemplateNode} */
    /* @__PURE__ */ get_next_sibling(next_sibling);
  return next_sibling;
}
__name(sibling, "sibling");
function clear_text_content(node) {
  node.textContent = "";
}
__name(clear_text_content, "clear_text_content");
// @__NO_SIDE_EFFECTS__
function derived(fn) {
  var flags = DERIVED | DIRTY;
  active_effect === null ? flags |= UNOWNED : active_effect.f |= EFFECT_HAS_DERIVED;
  var parent_derived = active_reaction !== null && active_reaction.f & DERIVED ? (
    /** @type {Derived} */
    active_reaction
  ) : null;
  const signal = {
    children: null,
    ctx: component_context,
    deps: null,
    equals,
    f: flags,
    fn,
    reactions: null,
    rv: 0,
    v: (
      /** @type {V} */
      null
    ),
    wv: 0,
    parent: parent_derived ?? active_effect
  };
  return parent_derived !== null && (parent_derived.children ??= []).push(signal), signal;
}
__name(derived, "derived");
// @__NO_SIDE_EFFECTS__
function derived_safe_equal(fn) {
  const signal = /* @__PURE__ */ derived(fn);
  return signal.equals = safe_equals, signal;
}
__name(derived_safe_equal, "derived_safe_equal");
function destroy_derived_children(derived2) {
  var children = derived2.children;
  if (children !== null) {
    derived2.children = null;
    for (var i2 = 0; i2 < children.length; i2 += 1) {
      var child2 = children[i2];
      child2.f & DERIVED ? destroy_derived(
        /** @type {Derived} */
        child2
      ) : destroy_effect(
        /** @type {Effect} */
        child2
      );
    }
  }
}
__name(destroy_derived_children, "destroy_derived_children");
function get_derived_parent_effect(derived2) {
  for (var parent = derived2.parent; parent !== null; ) {
    if (!(parent.f & DERIVED))
      return (
        /** @type {Effect} */
        parent
      );
    parent = parent.parent;
  }
  return null;
}
__name(get_derived_parent_effect, "get_derived_parent_effect");
function execute_derived(derived2) {
  var value, prev_active_effect = active_effect;
  set_active_effect(get_derived_parent_effect(derived2));
  try {
    destroy_derived_children(derived2), value = update_reaction(derived2);
  } finally {
    set_active_effect(prev_active_effect);
  }
  return value;
}
__name(execute_derived, "execute_derived");
function update_derived(derived2) {
  var value = execute_derived(derived2), status = (skip_reaction || derived2.f & UNOWNED) && derived2.deps !== null ? MAYBE_DIRTY : CLEAN;
  set_signal_status(derived2, status), derived2.equals(value) || (derived2.v = value, derived2.wv = increment_write_version());
}
__name(update_derived, "update_derived");
function destroy_derived(derived2) {
  destroy_derived_children(derived2), remove_reactions(derived2, 0), set_signal_status(derived2, DESTROYED), derived2.v = derived2.children = derived2.deps = derived2.ctx = derived2.reactions = null;
}
__name(destroy_derived, "destroy_derived");
function validate_effect(rune) {
  active_effect === null && active_reaction === null && effect_orphan(), active_reaction !== null && active_reaction.f & UNOWNED && effect_in_unowned_derived(), is_destroying_effect && effect_in_teardown();
}
__name(validate_effect, "validate_effect");
function push_effect(effect2, parent_effect) {
  var parent_last = parent_effect.last;
  parent_last === null ? parent_effect.last = parent_effect.first = effect2 : (parent_last.next = effect2, effect2.prev = parent_last, parent_effect.last = effect2);
}
__name(push_effect, "push_effect");
function create_effect(type, fn, sync, push2 = !0) {
  var is_root = (type & ROOT_EFFECT) !== 0, parent_effect = active_effect, effect2 = {
    ctx: component_context,
    deps: null,
    deriveds: null,
    nodes_start: null,
    nodes_end: null,
    f: type | DIRTY,
    first: null,
    fn,
    last: null,
    next: null,
    parent: is_root ? null : parent_effect,
    prev: null,
    teardown: null,
    transitions: null,
    wv: 0
  };
  if (sync) {
    var previously_flushing_effect = is_flushing_effect;
    try {
      set_is_flushing_effect(!0), update_effect(effect2), effect2.f |= EFFECT_RAN;
    } catch (e2) {
      throw destroy_effect(effect2), e2;
    } finally {
      set_is_flushing_effect(previously_flushing_effect);
    }
  } else fn !== null && schedule_effect(effect2);
  var inert = sync && effect2.deps === null && effect2.first === null && effect2.nodes_start === null && effect2.teardown === null && (effect2.f & EFFECT_HAS_DERIVED) === 0;
  if (!inert && !is_root && push2 && (parent_effect !== null && push_effect(effect2, parent_effect), active_reaction !== null && active_reaction.f & DERIVED)) {
    var derived2 = (
      /** @type {Derived} */
      active_reaction
    );
    (derived2.children ??= []).push(effect2);
  }
  return effect2;
}
__name(create_effect, "create_effect");
function teardown(fn) {
  const effect2 = create_effect(RENDER_EFFECT, null, !1);
  return set_signal_status(effect2, CLEAN), effect2.teardown = fn, effect2;
}
__name(teardown, "teardown");
function user_effect(fn) {
  validate_effect();
  var defer = active_effect !== null && (active_effect.f & BRANCH_EFFECT) !== 0 && component_context !== null && !component_context.m;
  if (defer) {
    var context = (
      /** @type {ComponentContext} */
      component_context
    );
    (context.e ??= []).push({
      fn,
      effect: active_effect,
      reaction: active_reaction
    });
  } else {
    var signal = effect(fn);
    return signal;
  }
}
__name(user_effect, "user_effect");
function user_pre_effect(fn) {
  return validate_effect(), render_effect(fn);
}
__name(user_pre_effect, "user_pre_effect");
function effect_root(fn) {
  const effect2 = create_effect(ROOT_EFFECT, fn, !0);
  return () => {
    destroy_effect(effect2);
  };
}
__name(effect_root, "effect_root");
function component_root(fn) {
  const effect2 = create_effect(ROOT_EFFECT, fn, !0);
  return (options = {}) => new Promise((fulfil) => {
    options.outro ? pause_effect(effect2, () => {
      destroy_effect(effect2), fulfil(void 0);
    }) : (destroy_effect(effect2), fulfil(void 0));
  });
}
__name(component_root, "component_root");
function effect(fn) {
  return create_effect(EFFECT, fn, !1);
}
__name(effect, "effect");
function render_effect(fn) {
  return create_effect(RENDER_EFFECT, fn, !0);
}
__name(render_effect, "render_effect");
function template_effect(fn) {
  return block(fn);
}
__name(template_effect, "template_effect");
function block(fn, flags = 0) {
  return create_effect(RENDER_EFFECT | BLOCK_EFFECT | flags, fn, !0);
}
__name(block, "block");
function branch(fn, push2 = !0) {
  return create_effect(RENDER_EFFECT | BRANCH_EFFECT, fn, !0, push2);
}
__name(branch, "branch");
function execute_effect_teardown(effect2) {
  var teardown2 = effect2.teardown;
  if (teardown2 !== null) {
    const previously_destroying_effect = is_destroying_effect, previous_reaction = active_reaction;
    set_is_destroying_effect(!0), set_active_reaction(null);
    try {
      teardown2.call(null);
    } finally {
      set_is_destroying_effect(previously_destroying_effect), set_active_reaction(previous_reaction);
    }
  }
}
__name(execute_effect_teardown, "execute_effect_teardown");
function destroy_effect_deriveds(signal) {
  var deriveds = signal.deriveds;
  if (deriveds !== null) {
    signal.deriveds = null;
    for (var i2 = 0; i2 < deriveds.length; i2 += 1)
      destroy_derived(deriveds[i2]);
  }
}
__name(destroy_effect_deriveds, "destroy_effect_deriveds");
function destroy_effect_children(signal, remove_dom = !1) {
  var effect2 = signal.first;
  for (signal.first = signal.last = null; effect2 !== null; ) {
    var next = effect2.next;
    destroy_effect(effect2, remove_dom), effect2 = next;
  }
}
__name(destroy_effect_children, "destroy_effect_children");
function destroy_block_effect_children(signal) {
  for (var effect2 = signal.first; effect2 !== null; ) {
    var next = effect2.next;
    effect2.f & BRANCH_EFFECT || destroy_effect(effect2), effect2 = next;
  }
}
__name(destroy_block_effect_children, "destroy_block_effect_children");
function destroy_effect(effect2, remove_dom = !0) {
  var removed = !1;
  if ((remove_dom || effect2.f & HEAD_EFFECT) && effect2.nodes_start !== null) {
    for (var node = effect2.nodes_start, end = effect2.nodes_end; node !== null; ) {
      var next = node === end ? null : (
        /** @type {TemplateNode} */
        /* @__PURE__ */ get_next_sibling(node)
      );
      node.remove(), node = next;
    }
    removed = !0;
  }
  destroy_effect_children(effect2, remove_dom && !removed), destroy_effect_deriveds(effect2), remove_reactions(effect2, 0), set_signal_status(effect2, DESTROYED);
  var transitions = effect2.transitions;
  if (transitions !== null)
    for (const transition2 of transitions)
      transition2.stop();
  execute_effect_teardown(effect2);
  var parent = effect2.parent;
  parent !== null && parent.first !== null && unlink_effect(effect2), effect2.next = effect2.prev = effect2.teardown = effect2.ctx = effect2.deps = effect2.fn = effect2.nodes_start = effect2.nodes_end = null;
}
__name(destroy_effect, "destroy_effect");
function unlink_effect(effect2) {
  var parent = effect2.parent, prev = effect2.prev, next = effect2.next;
  prev !== null && (prev.next = next), next !== null && (next.prev = prev), parent !== null && (parent.first === effect2 && (parent.first = next), parent.last === effect2 && (parent.last = prev));
}
__name(unlink_effect, "unlink_effect");
function pause_effect(effect2, callback) {
  var transitions = [];
  pause_children(effect2, transitions, !0), run_out_transitions(transitions, () => {
    destroy_effect(effect2), callback && callback();
  });
}
__name(pause_effect, "pause_effect");
function run_out_transitions(transitions, fn) {
  var remaining = transitions.length;
  if (remaining > 0) {
    var check = /* @__PURE__ */ __name(() => --remaining || fn(), "check");
    for (var transition2 of transitions)
      transition2.out(check);
  } else
    fn();
}
__name(run_out_transitions, "run_out_transitions");
function pause_children(effect2, transitions, local) {
  if (!(effect2.f & INERT)) {
    if (effect2.f ^= INERT, effect2.transitions !== null)
      for (const transition2 of effect2.transitions)
        (transition2.is_global || local) && transitions.push(transition2);
    for (var child2 = effect2.first; child2 !== null; ) {
      var sibling2 = child2.next, transparent = (child2.f & EFFECT_TRANSPARENT) !== 0 || (child2.f & BRANCH_EFFECT) !== 0;
      pause_children(child2, transitions, transparent ? local : !1), child2 = sibling2;
    }
  }
}
__name(pause_children, "pause_children");
function resume_effect(effect2) {
  resume_children(effect2, !0);
}
__name(resume_effect, "resume_effect");
function resume_children(effect2, local) {
  if (effect2.f & INERT) {
    check_dirtiness(effect2) && update_effect(effect2), effect2.f ^= INERT;
    for (var child2 = effect2.first; child2 !== null; ) {
      var sibling2 = child2.next, transparent = (child2.f & EFFECT_TRANSPARENT) !== 0 || (child2.f & BRANCH_EFFECT) !== 0;
      resume_children(child2, transparent ? local : !1), child2 = sibling2;
    }
    if (effect2.transitions !== null)
      for (const transition2 of effect2.transitions)
        (transition2.is_global || local) && transition2.in();
  }
}
__name(resume_children, "resume_children");
let is_micro_task_queued$1 = !1, current_queued_micro_tasks = [];
function process_micro_tasks() {
  is_micro_task_queued$1 = !1;
  const tasks = current_queued_micro_tasks.slice();
  current_queued_micro_tasks = [], run_all(tasks);
}
__name(process_micro_tasks, "process_micro_tasks");
function queue_micro_task(fn) {
  is_micro_task_queued$1 || (is_micro_task_queued$1 = !0, queueMicrotask(process_micro_tasks)), current_queued_micro_tasks.push(fn);
}
__name(queue_micro_task, "queue_micro_task");
function flush_tasks() {
  is_micro_task_queued$1 && process_micro_tasks();
}
__name(flush_tasks, "flush_tasks");
function lifecycle_outside_component(name) {
  throw new Error("https://svelte.dev/e/lifecycle_outside_component");
}
__name(lifecycle_outside_component, "lifecycle_outside_component");
const FLUSH_MICROTASK = 0, FLUSH_SYNC = 1;
let is_throwing_error = !1, scheduler_mode = FLUSH_MICROTASK, is_micro_task_queued = !1, last_scheduled_effect = null, is_flushing_effect = !1, is_destroying_effect = !1;
function set_is_flushing_effect(value) {
  is_flushing_effect = value;
}
__name(set_is_flushing_effect, "set_is_flushing_effect");
function set_is_destroying_effect(value) {
  is_destroying_effect = value;
}
__name(set_is_destroying_effect, "set_is_destroying_effect");
let queued_root_effects = [], flush_count = 0;
let active_reaction = null;
function set_active_reaction(reaction) {
  active_reaction = reaction;
}
__name(set_active_reaction, "set_active_reaction");
let active_effect = null;
function set_active_effect(effect2) {
  active_effect = effect2;
}
__name(set_active_effect, "set_active_effect");
let derived_sources = null;
function set_derived_sources(sources) {
  derived_sources = sources;
}
__name(set_derived_sources, "set_derived_sources");
let new_deps = null, skipped_deps = 0, untracked_writes = null;
function set_untracked_writes(value) {
  untracked_writes = value;
}
__name(set_untracked_writes, "set_untracked_writes");
let write_version = 1, read_version = 0, skip_reaction = !1, component_context = null;
function set_component_context(context) {
  component_context = context;
}
__name(set_component_context, "set_component_context");
function increment_write_version() {
  return ++write_version;
}
__name(increment_write_version, "increment_write_version");
function is_runes() {
  return !legacy_mode_flag || component_context !== null && component_context.l === null;
}
__name(is_runes, "is_runes");
function check_dirtiness(reaction) {
  var flags = reaction.f;
  if (flags & DIRTY)
    return !0;
  if (flags & MAYBE_DIRTY) {
    var dependencies = reaction.deps, is_unowned = (flags & UNOWNED) !== 0;
    if (dependencies !== null) {
      var i2, dependency, is_disconnected = (flags & DISCONNECTED) !== 0, is_unowned_connected = is_unowned && active_effect !== null && !skip_reaction, length = dependencies.length;
      if (is_disconnected || is_unowned_connected) {
        for (i2 = 0; i2 < length; i2++)
          dependency = dependencies[i2], (is_disconnected || !dependency?.reactions?.includes(reaction)) && (dependency.reactions ??= []).push(reaction);
        is_disconnected && (reaction.f ^= DISCONNECTED);
      }
      for (i2 = 0; i2 < length; i2++)
        if (dependency = dependencies[i2], check_dirtiness(
          /** @type {Derived} */
          dependency
        ) && update_derived(
          /** @type {Derived} */
          dependency
        ), dependency.wv > reaction.wv)
          return !0;
    }
    (!is_unowned || active_effect !== null && !skip_reaction) && set_signal_status(reaction, CLEAN);
  }
  return !1;
}
__name(check_dirtiness, "check_dirtiness");
function propagate_error(error2, effect2) {
  for (var current = effect2; current !== null; ) {
    if (current.f & BOUNDARY_EFFECT)
      try {
        current.fn(error2);
        return;
      } catch {
        current.f ^= BOUNDARY_EFFECT;
      }
    current = current.parent;
  }
  throw is_throwing_error = !1, error2;
}
__name(propagate_error, "propagate_error");
function should_rethrow_error(effect2) {
  return (effect2.f & DESTROYED) === 0 && (effect2.parent === null || (effect2.parent.f & BOUNDARY_EFFECT) === 0);
}
__name(should_rethrow_error, "should_rethrow_error");
function reset_is_throwing_error() {
  is_throwing_error = !1;
}
__name(reset_is_throwing_error, "reset_is_throwing_error");
function handle_error(error2, effect2, previous_effect, component_context2) {
  if (is_throwing_error) {
    if (previous_effect === null && (is_throwing_error = !1), should_rethrow_error(effect2))
      throw error2;
    return;
  }
  previous_effect !== null && (is_throwing_error = !0);
  {
    propagate_error(error2, effect2);
    return;
  }
}
__name(handle_error, "handle_error");
function update_reaction(reaction) {
  var previous_deps = new_deps, previous_skipped_deps = skipped_deps, previous_untracked_writes = untracked_writes, previous_reaction = active_reaction, previous_skip_reaction = skip_reaction, prev_derived_sources = derived_sources, previous_component_context = component_context, flags = reaction.f;
  new_deps = /** @type {null | Value[]} */
  null, skipped_deps = 0, untracked_writes = null, active_reaction = flags & (BRANCH_EFFECT | ROOT_EFFECT) ? null : reaction, skip_reaction = !is_flushing_effect && (flags & UNOWNED) !== 0, derived_sources = null, component_context = reaction.ctx, read_version++;
  try {
    var result = (
      /** @type {Function} */
      (0, reaction.fn)()
    ), deps = reaction.deps;
    if (new_deps !== null) {
      var i2;
      if (remove_reactions(reaction, skipped_deps), deps !== null && skipped_deps > 0)
        for (deps.length = skipped_deps + new_deps.length, i2 = 0; i2 < new_deps.length; i2++)
          deps[skipped_deps + i2] = new_deps[i2];
      else
        reaction.deps = deps = new_deps;
      if (!skip_reaction)
        for (i2 = skipped_deps; i2 < deps.length; i2++)
          (deps[i2].reactions ??= []).push(reaction);
    } else deps !== null && skipped_deps < deps.length && (remove_reactions(reaction, skipped_deps), deps.length = skipped_deps);
    return previous_reaction !== null && read_version++, result;
  } finally {
    new_deps = previous_deps, skipped_deps = previous_skipped_deps, untracked_writes = previous_untracked_writes, active_reaction = previous_reaction, skip_reaction = previous_skip_reaction, derived_sources = prev_derived_sources, component_context = previous_component_context;
  }
}
__name(update_reaction, "update_reaction");
function remove_reaction(signal, dependency) {
  let reactions = dependency.reactions;
  if (reactions !== null) {
    var index2 = index_of.call(reactions, signal);
    if (index2 !== -1) {
      var new_length = reactions.length - 1;
      new_length === 0 ? reactions = dependency.reactions = null : (reactions[index2] = reactions[new_length], reactions.pop());
    }
  }
  reactions === null && dependency.f & DERIVED && // Destroying a child effect while updating a parent effect can cause a dependency to appear
  // to be unused, when in fact it is used by the currently-updating parent. Checking `new_deps`
  // allows us to skip the expensive work of disconnecting and immediately reconnecting it
  (new_deps === null || !new_deps.includes(dependency)) && (set_signal_status(dependency, MAYBE_DIRTY), dependency.f & (UNOWNED | DISCONNECTED) || (dependency.f ^= DISCONNECTED), remove_reactions(
    /** @type {Derived} **/
    dependency,
    0
  ));
}
__name(remove_reaction, "remove_reaction");
function remove_reactions(signal, start_index) {
  var dependencies = signal.deps;
  if (dependencies !== null)
    for (var i2 = start_index; i2 < dependencies.length; i2++)
      remove_reaction(signal, dependencies[i2]);
}
__name(remove_reactions, "remove_reactions");
function update_effect(effect2) {
  var flags = effect2.f;
  if (!(flags & DESTROYED)) {
    set_signal_status(effect2, CLEAN);
    var previous_effect = active_effect, previous_component_context = component_context;
    active_effect = effect2;
    try {
      flags & BLOCK_EFFECT ? destroy_block_effect_children(effect2) : destroy_effect_children(effect2), destroy_effect_deriveds(effect2), execute_effect_teardown(effect2);
      var teardown2 = update_reaction(effect2);
      effect2.teardown = typeof teardown2 == "function" ? teardown2 : null, effect2.wv = write_version;
      var deps = effect2.deps, dep;
      DEV && tracing_mode_flag && effect2.f & DIRTY;
    } catch (error2) {
      handle_error(error2, effect2, previous_effect, previous_component_context || effect2.ctx);
    } finally {
      active_effect = previous_effect;
    }
  }
}
__name(update_effect, "update_effect");
function infinite_loop_guard() {
  if (flush_count > 1e3) {
    flush_count = 0;
    try {
      effect_update_depth_exceeded();
    } catch (error2) {
      if (last_scheduled_effect !== null)
        handle_error(error2, last_scheduled_effect, null);
      else
        throw error2;
    }
  }
  flush_count++;
}
__name(infinite_loop_guard, "infinite_loop_guard");
function flush_queued_root_effects(root_effects) {
  var length = root_effects.length;
  if (length !== 0) {
    infinite_loop_guard();
    var previously_flushing_effect = is_flushing_effect;
    is_flushing_effect = !0;
    try {
      for (var i2 = 0; i2 < length; i2++) {
        var effect2 = root_effects[i2];
        effect2.f & CLEAN || (effect2.f ^= CLEAN);
        var collected_effects = [];
        process_effects(effect2, collected_effects), flush_queued_effects(collected_effects);
      }
    } finally {
      is_flushing_effect = previously_flushing_effect;
    }
  }
}
__name(flush_queued_root_effects, "flush_queued_root_effects");
function flush_queued_effects(effects) {
  var length = effects.length;
  if (length !== 0)
    for (var i2 = 0; i2 < length; i2++) {
      var effect2 = effects[i2];
      if (!(effect2.f & (DESTROYED | INERT)))
        try {
          check_dirtiness(effect2) && (update_effect(effect2), effect2.deps === null && effect2.first === null && effect2.nodes_start === null && (effect2.teardown === null ? unlink_effect(effect2) : effect2.fn = null));
        } catch (error2) {
          handle_error(error2, effect2, null, effect2.ctx);
        }
    }
}
__name(flush_queued_effects, "flush_queued_effects");
function process_deferred() {
  if (is_micro_task_queued = !1, flush_count > 1001)
    return;
  const previous_queued_root_effects = queued_root_effects;
  queued_root_effects = [], flush_queued_root_effects(previous_queued_root_effects), is_micro_task_queued || (flush_count = 0, last_scheduled_effect = null);
}
__name(process_deferred, "process_deferred");
function schedule_effect(signal) {
  scheduler_mode === FLUSH_MICROTASK && (is_micro_task_queued || (is_micro_task_queued = !0, queueMicrotask(process_deferred))), last_scheduled_effect = signal;
  for (var effect2 = signal; effect2.parent !== null; ) {
    effect2 = effect2.parent;
    var flags = effect2.f;
    if (flags & (ROOT_EFFECT | BRANCH_EFFECT)) {
      if (!(flags & CLEAN)) return;
      effect2.f ^= CLEAN;
    }
  }
  queued_root_effects.push(effect2);
}
__name(schedule_effect, "schedule_effect");
function process_effects(effect2, collected_effects) {
  var current_effect = effect2.first, effects = [];
  main_loop: for (; current_effect !== null; ) {
    var flags = current_effect.f, is_branch = (flags & BRANCH_EFFECT) !== 0, is_skippable_branch = is_branch && (flags & CLEAN) !== 0, sibling2 = current_effect.next;
    if (!is_skippable_branch && !(flags & INERT))
      if (flags & RENDER_EFFECT) {
        if (is_branch)
          current_effect.f ^= CLEAN;
        else
          try {
            check_dirtiness(current_effect) && update_effect(current_effect);
          } catch (error2) {
            handle_error(error2, current_effect, null, current_effect.ctx);
          }
        var child2 = current_effect.first;
        if (child2 !== null) {
          current_effect = child2;
          continue;
        }
      } else flags & EFFECT && effects.push(current_effect);
    if (sibling2 === null) {
      let parent = current_effect.parent;
      for (; parent !== null; ) {
        if (effect2 === parent)
          break main_loop;
        var parent_sibling = parent.next;
        if (parent_sibling !== null) {
          current_effect = parent_sibling;
          continue main_loop;
        }
        parent = parent.parent;
      }
    }
    current_effect = sibling2;
  }
  for (var i2 = 0; i2 < effects.length; i2++)
    child2 = effects[i2], collected_effects.push(child2), process_effects(child2, collected_effects);
}
__name(process_effects, "process_effects");
function flush_sync(fn) {
  var previous_scheduler_mode = scheduler_mode, previous_queued_root_effects = queued_root_effects;
  try {
    infinite_loop_guard();
    const root_effects = [];
    scheduler_mode = FLUSH_SYNC, queued_root_effects = root_effects, is_micro_task_queued = !1, flush_queued_root_effects(previous_queued_root_effects);
    var result = fn?.();
    return flush_tasks(), (queued_root_effects.length > 0 || root_effects.length > 0) && flush_sync(), flush_count = 0, last_scheduled_effect = null, result;
  } finally {
    scheduler_mode = previous_scheduler_mode, queued_root_effects = previous_queued_root_effects;
  }
}
__name(flush_sync, "flush_sync");
async function tick() {
  await Promise.resolve(), flush_sync();
}
__name(tick, "tick");
function get(signal) {
  var flags = signal.f, is_derived = (flags & DERIVED) !== 0;
  if (is_derived && flags & DESTROYED) {
    var value = execute_derived(
      /** @type {Derived} */
      signal
    );
    return destroy_derived(
      /** @type {Derived} */
      signal
    ), value;
  }
  if (active_reaction !== null) {
    derived_sources !== null && derived_sources.includes(signal) && state_unsafe_local_read();
    var deps = active_reaction.deps;
    signal.rv < read_version && (signal.rv = read_version, new_deps === null && deps !== null && deps[skipped_deps] === signal ? skipped_deps++ : new_deps === null ? new_deps = [signal] : new_deps.push(signal), untracked_writes !== null && active_effect !== null && active_effect.f & CLEAN && !(active_effect.f & BRANCH_EFFECT) && untracked_writes.includes(signal) && (set_signal_status(active_effect, DIRTY), schedule_effect(active_effect)));
  } else if (is_derived && /** @type {Derived} */
  signal.deps === null)
    for (var derived2 = (
      /** @type {Derived} */
      signal
    ), parent = derived2.parent, target = derived2; parent !== null; )
      if (parent.f & DERIVED) {
        var parent_derived = (
          /** @type {Derived} */
          parent
        );
        target = parent_derived, parent = parent_derived.parent;
      } else {
        var parent_effect = (
          /** @type {Effect} */
          parent
        );
        parent_effect.deriveds?.includes(target) || (parent_effect.deriveds ??= []).push(target);
        break;
      }
  return is_derived && (derived2 = /** @type {Derived} */
  signal, check_dirtiness(derived2) && update_derived(derived2)), signal.v;
}
__name(get, "get");
function safe_get(signal) {
  return signal && get(signal);
}
__name(safe_get, "safe_get");
function untrack(fn) {
  const previous_reaction = active_reaction;
  try {
    return active_reaction = null, fn();
  } finally {
    active_reaction = previous_reaction;
  }
}
__name(untrack, "untrack");
const STATUS_MASK = ~(DIRTY | MAYBE_DIRTY | CLEAN);
function set_signal_status(signal, status) {
  signal.f = signal.f & STATUS_MASK | status;
}
__name(set_signal_status, "set_signal_status");
function getContext(key) {
  return (
    /** @type {T} */
    get_or_init_context_map().get(key)
  );
}
__name(getContext, "getContext");
function setContext(key, context) {
  return get_or_init_context_map().set(key, context), context;
}
__name(setContext, "setContext");
function getAllContexts() {
  return get_or_init_context_map();
}
__name(getAllContexts, "getAllContexts");
function get_or_init_context_map(name) {
  return component_context === null && lifecycle_outside_component(), component_context.c ??= new Map(get_parent_context(component_context) || void 0);
}
__name(get_or_init_context_map, "get_or_init_context_map");
function get_parent_context(component_context2) {
  let parent = component_context2.p;
  for (; parent !== null; ) {
    const context_map = parent.c;
    if (context_map !== null)
      return context_map;
    parent = parent.p;
  }
  return null;
}
__name(get_parent_context, "get_parent_context");
function update(signal, d2 = 1) {
  var value = get(signal), result = d2 === 1 ? value++ : value--;
  return set(signal, value), result;
}
__name(update, "update");
function exclude_from_object(obj, keys) {
  var result = {};
  for (var key in obj)
    keys.includes(key) || (result[key] = obj[key]);
  return result;
}
__name(exclude_from_object, "exclude_from_object");
function push(props, runes = !1, fn) {
  component_context = {
    p: component_context,
    c: null,
    e: null,
    m: !1,
    s: props,
    x: null,
    l: null
  }, legacy_mode_flag && !runes && (component_context.l = {
    s: null,
    u: null,
    r1: [],
    r2: source(!1)
  });
}
__name(push, "push");
function pop(component2) {
  const context_stack_item = component_context;
  if (context_stack_item !== null) {
    component2 !== void 0 && (context_stack_item.x = component2);
    const component_effects = context_stack_item.e;
    if (component_effects !== null) {
      var previous_effect = active_effect, previous_reaction = active_reaction;
      context_stack_item.e = null;
      try {
        for (var i2 = 0; i2 < component_effects.length; i2++) {
          var component_effect = component_effects[i2];
          set_active_effect(component_effect.effect), set_active_reaction(component_effect.reaction), effect(component_effect.fn);
        }
      } finally {
        set_active_effect(previous_effect), set_active_reaction(previous_reaction);
      }
    }
    component_context = context_stack_item.p, context_stack_item.m = !0;
  }
  return component2 || /** @type {T} */
  {};
}
__name(pop, "pop");
function deep_read_state(value) {
  if (!(typeof value != "object" || !value || value instanceof EventTarget)) {
    if (STATE_SYMBOL in value)
      deep_read(value);
    else if (!Array.isArray(value))
      for (let key in value) {
        const prop2 = value[key];
        typeof prop2 == "object" && prop2 && STATE_SYMBOL in prop2 && deep_read(prop2);
      }
  }
}
__name(deep_read_state, "deep_read_state");
function deep_read(value, visited = /* @__PURE__ */ new Set()) {
  if (typeof value == "object" && value !== null && // We don't want to traverse DOM elements
  !(value instanceof EventTarget) && !visited.has(value)) {
    visited.add(value), value instanceof Date && value.getTime();
    for (let key in value)
      try {
        deep_read(value[key], visited);
      } catch {
      }
    const proto = get_prototype_of(value);
    if (proto !== Object.prototype && proto !== Array.prototype && proto !== Map.prototype && proto !== Set.prototype && proto !== Date.prototype) {
      const descriptors = get_descriptors(proto);
      for (let key in descriptors) {
        const get2 = descriptors[key].get;
        if (get2)
          try {
            get2.call(value);
          } catch {
          }
      }
    }
  }
}
__name(deep_read, "deep_read");
function autofocus(dom, value) {
  if (value) {
    const body = document.body;
    dom.autofocus = !0, queue_micro_task(() => {
      document.activeElement === body && dom.focus();
    });
  }
}
__name(autofocus, "autofocus");
let listening_to_form_reset = !1;
function add_form_reset_listener() {
  listening_to_form_reset || (listening_to_form_reset = !0, document.addEventListener(
    "reset",
    (evt) => {
      Promise.resolve().then(() => {
        if (!evt.defaultPrevented)
          for (
            const e2 of
            /**@type {HTMLFormElement} */
            evt.target.elements
          )
            e2.__on_r?.();
      });
    },
    // In the capture phase to guarantee we get noticed of it (no possiblity of stopPropagation)
    { capture: !0 }
  ));
}
__name(add_form_reset_listener, "add_form_reset_listener");
function without_reactive_context(fn) {
  var previous_reaction = active_reaction, previous_effect = active_effect;
  set_active_reaction(null), set_active_effect(null);
  try {
    return fn();
  } finally {
    set_active_reaction(previous_reaction), set_active_effect(previous_effect);
  }
}
__name(without_reactive_context, "without_reactive_context");
function listen_to_event_and_reset_event(element2, event2, handler, on_reset = handler) {
  element2.addEventListener(event2, () => without_reactive_context(handler));
  const prev = element2.__on_r;
  prev ? element2.__on_r = () => {
    prev(), on_reset(!0);
  } : element2.__on_r = () => on_reset(!0), add_form_reset_listener();
}
__name(listen_to_event_and_reset_event, "listen_to_event_and_reset_event");
const all_registered_events = /* @__PURE__ */ new Set(), root_event_handles = /* @__PURE__ */ new Set();
function create_event(event_name, dom, handler, options) {
  function target_handler(event2) {
    if (options.capture || handle_event_propagation.call(dom, event2), !event2.cancelBubble)
      return without_reactive_context(() => handler.call(this, event2));
  }
  return __name(target_handler, "target_handler"), event_name.startsWith("pointer") || event_name.startsWith("touch") || event_name === "wheel" ? queue_micro_task(() => {
    dom.addEventListener(event_name, target_handler, options);
  }) : dom.addEventListener(event_name, target_handler, options), target_handler;
}
__name(create_event, "create_event");
function event(event_name, dom, handler, capture, passive) {
  var options = { capture, passive }, target_handler = create_event(event_name, dom, handler, options);
  (dom === document.body || dom === window || dom === document) && teardown(() => {
    dom.removeEventListener(event_name, target_handler, options);
  });
}
__name(event, "event");
function delegate(events) {
  for (var i2 = 0; i2 < events.length; i2++)
    all_registered_events.add(events[i2]);
  for (var fn of root_event_handles)
    fn(events);
}
__name(delegate, "delegate");
function handle_event_propagation(event2) {
  var handler_element = this, owner_document = (
    /** @type {Node} */
    handler_element.ownerDocument
  ), event_name = event2.type, path = event2.composedPath?.() || [], current_target = (
    /** @type {null | Element} */
    path[0] || event2.target
  ), path_idx = 0, handled_at = event2.__root;
  if (handled_at) {
    var at_idx = path.indexOf(handled_at);
    if (at_idx !== -1 && (handler_element === document || handler_element === /** @type {any} */
    window)) {
      event2.__root = handler_element;
      return;
    }
    var handler_idx = path.indexOf(handler_element);
    if (handler_idx === -1)
      return;
    at_idx <= handler_idx && (path_idx = at_idx);
  }
  if (current_target = /** @type {Element} */
  path[path_idx] || event2.target, current_target !== handler_element) {
    define_property(event2, "currentTarget", {
      configurable: !0,
      get() {
        return current_target || owner_document;
      }
    });
    var previous_reaction = active_reaction, previous_effect = active_effect;
    set_active_reaction(null), set_active_effect(null);
    try {
      for (var throw_error, other_errors = []; current_target !== null; ) {
        var parent_element = current_target.assignedSlot || current_target.parentNode || /** @type {any} */
        current_target.host || null;
        try {
          var delegated = current_target["__" + event_name];
          if (delegated !== void 0 && !/** @type {any} */
          current_target.disabled)
            if (is_array(delegated)) {
              var [fn, ...data] = delegated;
              fn.apply(current_target, [event2, ...data]);
            } else
              delegated.call(current_target, event2);
        } catch (error2) {
          throw_error ? other_errors.push(error2) : throw_error = error2;
        }
        if (event2.cancelBubble || parent_element === handler_element || parent_element === null)
          break;
        current_target = parent_element;
      }
      if (throw_error) {
        for (let error2 of other_errors)
          queueMicrotask(() => {
            throw error2;
          });
        throw throw_error;
      }
    } finally {
      event2.__root = handler_element, delete event2.currentTarget, set_active_reaction(previous_reaction), set_active_effect(previous_effect);
    }
  }
}
__name(handle_event_propagation, "handle_event_propagation");
function create_fragment_from_html(html2) {
  var elem = document.createElement("template");
  return elem.innerHTML = html2, elem.content;
}
__name(create_fragment_from_html, "create_fragment_from_html");
function assign_nodes(start, end) {
  var effect2 = (
    /** @type {Effect} */
    active_effect
  );
  effect2.nodes_start === null && (effect2.nodes_start = start, effect2.nodes_end = end);
}
__name(assign_nodes, "assign_nodes");
// @__NO_SIDE_EFFECTS__
function template(content, flags) {
  var is_fragment = (flags & 1) !== 0, use_import_node = (flags & 2) !== 0, node, has_start = !content.startsWith("<!>");
  return () => {
    node === void 0 && (node = create_fragment_from_html(has_start ? content : "<!>" + content), is_fragment || (node = /** @type {Node} */
    /* @__PURE__ */ get_first_child(node)));
    var clone = (
      /** @type {TemplateNode} */
      use_import_node ? document.importNode(node, !0) : node.cloneNode(!0)
    );
    if (is_fragment) {
      var start = (
        /** @type {TemplateNode} */
        /* @__PURE__ */ get_first_child(clone)
      ), end = (
        /** @type {TemplateNode} */
        clone.lastChild
      );
      assign_nodes(start, end);
    } else
      assign_nodes(clone, clone);
    return clone;
  };
}
__name(template, "template");
// @__NO_SIDE_EFFECTS__
function ns_template(content, flags, ns = "svg") {
  var has_start = !content.startsWith("<!>"), wrapped = `<${ns}>${has_start ? content : "<!>" + content}</${ns}>`, node;
  return () => {
    if (!node) {
      var fragment = (
        /** @type {DocumentFragment} */
        create_fragment_from_html(wrapped)
      ), root2 = (
        /** @type {Element} */
        /* @__PURE__ */ get_first_child(fragment)
      );
      node = /** @type {Element} */
      /* @__PURE__ */ get_first_child(root2);
    }
    var clone = (
      /** @type {TemplateNode} */
      node.cloneNode(!0)
    );
    return assign_nodes(clone, clone), clone;
  };
}
__name(ns_template, "ns_template");
function text(value = "") {
  {
    var t2 = create_text(value + "");
    return assign_nodes(t2, t2), t2;
  }
}
__name(text, "text");
function comment() {
  var frag = document.createDocumentFragment(), start = document.createComment(""), anchor = create_text();
  return frag.append(start, anchor), assign_nodes(start, anchor), frag;
}
__name(comment, "comment");
function append(anchor, dom) {
  anchor !== null && anchor.before(
    /** @type {Node} */
    dom
  );
}
__name(append, "append");
let should_intro = !0;
function set_should_intro(value) {
  should_intro = value;
}
__name(set_should_intro, "set_should_intro");
function set_text(text2, value) {
  var str = value == null ? "" : typeof value == "object" ? value + "" : value;
  str !== (text2.__t ??= text2.nodeValue) && (text2.__t = str, text2.nodeValue = str == null ? "" : str + "");
}
__name(set_text, "set_text");
function mount(component2, options) {
  return _mount(component2, options);
}
__name(mount, "mount");
const document_listeners = /* @__PURE__ */ new Map();
function _mount(Component, { target, anchor, props = {}, events, context, intro = !0 }) {
  init_operations();
  var registered_events = /* @__PURE__ */ new Set(), event_handle = /* @__PURE__ */ __name((events2) => {
    for (var i2 = 0; i2 < events2.length; i2++) {
      var event_name = events2[i2];
      if (!registered_events.has(event_name)) {
        registered_events.add(event_name);
        var passive = is_passive_event(event_name);
        target.addEventListener(event_name, handle_event_propagation, { passive });
        var n2 = document_listeners.get(event_name);
        n2 === void 0 ? (document.addEventListener(event_name, handle_event_propagation, { passive }), document_listeners.set(event_name, 1)) : document_listeners.set(event_name, n2 + 1);
      }
    }
  }, "event_handle");
  event_handle(array_from(all_registered_events)), root_event_handles.add(event_handle);
  var component2 = void 0, unmount2 = component_root(() => {
    var anchor_node = anchor ?? target.appendChild(create_text());
    return branch(() => {
      if (context) {
        push({});
        var ctx = (
          /** @type {ComponentContext} */
          component_context
        );
        ctx.c = context;
      }
      events && (props.$$events = events), should_intro = intro, component2 = Component(anchor_node, props) || {}, should_intro = !0, context && pop();
    }), () => {
      for (var event_name of registered_events) {
        target.removeEventListener(event_name, handle_event_propagation);
        var n2 = (
          /** @type {number} */
          document_listeners.get(event_name)
        );
        --n2 === 0 ? (document.removeEventListener(event_name, handle_event_propagation), document_listeners.delete(event_name)) : document_listeners.set(event_name, n2);
      }
      root_event_handles.delete(event_handle), anchor_node !== anchor && anchor_node.parentNode?.removeChild(anchor_node);
    };
  });
  return mounted_components.set(component2, unmount2), component2;
}
__name(_mount, "_mount");
let mounted_components = /* @__PURE__ */ new WeakMap();
function unmount(component2, options) {
  const fn = mounted_components.get(component2);
  return fn ? (mounted_components.delete(component2), fn(options)) : Promise.resolve();
}
__name(unmount, "unmount");
const PENDING = 0, THEN = 1, CATCH = 2;
function await_block(node, get_input, pending_fn, then_fn, catch_fn) {
  var anchor = node, runes = is_runes(), active_component_context = component_context, input = UNINITIALIZED, pending_effect, then_effect, catch_effect, input_source = (runes ? source : mutable_source)(
    /** @type {V} */
    void 0
  ), error_source = (runes ? source : mutable_source)(void 0), resolved = !1;
  function update2(state2, restore) {
    resolved = !0, restore && (set_active_effect(effect2), set_active_reaction(effect2), set_component_context(active_component_context));
    try {
      state2 === THEN && then_fn && (then_effect ? resume_effect(then_effect) : then_effect = branch(() => then_fn(anchor, input_source))), state2 !== PENDING && pending_effect && pause_effect(pending_effect, () => pending_effect = null), state2 !== THEN && then_effect && pause_effect(then_effect, () => then_effect = null), state2 !== CATCH && catch_effect && pause_effect(catch_effect, () => catch_effect = null);
    } finally {
      restore && (set_component_context(null), set_active_reaction(null), set_active_effect(null), flush_sync());
    }
  }
  __name(update2, "update");
  var effect2 = block(() => {
    if (input !== (input = get_input())) {
      if (is_promise(input)) {
        var promise = input;
        resolved = !1, promise.then(
          (value) => {
            promise === input && (internal_set(input_source, value), update2(THEN, !0));
          },
          (error2) => {
            if (promise === input)
              throw internal_set(error_source, error2), update2(CATCH, !0), error_source.v;
          }
        ), queue_micro_task(() => {
          resolved || update2(PENDING, !0);
        });
      } else
        internal_set(input_source, input), update2(THEN, !1);
      return () => input = UNINITIALIZED;
    }
  });
}
__name(await_block, "await_block");
function if_block(node, fn, elseif = !1) {
  var anchor = node, consequent_effect = null, alternate_effect = null, condition = UNINITIALIZED, flags = elseif ? EFFECT_TRANSPARENT : 0, has_branch = !1;
  const set_branch = /* @__PURE__ */ __name((fn2, flag = !0) => {
    has_branch = !0, update_branch(flag, fn2);
  }, "set_branch"), update_branch = /* @__PURE__ */ __name((new_condition, fn2) => {
    condition !== (condition = new_condition) && (condition ? (consequent_effect ? resume_effect(consequent_effect) : fn2 && (consequent_effect = branch(() => fn2(anchor))), alternate_effect && pause_effect(alternate_effect, () => {
      alternate_effect = null;
    })) : (alternate_effect ? resume_effect(alternate_effect) : fn2 && (alternate_effect = branch(() => fn2(anchor))), consequent_effect && pause_effect(consequent_effect, () => {
      consequent_effect = null;
    })));
  }, "update_branch");
  block(() => {
    has_branch = !1, fn(set_branch), has_branch || update_branch(null, null);
  }, flags);
}
__name(if_block, "if_block");
function key_block(node, get_key, render_fn) {
  var anchor = node, key = UNINITIALIZED, effect2, changed = is_runes() ? not_equal : safe_not_equal;
  block(() => {
    changed(key, key = get_key()) && (effect2 && pause_effect(effect2), effect2 = branch(() => render_fn(anchor)));
  });
}
__name(key_block, "key_block");
function css_props(element2, get_styles) {
  render_effect(() => {
    var styles = get_styles();
    for (var key in styles) {
      var value = styles[key];
      value ? element2.style.setProperty(key, value) : element2.style.removeProperty(key);
    }
  }), teardown(() => {
    element2.remove();
  });
}
__name(css_props, "css_props");
let current_each_item = null;
function set_current_each_item(item) {
  current_each_item = item;
}
__name(set_current_each_item, "set_current_each_item");
function index(_, i2) {
  return i2;
}
__name(index, "index");
function pause_effects(state2, items, controlled_anchor, items_map) {
  for (var transitions = [], length = items.length, i2 = 0; i2 < length; i2++)
    pause_children(items[i2].e, transitions, !0);
  var is_controlled = length > 0 && transitions.length === 0 && controlled_anchor !== null;
  if (is_controlled) {
    var parent_node = (
      /** @type {Element} */
      /** @type {Element} */
      controlled_anchor.parentNode
    );
    clear_text_content(parent_node), parent_node.append(
      /** @type {Element} */
      controlled_anchor
    ), items_map.clear(), link(state2, items[0].prev, items[length - 1].next);
  }
  run_out_transitions(transitions, () => {
    for (var i3 = 0; i3 < length; i3++) {
      var item = items[i3];
      is_controlled || (items_map.delete(item.k), link(state2, item.prev, item.next)), destroy_effect(item.e, !is_controlled);
    }
  });
}
__name(pause_effects, "pause_effects");
function each(node, flags, get_collection, get_key, render_fn, fallback_fn = null) {
  var anchor = node, state2 = { flags, items: /* @__PURE__ */ new Map(), first: null }, is_controlled = (flags & 4) !== 0;
  if (is_controlled) {
    var parent_node = (
      /** @type {Element} */
      node
    );
    anchor = parent_node.appendChild(create_text());
  }
  var fallback = null, was_empty = !1;
  block(() => {
    var collection = get_collection(), array = is_array(collection) ? collection : collection == null ? [] : array_from(collection), length = array.length;
    if (!(was_empty && length === 0)) {
      was_empty = length === 0;
      {
        var effect2 = (
          /** @type {Effect} */
          active_reaction
        );
        reconcile(
          array,
          state2,
          anchor,
          render_fn,
          flags,
          (effect2.f & INERT) !== 0,
          get_key
        );
      }
      fallback_fn !== null && (length === 0 ? fallback ? resume_effect(fallback) : fallback = branch(() => fallback_fn(anchor)) : fallback !== null && pause_effect(fallback, () => {
        fallback = null;
      })), get_collection();
    }
  });
}
__name(each, "each");
function reconcile(array, state2, anchor, render_fn, flags, is_inert, get_key, get_collection) {
  var is_animated = (flags & 8) !== 0, should_update = (flags & 3) !== 0, length = array.length, items = state2.items, first = state2.first, current = first, seen, prev = null, to_animate, matched = [], stashed = [], value, key, item, i2;
  if (is_animated)
    for (i2 = 0; i2 < length; i2 += 1)
      value = array[i2], key = get_key(value, i2), item = items.get(key), item !== void 0 && (item.a?.measure(), (to_animate ??= /* @__PURE__ */ new Set()).add(item));
  for (i2 = 0; i2 < length; i2 += 1) {
    if (value = array[i2], key = get_key(value, i2), item = items.get(key), item === void 0) {
      var child_anchor = current ? (
        /** @type {TemplateNode} */
        current.e.nodes_start
      ) : anchor;
      prev = create_item(
        child_anchor,
        state2,
        prev,
        prev === null ? state2.first : prev.next,
        value,
        key,
        i2,
        render_fn,
        flags
      ), items.set(key, prev), matched = [], stashed = [], current = prev.next;
      continue;
    }
    if (should_update && update_item(item, value, i2, flags), item.e.f & INERT && (resume_effect(item.e), is_animated && (item.a?.unfix(), (to_animate ??= /* @__PURE__ */ new Set()).delete(item))), item !== current) {
      if (seen !== void 0 && seen.has(item)) {
        if (matched.length < stashed.length) {
          var start = stashed[0], j2;
          prev = start.prev;
          var a2 = matched[0], b2 = matched[matched.length - 1];
          for (j2 = 0; j2 < matched.length; j2 += 1)
            move(matched[j2], start, anchor);
          for (j2 = 0; j2 < stashed.length; j2 += 1)
            seen.delete(stashed[j2]);
          link(state2, a2.prev, b2.next), link(state2, prev, a2), link(state2, b2, start), current = start, prev = b2, i2 -= 1, matched = [], stashed = [];
        } else
          seen.delete(item), move(item, current, anchor), link(state2, item.prev, item.next), link(state2, item, prev === null ? state2.first : prev.next), link(state2, prev, item), prev = item;
        continue;
      }
      for (matched = [], stashed = []; current !== null && current.k !== key; )
        (is_inert || !(current.e.f & INERT)) && (seen ??= /* @__PURE__ */ new Set()).add(current), stashed.push(current), current = current.next;
      if (current === null)
        continue;
      item = current;
    }
    matched.push(item), prev = item, current = item.next;
  }
  if (current !== null || seen !== void 0) {
    for (var to_destroy = seen === void 0 ? [] : array_from(seen); current !== null; )
      (is_inert || !(current.e.f & INERT)) && to_destroy.push(current), current = current.next;
    var destroy_length = to_destroy.length;
    if (destroy_length > 0) {
      var controlled_anchor = flags & 4 && length === 0 ? anchor : null;
      if (is_animated) {
        for (i2 = 0; i2 < destroy_length; i2 += 1)
          to_destroy[i2].a?.measure();
        for (i2 = 0; i2 < destroy_length; i2 += 1)
          to_destroy[i2].a?.fix();
      }
      pause_effects(state2, to_destroy, controlled_anchor, items);
    }
  }
  is_animated && queue_micro_task(() => {
    if (to_animate !== void 0)
      for (item of to_animate)
        item.a?.apply();
  }), active_effect.first = state2.first && state2.first.e, active_effect.last = prev && prev.e;
}
__name(reconcile, "reconcile");
function update_item(item, value, index2, type) {
  type & 1 && internal_set(item.v, value), type & 2 ? internal_set(
    /** @type {Value<number>} */
    item.i,
    index2
  ) : item.i = index2;
}
__name(update_item, "update_item");
function create_item(anchor, state2, prev, next, value, key, index2, render_fn, flags, get_collection) {
  var previous_each_item = current_each_item, reactive = (flags & 1) !== 0, mutable = (flags & 16) === 0, v2 = reactive ? mutable ? /* @__PURE__ */ mutable_source(value) : source(value) : value, i2 = flags & 2 ? source(index2) : index2, item = {
    i: i2,
    v: v2,
    k: key,
    a: null,
    // @ts-expect-error
    e: null,
    prev,
    next
  };
  current_each_item = item;
  try {
    return item.e = branch(() => render_fn(anchor, v2, i2), hydrating), item.e.prev = prev && prev.e, item.e.next = next && next.e, prev === null ? state2.first = item : (prev.next = item, prev.e.next = item.e), next !== null && (next.prev = item, next.e.prev = item.e), item;
  } finally {
    current_each_item = previous_each_item;
  }
}
__name(create_item, "create_item");
function move(item, next, anchor) {
  for (var end = item.next ? (
    /** @type {TemplateNode} */
    item.next.e.nodes_start
  ) : anchor, dest = next ? (
    /** @type {TemplateNode} */
    next.e.nodes_start
  ) : anchor, node = (
    /** @type {TemplateNode} */
    item.e.nodes_start
  ); node !== end; ) {
    var next_node = (
      /** @type {TemplateNode} */
      /* @__PURE__ */ get_next_sibling(node)
    );
    dest.before(node), node = next_node;
  }
}
__name(move, "move");
function link(state2, prev, next) {
  prev === null ? state2.first = next : (prev.next = next, prev.e.next = next && next.e), next !== null && (next.prev = prev, next.e.prev = prev && prev.e);
}
__name(link, "link");
function html(node, get_value, svg, mathml, skip_warning) {
  var anchor = node, value = "", effect2;
  block(() => {
    value !== (value = get_value() ?? "") && (effect2 !== void 0 && (destroy_effect(effect2), effect2 = void 0), value !== "" && (effect2 = branch(() => {
      var html2 = value + "", node2 = create_fragment_from_html(html2);
      assign_nodes(
        /** @type {TemplateNode} */
        /* @__PURE__ */ get_first_child(node2),
        /** @type {TemplateNode} */
        node2.lastChild
      ), anchor.before(node2);
    })));
  });
}
__name(html, "html");
function snippet(node, get_snippet, ...args) {
  var anchor = node, snippet2 = noop, snippet_effect;
  block(() => {
    snippet2 !== (snippet2 = get_snippet()) && (snippet_effect && (destroy_effect(snippet_effect), snippet_effect = null), snippet_effect = branch(() => (
      /** @type {SnippetFn} */
      snippet2(anchor, ...args)
    )));
  }, EFFECT_TRANSPARENT);
}
__name(snippet, "snippet");
function component(node, get_component, render_fn) {
  var anchor = node, component2, effect2;
  block(() => {
    component2 !== (component2 = get_component()) && (effect2 && (pause_effect(effect2), effect2 = null), component2 && (effect2 = branch(() => render_fn(anchor, component2))));
  }, EFFECT_TRANSPARENT);
}
__name(component, "component");
function element(node, get_tag, is_svg, render_fn, get_namespace, location) {
  var tag, current_tag, element2 = null, anchor = (
    /** @type {TemplateNode} */
    node
  ), effect2, each_item_block = current_each_item;
  block(() => {
    const next_tag = get_tag() || null;
    var ns = next_tag === "svg" ? NAMESPACE_SVG : null;
    if (next_tag !== tag) {
      var previous_each_item = current_each_item;
      set_current_each_item(each_item_block), effect2 && (next_tag === null ? pause_effect(effect2, () => {
        effect2 = null, current_tag = null;
      }) : next_tag === current_tag ? resume_effect(effect2) : (destroy_effect(effect2), set_should_intro(!1))), next_tag && next_tag !== current_tag && (effect2 = branch(() => {
        if (element2 = ns ? document.createElementNS(ns, next_tag) : document.createElement(next_tag), assign_nodes(element2, element2), render_fn) {
          var child_anchor = (
            /** @type {TemplateNode} */
            element2.appendChild(create_text())
          );
          render_fn(element2, child_anchor);
        }
        active_effect.nodes_end = element2, anchor.before(element2);
      })), tag = next_tag, tag && (current_tag = tag), set_should_intro(!0), set_current_each_item(previous_each_item);
    }
  }, EFFECT_TRANSPARENT);
}
__name(element, "element");
function action(dom, action2, get_value) {
  effect(() => {
    var payload = untrack(() => action2(dom, get_value?.()) || {});
    if (get_value && payload?.update) {
      var inited2 = !1, prev = (
        /** @type {any} */
        {}
      );
      render_effect(() => {
        var value = get_value();
        deep_read_state(value), inited2 && safe_not_equal(prev, value) && (prev = value, payload.update(value));
      }), inited2 = !0;
    }
    if (payload?.destroy)
      return () => (
        /** @type {Function} */
        payload.destroy()
      );
  });
}
__name(action, "action");
function r$1(e2) {
  var t2, f2, n2 = "";
  if (typeof e2 == "string" || typeof e2 == "number") n2 += e2;
  else if (typeof e2 == "object") if (Array.isArray(e2)) {
    var o2 = e2.length;
    for (t2 = 0; t2 < o2; t2++) e2[t2] && (f2 = r$1(e2[t2])) && (n2 && (n2 += " "), n2 += f2);
  } else for (f2 in e2) e2[f2] && (n2 && (n2 += " "), n2 += f2);
  return n2;
}
__name(r$1, "r$1");
function clsx$1() {
  for (var e2, t2, f2 = 0, n2 = "", o2 = arguments.length; f2 < o2; f2++) (e2 = arguments[f2]) && (t2 = r$1(e2)) && (n2 && (n2 += " "), n2 += t2);
  return n2;
}
__name(clsx$1, "clsx$1");
function clsx(value) {
  return typeof value == "object" ? clsx$1(value) : value ?? "";
}
__name(clsx, "clsx");
function set_value(element2, value) {
  var attributes = element2.__attributes ??= {};
  attributes.value === (attributes.value = // treat null and undefined the same for the initial value
  value ?? void 0) || // @ts-expect-error
  // `progress` elements always need their value set when its `0`
  element2.value === value && (value !== 0 || element2.nodeName !== "PROGRESS") || (element2.value = value);
}
__name(set_value, "set_value");
function set_checked(element2, checked) {
  var attributes = element2.__attributes ??= {};
  attributes.checked !== (attributes.checked = // treat null and undefined the same for the initial value
  checked ?? void 0) && (element2.checked = checked);
}
__name(set_checked, "set_checked");
function set_selected(element2, selected) {
  selected ? element2.hasAttribute("selected") || element2.setAttribute("selected", "") : element2.removeAttribute("selected");
}
__name(set_selected, "set_selected");
function set_attribute(element2, attribute, value, skip_warning) {
  var attributes = element2.__attributes ??= {};
  attributes[attribute] !== (attributes[attribute] = value) && (attribute === "style" && "__styles" in element2 && (element2.__styles = {}), attribute === "loading" && (element2[LOADING_ATTR_SYMBOL] = value), value == null ? element2.removeAttribute(attribute) : typeof value != "string" && get_setters(element2).includes(attribute) ? element2[attribute] = value : element2.setAttribute(attribute, value));
}
__name(set_attribute, "set_attribute");
function set_custom_element_data(node, prop2, value) {
  var previous_reaction = active_reaction, previous_effect = active_effect;
  set_active_reaction(null), set_active_effect(null);
  try {
    // Don't compute setters for custom elements while they aren't registered yet,
    // because during their upgrade/instantiation they might add more setters.
    // Instead, fall back to a simple "an object, then set as property" heuristic.
    (setters_cache.has(node.nodeName) || // customElements may not be available in browser extension contexts
    !customElements || customElements.get(node.tagName.toLowerCase()) ? get_setters(node).includes(prop2) : value && typeof value == "object") ? node[prop2] = value : set_attribute(node, prop2, value == null ? value : String(value));
  } finally {
    set_active_reaction(previous_reaction), set_active_effect(previous_effect);
  }
}
__name(set_custom_element_data, "set_custom_element_data");
function set_attributes(element2, prev, next, css_hash, preserve_attribute_case = !1, is_custom_element = !1, skip_warning = !1) {
  var current = prev || {}, is_option_element = element2.tagName === "OPTION";
  for (var key in prev)
    key in next || (next[key] = null);
  next.class && (next.class = clsx(next.class)), css_hash !== void 0 && (next.class = next.class ? next.class + " " + css_hash : css_hash);
  var setters = get_setters(element2), attributes = (
    /** @type {Record<string, unknown>} **/
    element2.__attributes ??= {}
  );
  for (const key2 in next) {
    let value = next[key2];
    if (is_option_element && key2 === "value" && value == null) {
      element2.value = element2.__value = "", current[key2] = value;
      continue;
    }
    var prev_value = current[key2];
    if (value !== prev_value) {
      current[key2] = value;
      var prefix = key2[0] + key2[1];
      if (prefix !== "$$") {
        if (prefix === "on") {
          const opts = {}, event_handle_key = "$$" + key2;
          let event_name = key2.slice(2);
          var delegated = is_delegated(event_name);
          if (is_capture_event(event_name) && (event_name = event_name.slice(0, -7), opts.capture = !0), !delegated && prev_value) {
            if (value != null) continue;
            element2.removeEventListener(event_name, current[event_handle_key], opts), current[event_handle_key] = null;
          }
          if (value != null)
            if (delegated)
              element2[`__${event_name}`] = value, delegate([event_name]);
            else {
              let handle2 = function(evt) {
                current[key2].call(this, evt);
              };
              var handle = handle2;
              __name(handle2, "handle"), current[event_handle_key] = create_event(event_name, element2, handle2, opts);
            }
          else delegated && (element2[`__${event_name}`] = void 0);
        } else if (key2 === "style" && value != null)
          element2.style.cssText = value + "";
        else if (key2 === "autofocus")
          autofocus(
            /** @type {HTMLElement} */
            element2,
            !!value
          );
        else if (key2 === "__value" || key2 === "value" && value != null)
          element2.value = element2[key2] = element2.__value = value;
        else if (key2 === "selected" && is_option_element)
          set_selected(
            /** @type {HTMLOptionElement} */
            element2,
            value
          );
        else {
          var name = key2;
          preserve_attribute_case || (name = normalize_attribute(name));
          var is_default = name === "defaultValue" || name === "defaultChecked";
          if (value == null && !is_custom_element && !is_default)
            if (attributes[key2] = null, name === "value" || name === "checked") {
              let input = (
                /** @type {HTMLInputElement} */
                element2
              );
              if (name === "value") {
                let prev2 = input.defaultValue;
                input.removeAttribute(name), input.defaultValue = prev2;
              } else {
                let prev2 = input.defaultChecked;
                input.removeAttribute(name), input.defaultChecked = prev2;
              }
            } else
              element2.removeAttribute(key2);
          else is_default || setters.includes(name) && (is_custom_element || typeof value != "string") ? element2[name] = value : typeof value != "function" && set_attribute(element2, name, value);
        }
        key2 === "style" && "__styles" in element2 && (element2.__styles = {});
      }
    }
  }
  return current;
}
__name(set_attributes, "set_attributes");
var setters_cache = /* @__PURE__ */ new Map();
function get_setters(element2) {
  var setters = setters_cache.get(element2.nodeName);
  if (setters) return setters;
  setters_cache.set(element2.nodeName, setters = []);
  for (var descriptors, proto = element2, element_proto = Element.prototype; element_proto !== proto; ) {
    descriptors = get_descriptors(proto);
    for (var key in descriptors)
      descriptors[key].set && setters.push(key);
    proto = get_prototype_of(proto);
  }
  return setters;
}
__name(get_setters, "get_setters");
function set_class(dom, value, hash) {
  var prev_class_name = dom.__className, next_class_name = to_class(value, hash);
  (prev_class_name !== next_class_name || hydrating) && (value == null && !hash ? dom.removeAttribute("class") : dom.className = next_class_name, dom.__className = next_class_name);
}
__name(set_class, "set_class");
function to_class(value, hash) {
  return (value ?? "") + (hash ? " " + hash : "");
}
__name(to_class, "to_class");
function toggle_class(dom, class_name, value) {
  if (value) {
    if (dom.classList.contains(class_name)) return;
    dom.classList.add(class_name);
  } else {
    if (!dom.classList.contains(class_name)) return;
    dom.classList.remove(class_name);
  }
}
__name(toggle_class, "toggle_class");
function set_style(dom, key, value, important) {
  var styles = dom.__styles ??= {};
  styles[key] !== value && (styles[key] = value, value == null ? dom.style.removeProperty(key) : dom.style.setProperty(key, value, ""));
}
__name(set_style, "set_style");
const now = /* @__PURE__ */ __name(() => performance.now(), "now"), raf = {
  // don't access requestAnimationFrame eagerly outside method
  // this allows basic testing of user code without JSDOM
  // bunder will eval and remove ternary when the user's app is built
  tick: (
    /** @param {any} _ */
    /* @__PURE__ */ __name((_) => requestAnimationFrame(_), "tick")
  ),
  now: /* @__PURE__ */ __name(() => now(), "now"),
  tasks: /* @__PURE__ */ new Set()
};
function run_tasks() {
  const now2 = raf.now();
  raf.tasks.forEach((task) => {
    task.c(now2) || (raf.tasks.delete(task), task.f());
  }), raf.tasks.size !== 0 && raf.tick(run_tasks);
}
__name(run_tasks, "run_tasks");
function loop(callback) {
  let task;
  return raf.tasks.size === 0 && raf.tick(run_tasks), {
    promise: new Promise((fulfill) => {
      raf.tasks.add(task = { c: callback, f: fulfill });
    }),
    abort() {
      raf.tasks.delete(task);
    }
  };
}
__name(loop, "loop");
function dispatch_event(element2, type) {
  element2.dispatchEvent(new CustomEvent(type));
}
__name(dispatch_event, "dispatch_event");
function css_property_to_camelcase(style) {
  if (style === "float") return "cssFloat";
  if (style === "offset") return "cssOffset";
  if (style.startsWith("--")) return style;
  const parts = style.split("-");
  return parts.length === 1 ? parts[0] : parts[0] + parts.slice(1).map(
    /** @param {any} word */
    (word) => word[0].toUpperCase() + word.slice(1)
  ).join("");
}
__name(css_property_to_camelcase, "css_property_to_camelcase");
function css_to_keyframe(css) {
  const keyframe = {}, parts = css.split(";");
  for (const part of parts) {
    const [property, value] = part.split(":");
    if (!property || value === void 0) break;
    const formatted_property = css_property_to_camelcase(property.trim());
    keyframe[formatted_property] = value.trim();
  }
  return keyframe;
}
__name(css_to_keyframe, "css_to_keyframe");
const linear$1 = /* @__PURE__ */ __name((t2) => t2, "linear$1");
function animation(element2, get_fn, get_params) {
  var item = (
    /** @type {EachItem} */
    current_each_item
  ), from, to, animation2, original_styles = null;
  item.a ??= {
    element: element2,
    measure() {
      from = this.element.getBoundingClientRect();
    },
    apply() {
      if (animation2?.abort(), to = this.element.getBoundingClientRect(), from.left !== to.left || from.right !== to.right || from.top !== to.top || from.bottom !== to.bottom) {
        const options = get_fn()(this.element, { from, to }, get_params?.());
        animation2 = animate(this.element, options, void 0, 1, () => {
          animation2?.abort(), animation2 = void 0;
        });
      }
    },
    fix() {
      if (!element2.getAnimations().length) {
        var { position, width, height } = getComputedStyle(element2);
        if (position !== "absolute" && position !== "fixed") {
          var style = (
            /** @type {HTMLElement | SVGElement} */
            element2.style
          );
          original_styles = {
            position: style.position,
            width: style.width,
            height: style.height,
            transform: style.transform
          }, style.position = "absolute", style.width = width, style.height = height;
          var to2 = element2.getBoundingClientRect();
          if (from.left !== to2.left || from.top !== to2.top) {
            var transform = `translate(${from.left - to2.left}px, ${from.top - to2.top}px)`;
            style.transform = style.transform ? `${style.transform} ${transform}` : transform;
          }
        }
      }
    },
    unfix() {
      if (original_styles) {
        var style = (
          /** @type {HTMLElement | SVGElement} */
          element2.style
        );
        style.position = original_styles.position, style.width = original_styles.width, style.height = original_styles.height, style.transform = original_styles.transform;
      }
    }
  }, item.a.element = element2;
}
__name(animation, "animation");
function transition(flags, element2, get_fn, get_params) {
  var is_intro = (flags & 1) !== 0, is_outro = (flags & 2) !== 0, is_both = is_intro && is_outro, is_global = (flags & 4) !== 0, direction = is_both ? "both" : is_intro ? "in" : "out", current_options, inert = element2.inert, overflow = element2.style.overflow, intro, outro;
  function get_options() {
    var previous_reaction = active_reaction, previous_effect = active_effect;
    set_active_reaction(null), set_active_effect(null);
    try {
      return current_options ??= get_fn()(element2, get_params?.() ?? /** @type {P} */
      {}, {
        direction
      });
    } finally {
      set_active_reaction(previous_reaction), set_active_effect(previous_effect);
    }
  }
  __name(get_options, "get_options");
  var transition2 = {
    is_global,
    in() {
      if (element2.inert = inert, !is_intro) {
        outro?.abort(), outro?.reset?.();
        return;
      }
      is_outro || intro?.abort(), dispatch_event(element2, "introstart"), intro = animate(element2, get_options(), outro, 1, () => {
        dispatch_event(element2, "introend"), intro?.abort(), intro = current_options = void 0, element2.style.overflow = overflow;
      });
    },
    out(fn) {
      if (!is_outro) {
        fn?.(), current_options = void 0;
        return;
      }
      element2.inert = !0, dispatch_event(element2, "outrostart"), outro = animate(element2, get_options(), intro, 0, () => {
        dispatch_event(element2, "outroend"), fn?.();
      });
    },
    stop: /* @__PURE__ */ __name(() => {
      intro?.abort(), outro?.abort();
    }, "stop")
  }, e2 = (
    /** @type {Effect} */
    active_effect
  );
  if ((e2.transitions ??= []).push(transition2), is_intro && should_intro) {
    var run2 = is_global;
    if (!run2) {
      for (var block2 = (
        /** @type {Effect | null} */
        e2.parent
      ); block2 && block2.f & EFFECT_TRANSPARENT; )
        for (; (block2 = block2.parent) && !(block2.f & BLOCK_EFFECT); )
          ;
      run2 = !block2 || (block2.f & EFFECT_RAN) !== 0;
    }
    run2 && effect(() => {
      untrack(() => transition2.in());
    });
  }
}
__name(transition, "transition");
function animate(element2, options, counterpart, t2, on_finish) {
  var is_intro = t2 === 1;
  if (is_function(options)) {
    var a2, aborted = !1;
    return queue_micro_task(() => {
      if (!aborted) {
        var o2 = options({ direction: is_intro ? "in" : "out" });
        a2 = animate(element2, o2, counterpart, t2, on_finish);
      }
    }), {
      abort: /* @__PURE__ */ __name(() => {
        aborted = !0, a2?.abort();
      }, "abort"),
      deactivate: /* @__PURE__ */ __name(() => a2.deactivate(), "deactivate"),
      reset: /* @__PURE__ */ __name(() => a2.reset(), "reset"),
      t: /* @__PURE__ */ __name(() => a2.t(), "t")
    };
  }
  if (counterpart?.deactivate(), !options?.duration)
    return on_finish(), {
      abort: noop,
      deactivate: noop,
      reset: noop,
      t: /* @__PURE__ */ __name(() => t2, "t")
    };
  const { delay: delay2 = 0, css, tick: tick2, easing = linear$1 } = options;
  var keyframes = [];
  if (is_intro && counterpart === void 0 && (tick2 && tick2(0, 1), css)) {
    var styles = css_to_keyframe(css(0, 1));
    keyframes.push(styles, styles);
  }
  var get_t = /* @__PURE__ */ __name(() => 1 - t2, "get_t"), animation2 = element2.animate(keyframes, { duration: delay2 });
  return animation2.onfinish = () => {
    var t1 = counterpart?.t() ?? 1 - t2;
    counterpart?.abort();
    var delta = t2 - t1, duration = (
      /** @type {number} */
      options.duration * Math.abs(delta)
    ), keyframes2 = [];
    if (duration > 0) {
      var needs_overflow_hidden = !1;
      if (css)
        for (var n2 = Math.ceil(duration / 16.666666666666668), i2 = 0; i2 <= n2; i2 += 1) {
          var t3 = t1 + delta * easing(i2 / n2), styles2 = css_to_keyframe(css(t3, 1 - t3));
          keyframes2.push(styles2), needs_overflow_hidden ||= styles2.overflow === "hidden";
        }
      needs_overflow_hidden && (element2.style.overflow = "hidden"), get_t = /* @__PURE__ */ __name(() => {
        var time = (
          /** @type {number} */
          /** @type {globalThis.Animation} */
          animation2.currentTime
        );
        return t1 + delta * easing(time / duration);
      }, "get_t"), tick2 && loop(() => {
        if (animation2.playState !== "running") return !1;
        var t4 = get_t();
        return tick2(t4, 1 - t4), !0;
      });
    }
    animation2 = element2.animate(keyframes2, { duration, fill: "forwards" }), animation2.onfinish = () => {
      get_t = /* @__PURE__ */ __name(() => t2, "get_t"), tick2?.(t2, 1 - t2), on_finish();
    };
  }, {
    abort: /* @__PURE__ */ __name(() => {
      animation2 && (animation2.cancel(), animation2.effect = null, animation2.onfinish = noop);
    }, "abort"),
    deactivate: /* @__PURE__ */ __name(() => {
      on_finish = noop;
    }, "deactivate"),
    reset: /* @__PURE__ */ __name(() => {
      t2 === 0 && tick2?.(1, 0);
    }, "reset"),
    t: /* @__PURE__ */ __name(() => get_t(), "t")
  };
}
__name(animate, "animate");
function bind_value(input, get2, set2 = get2) {
  var runes = is_runes();
  listen_to_event_and_reset_event(input, "input", (is_reset) => {
    var value = is_reset ? input.defaultValue : input.value;
    if (value = is_numberlike_input(input) ? to_number(value) : value, set2(value), runes && value !== (value = get2())) {
      var start = input.selectionStart, end = input.selectionEnd;
      input.value = value ?? "", end !== null && (input.selectionStart = start, input.selectionEnd = Math.min(end, input.value.length));
    }
  }), // If we are hydrating and the value has since changed,
  // then use the updated value from the input instead.
  // If defaultValue is set, then value == defaultValue
  // TODO Svelte 6: remove input.value check and set to empty string?
  untrack(get2) == null && input.value && set2(is_numberlike_input(input) ? to_number(input.value) : input.value), render_effect(() => {
    var value = get2();
    is_numberlike_input(input) && value === to_number(input.value) || input.type === "date" && !value && !input.value || value !== input.value && (input.value = value ?? "");
  });
}
__name(bind_value, "bind_value");
function bind_checked(input, get2, set2 = get2) {
  listen_to_event_and_reset_event(input, "change", (is_reset) => {
    var value = is_reset ? input.defaultChecked : input.checked;
    set2(value);
  }), // If we are hydrating and the value has since changed,
  // then use the update value from the input instead.
  // If defaultChecked is set, then checked == defaultChecked
  untrack(get2) == null && set2(input.checked), render_effect(() => {
    var value = get2();
    input.checked = !!value;
  });
}
__name(bind_checked, "bind_checked");
function is_numberlike_input(input) {
  var type = input.type;
  return type === "number" || type === "range";
}
__name(is_numberlike_input, "is_numberlike_input");
function to_number(value) {
  return value === "" ? null : +value;
}
__name(to_number, "to_number");
function select_option(select, value, mounting) {
  if (select.multiple)
    return select_options(select, value);
  for (var option of select.options) {
    var option_value = get_option_value(option);
    if (is(option_value, value)) {
      option.selected = !0;
      return;
    }
  }
  (!mounting || value !== void 0) && (select.selectedIndex = -1);
}
__name(select_option, "select_option");
function init_select(select, get_value) {
  let mounting = !0;
  effect(() => {
    get_value && select_option(select, untrack(get_value), mounting), mounting = !1;
    var observer = new MutationObserver(() => {
      var value = select.__value;
      select_option(select, value);
    });
    return observer.observe(select, {
      // Listen to option element changes
      childList: !0,
      subtree: !0,
      // because of <optgroup>
      // Listen to option element value attribute changes
      // (doesn't get notified of select value changes,
      // because that property is not reflected as an attribute)
      attributes: !0,
      attributeFilter: ["value"]
    }), () => {
      observer.disconnect();
    };
  });
}
__name(init_select, "init_select");
function bind_select_value(select, get2, set2 = get2) {
  var mounting = !0;
  listen_to_event_and_reset_event(select, "change", (is_reset) => {
    var query = is_reset ? "[selected]" : ":checked", value;
    if (select.multiple)
      value = [].map.call(select.querySelectorAll(query), get_option_value);
    else {
      var selected_option = select.querySelector(query) ?? // will fall back to first non-disabled option if no option is selected
      select.querySelector("option:not([disabled])");
      value = selected_option && get_option_value(selected_option);
    }
    set2(value);
  }), effect(() => {
    var value = get2();
    if (select_option(select, value, mounting), mounting && value === void 0) {
      var selected_option = select.querySelector(":checked");
      selected_option !== null && (value = get_option_value(selected_option), set2(value));
    }
    select.__value = value, mounting = !1;
  }), init_select(select);
}
__name(bind_select_value, "bind_select_value");
function select_options(select, value) {
  for (var option of select.options)
    option.selected = ~value.indexOf(get_option_value(option));
}
__name(select_options, "select_options");
function get_option_value(option) {
  return "__value" in option ? option.__value : option.value;
}
__name(get_option_value, "get_option_value");
function is_bound_this(bound_value, element_or_component) {
  return bound_value === element_or_component || bound_value?.[STATE_SYMBOL] === element_or_component;
}
__name(is_bound_this, "is_bound_this");
function bind_this(element_or_component = {}, update2, get_value, get_parts) {
  return effect(() => {
    var old_parts, parts;
    return render_effect(() => {
      old_parts = parts, parts = [], untrack(() => {
        element_or_component !== get_value(...parts) && (update2(element_or_component, ...parts), old_parts && is_bound_this(get_value(...old_parts), element_or_component) && update2(null, ...old_parts));
      });
    }), () => {
      queue_micro_task(() => {
        parts && is_bound_this(get_value(...parts), element_or_component) && update2(null, ...parts);
      });
    };
  }), element_or_component;
}
__name(bind_this, "bind_this");
function bind_content_editable(property, element2, get2, set2 = get2) {
  element2.addEventListener("input", () => {
    set2(element2[property]);
  }), render_effect(() => {
    var value = get2();
    if (element2[property] !== value)
      if (value == null) {
        var non_null_value = element2[property];
        set2(non_null_value);
      } else
        element2[property] = value + "";
  });
}
__name(bind_content_editable, "bind_content_editable");
function init(immutable = !1) {
  const context = (
    /** @type {ComponentContextLegacy} */
    component_context
  ), callbacks = context.l.u;
  if (!callbacks) return;
  let props = /* @__PURE__ */ __name(() => deep_read_state(context.s), "props");
  if (immutable) {
    let version = 0, prev = (
      /** @type {Record<string, any>} */
      {}
    );
    const d2 = /* @__PURE__ */ derived(() => {
      let changed = !1;
      const props2 = context.s;
      for (const key in props2)
        props2[key] !== prev[key] && (prev[key] = props2[key], changed = !0);
      return changed && version++, version;
    });
    props = /* @__PURE__ */ __name(() => get(d2), "props");
  }
  callbacks.b.length && user_pre_effect(() => {
    observe_all(context, props), run_all(callbacks.b);
  }), user_effect(() => {
    const fns = untrack(() => callbacks.m.map(run));
    return () => {
      for (const fn of fns)
        typeof fn == "function" && fn();
    };
  }), callbacks.a.length && user_effect(() => {
    observe_all(context, props), run_all(callbacks.a);
  });
}
__name(init, "init");
function observe_all(context, props) {
  if (context.l.s)
    for (const signal of context.l.s) get(signal);
  props();
}
__name(observe_all, "observe_all");
function onMount(fn) {
  component_context === null && lifecycle_outside_component(), legacy_mode_flag && component_context.l !== null ? init_update_callbacks(component_context).m.push(fn) : user_effect(() => {
    const cleanup = untrack(fn);
    if (typeof cleanup == "function") return (
      /** @type {() => void} */
      cleanup
    );
  });
}
__name(onMount, "onMount");
function onDestroy(fn) {
  component_context === null && lifecycle_outside_component(), onMount(() => () => untrack(fn));
}
__name(onDestroy, "onDestroy");
function init_update_callbacks(context) {
  var l2 = (
    /** @type {ComponentContextLegacy} */
    context.l
  );
  return l2.u ??= { a: [], b: [], m: [] };
}
__name(init_update_callbacks, "init_update_callbacks");
let is_store_binding = !1;
function capture_store_binding(fn) {
  var previous_is_store_binding = is_store_binding;
  try {
    return is_store_binding = !1, [fn(), is_store_binding];
  } finally {
    is_store_binding = previous_is_store_binding;
  }
}
__name(capture_store_binding, "capture_store_binding");
const rest_props_handler = {
  get(target, key) {
    if (!target.exclude.includes(key))
      return target.props[key];
  },
  set(target, key) {
    return !1;
  },
  getOwnPropertyDescriptor(target, key) {
    if (!target.exclude.includes(key) && key in target.props)
      return {
        enumerable: !0,
        configurable: !0,
        value: target.props[key]
      };
  },
  has(target, key) {
    return target.exclude.includes(key) ? !1 : key in target.props;
  },
  ownKeys(target) {
    return Reflect.ownKeys(target.props).filter((key) => !target.exclude.includes(key));
  }
};
// @__NO_SIDE_EFFECTS__
function rest_props(props, exclude, name) {
  return new Proxy(
    { props, exclude },
    rest_props_handler
  );
}
__name(rest_props, "rest_props");
const spread_props_handler = {
  get(target, key) {
    let i2 = target.props.length;
    for (; i2--; ) {
      let p2 = target.props[i2];
      if (is_function(p2) && (p2 = p2()), typeof p2 == "object" && p2 !== null && key in p2) return p2[key];
    }
  },
  set(target, key, value) {
    let i2 = target.props.length;
    for (; i2--; ) {
      let p2 = target.props[i2];
      is_function(p2) && (p2 = p2());
      const desc = get_descriptor(p2, key);
      if (desc && desc.set)
        return desc.set(value), !0;
    }
    return !1;
  },
  getOwnPropertyDescriptor(target, key) {
    let i2 = target.props.length;
    for (; i2--; ) {
      let p2 = target.props[i2];
      if (is_function(p2) && (p2 = p2()), typeof p2 == "object" && p2 !== null && key in p2) {
        const descriptor = get_descriptor(p2, key);
        return descriptor && !descriptor.configurable && (descriptor.configurable = !0), descriptor;
      }
    }
  },
  has(target, key) {
    if (key === STATE_SYMBOL || key === LEGACY_PROPS) return !1;
    for (let p2 of target.props)
      if (is_function(p2) && (p2 = p2()), p2 != null && key in p2) return !0;
    return !1;
  },
  ownKeys(target) {
    const keys = [];
    for (let p2 of target.props) {
      is_function(p2) && (p2 = p2());
      for (const key in p2)
        keys.includes(key) || keys.push(key);
    }
    return keys;
  }
};
function spread_props(...props) {
  return new Proxy({ props }, spread_props_handler);
}
__name(spread_props, "spread_props");
function with_parent_branch(fn) {
  for (var effect2 = active_effect, previous_effect = active_effect; effect2 !== null && !(effect2.f & (BRANCH_EFFECT | ROOT_EFFECT)); )
    effect2 = effect2.parent;
  try {
    return set_active_effect(effect2), fn();
  } finally {
    set_active_effect(previous_effect);
  }
}
__name(with_parent_branch, "with_parent_branch");
function prop(props, key, flags, fallback) {
  var immutable = (flags & 1) !== 0, runes = !legacy_mode_flag || (flags & 2) !== 0, bindable = (flags & 8) !== 0, lazy = (flags & 16) !== 0, is_store_sub = !1, prop_value;
  bindable ? [prop_value, is_store_sub] = capture_store_binding(() => (
    /** @type {V} */
    props[key]
  )) : prop_value = /** @type {V} */
  props[key];
  var is_entry_props = STATE_SYMBOL in props || LEGACY_PROPS in props, setter = bindable && (get_descriptor(props, key)?.set ?? (is_entry_props && key in props && ((v2) => props[key] = v2))) || void 0, fallback_value = (
    /** @type {V} */
    fallback
  ), fallback_dirty = !0, fallback_used = !1, get_fallback = /* @__PURE__ */ __name(() => (fallback_used = !0, fallback_dirty && (fallback_dirty = !1, lazy ? fallback_value = untrack(
    /** @type {() => V} */
    fallback
  ) : fallback_value = /** @type {V} */
  fallback), fallback_value), "get_fallback");
  prop_value === void 0 && fallback !== void 0 && (setter && runes && props_invalid_value(), prop_value = get_fallback(), setter && setter(prop_value));
  var getter;
  if (runes)
    getter = /* @__PURE__ */ __name(() => {
      var value = (
        /** @type {V} */
        props[key]
      );
      return value === void 0 ? get_fallback() : (fallback_dirty = !0, fallback_used = !1, value);
    }, "getter");
  else {
    var derived_getter = with_parent_branch(
      () => (immutable ? derived : derived_safe_equal)(() => (
        /** @type {V} */
        props[key]
      ))
    );
    derived_getter.f |= LEGACY_DERIVED_PROP, getter = /* @__PURE__ */ __name(() => {
      var value = get(derived_getter);
      return value !== void 0 && (fallback_value = /** @type {V} */
      void 0), value === void 0 ? fallback_value : value;
    }, "getter");
  }
  if (!(flags & 4))
    return getter;
  if (setter) {
    var legacy_parent = props.$$legacy;
    return function(value, mutation) {
      return arguments.length > 0 ? ((!runes || !mutation || legacy_parent || is_store_sub) && setter(mutation ? getter() : value), value) : getter();
    };
  }
  var from_child = !1, was_from_child = !1, inner_current_value = /* @__PURE__ */ mutable_source(prop_value), current_value = with_parent_branch(
    () => /* @__PURE__ */ derived(() => {
      var parent_value = getter(), child_value = get(inner_current_value);
      return from_child ? (from_child = !1, was_from_child = !0, child_value) : (was_from_child = !1, inner_current_value.v = parent_value);
    })
  );
  return immutable || (current_value.equals = safe_equals), function(value, mutation) {
    if (arguments.length > 0) {
      const new_value = mutation ? get(current_value) : runes && bindable ? proxy(value) : value;
      return current_value.equals(new_value) || (from_child = !0, set(inner_current_value, new_value), fallback_used && fallback_value !== void 0 && (fallback_value = new_value), untrack(() => get(current_value))), value;
    }
    return get(current_value);
  };
}
__name(prop, "prop");
function with_boundary(boundary2, fn) {
  var previous_effect = active_effect, previous_reaction = active_reaction, previous_ctx = component_context;
  set_active_effect(boundary2), set_active_reaction(boundary2), set_component_context(boundary2.ctx);
  try {
    fn();
  } finally {
    set_active_effect(previous_effect), set_active_reaction(previous_reaction), set_component_context(previous_ctx);
  }
}
__name(with_boundary, "with_boundary");
function boundary(node, props, boundary_fn) {
  var anchor = node, boundary_effect;
  block(() => {
    var boundary2 = (
      /** @type {Effect} */
      active_effect
    ), is_creating_fallback = !1;
    boundary2.fn = (error2) => {
      var onerror = props.onerror;
      let failed = props.failed;
      if (!onerror && !failed || is_creating_fallback)
        throw error2;
      var reset = /* @__PURE__ */ __name(() => {
        pause_effect(boundary_effect), with_boundary(boundary2, () => {
          is_creating_fallback = !1, boundary_effect = branch(() => boundary_fn(anchor)), reset_is_throwing_error();
        });
      }, "reset");
      onerror?.(error2, reset), boundary_effect && destroy_effect(boundary_effect), failed && queue_micro_task(() => {
        with_boundary(boundary2, () => {
          is_creating_fallback = !0;
          try {
            boundary_effect = branch(() => {
              failed(
                anchor,
                () => error2,
                () => reset
              );
            });
          } catch (error3) {
            handle_error(error3, boundary2, null, boundary2.ctx);
          }
          reset_is_throwing_error(), is_creating_fallback = !1;
        });
      });
    }, boundary_effect = branch(() => boundary_fn(anchor)), reset_is_throwing_error();
  }, EFFECT_TRANSPARENT | BOUNDARY_EFFECT);
}
__name(boundary, "boundary");
const CONSTANTS = {
  MODULE_ID: "tidy5e-sheet",
  DND5E_SYSTEM_ID: "dnd5e",
  SYSTEM_SETTING_BASTION_CONFIGURATION: "bastionConfiguration",
  SYSTEM_SETTING_LEVELING_MODE: "levelingMode",
  SYSTEM_SETTING_LEVELING_MODE_NO_XP: "noxp",
  SYSTEM_SETTING_LEVELING_MODE_XP: "xp",
  SYSTEM_SETTING_LEVELING_MODE_XP_BOONS: "xpBoons",
  DOCUMENT_NAME_ACTOR: "Actor",
  ATTUNEMENT_OPTIONAL: "optional",
  ATTUNEMENT_REQUIRED: "required",
  FAVORITES_SECTION_TYPE_ACTIVITY: "activity",
  FAVORITES_SECTION_TYPE_EFFECT: "effect",
  FAVORITES_SECTION_TYPE_FACILITY: "facility",
  FAVORITES_SECTION_TYPE_FEATURE: "feature",
  FAVORITES_SECTION_TYPE_GENERIC: "generic",
  FAVORITES_SECTION_TYPE_INVENTORY: "inventory",
  FAVORITES_SECTION_TYPE_SPELLBOOK: "spellbook",
  ITEM_CAPACITY_TYPE_ITEMS: "items",
  ITEM_CAPACITY_TYPE_WEIGHT: "weight",
  ITEM_TYPE_BACKGROUND: "background",
  ITEM_TYPE_CLASS: "class",
  ITEM_TYPE_CONSUMABLE: "consumable",
  ITEM_TYPE_CONTAINER: "container",
  ITEM_TYPE_EQUIPMENT: "equipment",
  ITEM_TYPE_FACILITY: "facility",
  ITEM_TYPE_FEAT: "feat",
  ITEM_TYPE_LOOT: "loot",
  ITEM_TYPE_RACE: "race",
  ITEM_TYPE_SPELL: "spell",
  ITEM_TYPE_SUBCLASS: "subclass",
  ITEM_TYPE_TOOL: "tool",
  ITEM_TYPE_WEAPON: "weapon",
  ITEM_SYSTEM_TYPE_AMMO: "ammo",
  MESSAGE_BUS_COLLAPSE_ALL: "collapse-all",
  MESSAGE_BUS_EXPAND_ALL: "expand-all",
  /**
   * Main button pressed, usually the left button or the un-initialized state
   */
  MOUSE_BUTTON_MAIN: 0,
  /**
   * Auxiliary button pressed, usually the wheel button or the middle button (if present)
   */
  MOUSE_BUTTON_AUXILIARY: 1,
  /**
   * Secondary button pressed, usually the right button
   */
  MOUSE_BUTTON_SECONDARY: 2,
  CONTEXT_MENU_TYPE_EFFECTS: "effects",
  CONTEXT_MENU_TYPE_FACILITY_OCCUPANTS: "facility-occupants",
  CONTEXT_MENU_TYPE_GROUP_MEMBER: "group-member",
  CONTEXT_MENU_TYPE_ITEMS: "items",
  CONTEXT_MENU_TYPE_ITEM_ADVANCEMENT: "item-advancement",
  DND5E_CLASSES: {
    artificer: "TIDY5E.Class.Artificer",
    barbarian: "TIDY5E.Class.Barbarian",
    bard: "TIDY5E.Class.Bard",
    cleric: "TIDY5E.Class.Cleric",
    druid: "TIDY5E.Class.Druid",
    fighter: "TIDY5E.Class.Fighter",
    monk: "TIDY5E.Class.Monk",
    paladin: "TIDY5E.Class.Paladin",
    ranger: "TIDY5E.Class.Ranger",
    rogue: "TIDY5E.Class.Rogue",
    sorcerer: "TIDY5E.Class.Sorcerer",
    warlock: "TIDY5E.Class.Warlock",
    wizard: "TIDY5E.Class.Wizard",
    custom: "TIDY5E.Class.Custom"
  },
  CHARACTER_FEAT_SECTION_BACKGROUND: "background",
  CHARACTER_FEAT_SECTION_CLASSES: "classes",
  CHARACTER_FEAT_SECTION_ACTIVE: "active",
  CHARACTER_FEAT_SECTION_PASSIVE: "passive",
  CHARACTER_FEAT_SECTION_RACE: "race",
  FACILITY_TYPE_BASIC: "basic",
  FACILITY_TYPE_SPECIAL: "special",
  GROUP_TYPE_GROUP: "",
  GROUP_TYPE_ENCOUNTER: "encounter",
  GROUP_TYPE_PARTY: "party",
  NPC_ABILITY_SECTION_WEAPONS: "weapons",
  NPC_ABILITY_SECTION_ACTIONS: "actions",
  NPC_ABILITY_SECTION_PASSIVE: "passive",
  NPC_ABILITY_SECTION_EQUIPMENT: "equipment",
  NPC_ABILITY_SECTION_CLASSES: "classes",
  TAB_OPTION_CLASS: "tab-option",
  TAB_ACTOR_INVENTORY: "inventory",
  TAB_CONTAINER_CONTENTS: "contents",
  TAB_CONTAINER_SECTION_CONTENTS: "contents",
  TAB_ITEM_DESCRIPTION_ID: "description",
  TAB_ITEM_DETAILS_ID: "details",
  TAB_ITEM_ACTIVITIES_ID: "activities",
  TAB_ITEM_ADVANCEMENT_ID: "advancement",
  TAB_ITEM_EFFECTS_ID: "effects",
  TAB_CHARACTER_ATTRIBUTES: "attributes",
  TAB_CHARACTER_BASTION: "bastion",
  TAB_CHARACTER_SPELLBOOK: "spellbook",
  TAB_CHARACTER_FEATURES: "features",
  TAB_CHARACTER_EFFECTS: "effects",
  TAB_CHARACTER_BIOGRAPHY: "biography",
  TAB_CHARACTER_JOURNAL: "journal",
  TAB_GROUP_MEMBERS: "members",
  TAB_GROUP_DESCRIPTION: "description",
  TAB_MIGRATIONS_CHARACTER_BIOGRAPHY: "character-bio",
  TAB_MIGRATIONS_NPC_DEATH: "npc-death",
  TAB_MIGRATIONS_CCSS_TO_TIDY: "ccss-to-tidy",
  TAB_MIGRATIONS_FAVORITES_TO_SYSTEM: "favorites-to-system",
  TAB_MIGRATIONS_BONDS_IDEALS_FLAWS_TO_SYSTEM: "bonds-ideals-flaws-to-system",
  TAB_MIGRATIONS_SPELL_CLASS_TO_SOURCE_CLASS: "spell-class-to-source-class",
  TAB_MIGRATIONS_NPC_EXHAUSTION: "npc-exhaustion",
  TAB_NPC_ABILITIES: "attributes",
  TAB_NPC_SPELLBOOK: "spellbook",
  TAB_NPC_EFFECTS: "effects",
  TAB_NPC_BIOGRAPHY: "biography",
  TAB_NPC_JOURNAL: "journal",
  TAB_VEHICLE_ATTRIBUTES: "attributes",
  TAB_VEHICLE_CARGO_AND_CREW: "cargo",
  TAB_VEHICLE_EFFECTS: "effects",
  TAB_VEHICLE_DESCRIPTION: "biography",
  TAB_ACTOR_ACTIONS: "actions",
  TAB_WORLD_SETTINGS_CHARACTER: "world-settings-character",
  TAB_WORLD_SETTINGS_NPC: "world-settings-npc",
  TAB_WORLD_SETTINGS_VEHICLE: "world-settings-vehicle",
  TAB_WORLD_SETTINGS_ICONS: "world-settings-icons",
  TAB_WORLD_SETTINGS_ITEM: "world-settings-item",
  TAB_WORLD_SETTINGS_EXHAUSTION: "world-settings-exhaustion",
  TAB_WORLD_SETTINGS_SHEETLOCK: "world-settings-sheet-lock",
  TAB_WORLD_SETTINGS_MISC: "world-settings-misc",
  TAB_USER_SETTINGS_PLAYERS: "user-settings-players",
  TAB_USER_SETTINGS_NPCS: "user-settings-npcs",
  TAB_USER_SETTINGS_VEHICLES: "user-settings-vehicles",
  TAB_USER_SETTINGS_ACTIONS_LIST: "user-settings-actions-list",
  THEME_EXTENSION_WITH_DOT: ".tidy5e-theme",
  THEME_ID_DEFAULT_LIGHT: "light",
  THEME_ID_DEFAULT_DARK: "dark",
  THEME_ID_DEFAULT: "default",
  VIEW_MODE_DEFAULT: "default",
  VIEW_MODE_INVERSE: "inverse",
  SHEET_TYPE_CHARACTER: "character",
  SHEET_TYPE_NPC: "npc",
  SHEET_TYPE_VEHICLE: "vehicle",
  SHEET_TYPE_CONTAINER: "container",
  SHEET_TYPE_GROUP: "group",
  SHEET_LAYOUT_ALL: "all",
  SHEET_LAYOUT_CLASSIC: "classic",
  CIRCULAR_PORTRAIT_OPTION_ALL: "all",
  CIRCULAR_PORTRAIT_OPTION_CHARACTER: "pc",
  CIRCULAR_PORTRAIT_OPTION_NPCVEHICLE: "npc-vehicle",
  CIRCULAR_PORTRAIT_OPTION_NONE: "none",
  SPELL_PREPARATION_MODE_INNATE: "innate",
  SPELL_PREPARATION_MODE_PREPARED: "prepared",
  SPELL_PREPARATION_MODE_ALWAYS: "always",
  SPELL_PREPARATION_MODE_PACT: "pact",
  SPELL_PREPARATION_MODE_ATWILL: "atwill",
  SPELL_PREPARATION_MODE_RITUAL: "ritual",
  SPELL_SLOT_TRACKER_MODE_PREFERENCE: "spellSlotTrackerMode",
  SPELL_SLOT_TRACKER_MODE_PIPS: "pips",
  SPELL_SLOT_TRACKER_MODE_VALUE_MAX: "value-max",
  CLASS_TIDY_USE_CORE_LISTENERS: "tidy-use-core-listeners",
  CLASS_SELECTOR_TIDY_USE_CORE_LISTENERS: ".tidy-use-core-listeners",
  CLASS_ACTOR_SHEET_5E: "ActorSheet5e",
  HTML_DYNAMIC_RENDERING_ATTRIBUTE: 'data-tidy-render-scheme="handlebars"',
  HTML_DYNAMIC_RENDERING_ATTRIBUTE_SELECTOR: '[data-tidy-render-scheme="handlebars"]',
  /** The attribute which indicates a particular part of a sheet. */
  SHEET_PART_ATTRIBUTE: "data-tidy-sheet-part",
  SHEET_PARTS: {
    /** An interactable control that can open configuration settings for a target ability. */
    ABILITY_CONFIGURATION_CONTROL: "ability-configuration-control",
    /** A rollable/interactable element which rolls an ability save or test. */
    ABILITY_ROLLER: "ability-roller",
    /** An interactable toggle for ability saving throw proficiency. */
    ABILITY_SAVE_PROFICIENCY_TOGGLE: "ability-save-proficiency-toggle",
    /** An ability score (e.g., "str", "dex", "wis", etc.), whether readonly or editable. */
    ABILITY_SCORE: "ability-score",
    /** A rollable/interactable element which rolls an ability save. */
    ABILITY_SAVE_ROLLER: "ability-save-roller",
    /** A container for a given ability score (e.g., "str", "dex", "wis", etc.). */
    ABILITY_SCORE_CONTAINER: "ability-score-container",
    /** A rollable/interactable element which rolls an ability test. */
    ABILITY_TEST_ROLLER: "ability-test-roller",
    /** A toolbar with available actions for affeting the contents of a tab, usually item table contents (e.g., filter, sort, config). */
    ACTION_BAR: "action-bar",
    /** A container which houses an actor portrait and other parts related to actor portrait features. */
    ACTOR_PORTRAIT_CONTAINER: "actor-portrait-container",
    /** An overlay element for an actor portrait which provides a visual representation of remaining health. */
    ACTOR_PORTRAIT_HEALTH_OVERLAY: "actor-portrait-health-overlay",
    /** An actor portrait image element. */
    ACTOR_PORTRAIT_IMAGE: "actor-portrait-image",
    /** An actor trait container, such as Senses, Languages, or Tools. */
    ACTOR_TRAIT: "actor-trait",
    /** The specific details of an actor trait container, such as Senses, Languages, or Tools. */
    ACTOR_TRAIT_DETAILS: "actor-trait-details",
    /** A control for toggling a condition */
    CONDITION_TOGGLE: "condition-toggle",
    /** A container for all form fields related to a given damage part. */
    DAMAGE_PART_CONTAINER: "damage-part-container",
    /** An interactable control which the user can execute to delete a damage part to an item. */
    DAMAGE_PART_DELETE_COMMAND: "damage-part-delete-command",
    /** An input element which contains a damage part formula, usually for an item. */
    DAMAGE_PART_FORMULA: "damage-part-formula",
    /** An input element which represents the damage type of a damage part, usually for an item. */
    DAMAGE_PART_TYPE: "damage-part-type",
    /** An input for the number of failed death saves an actor has. */
    DEATH_SAVE_FAILURES: "death-save-failures",
    /** A rollable/interactable element which rolls a death saving throw. */
    DEATH_SAVE_ROLLER: "death-save-roller",
    /** An input for the number of successful death saves an actor has. */
    DEATH_SAVE_SUCCESSES: "death-save-successes",
    /** A row in an effect table. */
    EFFECT_TABLE_ROW: "effect-table-row",
    /** An interactable element which toggles a view */
    EXPANSION_TOGGLE: "table-expansion-toggle",
    /** An image representing a member of a group sheet. */
    GROUP_MEMBER_PORTRAIT: "group-member-portrait",
    /** An interactable element which toggles an inline container's contents view */
    INLINE_CONTAINER_TOGGLE: "inline-container-toggle",
    /** An interactable control which the user can execute to create an item (e.g., consumable, feature, loot, spell, weapon, etc.). */
    ITEM_CREATE_COMMAND: "item-create-command",
    /** An image element for an item. */
    ITEM_IMAGE: "item-image",
    /** The container element for an item image. */
    ITEM_IMAGE_CONTAINER: "item-image-container",
    /** An element which contains the name of an item. */
    ITEM_NAME: "item-name",
    /** A list-based tabular representation of items (e.g., equipment, loot, spells, etc.). */
    ITEM_TABLE: "item-table",
    /** The header row of an item table. */
    ITEM_TABLE_HEADER_ROW: "item-table-header-row",
    /** A row in an item table. */
    ITEM_TABLE_ROW: "item-table-row",
    /** An interactable control which the user can execute to use an item (e.g., consumable, feature, loot, spell, weapon, etc.). */
    ITEM_USE_COMMAND: "item-use-command",
    /** A series of properties related to an item, to be found on item summaries, item cards, and other locations where read-only item information is given. */
    ITEM_PROPERTY_LIST: "item-property-list",
    /** A series of properties related to an item, viewed from that item's sheet. These include read-only properties, currency value, and other situational input. */
    ITEM_SHEET_PROPERTIES: "item-sheet-properties",
    /** A summary of an item, usually taken from the item's chat data. */
    ITEM_SUMMARY: "item-summary",
    /** A containing element for a series of item lists or grids. */
    ITEMS_CONTAINER: "items-container",
    /** The element which contains the modifier text for melee spell attacks. */
    MELEE_SPELL_ATTACK_MOD: "melee-spell-attack-mod",
    /**
     * A container for a sheet name. The sheet name is usually in input, and its container has some additional styles associated with it.
     * The container typically sits in a sheet header row with other header-related elements.
     */
    NAME_CONTAINER: "name-container",
    /** The sheet header row where the sheet name appears. */
    NAME_HEADER_ROW: "name-header-row",
    /** A containing element for a series of item lists related to the NPC Abilities tab. */
    NPC_ABILITIES_CONTAINER: "npc-abilities-list",
    /** The element which contains the modifier text for ranged spell attacks. */
    RANGED_SPELL_ATTACK_MOD: "ranged-spell-attack-mod",
    /** A container for a single resource (first, second, third, etc.). */
    RESOURCE: "resource",
    /** The container where all known resources (first, second, third, etc.) are kept. */
    RESOURCES_CONTAINER: "resources-container",
    /** An interactable element that can clear the search input it is associated with. */
    SEARCH_CLEAR: "search-clear",
    /** A container for a search input and its search clearing interactable element. */
    SEARCH_CONTAINER: "search-container",
    /** A user input for performing searches. */
    SEARCH_INPUT: "search-input",
    /** A button for toggling whether the sheet is locked or unlocked. */
    SHEET_LOCK_TOGGLE: "sheet-lock-toggle",
    /** An interactable control that can open configuration settings for a target skill. */
    SKILL_CONFIGURATION_CONTROL: "skill-configuration-control",
    /** A container for a single skill, including its roller, proficiency toggle, and any other elements related to the skill. */
    SKILL_CONTAINER: "skill-container",
    /** An interactable toggle for skill proficiency. */
    SKILL_PROFICIENCY_TOGGLE: "skill-proficiency-toggle",
    /** A rollable/interactable element which rolls a skill check. */
    SKILL_ROLLER: "skill-roller",
    /** A list of skills for the target actor. */
    SKILLS_LIST: "skills-list",
    /** An interactable toggle for showing/hiding unproficienct skills. */
    SKILLS_SHOW_PROFICIENT_TOGGLE: "skills-show-proficiency-toggle",
    /** The element which contains the modifier text for spell attacks in general. This field is shown when melee and ranged spell attack mods are the same. */
    SPELL_ATTACK_MOD: "spell-attack-mod",
    /** The element which contains spell DC. */
    SPELL_DC: "spell-dc",
    /** A cell in a table row. */
    TABLE_CELL: "table-cell",
    /** A cell in a table's header row. */
    TABLE_HEADER_CELL: "table-header-cell",
    /** The header row in a table. */
    TABLE_HEADER_ROW: "table-header-row",
    /** A row in a table. */
    TABLE_ROW: "table-row",
    /** An interactable control that can open configuration settings for a target tool. */
    TOOL_CONFIGURATION_CONTROL: "tool-configuration-control",
    /** A container for a single tool, including its roller, proficiency toggle, and any other elements related to the tool. */
    TOOL_CONTAINER: "tool-container",
    /** An interactable toggle for tool proficiency. */
    TOOL_PROFICIENCY_TOGGLE: "tool-proficiency-toggle",
    /** A rollable/interactable element which rolls a tool check. */
    TOOL_ROLLER: "tool-roller",
    /** A list of tools for the target actor. */
    TOOLS_LIST: "tools-list",
    /** A toolbar that usually sits at the top of a section of content, providing features like search, filtering, etc. */
    UTILITY_TOOLBAR: "utility-toolbar",
    /** A toolbar command, usually a button */
    UTILITY_TOOLBAR_COMMAND: "utility-toolbar-command"
  },
  ACTIVATION_COST_ACTION: "action",
  ACTIVATION_COST_BONUS: "bonus",
  ACTIVATION_COST_CREW: "crew",
  ACTIVATION_COST_LAIR: "lair",
  ACTIVATION_COST_LEGENDARY: "legendary",
  ACTIVATION_COST_MYTHIC: "mythic",
  ACTIVATION_COST_NONE: "none",
  ACTIVATION_COST_REACTION: "reaction",
  ACTIVATION_COST_SPECIAL: "special",
  LIMITED_USES_PER_CHARGES: "charges",
  LIMITED_USES_PER_DAWN: "dawn",
  LIMITED_USES_PER_DAY: "day",
  LIMITED_USES_PER_DUSK: "dusk",
  LIMITED_USES_PER_LONG_REST: "lr",
  LIMITED_USES_PER_SHORT_REST: "sr",
  SHEET_SETTINGS_OPTION_NONE: "none",
  SHEET_SETTINGS_OPTION_GM_ONLY: "gm-only",
  SHEET_SETTINGS_OPTION_GM_AND_OWNERS: "gm-and-owners",
  TEXT_EDITOR_ACTIVATION_ELEMENT_SELECTOR: ".editor-content[data-edit]",
  SKILL_KEY_PERCEPTION: "prc",
  SVELTE_CONTEXT: {
    ACCORDION_CONTEXT: "accordionContext",
    APP_ID: "appId",
    APPLY: "apply",
    BUTTON_MENU_CONTEXT: "buttonMenuContext",
    CONFIRM: "confirm",
    CONTEXT: "context",
    CURRENT_TAB_ID: "currentTabId",
    EXPANDED_ITEM_DATA: "expandedItemData",
    EXPANDED_ITEMS: "expandedItems",
    FUNCTIONS: "functions",
    HOVERED_FACILITY_OCCUPANT: "hoveredFacilityOccupant",
    INITIAL_TAB_ID: "initialTabId",
    INLINE_TOGGLE_SERVICE: "inlineToggleService",
    ITEM_FILTER_SERVICE: "itemFilterService",
    ITEM_TABLE_TOGGLES: "itemTableToggles",
    LOCATION: "location",
    MEMBER_IDS_TO_SHOW: "memberIdsToShow",
    MESSAGE_BUS: "messageBus",
    ON_FILTER_CLEAR_ALL: "onFilterClearAll",
    ON_FILTER: "onFilter",
    ON_ITEM_TABLE_TOGGLE: "onItemTableToggle",
    ON_ITEM_TOGGLED: "onItemToggled",
    ON_SEARCH: "onSearch",
    ON_TAB_SELECTED: "onTabSelected",
    SEARCH_FILTERS: "searchFilters",
    SEARCH_RESULTS_STATE: "searchResultsState",
    STATS: "stats",
    TAB_ID: "tabId",
    USE_DEFAULT: "useDefault",
    VALIDATE: "validate"
  }
};
function debug(msg, args) {
  if (settings.value.debug) {
    let formattedMsg = `DEBUG | ${CONSTANTS.MODULE_ID} | ${msg}`;
    args !== void 0 ? console.log(formattedMsg, args) : console.log(formattedMsg);
  }
}
__name(debug, "debug");
function log(message, args) {
  message = `${CONSTANTS.MODULE_ID} | ${message}`;
  const formattedLog = message.replace("<br>", `
`);
  console.log(formattedLog);
}
__name(log, "log");
function warn(warning, notify2 = !1, args) {
  warning = `${CONSTANTS.MODULE_ID} | ${warning}`, notify2 && ui.notifications?.warn(warning);
  const formattedWarning = warning.replace("<br>", `
`);
  args !== void 0 ? console.warn(formattedWarning, args) : console.warn(formattedWarning);
}
__name(warn, "warn");
function error(message, notify2 = !0, args) {
  message = `${CONSTANTS.MODULE_ID} | ${message}`, notify2 && ui.notifications?.error(message), args !== void 0 ? console.error(message, args) : console.error(message);
}
__name(error, "error");
class ResetSettingsDialog extends FormApplication {
  static {
    __name(this, "ResetSettingsDialog");
  }
  constructor(...args) {
    return super(...args), new Dialog({
      title: FoundryAdapter.localize("TIDY5E.Settings.Reset.dialogs.title"),
      content: '<p style="margin-bottom:1rem;">' + FoundryAdapter.localize("TIDY5E.Settings.Reset.dialogs.content") + "</p>",
      buttons: {
        confirm: {
          icon: '<i class="fas fa-check"></i>',
          label: FoundryAdapter.localize("TIDY5E.Settings.Reset.dialogs.confirm"),
          callback: /* @__PURE__ */ __name(async () => {
            const storedSettings = game.settings.storage.get("world").filter(
              (setting) => setting.key.startsWith(`${CONSTANTS.MODULE_ID}.`)
            );
            for (let setting of storedSettings)
              log(`Reset setting '${setting.key}'`), await setting.delete();
          }, "callback")
        },
        cancel: {
          icon: '<i class="fas fa-times"></i>',
          label: FoundryAdapter.localize("TIDY5E.Settings.Reset.dialogs.cancel")
        }
      },
      default: "cancel"
    });
  }
  async _updateObject(...args) {
  }
}
const defaultDarkTheme = {
  name: "TIDY5E.Settings.SheetTheme.dark",
  id: CONSTANTS.THEME_ID_DEFAULT_DARK,
  description: "The default Tidy 5e Dark theme.",
  variables: {
    "--t5e-title-font-family": "'Modesto Condensed', 'Palatino Linotype', serif",
    "--t5e-body-font-family": "'Signika', sans-serif",
    "--t5e-primary-font-color": "rgba(255, 255, 255, 0.8)",
    "--t5e-background": "rgba(30, 30, 30, 1)",
    "--t5e-faintest-color": "rgba(255, 255, 255, 0.05)",
    "--t5e-faint-color": "rgba(255, 255, 255, 0.1)",
    "--t5e-light-color": "rgba(255, 255, 255, 0.25)",
    "--t5e-primary-color": "rgba(255, 255, 255, 0.8)",
    "--t5e-secondary-color": "rgba(255, 255, 255, 0.65)",
    "--t5e-tertiary-color": "rgba(255, 255, 255, 0.4)",
    "--t5e-primary-accent-color": "hsl(23.53, 80%, 50%)",
    "--spell-level-button-available-slots-text-color": "white",
    "--t5e-white": "rgba(0, 0, 0, 1)",
    "--t5e-faint-white": "rgba(255, 255, 255, 0.2)",
    "--t5e-linked-accent-color": "rgba(0, 255, 0, 0.75)",
    "--t5e-unlinked-accent-color": "rgba(255, 0, 0, 0.75)",
    "--t5e-linked-light-color": "rgba(0, 255, 0, 0.4)",
    "--t5e-unlinked-light-color": "rgba(255, 0, 0, 0.4)",
    "--t5e-sheet-unlocked-icon-background": "rgba(0, 150, 100, 0.6)",
    "--t5e-sheet-locked-icon-background": "rgba(255, 0, 0, 0.6)",
    "--t5e-header-background": "rgba(255, 255, 255, 0.05)",
    "--t5e-prepareable-color": "rgba(119, 136, 153, 1)",
    "--t5e-equipped-background": "rgba(0, 250, 180, 0.3)",
    "--t5e-equipped-item-grid-tile-outline-color": "rgba(50, 205, 50, 1)",
    "--t5e-equipped-item-grid-tile-accent-color": "rgba(173, 255, 47, 1)",
    "--t5e-prepared-background": "rgba(0, 250, 180, 0.3)",
    "--t5e-prepared-item-grid-tile-outline-color": "rgba(50, 205, 50, 1)",
    "--t5e-prepared-item-grid-tile-accent-color": "rgba(173, 255, 47, 1)",
    "--t5e-pact-background": "rgba(250, 0, 180, 0.3)",
    "--t5e-pact-outline-color": "rgba(250, 50, 213, 1)",
    "--t5e-pact-accent-color": "rgba(198, 119, 193, 1)",
    "--t5e-atwill-background": "rgba(226, 246, 4, 0.3)",
    "--t5e-atwill-outline-color": "rgba(163, 165, 50, 1)",
    "--t5e-atwill-accent-color": "rgba(255, 242, 0, 1)",
    "--t5e-innate-background": "rgba(255, 0, 0, 0.3)",
    "--t5e-innate-outline": "rgba(231, 23, 23, 1)",
    "--t5e-innate-accent": "rgba(195, 69, 69, 1)",
    "--t5e-ritual-only-background": "hsl(260.36deg 50% 21.96%)",
    "--t5e-ritual-only-outline-color": "hsl(260.36deg 50% 21.96%)",
    "--t5e-ritual-only-accent-color": "hsl(260.36deg 50% 21.96%)",
    "--t5e-alwaysprepared-background": "rgba(0, 100, 255, 0.3)",
    "--t5e-alwaysprepared-outline-color": "rgba(65, 105, 225, 1)",
    "--t5e-alwaysprepared-accent-color": "rgba(0, 191, 255, 1)",
    "--t5e-magic-accent-color": "#ada11a",
    "--t5e-attunement-required-color": "var(--t5e-light-color)",
    "--t5e-attuned-color": "var(--t5e-primary-accent-color)",
    "--t5e-attuned-item-grid-icon-color": "rgba(0, 0, 0, 0.4)",
    "--t5e-xp-bar-background": "rgba(94, 225, 146, 1)",
    "--t5e-encumbrance-bar-background": "rgba(108, 138, 165, 1)",
    "--t5e-encumbrance-bar-outline-color": "var(--t5e-separator-color)",
    "--t5e-encumbrance-outline-color": "rgba(0, 0, 0, 0.9)",
    "--t5e-encumbrance-text-color": "rgba(238, 238, 238, 1)",
    "--t5e-encumbrance-bar-text-shadow-color": "#000",
    "--t5e-warning-accent-color": "rgba(255, 30, 0, 0.65)",
    "--t5e-warning-accent-contrast-color": "rgba(255, 255, 255, 0.8)",
    "--t5e-icon-background": "rgba(30, 30, 30, 1)",
    "--t5e-icon-shadow-color": "rgba(0, 0, 0, 0.4)",
    "--t5e-icon-outline-color": "rgba(0, 0, 0, 0.4)",
    "--t5e-icon-font-color": "rgba(255, 255, 255, 0.4)",
    "--t5e-icon-hover-color": "rgba(255, 255, 255, 0.8)",
    "--t5e-ability-modifiers-hover-label-background": "rgba(0, 0, 0, 0.9)",
    "--t5e-exhaustion-severity1-background": "rgba(255, 230, 0, 1)",
    "--t5e-exhaustion-severity2-background": "rgba(255, 130, 0, 1)",
    "--t5e-exhaustion-severity3-background": "rgba(255, 50, 0, 1)",
    "--t5e-ability-accent-background": "rgb(80, 80, 80)",
    "--t5e-context-outline-color": "rgba(0, 0, 0, 0.4)",
    "--t5e-context-shadow-color": "rgba(0, 0, 0, 0.65)",
    "--t5e-check-default-background-image": "url('../../modules/tidy5e-sheet/images/check-dark-unchecked.svg')",
    "--t5e-check-checked-background-image": "url('../../modules/tidy5e-sheet/images/check-light-checked.svg')",
    "--t5e-checkbox-font-color": "rgba(255, 255, 255, 0.8)",
    "--t5e-checkbox-outline-color": "rgba(50, 50, 50, 1)",
    "--t5e-checkbox-unchecked-color": "rgba(75, 75, 75, 1)",
    "--t5e-checkbox-checked-color": "hsl(120deg 100% 40% / 50%)",
    "--t5e-item-input-background": "rgba(255, 255, 255, 0.1)",
    "--t5e-item-input-hover-background": "rgba(255, 255, 255, 0.2)",
    "--t5e-death-save-icon-color": "rgba(255, 255, 255, 0.75)",
    "--t5e-death-save-text-color": "white",
    "--t5e-inspiration-hover-color": "rgba(255, 255, 255, 0.75)",
    "--t5e-inspiration-text-shadow-hover-color": "rgba(118, 228, 255, 0.5)",
    "--t5e-inspiration-inspired-text-shadow-color": "#76e4ff",
    "--t5e-inspiration-inspired-background": "rgba(153, 153, 153, 1)",
    "--t5e-vehicle-motion-hover-color": "rgba(255, 255, 255, 0.75)",
    "--t5e-vehicle-motion-text-shadow-hover-color": "rgba(118, 228, 255, 0.5)",
    "--t5e-vehicle-in-motion-text-shadow-color": "#76e4ff",
    "--t5e-vehicle-in-motion-background": "rgba(153, 153, 153, 1)",
    "--t5e-hp-bar-color": "rgba(50, 149, 50, 0.6)",
    "--t5e-resource-bar-color": "rgba(120, 167, 242, 1)",
    "--t5e-death-save-backdrop-background": "rgba(255, 0, 0, 0.5)",
    "--t5e-death-save-text-shadow-color": "rgb(34, 34, 34)",
    "--t5e-hp-overlay-background": "rgba(255, 0, 0, 1)",
    "--t5e-inventory-grid-image-contrast-text-shadow-color": "rgba(0, 0, 0, 1)",
    "--t5e-inventory-grid-hover-use-item-contrast-text-shadow-color": "rgba(255, 255, 255, 1)",
    "--t5e-sheet-background": "var(--t5e-background)",
    "--t5e-item-info-card-background": "var(--t5e-background)",
    "--t5e-content-entity-link-color": "var(--t5e-primary-font-color)",
    "--t5e-content-entity-link-hover-color": "var(--t5e-primary-font-color)",
    "--t5e-content-entity-link-background": "var(--t5e-faint-color)",
    "--t5e-content-entity-link-hover-background": "var(--t5e-primary-accent-color)",
    "--t5e-activated-profile-toggle-color": "var(--t5e-primary-font-color)",
    "--t5e-exhaustion-severity1-color": "var(--t5e-icon-outline-color)",
    "--t5e-exhaustion-severity2-color": "rgba(255, 255, 255, 0.7)",
    "--t5e-exhaustion-severity3-color": "rgba(255, 255, 255, 0.7)",
    "--t5e-tinymce-toolbar-background": "#fff",
    "--t5e-tinymce-sidebar-background": "var(--t5e-secondary-color)",
    "--t5e-tinyme-toolbar-button-color": "#222",
    "--t5e-prosemirror-button-color": "rgba(100, 100, 100, 1)",
    "--t5e-prosemirror-dropdown-item-hover-color": "rgba(50, 50, 50, 1)",
    "--t5e-item-info-card-box-shadow-color": "rgba(0, 0, 0, 0.5)",
    "--t5e-sheet-lock-icon-color": "rgba(255, 255, 255, 0.6)",
    "--t5e-grid-pane-favorite-icon-color": "rgba(0, 200, 100, 1)",
    "--t5e-settings-dialog-box-shadow-color": "rgba(0, 0, 0, 0.75)",
    "--t5e-sheet-lock-icon-hover-color": "#fff",
    "--t5e-settings-dialog-border-color": "#ff6400",
    "--t5e-spell-level-button-border-color": "#c9c7b8",
    "--t5e-ability-modifiers-label-text-color": "#fff",
    "--t5e-ability-mod-text-color": "#fff",
    "--t5e-ability-mod-save-text-hover-color": "#fff",
    "--t5e-button-menu-background": "var(--t5e-sheet-background)",
    "--t5e-button-menu-hover-color": "var(--t5e-faint-color)",
    "--t5e-button-menu-divider-color": "var(--t5e-separator-color)",
    "--t5e-focus-visible-box-shadow": "-0.0625rem -0.0625rem 0 var(--t5e-primary-accent-color), -0.0625rem 0.0625rem 0 var(--t5e-primary-accent-color), 0.0625rem 0.0625rem 0 var(--t5e-primary-accent-color), 0.0625rem -0.0625rem 0 var(--t5e-primary-accent-color)",
    "--t5e-button-background": "var(--t5e-faintest-color)",
    "--t5e-button-hover-background": "var(--t5e-faint-color)",
    "--t5e-button-disabled-color": "var(--t5e-light-color)",
    "--t5e-separator-color": "rgba(120, 120, 120, 0.1)",
    "--t5e-table-header-row-color": "#111111",
    "--t5e-table-header-row-border-color": "#111111",
    "--t5e-tab-strip-border-color": "transparent",
    "--t5e-tabs-background": "var(--t5e-header-background)",
    "--t5e-active-tab-background": "var(--t5e-sheet-background)",
    "--t5e-tab-background": "transparent",
    "--t5e-scrollbar-thumb-color": "#782e22",
    "--t5e-scrollbar-track-color": "#0000",
    "--t5e-spell-pip-active-background": "var(--t5e-primary-accent-color)",
    "--t5e-spell-pip-empty-background": "transparent",
    "--t5e-spell-pip-border-color": "var(--t5e-primary-accent-color)",
    "--t5e-switch-slider-color": "#DDD"
  },
  type: "dark"
}, defaultLightTheme = {
  name: "TIDY5E.Settings.SheetTheme.light",
  id: CONSTANTS.THEME_ID_DEFAULT_LIGHT,
  description: "The default Tidy 5e Light theme.",
  variables: {
    "--t5e-title-font-family": "'Modesto Condensed', 'Palatino Linotype', serif",
    "--t5e-body-font-family": "'Signika', sans-serif",
    "--t5e-primary-font-color": "rgba(0, 0, 0, 0.9)",
    "--t5e-background": "#f1ebe8",
    "--t5e-faintest-color": "rgba(0, 0, 0, 0.05)",
    "--t5e-faint-color": "rgba(0, 0, 0, 0.1)",
    "--t5e-light-color": "rgba(0, 0, 0, 0.25)",
    "--t5e-primary-color": "rgba(0, 0, 0, 0.9)",
    "--t5e-secondary-color": "rgba(0, 0, 0, 0.65)",
    "--t5e-tertiary-color": "rgba(0, 0, 0, 0.4)",
    "--t5e-primary-accent-color": "rgba(255, 100, 0, 1)",
    "--spell-level-button-available-slots-text-color": "white",
    "--t5e-white": "rgba(255, 255, 255, 1)",
    "--t5e-faint-white": "rgba(255, 255, 255, 0.2)",
    "--t5e-linked-accent-color": "rgba(0, 255, 0, 0.75)",
    "--t5e-unlinked-accent-color": "rgba(255, 0, 0, 0.75)",
    "--t5e-linked-light-color": "rgba(0, 255, 0, 0.4)",
    "--t5e-unlinked-light-color": "rgba(255, 0, 0, 0.4)",
    "--t5e-sheet-unlocked-icon-background": "rgba(0, 150, 100, 0.6)",
    "--t5e-sheet-locked-icon-background": "rgba(255, 0, 0, 0.6)",
    "--t5e-header-background": "rgba(255, 255, 255, 0.2)",
    "--t5e-prepareable-color": "rgba(119, 136, 153, 1)",
    "--t5e-equipped-background": "rgba(50, 205, 50, 0.3)",
    "--t5e-equipped-item-grid-tile-outline-color": "rgba(50, 205, 50, 1)",
    "--t5e-equipped-item-grid-tile-accent-color": "rgba(173, 255, 47, 1)",
    "--t5e-prepared-background": "rgba(50, 205, 50, 0.3)",
    "--t5e-prepared-item-grid-tile-outline-color": "rgba(50, 205, 50, 1)",
    "--t5e-prepared-item-grid-tile-accent-color": "rgba(173, 255, 47, 1)",
    "--t5e-pact-background": "rgba(250, 0, 180, 0.3)",
    "--t5e-pact-outline-color": "rgba(250, 50, 213, 1)",
    "--t5e-pact-accent-color": "rgba(198, 119, 193, 1)",
    "--t5e-atwill-background": "rgba(226, 246, 4, 0.3)",
    "--t5e-atwill-outline-color": "rgba(163, 165, 50, 1)",
    "--t5e-atwill-accent-color": "rgba(255, 242, 0, 1)",
    "--t5e-innate-background": "rgba(255, 0, 0, 0.3)",
    "--t5e-innate-outline": "rgba(231, 23, 23, 1)",
    "--t5e-innate-accent": "rgba(195, 69, 69, 1)",
    "--t5e-ritual-only-background": "hsl(260.09deg 100% 45.1% / 25.88%)",
    "--t5e-ritual-only-outline-color": "hsl(260.09deg 100% 45.1% / 25.88%)",
    "--t5e-ritual-only-accent-color": "hsl(260.09deg 100% 45.1% / 25.88%)",
    "--t5e-alwaysprepared-background": "rgba(0, 0, 255, 0.15)",
    "--t5e-alwaysprepared-outline-color": "rgba(65, 105, 225, 1)",
    "--t5e-alwaysprepared-accent-color": "rgba(0, 191, 255, 1)",
    "--t5e-magic-accent-color": "#ada11a",
    "--t5e-attunement-required-color": "var(--t5e-light-color)",
    "--t5e-attuned-color": "var(--t5e-primary-accent-color)",
    "--t5e-attuned-item-grid-icon-color": "rgba(0, 0, 0, 0.4)",
    "--t5e-xp-bar-background": "rgba(94, 225, 146, 1)",
    "--t5e-encumbrance-bar-background": "rgba(108, 138, 165, 1)",
    "--t5e-encumbrance-bar-outline-color": "var(--t5e-separator-color)",
    "--t5e-encumbrance-outline-color": "rgba(0, 0, 0, 0.9)",
    "--t5e-encumbrance-text-color": "rgba(238, 238, 238, 1)",
    "--t5e-encumbrance-bar-text-shadow-color": "#000",
    "--t5e-warning-accent-color": "rgba(255, 0, 0, 0.6)",
    "--t5e-warning-accent-contrast-color": "rgba(255, 255, 255, 0.8)",
    "--t5e-icon-background": "rgba(236, 233, 223, 1)",
    "--t5e-icon-shadow-color": "rgba(0, 0, 0, 0.4)",
    "--t5e-icon-outline-color": "rgba(0, 0, 0, 0.4)",
    "--t5e-icon-font-color": "rgba(0, 0, 0, 0.4)",
    "--t5e-icon-hover-color": "rgba(0, 0, 0, 0.9)",
    "--t5e-ability-modifiers-hover-label-background": "rgba(0, 0, 0, 0.9)",
    "--t5e-exhaustion-severity1-background": "rgba(255, 230, 0, 1)",
    "--t5e-exhaustion-severity2-background": "rgba(255, 130, 0, 1)",
    "--t5e-exhaustion-severity3-background": "rgba(255, 50, 0, 1)",
    "--t5e-ability-accent-background": "darkslategrey",
    "--t5e-context-outline-color": "rgba(0, 0, 0, 0.4)",
    "--t5e-context-shadow-color": "rgba(0, 0, 0, 0.65)",
    "--t5e-check-default-background-image": "url('../../modules/tidy5e-sheet/images/check-dark-unchecked.svg')",
    "--t5e-check-checked-background-image": "url('../../modules/tidy5e-sheet/images/check-dark-checked.svg')",
    "--t5e-checkbox-font-color": "rgba(0, 0, 0, 0.9)",
    "--t5e-checkbox-outline-color": "rgba(150, 150, 150, 1)",
    "--t5e-checkbox-unchecked-color": "#d8d7d1",
    "--t5e-checkbox-checked-color": "rgba(0, 255, 0, 0.3)",
    "--t5e-item-input-background": "rgba(255, 255, 255, 0.3)",
    "--t5e-item-input-hover-background": "rgba(255, 255, 255, 0.5)",
    "--t5e-death-save-icon-color": "rgba(255, 255, 255, 0.75)",
    "--t5e-death-save-text-color": "white",
    "--t5e-inspiration-hover-color": "rgba(255, 255, 255, 0.75)",
    "--t5e-inspiration-text-shadow-hover-color": "rgba(118, 228, 255, 0.5)",
    "--t5e-inspiration-inspired-text-shadow-color": "#76e4ff",
    "--t5e-inspiration-inspired-background": "rgba(153, 153, 153, 1)",
    "--t5e-vehicle-motion-hover-color": "rgba(255, 255, 255, 0.75)",
    "--t5e-vehicle-motion-text-shadow-hover-color": "rgba(118, 228, 255, 0.5)",
    "--t5e-vehicle-in-motion-text-shadow-color": "#76e4ff",
    "--t5e-vehicle-in-motion-background": "rgba(153, 153, 153, 1)",
    "--t5e-hp-bar-color": "rgba(0, 200, 0, 0.6)",
    "--t5e-resource-bar-color": "rgba(120, 167, 242, 1)",
    "--t5e-death-save-backdrop-background": "rgba(255, 0, 0, 0.5)",
    "--t5e-death-save-text-shadow-color": "rgb(34, 34, 34)",
    "--t5e-hp-overlay-background": "rgba(255, 0, 0, 1)",
    "--t5e-inventory-grid-image-contrast-text-shadow-color": "rgba(0, 0, 0, 1)",
    "--t5e-inventory-grid-hover-use-item-contrast-text-shadow-color": "rgba(255, 255, 255, 1)",
    "--t5e-item-info-card-background": "url(../../modules/tidy5e-sheet/images/parchment-texture-top.webp) no-repeat top center / 150% auto, #f1ebe8 url(../../modules/tidy5e-sheet/images/parchment-texture-bottom.webp) no-repeat bottom center / 150% auto;",
    "--t5e-content-entity-link-color": "var(--t5e-primary-font-color)",
    "--t5e-content-entity-link-hover-color": "var(--t5e-white)",
    "--t5e-content-entity-link-background": "var(--t5e-faintest-color)",
    "--t5e-content-entity-link-hover-background": "var(--t5e-primary-accent-color)",
    "--t5e-activated-profile-toggle-color": "var(--t5e-white)",
    "--t5e-exhaustion-severity1-color": "var(--t5e-icon-font-color)",
    "--t5e-exhaustion-severity2-color": "rgba(255, 255, 255, 0.7)",
    "--t5e-exhaustion-severity3-color": "rgba(255, 255, 255, 0.7)",
    "--t5e-tinymce-toolbar-background": "transparent",
    "--t5e-prosemirror-button-color": "#deded3",
    "--t5e-prosemirror-dropdown-item-hover-color": "var(--t5e-faint-color)",
    "--t5e-item-info-card-box-shadow-color": "rgba(0, 0, 0, 0.5)",
    "--t5e-sheet-lock-icon-color": "rgba(255, 255, 255, 0.6)",
    "--t5e-grid-pane-favorite-icon-color": "rgba(0, 200, 100, 1)",
    "--t5e-settings-dialog-box-shadow-color": "rgba(0, 0, 0, 0.75)",
    "--t5e-sheet-lock-icon-hover-color": "#fff",
    "--t5e-settings-dialog-border-color": "#ff6400",
    "--t5e-spell-level-button-border-color": "#c9c7b8",
    "--t5e-ability-modifiers-label-text-color": "#fff",
    "--t5e-ability-mod-text-color": "#fff",
    "--t5e-ability-mod-save-text-hover-color": "#fff",
    "--t5e-button-menu-background": "var(--t5e-background)",
    "--t5e-button-menu-hover-color": "var(--t5e-faint-color)",
    "--t5e-button-menu-divider-color": "var(--t5e-separator-color)",
    "--t5e-focus-visible-box-shadow": "-0.0625rem -0.0625rem 0 var(--t5e-primary-accent-color), -0.0625rem 0.0625rem 0 var(--t5e-primary-accent-color), 0.0625rem 0.0625rem 0 var(--t5e-primary-accent-color), 0.0625rem -0.0625rem 0 var(--t5e-primary-accent-color)",
    "--t5e-button-background": "var(--t5e-faint-color)",
    "--t5e-button-hover-background": "var(--t5e-faintest-color)",
    "--t5e-button-disabled-color": "var(--t5e-light-color)",
    "--t5e-separator-color": "var(--t5e-light-color)",
    "--t5e-table-header-row-color": "var(--t5e-faint-color)",
    "--t5e-table-header-row-border-color": "var(--t5e-light-color)",
    "--t5e-tab-strip-border-color": "rgba(0, 0, 0, 0.25)",
    "--t5e-active-tab-background": "transparent",
    "--t5e-tab-background": "var(--t5e-header-background)",
    "--t5e-scrollbar-thumb-color": "#782e22",
    "--t5e-scrollbar-track-color": "#0000",
    "--t5e-spell-pip-active-background": "var(--t5e-primary-accent-color)",
    "--t5e-spell-pip-empty-background": "transparent",
    "--t5e-spell-pip-border-color": "var(--t5e-primary-accent-color)",
    "--t5e-switch-slider-color": "#FFF"
  },
  type: "light"
};
function getCoreThemes(includeDefault) {
  let themes = {};
  return includeDefault && (themes[CONSTANTS.THEME_ID_DEFAULT] = "TIDY5E.Settings.SheetTheme.default"), themes[CONSTANTS.THEME_ID_DEFAULT_LIGHT] = defaultLightTheme.name, themes[CONSTANTS.THEME_ID_DEFAULT_DARK] = defaultDarkTheme.name, themes;
}
__name(getCoreThemes, "getCoreThemes");
function getThemes() {
  return {
    [CONSTANTS.THEME_ID_DEFAULT_LIGHT]: defaultLightTheme,
    [CONSTANTS.THEME_ID_DEFAULT_DARK]: defaultDarkTheme
  };
}
__name(getThemes, "getThemes");
const themeVariables = {
  "--t5e-title-font-family": {
    type: "todo",
    group: "todo"
  },
  "--t5e-body-font-family": {
    type: "todo",
    group: "todo"
  },
  "--t5e-primary-font-color": {
    type: "todo",
    group: "todo"
  },
  "--t5e-background": {
    type: "todo",
    group: "todo"
  },
  "--t5e-faintest-color": {
    type: "todo",
    group: "todo"
  },
  "--t5e-faint-color": {
    type: "todo",
    group: "todo"
  },
  "--t5e-light-color": {
    type: "todo",
    group: "todo"
  },
  "--t5e-primary-color": {
    type: "todo",
    group: "todo"
  },
  "--t5e-secondary-color": {
    type: "todo",
    group: "todo"
  },
  "--t5e-tertiary-color": {
    type: "todo",
    group: "todo"
  },
  "--t5e-primary-accent-color": {
    type: "todo",
    group: "todo"
  },
  "--spell-level-button-available-slots-text-color": {
    type: "todo",
    group: "todo"
  },
  "--t5e-white": {
    type: "todo",
    group: "todo"
  },
  "--t5e-faint-white": {
    type: "todo",
    group: "todo"
  },
  "--t5e-linked-accent-color": {
    type: "todo",
    group: "todo"
  },
  "--t5e-unlinked-accent-color": {
    type: "todo",
    group: "todo"
  },
  "--t5e-linked-light-color": {
    type: "todo",
    group: "todo"
  },
  "--t5e-unlinked-light-color": {
    type: "todo",
    group: "todo"
  },
  "--t5e-sheet-unlocked-icon-background": {
    type: "todo",
    group: "todo"
  },
  "--t5e-sheet-locked-icon-background": {
    type: "todo",
    group: "todo"
  },
  "--t5e-header-background": {
    type: "todo",
    group: "todo"
  },
  "--t5e-prepareable-color": {
    type: "todo",
    group: "todo"
  },
  "--t5e-equipped-background": {
    type: "todo",
    group: "todo"
  },
  "--t5e-equipped-item-grid-tile-outline-color": {
    type: "todo",
    group: "todo"
  },
  "--t5e-equipped-item-grid-tile-accent-color": {
    type: "todo",
    group: "todo"
  },
  "--t5e-prepared-background": {
    type: "todo",
    group: "todo"
  },
  "--t5e-prepared-item-grid-tile-outline-color": {
    type: "todo",
    group: "todo"
  },
  "--t5e-prepared-item-grid-tile-accent-color": {
    type: "todo",
    group: "todo"
  },
  "--t5e-pact-background": {
    type: "todo",
    group: "todo"
  },
  "--t5e-pact-outline-color": {
    type: "todo",
    group: "todo"
  },
  "--t5e-pact-accent-color": {
    type: "todo",
    group: "todo"
  },
  "--t5e-atwill-background": {
    type: "todo",
    group: "todo"
  },
  "--t5e-atwill-outline-color": {
    type: "todo",
    group: "todo"
  },
  "--t5e-atwill-accent-color": {
    type: "todo",
    group: "todo"
  },
  "--t5e-ritual-only-background": {
    type: "todo",
    group: "todo"
  },
  "--t5e-ritual-only-outline-color": {
    type: "todo",
    group: "todo"
  },
  "--t5e-ritual-only-accent-color": {
    type: "todo",
    group: "todo"
  },
  "--t5e-innate-background": {
    type: "todo",
    group: "todo"
  },
  "--t5e-innate-outline": {
    type: "todo",
    group: "todo"
  },
  "--t5e-innate-accent": {
    type: "todo",
    group: "todo"
  },
  "--t5e-alwaysprepared-background": {
    type: "todo",
    group: "todo"
  },
  "--t5e-alwaysprepared-outline-color": {
    type: "todo",
    group: "todo"
  },
  "--t5e-alwaysprepared-accent-color": {
    type: "todo",
    group: "todo"
  },
  "--t5e-magic-accent-color": {
    type: "todo",
    group: "todo"
  },
  "--t5e-attunement-required-color": {
    type: "todo",
    group: "todo"
  },
  "--t5e-attuned-color": {
    type: "todo",
    group: "todo"
  },
  "--t5e-attuned-item-grid-icon-color": {
    type: "todo",
    group: "todo"
  },
  "--t5e-xp-bar-background": {
    type: "todo",
    group: "todo"
  },
  "--t5e-encumbrance-bar-background": {
    type: "todo",
    group: "todo"
  },
  "--t5e-encumbrance-bar-outline-color": {
    type: "todo",
    group: "todo"
  },
  "--t5e-encumbrance-outline-color": {
    type: "todo",
    group: "todo"
  },
  "--t5e-warning-accent-color": {
    type: "todo",
    group: "todo"
  },
  "--t5e-warning-accent-contrast-color": {
    type: "todo",
    group: "todo"
  },
  "--t5e-icon-background": {
    type: "todo",
    group: "todo"
  },
  "--t5e-icon-shadow-color": {
    type: "todo",
    group: "todo"
  },
  "--t5e-icon-outline-color": {
    type: "todo",
    group: "todo"
  },
  "--t5e-icon-font-color": {
    type: "todo",
    group: "todo"
  },
  "--t5e-icon-hover-color": {
    type: "todo",
    group: "todo"
  },
  "--t5e-ability-modifiers-hover-label-background": {
    type: "todo",
    group: "todo"
  },
  "--t5e-exhaustion-severity1-background": {
    type: "todo",
    group: "todo"
  },
  "--t5e-exhaustion-severity2-background": {
    type: "todo",
    group: "todo"
  },
  "--t5e-exhaustion-severity3-background": {
    type: "todo",
    group: "todo"
  },
  "--t5e-ability-accent-background": {
    type: "todo",
    group: "todo"
  },
  "--t5e-context-outline-color": {
    type: "todo",
    group: "todo"
  },
  "--t5e-context-shadow-color": {
    type: "todo",
    group: "todo"
  },
  "--t5e-check-default-background-image": {
    type: "todo",
    group: "todo"
  },
  "--t5e-check-checked-background-image": {
    type: "todo",
    group: "todo"
  },
  "--t5e-checkbox-font-color": {
    type: "todo",
    group: "todo"
  },
  "--t5e-checkbox-outline-color": {
    type: "todo",
    group: "todo"
  },
  "--t5e-checkbox-unchecked-color": {
    type: "todo",
    group: "todo"
  },
  "--t5e-checkbox-checked-color": {
    type: "todo",
    group: "todo"
  },
  "--t5e-item-input-background": {
    type: "todo",
    group: "todo"
  },
  "--t5e-item-input-hover-background": {
    type: "todo",
    group: "todo"
  },
  "--t5e-encumbrance-text-color": {
    type: "todo",
    group: "todo"
  },
  "--t5e-death-save-icon-color": {
    type: "todo",
    group: "todo"
  },
  "--t5e-inspiration-hover-color": {
    type: "todo",
    group: "todo"
  },
  "--t5e-inspiration-text-shadow-hover-color": {
    type: "todo",
    group: "todo"
  },
  "--t5e-inspiration-inspired-text-shadow-color": {
    type: "todo",
    group: "todo"
  },
  "--t5e-inspiration-inspired-background": {
    type: "todo",
    group: "todo"
  },
  "--t5e-vehicle-motion-hover-color": {
    type: "todo",
    group: "todo"
  },
  "--t5e-vehicle-motion-text-shadow-hover-color": {
    type: "todo",
    group: "todo"
  },
  "--t5e-vehicle-in-motion-text-shadow-color": {
    type: "todo",
    group: "todo"
  },
  "--t5e-vehicle-in-motion-background": {
    type: "todo",
    group: "todo"
  },
  "--t5e-hp-bar-color": {
    type: "todo",
    group: "todo"
  },
  "--t5e-resource-bar-color": {
    type: "todo",
    group: "todo"
  },
  "--t5e-death-save-backdrop-background": {
    type: "todo",
    group: "todo"
  },
  "--t5e-death-save-text-shadow-color": {
    type: "todo",
    group: "todo"
  },
  "--t5e-hp-overlay-background": {
    type: "todo",
    group: "todo"
  },
  "--t5e-inventory-grid-image-contrast-text-shadow-color": {
    type: "todo",
    group: "todo"
  },
  "--t5e-inventory-grid-hover-use-item-contrast-text-shadow-color": {
    type: "todo",
    group: "todo"
  },
  "--t5e-sheet-background": {
    type: "todo",
    group: "todo"
  },
  "--t5e-item-info-card-background": {
    type: "todo",
    group: "todo,"
  },
  "--t5e-content-entity-link-color": {
    type: "todo",
    group: "todo"
  },
  "--t5e-content-entity-link-hover-color": {
    type: "todo",
    group: "todo"
  },
  "--t5e-content-entity-link-background": {
    type: "todo",
    group: "todo"
  },
  "--t5e-content-entity-link-hover-background": {
    type: "todo",
    group: "todo"
  },
  "--t5e-activated-profile-toggle-color": {
    type: "todo",
    group: "todo"
  },
  "--t5e-exhaustion-severity1-color": {
    type: "todo",
    group: "todo"
  },
  "--t5e-exhaustion-severity2-color": {
    type: "todo",
    group: "todo"
  },
  "--t5e-exhaustion-severity3-color": {
    type: "todo",
    group: "todo"
  },
  "--t5e-death-save-text-color": {
    type: "todo",
    group: "todo"
  },
  "--t5e-tinymce-toolbar-background": {
    type: "todo",
    group: "todo"
  },
  "--t5e-tinymce-sidebar-background": {
    type: "todo",
    group: "todo"
  },
  "--t5e-tinyme-toolbar-button-color": {
    type: "todo",
    group: "todo"
  },
  "--t5e-prosemirror-button-color": {
    type: "todo",
    group: "todo"
  },
  "--t5e-prosemirror-dropdown-item-hover-color": {
    type: "todo",
    group: "todo"
  },
  "--t5e-item-info-card-box-shadow-color": {
    type: "todo",
    group: "todo"
  },
  "--t5e-sheet-lock-icon-color": {
    type: "todo",
    group: "todo"
  },
  "--t5e-grid-pane-favorite-icon-color": {
    type: "todo",
    group: "todo"
  },
  "--t5e-settings-dialog-box-shadow-color": {
    type: "todo",
    group: "todo"
  },
  "--t5e-sheet-lock-icon-hover-color": {
    type: "todo",
    group: "todo"
  },
  "--t5e-settings-dialog-border-color": {
    type: "todo",
    group: "todo"
  },
  "--t5e-spell-level-button-border-color": {
    type: "todo",
    group: "todo"
  },
  "--t5e-ability-modifiers-label-text-color": {
    type: "todo",
    group: "todo"
  },
  "--t5e-ability-mod-text-color": {
    type: "todo",
    group: "todo"
  },
  "--t5e-ability-mod-save-text-hover-color": {
    type: "todo",
    group: "todo"
  },
  "--t5e-encumbrance-bar-text-shadow-color": {
    type: "todo",
    group: "todo"
  },
  "--t5e-button-menu-background": {
    type: "todo",
    group: "todo"
  },
  "--t5e-button-menu-hover-color": {
    type: "todo",
    group: "todo"
  },
  "--t5e-button-menu-divider-color": {
    type: "todo",
    group: "todo"
  },
  "--t5e-focus-visible-box-shadow": {
    type: "todo",
    group: "todo"
  },
  "--t5e-button-background": {
    type: "todo",
    group: "todo"
  },
  "--t5e-button-hover-background": {
    type: "todo",
    group: "todo"
  },
  "--t5e-button-disabled-color": {
    type: "todo",
    group: "todo"
  },
  "--t5e-separator-color": {
    type: "todo",
    group: "todo"
  },
  "--t5e-table-header-row-color": {
    type: "todo",
    group: "todo"
  },
  "--t5e-table-header-row-border-color": {
    type: "todo",
    group: "todo"
  },
  "--t5e-tab-strip-border-color": {
    type: "todo",
    group: "todo"
  },
  "--t5e-tabs-background": {
    type: "todo",
    group: "todo"
  },
  "--t5e-active-tab-background": {
    type: "todo",
    group: "todo"
  },
  "--t5e-tab-background": {
    type: "todo",
    group: "todo"
  },
  "--t5e-scrollbar-thumb-color": {
    type: "todo",
    group: "todo"
  },
  "--t5e-scrollbar-track-color": {
    type: "todo",
    group: "todo"
  },
  "--t5e-spell-pip-active-background": {
    type: "todo",
    group: "todo"
  },
  "--t5e-spell-pip-empty-background": {
    type: "todo",
    group: "todo"
  },
  "--t5e-spell-pip-border-color": {
    type: "todo",
    group: "todo"
  },
  "--t5e-switch-slider-color": {
    type: "todo",
    group: "todo"
  }
};
var r = { grad: 0.9, turn: 360, rad: 360 / (2 * Math.PI) }, t = /* @__PURE__ */ __name(function(r2) {
  return typeof r2 == "string" ? r2.length > 0 : typeof r2 == "number";
}, "t"), n = /* @__PURE__ */ __name(function(r2, t2, n2) {
  return t2 === void 0 && (t2 = 0), n2 === void 0 && (n2 = Math.pow(10, t2)), Math.round(n2 * r2) / n2 + 0;
}, "n"), e = /* @__PURE__ */ __name(function(r2, t2, n2) {
  return t2 === void 0 && (t2 = 0), n2 === void 0 && (n2 = 1), r2 > n2 ? n2 : r2 > t2 ? r2 : t2;
}, "e"), u = /* @__PURE__ */ __name(function(r2) {
  return (r2 = isFinite(r2) ? r2 % 360 : 0) > 0 ? r2 : r2 + 360;
}, "u"), a = /* @__PURE__ */ __name(function(r2) {
  return { r: e(r2.r, 0, 255), g: e(r2.g, 0, 255), b: e(r2.b, 0, 255), a: e(r2.a) };
}, "a"), o = /* @__PURE__ */ __name(function(r2) {
  return { r: n(r2.r), g: n(r2.g), b: n(r2.b), a: n(r2.a, 3) };
}, "o"), i = /^#([0-9a-f]{3,8})$/i, s = /* @__PURE__ */ __name(function(r2) {
  var t2 = r2.toString(16);
  return t2.length < 2 ? "0" + t2 : t2;
}, "s"), h = /* @__PURE__ */ __name(function(r2) {
  var t2 = r2.r, n2 = r2.g, e2 = r2.b, u2 = r2.a, a2 = Math.max(t2, n2, e2), o2 = a2 - Math.min(t2, n2, e2), i2 = o2 ? a2 === t2 ? (n2 - e2) / o2 : a2 === n2 ? 2 + (e2 - t2) / o2 : 4 + (t2 - n2) / o2 : 0;
  return { h: 60 * (i2 < 0 ? i2 + 6 : i2), s: a2 ? o2 / a2 * 100 : 0, v: a2 / 255 * 100, a: u2 };
}, "h"), b = /* @__PURE__ */ __name(function(r2) {
  var t2 = r2.h, n2 = r2.s, e2 = r2.v, u2 = r2.a;
  t2 = t2 / 360 * 6, n2 /= 100, e2 /= 100;
  var a2 = Math.floor(t2), o2 = e2 * (1 - n2), i2 = e2 * (1 - (t2 - a2) * n2), s2 = e2 * (1 - (1 - t2 + a2) * n2), h2 = a2 % 6;
  return { r: 255 * [e2, i2, o2, o2, s2, e2][h2], g: 255 * [s2, e2, e2, i2, o2, o2][h2], b: 255 * [o2, o2, s2, e2, e2, i2][h2], a: u2 };
}, "b"), g = /* @__PURE__ */ __name(function(r2) {
  return { h: u(r2.h), s: e(r2.s, 0, 100), l: e(r2.l, 0, 100), a: e(r2.a) };
}, "g"), d = /* @__PURE__ */ __name(function(r2) {
  return { h: n(r2.h), s: n(r2.s), l: n(r2.l), a: n(r2.a, 3) };
}, "d"), f = /* @__PURE__ */ __name(function(r2) {
  return b((n2 = (t2 = r2).s, { h: t2.h, s: (n2 *= ((e2 = t2.l) < 50 ? e2 : 100 - e2) / 100) > 0 ? 2 * n2 / (e2 + n2) * 100 : 0, v: e2 + n2, a: t2.a }));
  var t2, n2, e2;
}, "f"), c = /* @__PURE__ */ __name(function(r2) {
  return { h: (t2 = h(r2)).h, s: (u2 = (200 - (n2 = t2.s)) * (e2 = t2.v) / 100) > 0 && u2 < 200 ? n2 * e2 / 100 / (u2 <= 100 ? u2 : 200 - u2) * 100 : 0, l: u2 / 2, a: t2.a };
  var t2, n2, e2, u2;
}, "c"), l = /^hsla?\(\s*([+-]?\d*\.?\d+)(deg|rad|grad|turn)?\s*,\s*([+-]?\d*\.?\d+)%\s*,\s*([+-]?\d*\.?\d+)%\s*(?:,\s*([+-]?\d*\.?\d+)(%)?\s*)?\)$/i, p = /^hsla?\(\s*([+-]?\d*\.?\d+)(deg|rad|grad|turn)?\s+([+-]?\d*\.?\d+)%\s+([+-]?\d*\.?\d+)%\s*(?:\/\s*([+-]?\d*\.?\d+)(%)?\s*)?\)$/i, v = /^rgba?\(\s*([+-]?\d*\.?\d+)(%)?\s*,\s*([+-]?\d*\.?\d+)(%)?\s*,\s*([+-]?\d*\.?\d+)(%)?\s*(?:,\s*([+-]?\d*\.?\d+)(%)?\s*)?\)$/i, m = /^rgba?\(\s*([+-]?\d*\.?\d+)(%)?\s+([+-]?\d*\.?\d+)(%)?\s+([+-]?\d*\.?\d+)(%)?\s*(?:\/\s*([+-]?\d*\.?\d+)(%)?\s*)?\)$/i, y = { string: [[function(r2) {
  var t2 = i.exec(r2);
  return t2 ? (r2 = t2[1]).length <= 4 ? { r: parseInt(r2[0] + r2[0], 16), g: parseInt(r2[1] + r2[1], 16), b: parseInt(r2[2] + r2[2], 16), a: r2.length === 4 ? n(parseInt(r2[3] + r2[3], 16) / 255, 2) : 1 } : r2.length === 6 || r2.length === 8 ? { r: parseInt(r2.substr(0, 2), 16), g: parseInt(r2.substr(2, 2), 16), b: parseInt(r2.substr(4, 2), 16), a: r2.length === 8 ? n(parseInt(r2.substr(6, 2), 16) / 255, 2) : 1 } : null : null;
}, "hex"], [function(r2) {
  var t2 = v.exec(r2) || m.exec(r2);
  return t2 ? t2[2] !== t2[4] || t2[4] !== t2[6] ? null : a({ r: Number(t2[1]) / (t2[2] ? 100 / 255 : 1), g: Number(t2[3]) / (t2[4] ? 100 / 255 : 1), b: Number(t2[5]) / (t2[6] ? 100 / 255 : 1), a: t2[7] === void 0 ? 1 : Number(t2[7]) / (t2[8] ? 100 : 1) }) : null;
}, "rgb"], [function(t2) {
  var n2 = l.exec(t2) || p.exec(t2);
  if (!n2) return null;
  var e2, u2, a2 = g({ h: (e2 = n2[1], u2 = n2[2], u2 === void 0 && (u2 = "deg"), Number(e2) * (r[u2] || 1)), s: Number(n2[3]), l: Number(n2[4]), a: n2[5] === void 0 ? 1 : Number(n2[5]) / (n2[6] ? 100 : 1) });
  return f(a2);
}, "hsl"]], object: [[function(r2) {
  var n2 = r2.r, e2 = r2.g, u2 = r2.b, o2 = r2.a, i2 = o2 === void 0 ? 1 : o2;
  return t(n2) && t(e2) && t(u2) ? a({ r: Number(n2), g: Number(e2), b: Number(u2), a: Number(i2) }) : null;
}, "rgb"], [function(r2) {
  var n2 = r2.h, e2 = r2.s, u2 = r2.l, a2 = r2.a, o2 = a2 === void 0 ? 1 : a2;
  if (!t(n2) || !t(e2) || !t(u2)) return null;
  var i2 = g({ h: Number(n2), s: Number(e2), l: Number(u2), a: Number(o2) });
  return f(i2);
}, "hsl"], [function(r2) {
  var n2 = r2.h, a2 = r2.s, o2 = r2.v, i2 = r2.a, s2 = i2 === void 0 ? 1 : i2;
  if (!t(n2) || !t(a2) || !t(o2)) return null;
  var h2 = function(r3) {
    return { h: u(r3.h), s: e(r3.s, 0, 100), v: e(r3.v, 0, 100), a: e(r3.a) };
  }({ h: Number(n2), s: Number(a2), v: Number(o2), a: Number(s2) });
  return b(h2);
}, "hsv"]] }, N = /* @__PURE__ */ __name(function(r2, t2) {
  for (var n2 = 0; n2 < t2.length; n2++) {
    var e2 = t2[n2][0](r2);
    if (e2) return [e2, t2[n2][1]];
  }
  return [null, void 0];
}, "N"), x = /* @__PURE__ */ __name(function(r2) {
  return typeof r2 == "string" ? N(r2.trim(), y.string) : typeof r2 == "object" && r2 !== null ? N(r2, y.object) : [null, void 0];
}, "x"), M = /* @__PURE__ */ __name(function(r2, t2) {
  var n2 = c(r2);
  return { h: n2.h, s: e(n2.s + 100 * t2, 0, 100), l: n2.l, a: n2.a };
}, "M"), H = /* @__PURE__ */ __name(function(r2) {
  return (299 * r2.r + 587 * r2.g + 114 * r2.b) / 1e3 / 255;
}, "H"), $ = /* @__PURE__ */ __name(function(r2, t2) {
  var n2 = c(r2);
  return { h: n2.h, s: n2.s, l: e(n2.l + 100 * t2, 0, 100), a: n2.a };
}, "$"), j = function() {
  function r2(r3) {
    this.parsed = x(r3)[0], this.rgba = this.parsed || { r: 0, g: 0, b: 0, a: 1 };
  }
  return __name(r2, "r"), r2.prototype.isValid = function() {
    return this.parsed !== null;
  }, r2.prototype.brightness = function() {
    return n(H(this.rgba), 2);
  }, r2.prototype.isDark = function() {
    return H(this.rgba) < 0.5;
  }, r2.prototype.isLight = function() {
    return H(this.rgba) >= 0.5;
  }, r2.prototype.toHex = function() {
    return r3 = o(this.rgba), t2 = r3.r, e2 = r3.g, u2 = r3.b, i2 = (a2 = r3.a) < 1 ? s(n(255 * a2)) : "", "#" + s(t2) + s(e2) + s(u2) + i2;
    var r3, t2, e2, u2, a2, i2;
  }, r2.prototype.toRgb = function() {
    return o(this.rgba);
  }, r2.prototype.toRgbString = function() {
    return r3 = o(this.rgba), t2 = r3.r, n2 = r3.g, e2 = r3.b, (u2 = r3.a) < 1 ? "rgba(" + t2 + ", " + n2 + ", " + e2 + ", " + u2 + ")" : "rgb(" + t2 + ", " + n2 + ", " + e2 + ")";
    var r3, t2, n2, e2, u2;
  }, r2.prototype.toHsl = function() {
    return d(c(this.rgba));
  }, r2.prototype.toHslString = function() {
    return r3 = d(c(this.rgba)), t2 = r3.h, n2 = r3.s, e2 = r3.l, (u2 = r3.a) < 1 ? "hsla(" + t2 + ", " + n2 + "%, " + e2 + "%, " + u2 + ")" : "hsl(" + t2 + ", " + n2 + "%, " + e2 + "%)";
    var r3, t2, n2, e2, u2;
  }, r2.prototype.toHsv = function() {
    return r3 = h(this.rgba), { h: n(r3.h), s: n(r3.s), v: n(r3.v), a: n(r3.a, 3) };
    var r3;
  }, r2.prototype.invert = function() {
    return w({ r: 255 - (r3 = this.rgba).r, g: 255 - r3.g, b: 255 - r3.b, a: r3.a });
    var r3;
  }, r2.prototype.saturate = function(r3) {
    return r3 === void 0 && (r3 = 0.1), w(M(this.rgba, r3));
  }, r2.prototype.desaturate = function(r3) {
    return r3 === void 0 && (r3 = 0.1), w(M(this.rgba, -r3));
  }, r2.prototype.grayscale = function() {
    return w(M(this.rgba, -1));
  }, r2.prototype.lighten = function(r3) {
    return r3 === void 0 && (r3 = 0.1), w($(this.rgba, r3));
  }, r2.prototype.darken = function(r3) {
    return r3 === void 0 && (r3 = 0.1), w($(this.rgba, -r3));
  }, r2.prototype.rotate = function(r3) {
    return r3 === void 0 && (r3 = 15), this.hue(this.hue() + r3);
  }, r2.prototype.alpha = function(r3) {
    return typeof r3 == "number" ? w({ r: (t2 = this.rgba).r, g: t2.g, b: t2.b, a: r3 }) : n(this.rgba.a, 3);
    var t2;
  }, r2.prototype.hue = function(r3) {
    var t2 = c(this.rgba);
    return typeof r3 == "number" ? w({ h: r3, s: t2.s, l: t2.l, a: t2.a }) : n(t2.h);
  }, r2.prototype.isEqual = function(r3) {
    return this.toHex() === w(r3).toHex();
  }, r2;
}(), w = /* @__PURE__ */ __name(function(r2) {
  return r2 instanceof j ? r2 : new j(r2);
}, "w");
function applyTheme(theme, colorPickerEnabledOverride = null) {
  try {
    const styleTagId = "tidy5e-sheet-theme";
    let existingThemeStyle = document.getElementById(styleTagId);
    existingThemeStyle && existingThemeStyle.remove(), (colorPickerEnabledOverride === null && SettingsProvider.settings.colorPickerEnabled.get() || colorPickerEnabledOverride) && (theme = overrideColorPickerSettings(theme)), document.head.insertAdjacentHTML(
      "beforeend",
      `
    <style id="${styleTagId}">
      :root {
        ${Object.entries(theme.variables).filter(([variable]) => variable in themeVariables).map(([variable, value]) => `${variable}: ${value};`).join(`
`)}
      }
    </style>
    `
    );
  } catch (e2) {
    console.error(e2), debug(
      "Unable to apply Tidy 5e style tag; falling back to root style properties."
    ), Object.keys(themeVariables).forEach((variable) => {
      document.documentElement.style.setProperty(
        variable,
        theme.variables[variable] ?? null
      );
    });
  }
}
__name(applyTheme, "applyTheme");
function overrideColorPickerSettings(theme) {
  const overriddenTheme = structuredClone(theme), themeableColors = getThemeableColors();
  for (let color of themeableColors)
    overriddenTheme.variables[color.cssVariable] = SettingsProvider.settings[color.key].get()?.toString();
  return overriddenTheme;
}
__name(overrideColorPickerSettings, "overrideColorPickerSettings");
function applyCurrentTheme(colorPickerEnabledOverride = null) {
  const currentTheme = SettingsProvider.settings.colorScheme.get();
  SettingsProvider.settings.colorScheme.options.onChange(
    currentTheme,
    colorPickerEnabledOverride
  );
}
__name(applyCurrentTheme, "applyCurrentTheme");
function getThemeableColors() {
  return Object.entries(SettingsProvider.settings).filter(([, value]) => "representsCssVariable" in value).map(([key, value]) => ({
    key,
    name: value.options.name,
    hint: "hint" in value.options ? value.options.hint : "",
    cssVariable: "representsCssVariable" in value ? value.representsCssVariable : ""
  }));
}
__name(getThemeableColors, "getThemeableColors");
function getThemeOrDefault(themeId) {
  return themeId === CONSTANTS.THEME_ID_DEFAULT && (themeId = SettingsProvider.settings.defaultTheme.get()), {
    light: defaultLightTheme,
    dark: defaultDarkTheme
    // TODO: Aggregate all other available themes
  }[themeId] ?? defaultLightTheme;
}
__name(getThemeOrDefault, "getThemeOrDefault");
function trySetRootCssVariable(cssVariable, value, colorPickerEnabled) {
  colorPickerEnabled && document.documentElement.style.setProperty(cssVariable, value);
}
__name(trySetRootCssVariable, "trySetRootCssVariable");
function clearTidy5eRootCssVariables() {
  Object.keys(themeVariables).forEach(
    (key) => document.documentElement.style.removeProperty(key)
  );
}
__name(clearTidy5eRootCssVariables, "clearTidy5eRootCssVariables");
function colorToHexaString(color) {
  return color?.isValid() ? color.toHex() : "";
}
__name(colorToHexaString, "colorToHexaString");
function settingValueToHexaString(value) {
  const result = colorToHexaString(new j(value.toString()));
  if (result !== "")
    return {
      original: value?.toString() ?? "",
      hexa: result,
      parsed: !0
    };
  var ctx = document.createElement("canvas").getContext("2d");
  return ctx ? (ctx.fillStyle = value?.toString() ?? "", {
    original: value,
    hexa: ctx.fillStyle,
    parsed: !0
  }) : {
    original: value,
    parsed: !0
  };
}
__name(settingValueToHexaString, "settingValueToHexaString");
function extractSettingsUpdateDeltaFromTheme(theme, themeableColors) {
  return Object.keys(theme.variables).reduce(
    (prev, key) => {
      const themeableColor = themeableColors.find((c2) => c2.cssVariable === key);
      return themeableColor && (prev[themeableColor.key] = theme.variables[key]), prev;
    },
    {}
  );
}
__name(extractSettingsUpdateDeltaFromTheme, "extractSettingsUpdateDeltaFromTheme");
function validateImportFile(theme) {
  return theme.version === 1 && typeof theme.variables == "object";
}
__name(validateImportFile, "validateImportFile");
function getInventoryItemThemeBackground(item) {
  if (item?.system?.equipped)
    return "--t5e-equipped-background";
}
__name(getInventoryItemThemeBackground, "getInventoryItemThemeBackground");
function getSpellItemThemeBackground(spell) {
  if (spell.system.preparation.mode === CONSTANTS.SPELL_PREPARATION_MODE_INNATE)
    return "--t5e-innate-background";
  if (spell.system.preparation.mode === CONSTANTS.SPELL_PREPARATION_MODE_RITUAL)
    return "--t5e-ritual-only-background";
  if (spell.system.preparation.mode === CONSTANTS.SPELL_PREPARATION_MODE_ATWILL)
    return "--t5e-atwill-background";
  if (spell.system.preparation.mode === CONSTANTS.SPELL_PREPARATION_MODE_PACT)
    return "--t5e-pact-background";
  if (spell.system.preparation.mode === CONSTANTS.SPELL_PREPARATION_MODE_ALWAYS)
    return "--t5e-alwaysprepared-background";
  if (spell.system.preparation.prepared)
    return "--t5e-prepared-background";
}
__name(getSpellItemThemeBackground, "getSpellItemThemeBackground");
class SvelteFormApplicationBase extends FormApplication {
  static {
    __name(this, "SvelteFormApplicationBase");
  }
  component;
  staticExtraApplicationClasses = [];
  constructor(...args) {
    super(...args);
  }
  static get defaultOptions() {
    return {
      ...super.defaultOptions,
      classes: [
        CONSTANTS.MODULE_ID,
        "application-shell",
        "app-v1",
        CONSTANTS.SHEET_LAYOUT_CLASSIC
      ],
      submitOnClose: !1,
      closeOnSubmit: !1,
      minimizable: !0,
      popOut: !0,
      resizable: !0
    };
  }
  get template() {
    return FoundryAdapter.getTemplate("empty-form-template.hbs");
  }
  activateListeners(html2) {
    const node = html2.get(0);
    this.refreshContext(), this.component = this.createComponent(node);
  }
  close(options = {}) {
    return this.component && unmount(this.component), this.component = void 0, super.close(options);
  }
  render(force = !1, ...args) {
    return force ? (this.component && unmount(this.component), super.render(force, ...args), this) : (this.refreshContext(), this);
  }
  refreshContext() {
  }
  async _updateObject() {
  }
}
const PUBLIC_VERSION = "5";
typeof window < "u" && (window.__svelte ||= { v: /* @__PURE__ */ new Set() }).v.add(PUBLIC_VERSION);
function getSheetContext() {
  return getContext(CONSTANTS.SVELTE_CONTEXT.CONTEXT).data;
}
__name(getSheetContext, "getSheetContext");
function getCharacterSheetContext() {
  return getSheetContext();
}
__name(getCharacterSheetContext, "getCharacterSheetContext");
function getNpcSheetContext() {
  return getSheetContext();
}
__name(getNpcSheetContext, "getNpcSheetContext");
function getVehicleSheetContext() {
  return getSheetContext();
}
__name(getVehicleSheetContext, "getVehicleSheetContext");
function getGroupSheetClassicContext() {
  return getSheetContext();
}
__name(getGroupSheetClassicContext, "getGroupSheetClassicContext");
function getItemSheetContext() {
  return getSheetContext();
}
__name(getItemSheetContext, "getItemSheetContext");
function getContainerSheetClassicContext() {
  return getSheetContext();
}
__name(getContainerSheetClassicContext, "getContainerSheetClassicContext");
function getContainerSheetHightouchContext() {
  return getSheetContext();
}
__name(getContainerSheetHightouchContext, "getContainerSheetHightouchContext");
var on_click$1z = /* @__PURE__ */ __name((_, selectTab, tab) => selectTab(get(tab)), "on_click$1z"), root_2$19 = /* @__PURE__ */ template('<a role="tab"> </a>'), root$45 = /* @__PURE__ */ template("<nav><!> <!></nav>");
function Tabs($$anchor, $$props) {
  push($$props, !0);
  let selectedTabId = prop($$props, "selectedTabId", 15, void 0), cssClass = prop($$props, "cssClass", 3, ""), orientation = prop($$props, "orientation", 3, "horizontal");
  const onTabSelectedContextFn = getContext(CONSTANTS.SVELTE_CONTEXT.ON_TAB_SELECTED);
  let nav;
  function selectTab(tab) {
    $$props.sheet?.element && !FoundryAdapter.onTabSelecting($$props.sheet, tab.id) || (selectedTabId(tab.id), onTabSelectedContextFn?.(tab.id), $$props.onTabSelected?.(tab));
  }
  __name(selectTab, "selectTab");
  function onKeyDown(ev, i2) {
    switch (ev.key) {
      case "ArrowRight":
      case "ArrowDown":
        const nextTab = $$props.tabs[(i2 + 1) % $$props.tabs.length];
        selectTab(nextTab), setTimeout(() => {
          nav.querySelector(`[data-tab-id='${nextTab.id}']`)?.focus();
        });
        break;
      case "ArrowLeft":
      case "ArrowUp":
        const previousTab = $$props.tabs.at(i2 - 1);
        previousTab && (selectTab(previousTab), setTimeout(() => {
          nav.querySelector(`[data-tab-id='${previousTab.id}']`)?.focus();
        }));
        break;
    }
  }
  __name(onKeyDown, "onKeyDown");
  const localize = FoundryAdapter.localize, currentTabId = getContext(CONSTANTS.SVELTE_CONTEXT.CURRENT_TAB_ID);
  let mounted = state(!1);
  onMount(() => {
    const initialTab = $$props.tabs.find((t2) => t2.id === currentTabId);
    initialTab && selectTab(initialTab), set(mounted, !0);
  }), user_effect(() => {
    get(mounted) && !$$props.tabs.some((tab) => tab.id === selectedTabId()) && selectTab($$props.tabs[0]);
  });
  var nav_1 = root$45(), node = child(nav_1);
  {
    var consequent = /* @__PURE__ */ __name(($$anchor2) => {
      var fragment = comment(), node_1 = first_child(fragment);
      each(node_1, 19, () => $$props.tabs, (tab) => tab.id, ($$anchor3, tab, i2) => {
        var a2 = root_2$19();
        a2.__click = [on_click$1z, selectTab, tab], a2.__keydown = (ev) => onKeyDown(ev, get(i2));
        var text2 = child(a2);
        template_effect(() => set_text(text2, localize(get(tab).title))), template_effect(() => {
          set_class(a2, clsx(CONSTANTS.TAB_OPTION_CLASS)), set_attribute(a2, "data-tab-id", get(tab).id), toggle_class(a2, "active", get(tab).id === selectedTabId()), toggle_class(a2, "first-tab", get(i2) === 0), toggle_class(a2, "no-border-on-last-tab", !$$props.tabEnd && get(i2) === $$props.tabs.length - 1);
        }), append($$anchor3, a2);
      }), append($$anchor2, fragment);
    }, "consequent");
    if_block(node, ($$render) => {
      $$props.tabs.length > 1 && $$render(consequent);
    });
  }
  var node_2 = sibling(node, 2);
  snippet(node_2, () => $$props.tabEnd ?? noop), bind_this(nav_1, ($$value) => nav = $$value, () => nav), template_effect(() => {
    set_class(nav_1, `tidy-tabs ${cssClass() ?? ""}`), toggle_class(nav_1, "vertical", orientation() === "vertical");
  }), append($$anchor, nav_1), pop();
}
__name(Tabs, "Tabs");
delegate(["click", "keydown"]);
function declareLocation(...segments) {
  if (segments.length === 0)
    return;
  const location = getContext(CONSTANTS.SVELTE_CONTEXT.LOCATION) ?? "";
  setContext(
    CONSTANTS.SVELTE_CONTEXT.LOCATION,
    [location, ...segments].join("/")
  );
}
__name(declareLocation, "declareLocation");
var root$44 = /* @__PURE__ */ template("<div></div>");
function TabContent($$anchor, $$props) {
  push($$props, !0);
  let cssClass = prop($$props, "cssClass", 3, "");
  const context = /* @__PURE__ */ derived(getSheetContext), allContexts = getAllContexts();
  declareLocation("tab", $$props.tab.id), setContext(CONSTANTS.SVELTE_CONTEXT.TAB_ID, $$props.tab.id);
  let useCoreListenersClass = /* @__PURE__ */ derived(() => $$props.tab.activateDefaultSheetListeners ? CONSTANTS.CLASS_TIDY_USE_CORE_LISTENERS : ""), tidyTab;
  onMount(() => {
    if ($$props.tab.content.type === "svelte")
      try {
        const props = $$props.tab.content.getProps?.(get(context)) ?? {}, tabComponentContext = $$props.tab.content.getContext?.(allContexts) ?? allContexts, svelteTabComponent = mount($$props.tab.content.component, {
          target: tidyTab,
          context: tabComponentContext,
          props
        });
        return () => {
          unmount(svelteTabComponent);
        };
      } catch (e2) {
        error("Failed to render svelte tab", !1, e2);
      }
  });
  var div = root$44();
  bind_this(div, ($$value) => tidyTab = $$value, () => tidyTab), template_effect(() => {
    set_class(div, `tidy-tab ${$$props.tab.id ?? ""} ${cssClass() ?? ""} ${$$props.tab.content.cssClass ?? "" ?? ""} ${get(useCoreListenersClass) ?? ""}`), set_attribute(div, "data-tab-contents-for", $$props.tab.id), toggle_class(div, "active", $$props.active);
  }), append($$anchor, div), pop();
}
__name(TabContent, "TabContent");
function TabContents($$anchor, $$props) {
  let cssClass = prop($$props, "cssClass", 3, "");
  var fragment = comment(), node = first_child(fragment);
  each(node, 17, () => $$props.tabs, (tab) => tab.id, ($$anchor2, tab) => {
    var active = /* @__PURE__ */ derived(() => $$props.selectedTabId === get(tab).id);
    TabContent($$anchor2, {
      get active() {
        return get(active);
      },
      get tab() {
        return get(tab);
      },
      get cssClass() {
        return cssClass();
      }
    });
  }), append($$anchor, fragment);
}
__name(TabContents, "TabContents");
enable_legacy_mode_flag();
var root$43 = /* @__PURE__ */ template('<article class="setting"><input type="checkbox"> <div class="description"><label> </label> <p class="tidy5e-notes"> </p></div></article>');
function CheckboxSetting($$anchor, $$props) {
  push($$props, !0);
  let value = prop($$props, "value", 15);
  const appId = getContext(CONSTANTS.SVELTE_CONTEXT.APP_ID), localize = FoundryAdapter.localize;
  var article = root$43(), input = child(article), div = sibling(input, 2), label = child(div), text2 = child(label);
  template_effect(() => set_text(text2, localize($$props.name)));
  var p2 = sibling(label, 2), text_1 = child(p2);
  template_effect(() => set_text(text_1, localize($$props.hint))), template_effect(() => {
    set_attribute(input, "id", `${$$props.id ?? ""}-${appId ?? ""}`), set_attribute(label, "for", `${$$props.id ?? ""}-${appId ?? ""}`);
  }), bind_checked(input, value), append($$anchor, article), pop();
}
__name(CheckboxSetting, "CheckboxSetting");
var root$42 = /* @__PURE__ */ template("<h2> </h2> <!> <!> <!> <!> <!> <!> <!> <!> <!> <!> <!> <!> <!> <h3> </h3> <!> <!>", 1);
function PlayerSettingsTab($$anchor, $$props) {
  push($$props, !1);
  let context = mutable_state(getContext(CONSTANTS.SVELTE_CONTEXT.CONTEXT));
  const localize = FoundryAdapter.localize;
  init();
  var fragment = root$42(), h2 = first_child(fragment), text2 = child(h2);
  template_effect(() => set_text(text2, localize("TIDY5E.UserSettings.TabPlayers.header")));
  var node = sibling(h2, 2);
  CheckboxSetting(node, {
    get name() {
      return SettingsProvider.settings.useClassicControlsForCharacter.options.name;
    },
    get hint() {
      return SettingsProvider.settings.useClassicControlsForCharacter.options.hint;
    },
    id: "useClassicControlsForCharacter",
    get value() {
      return get(context).settings.useClassicControlsForCharacter;
    },
    set value($$value) {
      mutate(context, get(context).settings.useClassicControlsForCharacter = $$value);
    },
    $$legacy: !0
  });
  var node_1 = sibling(node, 2);
  CheckboxSetting(node_1, {
    get name() {
      return SettingsProvider.settings.showClassList.options.name;
    },
    get hint() {
      return SettingsProvider.settings.showClassList.options.hint;
    },
    id: "showClassList",
    get value() {
      return get(context).settings.showClassList;
    },
    set value($$value) {
      mutate(context, get(context).settings.showClassList = $$value);
    },
    $$legacy: !0
  });
  var node_2 = sibling(node_1, 2);
  CheckboxSetting(node_2, {
    get name() {
      return SettingsProvider.settings.animateInspiration.options.name;
    },
    get hint() {
      return SettingsProvider.settings.animateInspiration.options.hint;
    },
    id: "animateInspiration",
    get value() {
      return get(context).settings.animateInspiration;
    },
    set value($$value) {
      mutate(context, get(context).settings.animateInspiration = $$value);
    },
    $$legacy: !0
  });
  var node_3 = sibling(node_2, 2);
  CheckboxSetting(node_3, {
    get name() {
      return SettingsProvider.settings.hideIfZero.options.name;
    },
    get hint() {
      return SettingsProvider.settings.hideIfZero.options.hint;
    },
    id: "hideIfZero",
    get value() {
      return get(context).settings.hideIfZero;
    },
    set value($$value) {
      mutate(context, get(context).settings.hideIfZero = $$value);
    },
    $$legacy: !0
  });
  var node_4 = sibling(node_3, 2);
  CheckboxSetting(node_4, {
    get name() {
      return SettingsProvider.settings.showInspirationOnHover.options.name;
    },
    get hint() {
      return SettingsProvider.settings.showInspirationOnHover.options.hint;
    },
    id: "showInspirationOnHover",
    get value() {
      return get(context).settings.showInspirationOnHover;
    },
    set value($$value) {
      mutate(context, get(context).settings.showInspirationOnHover = $$value);
    },
    $$legacy: !0
  });
  var node_5 = sibling(node_4, 2);
  CheckboxSetting(node_5, {
    get name() {
      return SettingsProvider.settings.showExhaustionOnHover.options.name;
    },
    get hint() {
      return SettingsProvider.settings.showExhaustionOnHover.options.hint;
    },
    id: "showExhaustionOnHover",
    get value() {
      return get(context).settings.showExhaustionOnHover;
    },
    set value($$value) {
      mutate(context, get(context).settings.showExhaustionOnHover = $$value);
    },
    $$legacy: !0
  });
  var node_6 = sibling(node_5, 2);
  CheckboxSetting(node_6, {
    get name() {
      return SettingsProvider.settings.useHpBar.options.name;
    },
    get hint() {
      return SettingsProvider.settings.useHpBar.options.hint;
    },
    id: "useHpBar",
    get value() {
      return get(context).settings.useHpBar;
    },
    set value($$value) {
      mutate(context, get(context).settings.useHpBar = $$value);
    },
    $$legacy: !0
  });
  var node_7 = sibling(node_6, 2);
  CheckboxSetting(node_7, {
    get name() {
      return SettingsProvider.settings.useHpOverlay.options.name;
    },
    get hint() {
      return SettingsProvider.settings.useHpOverlay.options.hint;
    },
    id: "useHpOverlay",
    get value() {
      return get(context).settings.useHpOverlay;
    },
    set value($$value) {
      mutate(context, get(context).settings.useHpOverlay = $$value);
    },
    $$legacy: !0
  });
  var node_8 = sibling(node_7, 2);
  CheckboxSetting(node_8, {
    get name() {
      return SettingsProvider.settings.toggleEmptyCharacterSkills.options.name;
    },
    get hint() {
      return SettingsProvider.settings.toggleEmptyCharacterSkills.options.hint;
    },
    id: "toggleEmptyCharacterSkills",
    get value() {
      return get(context).settings.toggleEmptyCharacterSkills;
    },
    set value($$value) {
      mutate(context, get(context).settings.toggleEmptyCharacterSkills = $$value);
    },
    $$legacy: !0
  });
  var node_9 = sibling(node_8, 2);
  CheckboxSetting(node_9, {
    get name() {
      return SettingsProvider.settings.toggleEmptyCharacterTraits.options.name;
    },
    get hint() {
      return SettingsProvider.settings.toggleEmptyCharacterTraits.options.hint;
    },
    id: "toggleEmptyCharacterTraits",
    get value() {
      return get(context).settings.toggleEmptyCharacterTraits;
    },
    set value($$value) {
      mutate(context, get(context).settings.toggleEmptyCharacterTraits = $$value);
    },
    $$legacy: !0
  });
  var node_10 = sibling(node_9, 2);
  CheckboxSetting(node_10, {
    get name() {
      return SettingsProvider.settings.moveTraitsBelowCharacterResources.options.name;
    },
    get hint() {
      return SettingsProvider.settings.moveTraitsBelowCharacterResources.options.hint;
    },
    id: "moveTraitsBelowCharacterResources",
    get value() {
      return get(context).settings.moveTraitsBelowCharacterResources;
    },
    set value($$value) {
      mutate(context, get(context).settings.moveTraitsBelowCharacterResources = $$value);
    },
    $$legacy: !0
  });
  var node_11 = sibling(node_10, 2);
  CheckboxSetting(node_11, {
    get name() {
      return SettingsProvider.settings.showEquippedAmmoOnly.options.name;
    },
    get hint() {
      return SettingsProvider.settings.showEquippedAmmoOnly.options.hint;
    },
    id: "showEquippedAmmoOnly",
    get value() {
      return get(context).settings.showEquippedAmmoOnly;
    },
    set value($$value) {
      mutate(context, get(context).settings.showEquippedAmmoOnly = $$value);
    },
    $$legacy: !0
  });
  var node_12 = sibling(node_11, 2);
  CheckboxSetting(node_12, {
    get name() {
      return SettingsProvider.settings.useContextMenu.options.name;
    },
    get hint() {
      return SettingsProvider.settings.useContextMenu.options.hint;
    },
    id: "useContextMenu",
    get value() {
      return get(context).settings.useContextMenu;
    },
    set value($$value) {
      mutate(context, get(context).settings.useContextMenu = $$value);
    },
    $$legacy: !0
  });
  var h3 = sibling(node_12, 2), text_1 = child(h3);
  template_effect(() => set_text(text_1, localize("TIDY5E.Settings.MulticlassSpellbookFilterLabel")));
  var node_13 = sibling(h3, 2);
  CheckboxSetting(node_13, {
    get name() {
      return SettingsProvider.settings.useMulticlassSpellbookFilter.options.name;
    },
    get hint() {
      return SettingsProvider.settings.useMulticlassSpellbookFilter.options.hint;
    },
    id: "useMulticlassSpellbookFilter",
    get value() {
      return get(context).settings.useMulticlassSpellbookFilter;
    },
    set value($$value) {
      mutate(context, get(context).settings.useMulticlassSpellbookFilter = $$value);
    },
    $$legacy: !0
  });
  var node_14 = sibling(node_13, 2);
  CheckboxSetting(node_14, {
    get name() {
      return SettingsProvider.settings.useSpellClassFilterIcons.options.name;
    },
    get hint() {
      return SettingsProvider.settings.useSpellClassFilterIcons.options.hint;
    },
    id: "useSpellClassFilterIcons",
    get value() {
      return get(context).settings.useSpellClassFilterIcons;
    },
    set value($$value) {
      mutate(context, get(context).settings.useSpellClassFilterIcons = $$value);
    },
    $$legacy: !0
  }), append($$anchor, fragment), pop();
}
__name(PlayerSettingsTab, "PlayerSettingsTab");
var root$41 = /* @__PURE__ */ template("<h2> </h2> <!> <!> <!> <!> <!> <!> <!>", 1);
function NpcSettingsTab($$anchor, $$props) {
  push($$props, !1);
  let context = mutable_state(getContext(CONSTANTS.SVELTE_CONTEXT.CONTEXT));
  const localize = FoundryAdapter.localize;
  init();
  var fragment = root$41(), h2 = first_child(fragment), text2 = child(h2);
  template_effect(() => set_text(text2, localize("TIDY5E.UserSettings.TabNPCs.header")));
  var node = sibling(h2, 2);
  CheckboxSetting(node, {
    get name() {
      return SettingsProvider.settings.useClassicControlsForNpc.options.name;
    },
    get hint() {
      return SettingsProvider.settings.useClassicControlsForNpc.options.hint;
    },
    id: "useClassicControlsForNpc",
    get value() {
      return get(context).settings.useClassicControlsForNpc;
    },
    set value($$value) {
      mutate(context, get(context).settings.useClassicControlsForNpc = $$value);
    },
    $$legacy: !0
  });
  var node_1 = sibling(node, 2);
  CheckboxSetting(node_1, {
    get name() {
      return SettingsProvider.settings.useHpBarNpc.options.name;
    },
    get hint() {
      return SettingsProvider.settings.useHpBarNpc.options.hint;
    },
    id: "useHpBarNpc",
    get value() {
      return get(context).settings.useHpBarNpc;
    },
    set value($$value) {
      mutate(context, get(context).settings.useHpBarNpc = $$value);
    },
    $$legacy: !0
  });
  var node_2 = sibling(node_1, 2);
  CheckboxSetting(node_2, {
    get name() {
      return SettingsProvider.settings.useHpOverlayNpc.options.name;
    },
    get hint() {
      return SettingsProvider.settings.useHpOverlayNpc.options.hint;
    },
    id: "useHpOverlayNpc",
    get value() {
      return get(context).settings.useHpOverlayNpc;
    },
    set value($$value) {
      mutate(context, get(context).settings.useHpOverlayNpc = $$value);
    },
    $$legacy: !0
  });
  var node_3 = sibling(node_2, 2);
  CheckboxSetting(node_3, {
    get name() {
      return SettingsProvider.settings.alwaysShowNpcTraits.options.name;
    },
    get hint() {
      return SettingsProvider.settings.alwaysShowNpcTraits.options.hint;
    },
    id: "alwaysShowNpcTraits",
    get value() {
      return get(context).settings.alwaysShowNpcTraits;
    },
    set value($$value) {
      mutate(context, get(context).settings.alwaysShowNpcTraits = $$value);
    },
    $$legacy: !0
  });
  var node_4 = sibling(node_3, 2);
  CheckboxSetting(node_4, {
    get name() {
      return SettingsProvider.settings.moveTraitsBelowNpcResources.options.name;
    },
    get hint() {
      return SettingsProvider.settings.moveTraitsBelowNpcResources.options.hint;
    },
    id: "moveTraitsBelowNpcResources",
    get value() {
      return get(context).settings.moveTraitsBelowNpcResources;
    },
    set value($$value) {
      mutate(context, get(context).settings.moveTraitsBelowNpcResources = $$value);
    },
    $$legacy: !0
  });
  var node_5 = sibling(node_4, 2);
  CheckboxSetting(node_5, {
    get name() {
      return SettingsProvider.settings.alwaysShowNpcSkills.options.name;
    },
    get hint() {
      return SettingsProvider.settings.alwaysShowNpcSkills.options.hint;
    },
    id: "alwaysShowNpcSkills",
    get value() {
      return get(context).settings.alwaysShowNpcSkills;
    },
    set value($$value) {
      mutate(context, get(context).settings.alwaysShowNpcSkills = $$value);
    },
    $$legacy: !0
  });
  var node_6 = sibling(node_5, 2);
  CheckboxSetting(node_6, {
    get name() {
      return SettingsProvider.settings.showSpellbookTabNpc.options.name;
    },
    get hint() {
      return SettingsProvider.settings.showSpellbookTabNpc.options.hint;
    },
    id: "showSpellbookTabNpc",
    get value() {
      return get(context).settings.showSpellbookTabNpc;
    },
    set value($$value) {
      mutate(context, get(context).settings.showSpellbookTabNpc = $$value);
    },
    $$legacy: !0
  }), append($$anchor, fragment), pop();
}
__name(NpcSettingsTab, "NpcSettingsTab");
var root$40 = /* @__PURE__ */ template("<h2> </h2> <!> <!> <!>", 1);
function VehicleSettingsTab($$anchor, $$props) {
  push($$props, !1);
  let context = mutable_state(getContext(CONSTANTS.SVELTE_CONTEXT.CONTEXT));
  const localize = FoundryAdapter.localize;
  init();
  var fragment = root$40(), h2 = first_child(fragment), text2 = child(h2);
  template_effect(() => set_text(text2, localize("TIDY5E.UserSettings.TabVehicles.header")));
  var node = sibling(h2, 2);
  CheckboxSetting(node, {
    get name() {
      return SettingsProvider.settings.useClassicControlsForVehicle.options.name;
    },
    get hint() {
      return SettingsProvider.settings.useClassicControlsForVehicle.options.hint;
    },
    id: "useClassicControlsForVehicle",
    get value() {
      return get(context).settings.useClassicControlsForVehicle;
    },
    set value($$value) {
      mutate(context, get(context).settings.useClassicControlsForVehicle = $$value);
    },
    $$legacy: !0
  });
  var node_1 = sibling(node, 2);
  CheckboxSetting(node_1, {
    get name() {
      return SettingsProvider.settings.useHpBarVehicle.options.name;
    },
    get hint() {
      return SettingsProvider.settings.useHpBarVehicle.options.hint;
    },
    id: "useHpBarVehicle",
    get value() {
      return get(context).settings.useHpBarVehicle;
    },
    set value($$value) {
      mutate(context, get(context).settings.useHpBarVehicle = $$value);
    },
    $$legacy: !0
  });
  var node_2 = sibling(node_1, 2);
  CheckboxSetting(node_2, {
    get name() {
      return SettingsProvider.settings.useHpOverlayVehicle.options.name;
    },
    get hint() {
      return SettingsProvider.settings.useHpOverlayVehicle.options.hint;
    },
    id: "useHpOverlayVehicle",
    get value() {
      return get(context).settings.useHpOverlayVehicle;
    },
    set value($$value) {
      mutate(context, get(context).settings.useHpOverlayVehicle = $$value);
    },
    $$legacy: !0
  }), append($$anchor, fragment), pop();
}
__name(VehicleSettingsTab, "VehicleSettingsTab");
var root$3$ = /* @__PURE__ */ template("<h2> </h2> <!> <!> <!> <!>", 1);
function ActionsListSettingsTab($$anchor, $$props) {
  push($$props, !1);
  let context = mutable_state(getContext(CONSTANTS.SVELTE_CONTEXT.CONTEXT));
  const localize = FoundryAdapter.localize;
  init();
  var fragment = root$3$(), h2 = first_child(fragment), text2 = child(h2);
  template_effect(() => set_text(text2, localize("TIDY5E.Settings.ActionList.Header")));
  var node = sibling(h2, 2);
  CheckboxSetting(node, {
    get name() {
      return SettingsProvider.settings.actionListLimitActionsToCantrips.options.name;
    },
    get hint() {
      return SettingsProvider.settings.actionListLimitActionsToCantrips.options.hint;
    },
    id: "actionListLimitActionsToCantrips",
    get value() {
      return get(context).settings.actionListLimitActionsToCantrips;
    },
    set value($$value) {
      mutate(context, get(context).settings.actionListLimitActionsToCantrips = $$value);
    },
    $$legacy: !0
  });
  var node_1 = sibling(node, 2);
  CheckboxSetting(node_1, {
    get name() {
      return SettingsProvider.settings.actionListIncludeMinuteLongSpellsAsActions.options.name;
    },
    get hint() {
      return SettingsProvider.settings.actionListIncludeMinuteLongSpellsAsActions.options.hint;
    },
    id: "actionListIncludeMinuteLongSpellsAsActions",
    get value() {
      return get(context).settings.actionListIncludeMinuteLongSpellsAsActions;
    },
    set value($$value) {
      mutate(context, get(context).settings.actionListIncludeMinuteLongSpellsAsActions = $$value);
    },
    $$legacy: !0
  });
  var node_2 = sibling(node_1, 2);
  CheckboxSetting(node_2, {
    get name() {
      return SettingsProvider.settings.actionListIncludeSpellsWithActiveEffects.options.name;
    },
    get hint() {
      return SettingsProvider.settings.actionListIncludeSpellsWithActiveEffects.options.hint;
    },
    id: "actionListIncludeSpellsWithActiveEffects",
    get value() {
      return get(context).settings.actionListIncludeSpellsWithActiveEffects;
    },
    set value($$value) {
      mutate(context, get(context).settings.actionListIncludeSpellsWithActiveEffects = $$value);
    },
    $$legacy: !0
  });
  var node_3 = sibling(node_2, 2);
  CheckboxSetting(node_3, {
    get name() {
      return SettingsProvider.settings.actionListIncludeConsumables.options.name;
    },
    get hint() {
      return SettingsProvider.settings.actionListIncludeConsumables.options.hint;
    },
    id: "actionListIncludeConsumables",
    get value() {
      return get(context).settings.actionListIncludeConsumables;
    },
    set value($$value) {
      mutate(context, get(context).settings.actionListIncludeConsumables = $$value);
    },
    $$legacy: !0
  }), append($$anchor, fragment), pop();
}
__name(ActionsListSettingsTab, "ActionsListSettingsTab");
async function save$1(_, applyingChanges, functions, context) {
  set(applyingChanges, !0);
  try {
    await functions.save(context);
  } finally {
    set(applyingChanges, !1);
  }
}
__name(save$1, "save$1");
async function apply$1(__1, applyingChanges, functions, context) {
  set(applyingChanges, !0);
  try {
    await functions.apply(context);
  } finally {
    set(applyingChanges, !1);
  }
}
__name(apply$1, "apply$1");
var root$3_ = /* @__PURE__ */ template('<div class="settings-form svelte-1ya24fr"><div role="presentation" class="vertical-tab-container flex-column no-gap svelte-1ya24fr"><!> <div role="presentation" class="remaining-vertical-space svelte-1ya24fr"></div></div> <!> <div class="button-bar svelte-1ya24fr"><button type="button" class="save-changes-btn"><i class="fas fa-save"></i> </button> <button type="button" class="apply-changes-btn"><i class="fas fa-check"></i> </button></div></div>');
function UserSettings($$anchor, $$props) {
  push($$props, !0);
  let selectedTabId = state(proxy(getContext(CONSTANTS.SVELTE_CONTEXT.INITIAL_TAB_ID))), context = getContext(CONSTANTS.SVELTE_CONTEXT.CONTEXT), functions = getContext(CONSTANTS.SVELTE_CONTEXT.FUNCTIONS), tabs = /* @__PURE__ */ derived(() => {
    const result = [
      {
        id: CONSTANTS.TAB_USER_SETTINGS_PLAYERS,
        title: "TIDY5E.UserSettings.TabPlayers.tabLabel",
        content: { component: PlayerSettingsTab, type: "svelte" }
      },
      {
        id: CONSTANTS.TAB_USER_SETTINGS_NPCS,
        title: "TIDY5E.UserSettings.TabNPCs.tabLabel",
        content: { component: NpcSettingsTab, type: "svelte" }
      },
      {
        id: CONSTANTS.TAB_USER_SETTINGS_VEHICLES,
        title: "TIDY5E.UserSettings.TabVehicles.tabLabel",
        content: { component: VehicleSettingsTab, type: "svelte" }
      }
    ];
    return result.push({
      id: CONSTANTS.TAB_USER_SETTINGS_ACTIONS_LIST,
      title: "TIDY5E.UserSettings.TabActionsList.tabLabel",
      content: {
        component: ActionsListSettingsTab,
        type: "svelte"
      }
    }), result;
  });
  user_effect(() => {
    set(selectedTabId, proxy(get(selectedTabId) ?? get(tabs)[0].id));
  });
  let applyingChanges = state(!1);
  const localize = FoundryAdapter.localize;
  var div = root$3_(), div_1 = child(div), node = child(div_1);
  Tabs(node, {
    get tabs() {
      return get(tabs);
    },
    orientation: "vertical",
    get selectedTabId() {
      return get(selectedTabId);
    },
    set selectedTabId($$value) {
      set(selectedTabId, proxy($$value));
    }
  });
  var node_1 = sibling(div_1, 2);
  TabContents(node_1, {
    get tabs() {
      return get(tabs);
    },
    get selectedTabId() {
      return get(selectedTabId);
    },
    cssClass: "tidy-sheet-body"
  });
  var div_2 = sibling(node_1, 2), button = child(div_2);
  button.__click = [save$1, applyingChanges, functions, context];
  var text2 = sibling(child(button));
  template_effect(() => set_text(text2, ` ${localize("TIDY5E.SaveChanges") ?? ""}`));
  var button_1 = sibling(button, 2);
  button_1.__click = [apply$1, applyingChanges, functions, context];
  var text_1 = sibling(child(button_1));
  template_effect(() => set_text(text_1, ` ${localize("TIDY5E.ApplyChanges") ?? ""}`)), template_effect(() => {
    button.disabled = get(applyingChanges), button_1.disabled = get(applyingChanges);
  }), append($$anchor, div), pop();
}
__name(UserSettings, "UserSettings");
delegate(["click"]);
class UserSettingsFormApplication extends SvelteFormApplicationBase {
  static {
    __name(this, "UserSettingsFormApplication");
  }
  initialTabId;
  #context = state();
  get context() {
    return get(this.#context);
  }
  set context(value) {
    set(this.#context, proxy(value));
  }
  constructor(initialTabId, ...args) {
    super(...args), this.initialTabId = initialTabId ?? CONSTANTS.TAB_USER_SETTINGS_PLAYERS;
  }
  static get defaultOptions() {
    return {
      ...super.defaultOptions,
      height: 750,
      width: 750,
      classes: [
        ...super.defaultOptions.classes,
        "settings",
        "app-v1",
        CONSTANTS.SHEET_LAYOUT_CLASSIC
      ],
      id: "tidy-5e-sheets-user-settings",
      popOut: !0
    };
  }
  get template() {
    return FoundryAdapter.getTemplate("empty-form-template.hbs");
  }
  get title() {
    return FoundryAdapter.localize("TIDY5E.UserSettings.Menu.title", { userName: game.user.name });
  }
  getData() {
    const currentSettings = getCurrentSettings();
    return {
      settings: {
        actionListIncludeConsumables: currentSettings.actionListIncludeConsumables,
        actionListIncludeMinuteLongSpellsAsActions: currentSettings.actionListIncludeMinuteLongSpellsAsActions,
        actionListIncludeSpellsWithActiveEffects: currentSettings.actionListIncludeSpellsWithActiveEffects,
        actionListLimitActionsToCantrips: currentSettings.actionListLimitActionsToCantrips,
        alwaysShowNpcSkills: currentSettings.alwaysShowNpcSkills,
        alwaysShowNpcTraits: currentSettings.alwaysShowNpcTraits,
        animateInspiration: currentSettings.animateInspiration,
        hideIfZero: currentSettings.hideIfZero,
        moveTraitsBelowCharacterResources: currentSettings.moveTraitsBelowCharacterResources,
        moveTraitsBelowNpcResources: currentSettings.moveTraitsBelowNpcResources,
        showClassList: currentSettings.showClassList,
        showEquippedAmmoOnly: currentSettings.showEquippedAmmoOnly,
        showExhaustionOnHover: currentSettings.showExhaustionOnHover,
        showInspirationOnHover: currentSettings.showInspirationOnHover,
        showSpellbookTabNpc: currentSettings.showSpellbookTabNpc,
        toggleEmptyCharacterSkills: currentSettings.toggleEmptyCharacterSkills,
        toggleEmptyCharacterTraits: currentSettings.toggleEmptyCharacterTraits,
        useClassicControlsForCharacter: currentSettings.useClassicControlsForCharacter,
        useClassicControlsForNpc: currentSettings.useClassicControlsForNpc,
        useClassicControlsForVehicle: currentSettings.useClassicControlsForVehicle,
        useContextMenu: currentSettings.useContextMenu,
        useHpBar: currentSettings.useHpBar,
        useHpBarNpc: currentSettings.useHpBarNpc,
        useHpBarVehicle: currentSettings.useHpBarVehicle,
        useHpOverlay: currentSettings.useHpOverlay,
        useHpOverlayNpc: currentSettings.useHpOverlayNpc,
        useHpOverlayVehicle: currentSettings.useHpOverlayVehicle,
        useMulticlassSpellbookFilter: currentSettings.useMulticlassSpellbookFilter,
        useSpellClassFilterIcons: currentSettings.useSpellClassFilterIcons
      }
    };
  }
  createComponent(node) {
    const data = this.getData();
    return debug("Sheet Settings context data", data), this.context = data, mount(UserSettings, {
      target: node,
      context: /* @__PURE__ */ new Map([
        ["context", this.context],
        [
          "functions",
          {
            save: this.saveChangedSettings.bind(this),
            apply: this.applyChangedSettings.bind(this),
            validate: this.validate.bind(this)
          }
        ],
        ["appId", this.appId],
        ["initialTabId", this.initialTabId]
      ])
    });
  }
  validate(context) {
    return !0;
  }
  async applyChangedSettings() {
    if (!this.context)
      return;
    if (!this.validate(this.context))
      return !1;
    const newSettings = { ...this.context.settings }, currentSettings = getCurrentSettings(), keys = Object.keys(newSettings);
    for (let key of keys) {
      const currentValue = currentSettings[key], newValue = newSettings[key];
      currentValue !== newValue && (await FoundryAdapter.setTidySetting(key, newValue), debug(`Updated ${key} to ${newValue}`));
    }
    return !0;
  }
  async saveChangedSettings() {
    await this.applyChangedSettings() && this.close();
  }
}
var root$3Z = /* @__PURE__ */ template('<article class="setting group"><div><div class="description"><label> </label> <p class="tidy5e-notes"> </p></div> <div class="settings-group"><article><input type="text"></article> <!></div></div></article>');
function TextInputSetting($$anchor, $$props) {
  push($$props, !0);
  let value = prop($$props, "value", 15);
  const appId = getContext(CONSTANTS.SVELTE_CONTEXT.APP_ID);
  let calculatedId = /* @__PURE__ */ derived(() => `${$$props.id}-${appId}`);
  const localize = FoundryAdapter.localize;
  var article = root$3Z(), div = child(article), div_1 = child(div), label = child(div_1), text2 = child(label);
  template_effect(() => set_text(text2, localize($$props.name)));
  var p2 = sibling(label, 2), text_1 = child(p2);
  template_effect(() => set_text(text_1, localize($$props.hint)));
  var div_2 = sibling(div_1, 2), article_1 = child(div_2), input = child(article_1), node = sibling(article_1, 2);
  snippet(node, () => $$props.additionalInputs ?? noop), template_effect(() => {
    set_attribute(label, "for", get(calculatedId)), set_attribute(input, "id", get(calculatedId));
  }), bind_value(input, value), append($$anchor, article), pop();
}
__name(TextInputSetting, "TextInputSetting");
var root_1$2d = /* @__PURE__ */ template("<option> </option>"), root_2$18 = /* @__PURE__ */ template("<option> </option>"), root_6$v = /* @__PURE__ */ template("<hr>"), root_8$q = /* @__PURE__ */ template("<optgroup></optgroup>"), root$3Y = /* @__PURE__ */ template("<!> <!>", 1);
function SelectOptions($$anchor, $$props) {
  push($$props, !0);
  const optionElement = /* @__PURE__ */ __name(($$anchor2, key = noop, value = noop) => {
    var option = root_1$2d(), option_value = {}, text2 = child(option);
    template_effect(() => set_text(text2, localize(getLabel(value())))), template_effect(() => {
      option_value !== (option_value = getValue(key(), value())) && (option.value = (option.__value = getValue(key(), value())) == null ? "" : getValue(key(), value()));
    }), append($$anchor2, option);
  }, "optionElement");
  let valueProp = prop($$props, "valueProp", 3, null), labelProp = prop($$props, "labelProp", 3, null), blank = prop($$props, "blank", 3, null), entries = /* @__PURE__ */ derived(() => Object.entries($$props.data));
  function getLabel(value) {
    return labelProp() !== null && value !== null && typeof value == "object" && labelProp() in value ? value[labelProp()]?.toString() ?? "" : value?.toString() ?? "";
  }
  __name(getLabel, "getLabel");
  function getValue(key, value) {
    return valueProp() !== null && value !== null && typeof value == "object" && valueProp() in value ? value[valueProp()]?.toString() ?? "" : key;
  }
  __name(getValue, "getValue");
  let groups = /* @__PURE__ */ derived(() => FoundryAdapter.groupSelectOptions(get(entries)));
  const localize = FoundryAdapter.localize;
  var fragment = root$3Y(), node = first_child(fragment);
  {
    var consequent = /* @__PURE__ */ __name(($$anchor2) => {
      var option_1 = root_2$18();
      option_1.value = ((option_1.__value = "") == null, "");
      var text_1 = child(option_1);
      template_effect(() => set_text(text_1, localize(blank()))), append($$anchor2, option_1);
    }, "consequent");
    if_block(node, ($$render) => {
      blank() !== null && $$render(consequent);
    });
  }
  var node_1 = sibling(node, 2);
  each(node_1, 17, () => get(groups), ([groupKey, groupValue]) => groupKey, ($$anchor2, $$item) => {
    let groupKey = /* @__PURE__ */ __name(() => get($$item)[0], "groupKey"), groupValue = /* @__PURE__ */ __name(() => get($$item)[1], "groupValue");
    var fragment_1 = comment(), node_2 = first_child(fragment_1);
    {
      var consequent_2 = /* @__PURE__ */ __name(($$anchor3) => {
        var fragment_2 = comment(), node_3 = first_child(fragment_2);
        each(node_3, 17, groupValue, index, ($$anchor4, $$item2) => {
          let key = /* @__PURE__ */ __name(() => get($$item2)[0], "key"), value = /* @__PURE__ */ __name(() => get($$item2)[1], "value");
          var fragment_3 = comment(), node_4 = first_child(fragment_3);
          {
            var consequent_1 = /* @__PURE__ */ __name(($$anchor5) => {
              var hr = root_6$v();
              append($$anchor5, hr);
            }, "consequent_1"), alternate = /* @__PURE__ */ __name(($$anchor5) => {
              optionElement($$anchor5, key, value);
            }, "alternate");
            if_block(node_4, ($$render) => {
              value()?.rule ? $$render(consequent_1) : $$render(alternate, !1);
            });
          }
          append($$anchor4, fragment_3);
        }), append($$anchor3, fragment_2);
      }, "consequent_2"), alternate_1 = /* @__PURE__ */ __name(($$anchor3) => {
        var optgroup = root_8$q();
        template_effect(() => set_attribute(optgroup, "label", localize(groupKey()))), each(optgroup, 21, groupValue, index, ($$anchor4, $$item2) => {
          let key = /* @__PURE__ */ __name(() => get($$item2)[0], "key"), value = /* @__PURE__ */ __name(() => get($$item2)[1], "value");
          var fragment_5 = comment(), node_5 = first_child(fragment_5);
          {
            var consequent_3 = /* @__PURE__ */ __name(($$anchor5) => {
              optionElement($$anchor5, key, value);
            }, "consequent_3");
            if_block(node_5, ($$render) => {
              value()?.rule || $$render(consequent_3);
            });
          }
          append($$anchor4, fragment_5);
        }), append($$anchor3, optgroup);
      }, "alternate_1");
      if_block(node_2, ($$render) => {
        groupKey() === "" ? $$render(consequent_2) : $$render(alternate_1, !1);
      });
    }
    append($$anchor2, fragment_1);
  }), append($$anchor, fragment), pop();
}
__name(SelectOptions, "SelectOptions");
var root$3X = /* @__PURE__ */ template('<article class="setting group"><section><div class="description"><label> </label> <p class="tidy5e-notes"> </p></div> <div class="settings-group"><select><!></select> <!></div></section></article>');
function SelectSetting($$anchor, $$props) {
  push($$props, !0);
  let value = prop($$props, "value", 15);
  const appId = getContext(CONSTANTS.SVELTE_CONTEXT.APP_ID), localize = FoundryAdapter.localize;
  var article = root$3X(), section = child(article), div = child(section), label = child(div), text2 = child(label);
  template_effect(() => set_text(text2, localize($$props.name)));
  var p2 = sibling(label, 2), text_1 = child(p2);
  template_effect(() => set_text(text_1, localize($$props.hint)));
  var div_1 = sibling(div, 2), select = child(div_1), node = child(select);
  SelectOptions(node, {
    get data() {
      return $$props.options;
    }
  });
  var node_1 = sibling(select, 2);
  snippet(node_1, () => $$props.additionalInputs ?? noop), template_effect(() => {
    set_attribute(label, "for", `${$$props.id ?? ""}-${appId ?? ""}`), set_attribute(select, "id", `${$$props.id ?? ""}-${appId ?? ""}`);
  }), bind_select_value(select, value), append($$anchor, article), pop();
}
__name(SelectSetting, "SelectSetting");
var root$3W = /* @__PURE__ */ template("<!> <!> <!> <!> <!> <!> <!> <!> <!>", 1);
function MiscWorldSettingsTab($$anchor, $$props) {
  push($$props, !1);
  const context = mutable_state(getContext(CONSTANTS.SVELTE_CONTEXT.CONTEXT));
  init();
  var fragment = root$3W(), node = first_child(fragment);
  CheckboxSetting(node, {
    name: "TIDY5E.Settings.HideDeathSavesFromPlayers.name",
    hint: "TIDY5E.Settings.HideDeathSavesFromPlayers.hint",
    id: "hideDeathSavesFromPlayers",
    get value() {
      return get(context).settings.hideDeathSavesFromPlayers;
    },
    set value($$value) {
      mutate(context, get(context).settings.hideDeathSavesFromPlayers = $$value);
    },
    $$legacy: !0
  });
  var node_1 = sibling(node, 2);
  SelectSetting(node_1, {
    get options() {
      return SettingsProvider.settings.defaultDeathSaveRoll.options.choices;
    },
    name: "TIDY5E.Settings.DefaultDeathSaveRoll.name",
    hint: "TIDY5E.Settings.DefaultDeathSaveRoll.hint",
    id: "defaultDeathSaveRoll",
    get value() {
      return get(context).settings.defaultDeathSaveRoll;
    },
    set value($$value) {
      mutate(context, get(context).settings.defaultDeathSaveRoll = $$value);
    },
    $$legacy: !0
  });
  var node_2 = sibling(node_1, 2);
  CheckboxSetting(node_2, {
    name: "TIDY5E.Settings.ShowExpandedLimitedView.name",
    hint: "TIDY5E.Settings.ShowExpandedLimitedView.hint",
    id: "showExpandedLimitedView",
    get value() {
      return get(context).settings.showExpandedLimitedView;
    },
    set value($$value) {
      mutate(context, get(context).settings.showExpandedLimitedView = $$value);
    },
    $$legacy: !0
  });
  var node_3 = sibling(node_2, 2);
  TextInputSetting(node_3, {
    get name() {
      return SettingsProvider.settings.itemCardsFixKey.options.name;
    },
    get hint() {
      return SettingsProvider.settings.itemCardsFixKey.options.hint;
    },
    id: "itemCardsFixKey",
    get value() {
      return get(context).settings.itemCardsFixKey;
    },
    set value($$value) {
      mutate(context, get(context).settings.itemCardsFixKey = $$value);
    },
    $$legacy: !0
  });
  var node_4 = sibling(node_3, 2);
  SelectSetting(node_4, {
    get options() {
      return SettingsProvider.settings.useCircularPortraitStyle.options.choices;
    },
    name: "TIDY5E.Settings.UseCircularPortraitStyle.name",
    hint: "TIDY5E.Settings.UseCircularPortraitStyle.hint",
    id: "useCircularPortraitStyle",
    get value() {
      return get(context).settings.useCircularPortraitStyle;
    },
    set value($$value) {
      mutate(context, get(context).settings.useCircularPortraitStyle = $$value);
    },
    $$legacy: !0
  });
  var node_5 = sibling(node_4, 2);
  CheckboxSetting(node_5, {
    name: "TIDY5E.Settings.LimitEffectsManagementToGM.name",
    hint: "TIDY5E.Settings.LimitEffectsManagementToGM.hint",
    id: "limitEffectsManagementToGm",
    get value() {
      return get(context).settings.limitEffectsManagementToGm;
    },
    set value($$value) {
      mutate(context, get(context).settings.limitEffectsManagementToGm = $$value);
    },
    $$legacy: !0
  });
  var node_6 = sibling(node_5, 2);
  CheckboxSetting(node_6, {
    name: "TIDY5E.Settings.ShowTraitLabels.name",
    hint: "TIDY5E.Settings.ShowTraitLabels.hint",
    id: "showTraitLabels",
    get value() {
      return get(context).settings.showTraitLabels;
    },
    set value($$value) {
      mutate(context, get(context).settings.showTraitLabels = $$value);
    },
    $$legacy: !0
  });
  var node_7 = sibling(node_6, 2);
  CheckboxSetting(node_7, {
    name: "TIDY5E.Settings.AllowCantripsToBePrepared.name",
    hint: "TIDY5E.Settings.AllowCantripsToBePrepared.hint",
    id: "allowCantripsToBePrepared",
    get value() {
      return get(context).settings.allowCantripsToBePrepared;
    },
    set value($$value) {
      mutate(context, get(context).settings.allowCantripsToBePrepared = $$value);
    },
    $$legacy: !0
  });
  var node_8 = sibling(node_7, 2);
  CheckboxSetting(node_8, {
    name: "TIDY5E.Settings.ShowActiveEffectsMarker.name",
    hint: "TIDY5E.Settings.ShowActiveEffectsMarker.hint",
    id: "showActiveEffectsMarker",
    get value() {
      return get(context).settings.showActiveEffectsMarker;
    },
    set value($$value) {
      mutate(context, get(context).settings.showActiveEffectsMarker = $$value);
    },
    $$legacy: !0
  }), append($$anchor, fragment), pop();
}
__name(MiscWorldSettingsTab, "MiscWorldSettingsTab");
function cubicOut(t2) {
  const f2 = t2 - 1;
  return f2 * f2 * f2 + 1;
}
__name(cubicOut, "cubicOut");
function quadInOut(t2) {
  return t2 /= 0.5, t2 < 1 ? 0.5 * t2 * t2 : (t2--, -0.5 * (t2 * (t2 - 2) - 1));
}
__name(quadInOut, "quadInOut");
function flip(node, { from, to }, params = {}) {
  var { delay: delay2 = 0, duration = /* @__PURE__ */ __name((d2) => Math.sqrt(d2) * 120, "duration"), easing = cubicOut } = params, style = getComputedStyle(node), transform = style.transform === "none" ? "" : style.transform, [ox, oy] = style.transformOrigin.split(" ").map(parseFloat);
  ox /= node.clientWidth, oy /= node.clientHeight;
  var zoom = get_zoom(node), sx = node.clientWidth / to.width / zoom, sy = node.clientHeight / to.height / zoom, fx = from.left + from.width * ox, fy = from.top + from.height * oy, tx = to.left + to.width * ox, ty = to.top + to.height * oy, dx = (fx - tx) * sx, dy = (fy - ty) * sy, dsx = from.width / to.width, dsy = from.height / to.height;
  return {
    delay: delay2,
    duration: typeof duration == "function" ? duration(Math.sqrt(dx * dx + dy * dy)) : duration,
    easing,
    css: /* @__PURE__ */ __name((t2, u2) => {
      var x2 = u2 * dx, y2 = u2 * dy, sx2 = t2 + u2 * dsx, sy2 = t2 + u2 * dsy;
      return `transform: ${transform} translate(${x2}px, ${y2}px) scale(${sx2}, ${sy2});`;
    }, "css")
  };
}
__name(flip, "flip");
function get_zoom(element2) {
  if ("currentCSSZoom" in element2)
    return (
      /** @type {number} */
      element2.currentCSSZoom
    );
  for (var current = element2, zoom = 1; current !== null; )
    zoom *= +getComputedStyle(current).zoom, current = /** @type {Element | null} */
    current.parentElement;
  return zoom;
}
__name(get_zoom, "get_zoom");
const linear = /* @__PURE__ */ __name((x2) => x2, "linear");
function cubic_out(t2) {
  const f2 = t2 - 1;
  return f2 * f2 * f2 + 1;
}
__name(cubic_out, "cubic_out");
function fade(node, { delay: delay2 = 0, duration = 400, easing = linear } = {}) {
  const o2 = +getComputedStyle(node).opacity;
  return {
    delay: delay2,
    duration,
    easing,
    css: /* @__PURE__ */ __name((t2) => `opacity: ${t2 * o2}`, "css")
  };
}
__name(fade, "fade");
function slide(node, { delay: delay2 = 0, duration = 400, easing = cubic_out, axis = "y" } = {}) {
  const style = getComputedStyle(node), opacity = +style.opacity, primary_property = axis === "y" ? "height" : "width", primary_property_value = parseFloat(style[primary_property]), secondary_properties = axis === "y" ? ["top", "bottom"] : ["left", "right"], capitalized_secondary_properties = secondary_properties.map(
    (e2) => (
      /** @type {'Left' | 'Right' | 'Top' | 'Bottom'} */
      `${e2[0].toUpperCase()}${e2.slice(1)}`
    )
  ), padding_start_value = parseFloat(style[`padding${capitalized_secondary_properties[0]}`]), padding_end_value = parseFloat(style[`padding${capitalized_secondary_properties[1]}`]), margin_start_value = parseFloat(style[`margin${capitalized_secondary_properties[0]}`]), margin_end_value = parseFloat(style[`margin${capitalized_secondary_properties[1]}`]), border_width_start_value = parseFloat(
    style[`border${capitalized_secondary_properties[0]}Width`]
  ), border_width_end_value = parseFloat(
    style[`border${capitalized_secondary_properties[1]}Width`]
  );
  return {
    delay: delay2,
    duration,
    easing,
    css: /* @__PURE__ */ __name((t2) => `overflow: hidden;opacity: ${Math.min(t2 * 20, 1) * opacity};${primary_property}: ${t2 * primary_property_value}px;padding-${secondary_properties[0]}: ${t2 * padding_start_value}px;padding-${secondary_properties[1]}: ${t2 * padding_end_value}px;margin-${secondary_properties[0]}: ${t2 * margin_start_value}px;margin-${secondary_properties[1]}: ${t2 * margin_end_value}px;border-${secondary_properties[0]}-width: ${t2 * border_width_start_value}px;border-${secondary_properties[1]}-width: ${t2 * border_width_end_value}px;min-${primary_property}: 0`, "css")
  };
}
__name(slide, "slide");
function assign(tar, src) {
  for (const k in src) tar[k] = src[k];
  return (
    /** @type {T & S} */
    tar
  );
}
__name(assign, "assign");
function crossfade({ fallback, ...defaults }) {
  const to_receive = /* @__PURE__ */ new Map(), to_send = /* @__PURE__ */ new Map();
  function crossfade2(from_node, node, params) {
    const {
      delay: delay2 = 0,
      duration = (
        /** @param {number} d */
        /* @__PURE__ */ __name((d3) => Math.sqrt(d3) * 30, "duration")
      ),
      easing = cubic_out
    } = assign(assign({}, defaults), params), from = from_node.getBoundingClientRect(), to = node.getBoundingClientRect(), dx = from.left - to.left, dy = from.top - to.top, dw = from.width / to.width, dh = from.height / to.height, d2 = Math.sqrt(dx * dx + dy * dy), style = getComputedStyle(node), transform = style.transform === "none" ? "" : style.transform, opacity = +style.opacity;
    return {
      delay: delay2,
      duration: typeof duration == "function" ? duration(d2) : duration,
      easing,
      css: /* @__PURE__ */ __name((t2, u2) => `
			   opacity: ${t2 * opacity};
			   transform-origin: top left;
			   transform: ${transform} translate(${u2 * dx}px,${u2 * dy}px) scale(${t2 + (1 - t2) * dw}, ${t2 + (1 - t2) * dh});
		   `, "css")
    };
  }
  __name(crossfade2, "crossfade");
  function transition2(items, counterparts, intro) {
    return (node, params) => (items.set(params.key, node), () => {
      if (counterparts.has(params.key)) {
        const other_node = counterparts.get(params.key);
        return counterparts.delete(params.key), crossfade2(
          /** @type {Element} */
          other_node,
          node,
          params
        );
      }
      return items.delete(params.key), fallback && fallback(node, params, intro);
    });
  }
  return __name(transition2, "transition"), [transition2(to_send, to_receive, !1), transition2(to_receive, to_send, !0)];
}
__name(crossfade, "crossfade");
var on_keydown = /* @__PURE__ */ __name((ev, handleListboxKeyDown) => handleListboxKeyDown(ev), "on_keydown"), root_2$17 = /* @__PURE__ */ template('<i class="drag-grip fa-solid fa-grip-lines fa-fw"></i>'), root_1$2c = /* @__PURE__ */ template('<li role="option" class="flex-row small-gap align-items-center"><!> <!></li>'), root$3V = /* @__PURE__ */ template('<ul role="listbox" tabindex="0"></ul>');
function Listbox($$anchor, $$props) {
  push($$props, !0);
  const [send, receive] = crossfade({});
  let items = prop($$props, "items", 27, () => proxy([])), selectedItemIndex = prop($$props, "selectedItemIndex", 15, null), draggable = prop($$props, "draggable", 3, !1), idRandomizer = Math.random().toString().substring(2), listbox;
  function handleListboxKeyDown(ev) {
    if (items().length) {
      const currentIndex = selectedItemIndex() ?? -1;
      ev.key === "ArrowUp" && !ev.altKey ? (selectItemAt(Math.max(0, currentIndex - 1)), ev.preventDefault()) : ev.key === "ArrowDown" && !ev.altKey ? (selectItemAt(Math.min(items().length - 1, currentIndex + 1)), ev.preventDefault()) : ev.key === "Home" ? (selectItemAt(0), ev.preventDefault()) : ev.key === "End" && (selectItemAt(items().length - 1), ev.preventDefault()), listbox.querySelector(`#listbox-item-${selectedItemIndex()}-${idRandomizer}`)?.scrollIntoView({ block: "nearest" });
    }
    $$props.onkeydown?.(ev);
  }
  __name(handleListboxKeyDown, "handleListboxKeyDown");
  function selectItemAt(index2) {
    selectedItemIndex(index2), $$props.onselect?.(index2);
  }
  __name(selectItemAt, "selectItemAt");
  var ul = root$3V();
  ul.__keydown = handleListboxKeyDown, each(ul, 31, items, (item) => item[$$props.valueProp], ($$anchor2, item, i2) => {
    var li = root_1$2c();
    li.__click = () => selectItemAt(get(i2)), li.__keydown = [on_keydown, handleListboxKeyDown];
    var node = child(li);
    {
      var consequent = /* @__PURE__ */ __name(($$anchor3) => {
        var i_1 = root_2$17();
        append($$anchor3, i_1);
      }, "consequent");
      if_block(node, ($$render) => {
        draggable() && $$render(consequent);
      });
    }
    var node_1 = sibling(node, 2);
    {
      var consequent_1 = /* @__PURE__ */ __name(($$anchor3) => {
        var fragment = comment(), node_2 = first_child(fragment);
        snippet(node_2, () => $$props.itemTemplate, () => ({ item: get(item) })), append($$anchor3, fragment);
      }, "consequent_1"), alternate = /* @__PURE__ */ __name(($$anchor3) => {
        var text$1 = text();
        template_effect(() => set_text(text$1, get(item)[$$props.labelProp])), append($$anchor3, text$1);
      }, "alternate");
      if_block(node_1, ($$render) => {
        $$props.itemTemplate ? $$render(consequent_1) : $$render(alternate, !1);
      });
    }
    template_effect(() => {
      set_attribute(li, "id", `listbox-item-${get(i2) ?? ""}-${idRandomizer ?? ""}`), set_attribute(li, "aria-selected", selectedItemIndex() === get(i2)), set_attribute(li, "draggable", draggable()), toggle_class(li, "focused", selectedItemIndex() === get(i2));
    }), event("dragstart", li, (ev) => $$props.ondragstart?.({
      event: ev,
      item: get(item),
      index: get(i2)
    })), event("dragend", li, (ev) => $$props.ondragend?.({
      event: ev,
      item: get(item),
      index: get(i2)
    })), event("drop", li, (ev) => $$props.ondrop?.({
      event: ev,
      item: get(item),
      index: get(i2)
    })), event("dragover", li, (ev) => $$props.ondragover?.({
      event: ev,
      item: get(item),
      index: get(i2)
    })), event("dragenter", li, (ev) => $$props.ondragenter?.({
      event: ev,
      item: get(item),
      index: get(i2)
    })), event("dragleave", li, (ev) => $$props.ondragleave?.({
      event: ev,
      item: get(item),
      index: get(i2)
    })), animation(li, () => flip, () => ({ duration: 150 })), transition(1, li, () => receive, () => ({ key: get(item)[$$props.valueProp] })), transition(2, li, () => send, () => ({ key: get(item)[$$props.valueProp] })), append($$anchor2, li);
  }), bind_this(ul, ($$value) => listbox = $$value, () => listbox), template_effect(() => {
    set_class(ul, `listbox ${$$props.class ?? "" ?? ""}`), set_attribute(ul, "aria-activedescendant", selectedItemIndex() !== null ? `listbox-item-${selectedItemIndex()}-${idRandomizer}` : null);
  }), event("drop", ul, (ev) => $$props.onlistboxDrop?.(ev)), append($$anchor, ul), pop();
}
__name(Listbox, "Listbox");
delegate(["keydown", "click"]);
var on_click$1y = /* @__PURE__ */ __name((_, $$props) => $$props.onMoveUp?.(), "on_click$1y"), on_click_1$C = /* @__PURE__ */ __name((__1, $$props) => $$props.onMoveDown?.(), "on_click_1$C"), on_click_2$l = /* @__PURE__ */ __name((__2, $$props) => $$props.onMoveLeft?.(), "on_click_2$l"), on_click_3$9 = /* @__PURE__ */ __name((__3, $$props) => $$props.onMoveRight?.(), "on_click_3$9"), on_click_4$4 = /* @__PURE__ */ __name((__4, $$props) => $$props.onMoveAllToTheLeft?.(), "on_click_4$4"), on_click_5$1 = /* @__PURE__ */ __name((__5, $$props) => $$props.onMoveAllToTheRight?.(), "on_click_5$1"), root$3U = /* @__PURE__ */ template('<div><button type="button"><i class="fas fa-angle-up"></i></button> <button type="button"><i class="fas fa-angle-down"></i></button> <button type="button"><i class="fas fa-angle-left"></i></button> <button type="button"><i class="fas fa-angle-right"></i></button> <button type="button"><i class="fas fa-angles-left"></i></button> <button type="button"><i class="fas fa-angles-right"></i></button></div>');
function SelectionListboxToolbar($$anchor, $$props) {
  push($$props, !0);
  const localize = FoundryAdapter.localize;
  var div = root$3U(), button = child(div);
  template_effect(() => set_attribute(button, "title", localize("TIDY5E.Listbox.MoveUp"))), button.__click = [on_click$1y, $$props];
  var button_1 = sibling(button, 2);
  template_effect(() => set_attribute(button_1, "title", localize("TIDY5E.Listbox.MoveDown"))), button_1.__click = [on_click_1$C, $$props];
  var button_2 = sibling(button_1, 2);
  template_effect(() => set_attribute(button_2, "title", localize("TIDY5E.Listbox.MoveLeft"))), button_2.__click = [on_click_2$l, $$props];
  var button_3 = sibling(button_2, 2);
  template_effect(() => set_attribute(button_3, "title", localize("TIDY5E.Listbox.MoveRight"))), button_3.__click = [on_click_3$9, $$props];
  var button_4 = sibling(button_3, 2);
  template_effect(() => set_attribute(button_4, "title", localize("TIDY5E.Listbox.MoveAllLeft"))), button_4.__click = [on_click_4$4, $$props];
  var button_5 = sibling(button_4, 2);
  template_effect(() => set_attribute(button_5, "title", localize("TIDY5E.Listbox.MoveAllRight"))), button_5.__click = [on_click_5$1, $$props], template_effect(() => {
    set_class(div, `selection-listbox-toolbar ${$$props.class ?? "" ?? ""}`), button.disabled = $$props.moveUpDisabled, button_1.disabled = $$props.moveDownDisabled, button_2.disabled = $$props.moveLeftDisabled, button_3.disabled = $$props.moveRightDisabled, button_4.disabled = $$props.moveAllToTheLeftDisabled, button_5.disabled = $$props.moveAllToTheRightDisabled;
  }), append($$anchor, div), pop();
}
__name(SelectionListboxToolbar, "SelectionListboxToolbar");
delegate(["click"]);
var root_1$2b = /* @__PURE__ */ template('<div class="column-1"><!></div> <div class="column-3"><!></div>', 1), root$3T = /* @__PURE__ */ template("<div><!> <!> <!> <!></div>");
function SelectionListbox($$anchor, $$props) {
  push($$props, !0);
  let leftItems = prop($$props, "leftItems", 15), selectedLeftItemIndex = prop($$props, "selectedLeftItemIndex", 15, null), rightItems = prop($$props, "rightItems", 15), selectedRightItemIndex = prop($$props, "selectedRightItemIndex", 15, null), listboxCssClass = prop($$props, "listboxCssClass", 3, ""), selectedItemIndex = /* @__PURE__ */ derived(() => selectedLeftItemIndex() ?? selectedRightItemIndex()), selectedArray = /* @__PURE__ */ derived(() => selectedLeftItemIndex() !== null ? leftItems() : selectedRightItemIndex() !== null ? rightItems() : null);
  function moveAllToTheLeft() {
    leftItems([...leftItems(), ...rightItems()]), rightItems([]), itemsMoved();
  }
  __name(moveAllToTheLeft, "moveAllToTheLeft");
  function moveUp() {
    if (get(selectedItemIndex) === null || get(selectedItemIndex) === 0 || get(selectedArray) === null)
      return;
    const topValue = get(selectedArray)[get(selectedItemIndex) - 1], bottomValue = get(selectedArray)[get(selectedItemIndex)];
    get(selectedArray)[get(selectedItemIndex) - 1] = bottomValue, get(selectedArray)[get(selectedItemIndex)] = topValue, selectedLeftItemIndex() ? (selectedLeftItemIndex(selectedLeftItemIndex() - 1), leftItems(leftItems())) : selectedRightItemIndex() && (selectedRightItemIndex(selectedRightItemIndex() - 1), rightItems(rightItems())), itemsMoved();
  }
  __name(moveUp, "moveUp");
  function moveDown() {
    if (get(selectedArray) === null || get(selectedItemIndex) === null || get(selectedItemIndex) >= get(selectedArray).length - 1)
      return;
    const topValue = get(selectedArray)[get(selectedItemIndex)], bottomValue = get(selectedArray)[get(selectedItemIndex) + 1];
    get(selectedArray)[get(selectedItemIndex)] = bottomValue, get(selectedArray)[get(selectedItemIndex) + 1] = topValue, selectedLeftItemIndex() !== null ? (selectedLeftItemIndex(selectedLeftItemIndex() + 1), leftItems(leftItems())) : selectedRightItemIndex() !== null && (selectedRightItemIndex(selectedRightItemIndex() + 1), rightItems(rightItems())), itemsMoved();
  }
  __name(moveDown, "moveDown");
  function moveLeft() {
    if (selectedRightItemIndex() === null)
      return;
    const itemToMove = rightItems().splice(selectedRightItemIndex(), 1)[0];
    itemToMove && (rightItems(rightItems()), leftItems().push(itemToMove), leftItems(leftItems()), itemsMoved());
  }
  __name(moveLeft, "moveLeft");
  function moveRight() {
    if (selectedLeftItemIndex() === null)
      return;
    const itemToMove = leftItems().splice(selectedLeftItemIndex(), 1)[0];
    itemToMove && (leftItems(leftItems()), rightItems().push(itemToMove), rightItems(rightItems()), itemsMoved());
  }
  __name(moveRight, "moveRight");
  function moveAllToTheRight() {
    rightItems([...rightItems(), ...leftItems()]), leftItems([]), itemsMoved();
  }
  __name(moveAllToTheRight, "moveAllToTheRight");
  function itemsMoved(options) {
    selectedLeftItemIndex() !== null && leftItems().at(selectedLeftItemIndex()) === void 0 && selectedLeftItemIndex(leftItems().length ? leftItems().length - 1 : null), selectedRightItemIndex() !== null && rightItems().at(selectedRightItemIndex()) === void 0 && selectedRightItemIndex(rightItems().length ? rightItems().length - 1 : null);
  }
  __name(itemsMoved, "itemsMoved");
  function handleLeftListboxKeydown(e2) {
    e2.code === "Space" ? (moveRight(), e2.preventDefault()) : e2.key === "ArrowUp" && e2.altKey ? moveUp() : e2.key === "ArrowDown" && e2.altKey && moveDown();
  }
  __name(handleLeftListboxKeydown, "handleLeftListboxKeydown");
  function handleRightListboxKeydown(e2) {
    e2.code === "Space" ? (moveLeft(), e2.preventDefault()) : e2.key === "ArrowUp" && e2.altKey ? moveUp() : e2.key === "ArrowDown" && e2.altKey && moveDown();
  }
  __name(handleRightListboxKeydown, "handleRightListboxKeydown");
  var div = root$3T(), node = child(div);
  {
    var consequent = /* @__PURE__ */ __name(($$anchor2) => {
      var fragment = root_1$2b(), div_1 = first_child(fragment), node_1 = child(div_1);
      snippet(node_1, () => $$props.leftHeader ?? noop);
      var div_2 = sibling(div_1, 2), node_2 = child(div_2);
      snippet(node_2, () => $$props.rightHeader ?? noop), append($$anchor2, fragment);
    }, "consequent");
    if_block(node, ($$render) => {
      ($$props.leftHeader || $$props.rightHeader) && $$render(consequent);
    });
  }
  var node_3 = sibling(node, 2);
  Listbox(node_3, {
    get labelProp() {
      return $$props.labelProp;
    },
    get valueProp() {
      return $$props.valueProp;
    },
    onselect: /* @__PURE__ */ __name(() => {
      selectedRightItemIndex(null);
    }, "onselect"),
    onkeydown: handleLeftListboxKeydown,
    get class() {
      return `column-1 ${listboxCssClass() ?? ""}`;
    },
    get items() {
      return leftItems();
    },
    set items($$value) {
      leftItems($$value);
    },
    get selectedItemIndex() {
      return selectedLeftItemIndex();
    },
    set selectedItemIndex($$value) {
      selectedLeftItemIndex($$value);
    },
    itemTemplate: /* @__PURE__ */ __name(($$anchor2, $$arg0) => {
      let item = /* @__PURE__ */ __name(() => $$arg0?.().item, "item");
      var fragment_1 = comment(), node_4 = first_child(fragment_1);
      {
        var consequent_1 = /* @__PURE__ */ __name(($$anchor3) => {
          var fragment_2 = comment(), node_5 = first_child(fragment_2);
          snippet(node_5, () => $$props.leftItemTemplate, () => ({ item: item() })), append($$anchor3, fragment_2);
        }, "consequent_1"), alternate = /* @__PURE__ */ __name(($$anchor3) => {
          var text$1 = text();
          template_effect(() => set_text(text$1, item()[$$props.labelProp])), append($$anchor3, text$1);
        }, "alternate");
        if_block(node_4, ($$render) => {
          $$props.leftItemTemplate ? $$render(consequent_1) : $$render(alternate, !1);
        });
      }
      append($$anchor2, fragment_1);
    }, "itemTemplate"),
    $$slots: { itemTemplate: !0 }
  });
  var node_6 = sibling(node_3, 2), moveUpDisabled = /* @__PURE__ */ derived(() => get(selectedItemIndex) === null || get(selectedItemIndex) === 0), moveDownDisabled = /* @__PURE__ */ derived(() => get(selectedItemIndex) === null || get(selectedArray) === null || get(selectedItemIndex) >= get(selectedArray).length - 1), moveLeftDisabled = /* @__PURE__ */ derived(() => selectedLeftItemIndex() !== null || selectedRightItemIndex() === null), moveRightDisabled = /* @__PURE__ */ derived(() => selectedLeftItemIndex() === null || selectedRightItemIndex() !== null), moveAllToTheLeftDisabled = /* @__PURE__ */ derived(() => rightItems().length === 0), moveAllToTheRightDisabled = /* @__PURE__ */ derived(() => leftItems().length === 0);
  SelectionListboxToolbar(node_6, {
    get moveUpDisabled() {
      return get(moveUpDisabled);
    },
    onMoveUp: moveUp,
    get moveDownDisabled() {
      return get(moveDownDisabled);
    },
    onMoveDown: moveDown,
    get moveLeftDisabled() {
      return get(moveLeftDisabled);
    },
    onMoveLeft: moveLeft,
    get moveRightDisabled() {
      return get(moveRightDisabled);
    },
    onMoveRight: moveRight,
    get moveAllToTheLeftDisabled() {
      return get(moveAllToTheLeftDisabled);
    },
    onMoveAllToTheLeft: moveAllToTheLeft,
    get moveAllToTheRightDisabled() {
      return get(moveAllToTheRightDisabled);
    },
    onMoveAllToTheRight: moveAllToTheRight,
    class: "column-2"
  });
  var node_7 = sibling(node_6, 2);
  Listbox(node_7, {
    get labelProp() {
      return $$props.labelProp;
    },
    get valueProp() {
      return $$props.valueProp;
    },
    onselect: /* @__PURE__ */ __name(() => {
      selectedLeftItemIndex(null);
    }, "onselect"),
    onkeydown: handleRightListboxKeydown,
    get class() {
      return `column-3 ${listboxCssClass() ?? ""}`;
    },
    get items() {
      return rightItems();
    },
    set items($$value) {
      rightItems($$value);
    },
    get selectedItemIndex() {
      return selectedRightItemIndex();
    },
    set selectedItemIndex($$value) {
      selectedRightItemIndex($$value);
    },
    itemTemplate: /* @__PURE__ */ __name(($$anchor2, $$arg0) => {
      let item = /* @__PURE__ */ __name(() => $$arg0?.().item, "item");
      var fragment_4 = comment(), node_8 = first_child(fragment_4);
      {
        var consequent_2 = /* @__PURE__ */ __name(($$anchor3) => {
          var fragment_5 = comment(), node_9 = first_child(fragment_5);
          snippet(node_9, () => $$props.rightItemTemplate, () => ({ item: item() })), append($$anchor3, fragment_5);
        }, "consequent_2"), alternate_1 = /* @__PURE__ */ __name(($$anchor3) => {
          var text_1 = text();
          template_effect(() => set_text(text_1, item()[$$props.labelProp])), append($$anchor3, text_1);
        }, "alternate_1");
        if_block(node_8, ($$render) => {
          $$props.rightItemTemplate ? $$render(consequent_2) : $$render(alternate_1, !1);
        });
      }
      append($$anchor2, fragment_4);
    }, "itemTemplate"),
    $$slots: { itemTemplate: !0 }
  }), template_effect(() => set_class(div, `selection-listbox ${$$props.class ?? "" ?? ""}`)), append($$anchor, div), pop();
}
__name(SelectionListbox, "SelectionListbox");
var root_1$2a = /* @__PURE__ */ template("<b> </b>"), root_2$16 = /* @__PURE__ */ template("<b> </b>"), root$3S = /* @__PURE__ */ template('<article class="setting group"><div class="description flex-1"><b> </b> <p> </p> <div class="flex-column small-gap"><!> <!></div></div></article>');
function ListboxSetting($$anchor, $$props) {
  push($$props, !0);
  let leftHeaderText = prop($$props, "leftHeaderText", 3, ""), leftItems = prop($$props, "leftItems", 15), rightHeaderText = prop($$props, "rightHeaderText", 3, ""), rightItems = prop($$props, "rightItems", 15);
  const localize = FoundryAdapter.localize;
  var article = root$3S(), div = child(article), b2 = child(div), text2 = child(b2);
  template_effect(() => set_text(text2, localize($$props.name)));
  var p2 = sibling(b2, 2), text_1 = child(p2);
  template_effect(() => set_text(text_1, localize($$props.hint)));
  var div_1 = sibling(p2, 2), node = child(div_1);
  SelectionListbox(node, {
    get labelProp() {
      return $$props.labelProp;
    },
    get valueProp() {
      return $$props.valueProp;
    },
    get leftItems() {
      return leftItems();
    },
    set leftItems($$value) {
      leftItems($$value);
    },
    get rightItems() {
      return rightItems();
    },
    set rightItems($$value) {
      rightItems($$value);
    },
    leftHeader: /* @__PURE__ */ __name(($$anchor2) => {
      var b_1 = root_1$2a(), text_2 = child(b_1);
      template_effect(() => set_text(text_2, localize(leftHeaderText()))), append($$anchor2, b_1);
    }, "leftHeader"),
    rightHeader: /* @__PURE__ */ __name(($$anchor2) => {
      var b_2 = root_2$16(), text_3 = child(b_2);
      template_effect(() => set_text(text_3, localize(rightHeaderText()))), append($$anchor2, b_2);
    }, "rightHeader"),
    $$slots: { leftHeader: !0, rightHeader: !0 }
  });
  var node_1 = sibling(node, 2);
  snippet(node_1, () => $$props.belowListbox ?? noop), append($$anchor, article), pop();
}
__name(ListboxSetting, "ListboxSetting");
var on_click$1x = /* @__PURE__ */ __name((_, functions) => functions.resetDefaultTabs(CONSTANTS.SHEET_TYPE_CHARACTER), "on_click$1x"), root_1$29 = /* @__PURE__ */ template('<div><button type="button"><i class="fas fa-rotate-right"></i> </button></div>'), root$3R = /* @__PURE__ */ template('<div class="settings-form"><!> <!> <!> <!> <!> <!></div>');
function CharacterWorldSettingsTab($$anchor, $$props) {
  push($$props, !1);
  const context = mutable_state(getContext(CONSTANTS.SVELTE_CONTEXT.CONTEXT));
  let functions = getContext(CONSTANTS.SVELTE_CONTEXT.FUNCTIONS);
  const localize = FoundryAdapter.localize;
  init();
  var div = root$3R(), node = child(div), options = /* @__PURE__ */ derived_safe_equal(() => SettingsProvider.settings.initialCharacterSheetTab.options.choices());
  SelectSetting(node, {
    get options() {
      return get(options);
    },
    get name() {
      return SettingsProvider.settings.initialCharacterSheetTab.options.name;
    },
    get hint() {
      return SettingsProvider.settings.initialCharacterSheetTab.options.hint;
    },
    id: "initialCharacterSheetTab",
    get value() {
      return get(context).settings.initialCharacterSheetTab;
    },
    set value($$value) {
      mutate(context, get(context).settings.initialCharacterSheetTab = $$value);
    },
    $$legacy: !0
  });
  var node_1 = sibling(node, 2);
  ListboxSetting(node_1, {
    get name() {
      return SettingsProvider.settings.defaultCharacterSheetTabs.options.name;
    },
    get hint() {
      return SettingsProvider.settings.defaultCharacterSheetTabs.options.hint;
    },
    leftHeaderText: "TIDY5E.Settings.DefaultSheetTabs.AvailableHeader",
    rightHeaderText: "TIDY5E.Settings.DefaultSheetTabs.SelectedHeader",
    labelProp: "label",
    valueProp: "id",
    get leftItems() {
      return get(context).defaultCharacterTabs.available;
    },
    set leftItems($$value) {
      mutate(context, get(context).defaultCharacterTabs.available = $$value);
    },
    get rightItems() {
      return get(context).defaultCharacterTabs.selected;
    },
    set rightItems($$value) {
      mutate(context, get(context).defaultCharacterTabs.selected = $$value);
    },
    belowListbox: /* @__PURE__ */ __name(($$anchor2) => {
      var div_1 = root_1$29(), button = child(div_1);
      button.__click = [on_click$1x, functions];
      var text2 = sibling(child(button));
      template_effect(() => set_text(text2, ` ${localize("TIDY5E.Reset") ?? ""}`)), append($$anchor2, div_1);
    }, "belowListbox"),
    $$slots: { belowListbox: !0 },
    $$legacy: !0
  });
  var node_2 = sibling(node_1, 2);
  CheckboxSetting(node_2, {
    get name() {
      return SettingsProvider.settings.useCharacterEncumbranceBar.options.name;
    },
    get hint() {
      return SettingsProvider.settings.useCharacterEncumbranceBar.options.hint;
    },
    id: "useCharacterEncumbranceBar",
    get value() {
      return get(context).settings.useCharacterEncumbranceBar;
    },
    set value($$value) {
      mutate(context, get(context).settings.useCharacterEncumbranceBar = $$value);
    },
    $$legacy: !0
  });
  var node_3 = sibling(node_2, 2);
  CheckboxSetting(node_3, {
    name: "TIDY5E.Settings.ShowPlayerName.name",
    hint: "TIDY5E.Settings.ShowPlayerName.hint",
    id: "showPlayerName",
    get value() {
      return get(context).settings.showPlayerName;
    },
    set value($$value) {
      mutate(context, get(context).settings.showPlayerName = $$value);
    },
    $$legacy: !0
  });
  var node_4 = sibling(node_3, 2);
  CheckboxSetting(node_4, {
    name: "TIDY5E.Settings.UseInspiration.name",
    hint: "TIDY5E.Settings.UseInspiration.hint",
    id: "useCharacterInspiration",
    get value() {
      return get(context).settings.useCharacterInspiration;
    },
    set value($$value) {
      mutate(context, get(context).settings.useCharacterInspiration = $$value);
    },
    $$legacy: !0
  });
  var node_5 = sibling(node_4, 2);
  CheckboxSetting(node_5, {
    name: "TIDY5E.Settings.AllowHpMaxOverride.name",
    hint: "TIDY5E.Settings.AllowHpMaxOverride.hint",
    id: "allowHpMaxOverride",
    get value() {
      return get(context).settings.allowHpMaxOverride;
    },
    set value($$value) {
      mutate(context, get(context).settings.allowHpMaxOverride = $$value);
    },
    $$legacy: !0
  }), append($$anchor, div), pop();
}
__name(CharacterWorldSettingsTab, "CharacterWorldSettingsTab");
delegate(["click"]);
var on_click$1w = /* @__PURE__ */ __name((_, functions) => functions.resetDefaultTabs(CONSTANTS.SHEET_TYPE_NPC), "on_click$1w"), root_1$28 = /* @__PURE__ */ template('<div><button type="button"><i class="fas fa-rotate-right"></i> </button></div>'), root$3Q = /* @__PURE__ */ template('<div class="settings-form"><!> <!> <!> <!> <!></div>');
function NpcWorldSettingsTab($$anchor, $$props) {
  push($$props, !1);
  const context = mutable_state(getContext(CONSTANTS.SVELTE_CONTEXT.CONTEXT));
  let functions = getContext(CONSTANTS.SVELTE_CONTEXT.FUNCTIONS);
  const localize = FoundryAdapter.localize;
  init();
  var div = root$3Q(), node = child(div), options = /* @__PURE__ */ derived_safe_equal(() => SettingsProvider.settings.initialNpcSheetTab.options.choices());
  SelectSetting(node, {
    get options() {
      return get(options);
    },
    get name() {
      return SettingsProvider.settings.initialNpcSheetTab.options.name;
    },
    get hint() {
      return SettingsProvider.settings.initialNpcSheetTab.options.hint;
    },
    id: "initialNpcSheetTab",
    get value() {
      return get(context).settings.initialNpcSheetTab;
    },
    set value($$value) {
      mutate(context, get(context).settings.initialNpcSheetTab = $$value);
    },
    $$legacy: !0
  });
  var node_1 = sibling(node, 2);
  ListboxSetting(node_1, {
    get name() {
      return SettingsProvider.settings.defaultNpcSheetTabs.options.name;
    },
    get hint() {
      return SettingsProvider.settings.defaultNpcSheetTabs.options.hint;
    },
    leftHeaderText: "TIDY5E.Settings.DefaultSheetTabs.AvailableHeader",
    rightHeaderText: "TIDY5E.Settings.DefaultSheetTabs.SelectedHeader",
    labelProp: "label",
    valueProp: "id",
    get leftItems() {
      return get(context).defaultNpcTabs.available;
    },
    set leftItems($$value) {
      mutate(context, get(context).defaultNpcTabs.available = $$value);
    },
    get rightItems() {
      return get(context).defaultNpcTabs.selected;
    },
    set rightItems($$value) {
      mutate(context, get(context).defaultNpcTabs.selected = $$value);
    },
    belowListbox: /* @__PURE__ */ __name(($$anchor2) => {
      var div_1 = root_1$28(), button = child(div_1);
      button.__click = [on_click$1w, functions];
      var text2 = sibling(child(button));
      template_effect(() => set_text(text2, ` ${localize("TIDY5E.Reset") ?? ""}`)), append($$anchor2, div_1);
    }, "belowListbox"),
    $$slots: { belowListbox: !0 },
    $$legacy: !0
  });
  var node_2 = sibling(node_1, 2);
  CheckboxSetting(node_2, {
    name: "TIDY5E.Settings.ShowNPCRestInChat.name",
    hint: "TIDY5E.Settings.ShowNPCRestInChat.hint",
    id: "showNpcRestInChat",
    get value() {
      return get(context).settings.showNpcRestInChat;
    },
    set value($$value) {
      mutate(context, get(context).settings.showNpcRestInChat = $$value);
    },
    $$legacy: !0
  });
  var node_3 = sibling(node_2, 2);
  SelectSetting(node_3, {
    options: {
      default: "TIDY5E.Settings.ShowNPCActorLinkMarker.default",
      unlinked: "TIDY5E.Settings.ShowNPCActorLinkMarker.unlinked",
      both: "TIDY5E.Settings.ShowNPCActorLinkMarker.both"
    },
    name: "TIDY5E.Settings.ShowNPCActorLinkMarker.name",
    hint: "TIDY5E.Settings.ShowNPCActorLinkMarker.hint",
    id: "showNpcActorLinkMarker",
    get value() {
      return get(context).settings.showNpcActorLinkMarker;
    },
    set value($$value) {
      mutate(context, get(context).settings.showNpcActorLinkMarker = $$value);
    },
    $$legacy: !0
  });
  var node_4 = sibling(node_3, 2);
  CheckboxSetting(node_4, {
    get name() {
      return SettingsProvider.settings.useNpcEncumbranceBar.options.name;
    },
    get hint() {
      return SettingsProvider.settings.useNpcEncumbranceBar.options.hint;
    },
    id: "useNpcEncumbranceBar",
    get value() {
      return get(context).settings.useNpcEncumbranceBar;
    },
    set value($$value) {
      mutate(context, get(context).settings.useNpcEncumbranceBar = $$value);
    },
    $$legacy: !0
  }), append($$anchor, div), pop();
}
__name(NpcWorldSettingsTab, "NpcWorldSettingsTab");
delegate(["click"]);
var on_click$1v = /* @__PURE__ */ __name((_, functions) => functions.resetDefaultTabs(CONSTANTS.SHEET_TYPE_VEHICLE), "on_click$1v"), root_1$27 = /* @__PURE__ */ template('<div><button type="button"><i class="fas fa-rotate-right"></i> </button></div>'), root$3P = /* @__PURE__ */ template('<div class="settings-form"><!> <!> <!> <!></div>');
function VehicleWorldSettingsTab($$anchor, $$props) {
  push($$props, !1);
  const context = mutable_state(getContext(CONSTANTS.SVELTE_CONTEXT.CONTEXT));
  let functions = getContext(CONSTANTS.SVELTE_CONTEXT.FUNCTIONS);
  const localize = FoundryAdapter.localize;
  init();
  var div = root$3P(), node = child(div), options = /* @__PURE__ */ derived_safe_equal(() => SettingsProvider.settings.initialVehicleSheetTab.options.choices());
  SelectSetting(node, {
    get options() {
      return get(options);
    },
    get name() {
      return SettingsProvider.settings.initialVehicleSheetTab.options.name;
    },
    get hint() {
      return SettingsProvider.settings.initialVehicleSheetTab.options.hint;
    },
    id: "initialVehicleSheetTab",
    get value() {
      return get(context).settings.initialVehicleSheetTab;
    },
    set value($$value) {
      mutate(context, get(context).settings.initialVehicleSheetTab = $$value);
    },
    $$legacy: !0
  });
  var node_1 = sibling(node, 2);
  ListboxSetting(node_1, {
    get name() {
      return SettingsProvider.settings.defaultVehicleSheetTabs.options.name;
    },
    get hint() {
      return SettingsProvider.settings.defaultVehicleSheetTabs.options.hint;
    },
    leftHeaderText: "TIDY5E.Settings.DefaultSheetTabs.AvailableHeader",
    rightHeaderText: "TIDY5E.Settings.DefaultSheetTabs.SelectedHeader",
    labelProp: "label",
    valueProp: "id",
    get leftItems() {
      return get(context).defaultVehicleTabs.available;
    },
    set leftItems($$value) {
      mutate(context, get(context).defaultVehicleTabs.available = $$value);
    },
    get rightItems() {
      return get(context).defaultVehicleTabs.selected;
    },
    set rightItems($$value) {
      mutate(context, get(context).defaultVehicleTabs.selected = $$value);
    },
    belowListbox: /* @__PURE__ */ __name(($$anchor2) => {
      var div_1 = root_1$27(), button = child(div_1);
      button.__click = [on_click$1v, functions];
      var text2 = sibling(child(button));
      template_effect(() => set_text(text2, ` ${localize("TIDY5E.Reset") ?? ""}`)), append($$anchor2, div_1);
    }, "belowListbox"),
    $$slots: { belowListbox: !0 },
    $$legacy: !0
  });
  var node_2 = sibling(node_1, 2);
  CheckboxSetting(node_2, {
    get name() {
      return SettingsProvider.settings.useVehicleEncumbranceBar.options.name;
    },
    get hint() {
      return SettingsProvider.settings.useVehicleEncumbranceBar.options.hint;
    },
    id: "useVehicleEncumbranceBar",
    get value() {
      return get(context).settings.useVehicleEncumbranceBar;
    },
    set value($$value) {
      mutate(context, get(context).settings.useVehicleEncumbranceBar = $$value);
    },
    $$legacy: !0
  });
  var node_3 = sibling(node_2, 2);
  CheckboxSetting(node_3, {
    name: "TIDY5E.Settings.UseVehicleMotion.name",
    hint: "TIDY5E.Settings.UseVehicleMotion.hint",
    id: "useVehicleMotion",
    get value() {
      return get(context).settings.useVehicleMotion;
    },
    set value($$value) {
      mutate(context, get(context).settings.useVehicleMotion = $$value);
    },
    $$legacy: !0
  }), append($$anchor, div), pop();
}
__name(VehicleWorldSettingsTab, "VehicleWorldSettingsTab");
delegate(["click"]);
var root$3O = /* @__PURE__ */ template('<div class="settings-form"><!> <!> <!></div>');
function ItemWorldSettingsTab($$anchor, $$props) {
  push($$props, !1);
  const context = mutable_state(getContext(CONSTANTS.SVELTE_CONTEXT.CONTEXT));
  init();
  var div = root$3O(), node = child(div);
  CheckboxSetting(node, {
    get name() {
      return SettingsProvider.settings.includeTidySectionFieldsInDefaultSheets.options.name;
    },
    get hint() {
      return SettingsProvider.settings.includeTidySectionFieldsInDefaultSheets.options.hint;
    },
    id: "includeTidySectionFieldsInDefaultSheets",
    get value() {
      return get(context).settings.includeTidySectionFieldsInDefaultSheets;
    },
    set value($$value) {
      mutate(context, get(context).settings.includeTidySectionFieldsInDefaultSheets = $$value);
    },
    $$legacy: !0
  });
  var node_1 = sibling(node, 2);
  SelectSetting(node_1, {
    get options() {
      return SettingsProvider.settings.itemIdentificationPermission.options.choices;
    },
    get name() {
      return SettingsProvider.settings.itemIdentificationPermission.options.name;
    },
    get hint() {
      return SettingsProvider.settings.itemIdentificationPermission.options.hint;
    },
    id: "initialCharacterSheetTab",
    get value() {
      return get(context).settings.itemIdentificationPermission;
    },
    set value($$value) {
      mutate(context, get(context).settings.itemIdentificationPermission = $$value);
    },
    $$legacy: !0
  });
  var node_2 = sibling(node_1, 2);
  CheckboxSetting(node_2, {
    get name() {
      return SettingsProvider.settings.includeFlagsInSpellScrollCreation.options.name;
    },
    get hint() {
      return SettingsProvider.settings.includeFlagsInSpellScrollCreation.options.hint;
    },
    id: "includeFlagsInSpellScrollCreation",
    get value() {
      return get(context).settings.includeFlagsInSpellScrollCreation;
    },
    set value($$value) {
      mutate(context, get(context).settings.includeFlagsInSpellScrollCreation = $$value);
    },
    $$legacy: !0
  }), append($$anchor, div), pop();
}
__name(ItemWorldSettingsTab, "ItemWorldSettingsTab");
const nilValues = [null, void 0];
function isNil(value, ...or) {
  return nilValues.concat(or ?? []).includes(value);
}
__name(isNil, "isNil");
function camelToLowerDashCase(str) {
  return str != str.toLowerCase() && (str = str.replace(/[A-Z]/g, (m2) => "-" + m2.toLowerCase())), str;
}
__name(camelToLowerDashCase, "camelToLowerDashCase");
function buildDataset(obj) {
  return obj ? Object.entries(obj).reduce(
    (acc, [key, value]) => (acc[`data-${camelToLowerDashCase(key)}`] = value, acc),
    {}
  ) : {};
}
__name(buildDataset, "buildDataset");
function formatAsModifier(value) {
  if (value == null)
    return toSignedNumberString(0);
  const parsed = typeof value == "string" ? +value : value;
  return isNaN(parsed) ? toSignedNumberString(0) : toSignedNumberString(parsed);
}
__name(formatAsModifier, "formatAsModifier");
function toSignedNumberString(value) {
  return value.toLocaleString(FoundryAdapter.getCurrentLang(), { signDisplay: "always" });
}
__name(toSignedNumberString, "toSignedNumberString");
function coalesce(...values) {
  for (let value of values)
    if (!isNil(value?.trim(), ""))
      return value;
  return "";
}
__name(coalesce, "coalesce");
var root_1$26 = /* @__PURE__ */ template('<p class="tidy5e-notes"> </p>'), root_4$D = /* @__PURE__ */ template('<article class="setting group"><section><div class="description"><label class="flex-row small-gap align-items-center"> <i class="fas fa-info-circle"></i></label> <p class="tidy5e-notes"> </p></div> <div class="settings-group"><input type="text"></div></section></article>'), root_2$15 = /* @__PURE__ */ template('<article class="setting group"><section><div class="description"><label> </label> <p class="tidy5e-notes"> </p></div> <div class="settings-group"><input type="number" min="1"></div></section></article> <!>', 1), root$3N = /* @__PURE__ */ template('<article class="setting group"><section><div class="description"><label> </label> <p class="tidy5e-notes"> </p></div> <div class="settings-group"><select><!></select> <!></div></section></article> <!>', 1);
function ExhaustionSetting($$anchor, $$props) {
  push($$props, !0);
  let config = prop($$props, "config", 15), appId = getContext(CONSTANTS.SVELTE_CONTEXT.APP_ID), levelsIterator = /* @__PURE__ */ derived(() => config().type === "specific" ? Array(config().levels + 1).fill(0) : []);
  const localize = FoundryAdapter.localize;
  var fragment = root$3N(), article = first_child(fragment), section = child(article), div = child(section), label = child(div);
  set_attribute(label, "for", `exhaustionConfigType-${appId ?? ""}`);
  var text2 = child(label);
  template_effect(() => set_text(text2, localize($$props.name)));
  var p2 = sibling(label, 2), text_1 = child(p2);
  template_effect(() => set_text(text_1, localize($$props.hint)));
  var div_1 = sibling(div, 2), select = child(div_1);
  set_attribute(select, "id", `exhaustionConfigType-${appId ?? ""}`);
  var node = child(select);
  SelectOptions(node, {
    data: {
      specific: "TIDY5E.WorldSettings.Exhaustion.options.specific.text",
      open: "TIDY5E.WorldSettings.Exhaustion.options.open.text"
    }
  });
  var node_1 = sibling(select, 2);
  {
    var consequent = /* @__PURE__ */ __name(($$anchor2) => {
      var p_1 = root_1$26(), text_2 = child(p_1);
      template_effect(() => set_text(text_2, localize("TIDY5E.WorldSettings.Exhaustion.options.open.explanation"))), append($$anchor2, p_1);
    }, "consequent");
    if_block(node_1, ($$render) => {
      config().type === "open" && $$render(consequent);
    });
  }
  var node_2 = sibling(article, 2);
  {
    var consequent_2 = /* @__PURE__ */ __name(($$anchor2) => {
      var fragment_1 = root_2$15(), article_1 = first_child(fragment_1), section_1 = child(article_1), div_2 = child(section_1), label_1 = child(div_2);
      set_attribute(label_1, "for", `exhaustionConfigTypeLevels-${appId ?? ""}`);
      var text_3 = child(label_1);
      template_effect(() => set_text(text_3, localize("TIDY5E.WorldSettings.Exhaustion.options.specific.levels.name")));
      var p_2 = sibling(label_1, 2), text_4 = child(p_2);
      template_effect(() => set_text(text_4, localize("TIDY5E.WorldSettings.Exhaustion.options.specific.levels.hint")));
      var div_3 = sibling(div_2, 2), input = child(div_3), node_3 = sibling(article_1, 2);
      {
        var consequent_1 = /* @__PURE__ */ __name(($$anchor3) => {
          var fragment_2 = comment(), node_4 = first_child(fragment_2);
          each(node_4, 17, /* @__PURE__ */ __name(() => get(levelsIterator), "$$array"), index, ($$anchor4, _, i2) => {
            var article_2 = root_4$D();
            const hint = /* @__PURE__ */ derived(() => localize(coalesce(config().hints[i2], "TIDY5E.ExhaustionLevelTooltip"), { level: i2 }));
            var section_2 = child(article_2), div_4 = child(section_2), label_2 = child(div_4);
            set_attribute(label_2, "for", `exhaustion-level-${i2 ?? ""}-${appId ?? ""}`);
            var text_5 = child(label_2);
            template_effect(() => set_text(text_5, `${localize("TIDY5E.WorldSettings.Exhaustion.options.specific.levels.tooltip.name", { level: i2 }) ?? ""} `));
            var p_3 = sibling(label_2, 2), text_6 = child(p_3);
            template_effect(() => set_text(text_6, localize("TIDY5E.WorldSettings.Exhaustion.options.specific.levels.tooltip.hint")));
            var div_5 = sibling(div_4, 2), input_1 = child(div_5);
            set_attribute(input_1, "id", `exhaustion-level-${i2 ?? ""}-${appId ?? ""}`), template_effect(() => set_attribute(input_1, "placeholder", localize("TIDY5E.ExhaustionLevelTooltip", { level: i2 }))), template_effect(() => set_attribute(label_2, "title", get(hint))), bind_value(input_1, () => config().hints[i2], ($$value) => config(config().hints[i2] = $$value, !0)), append($$anchor4, article_2);
          }), append($$anchor3, fragment_2);
        }, "consequent_1");
        if_block(node_3, ($$render) => {
          config().type === "specific" && $$render(consequent_1);
        });
      }
      bind_value(input, () => config().levels, ($$value) => config(config().levels = $$value, !0)), append($$anchor2, fragment_1);
    }, "consequent_2");
    if_block(node_2, ($$render) => {
      config().type === "specific" && $$render(consequent_2);
    });
  }
  bind_select_value(select, () => config().type, ($$value) => config(config().type = $$value, !0)), append($$anchor, fragment), pop();
}
__name(ExhaustionSetting, "ExhaustionSetting");
function getDefaultExhaustionConfig() {
  return {
    type: "specific",
    levels: 6,
    hints: []
  };
}
__name(getDefaultExhaustionConfig, "getDefaultExhaustionConfig");
const iconsWithSeverity = [
  { iconCssClass: "far fa-grin", severity: 0 },
  { iconCssClass: "far fa-smile", severity: 1 },
  { iconCssClass: "far fa-meh", severity: 1 },
  { iconCssClass: "far fa-frown", severity: 2 },
  { iconCssClass: "far fa-frown-open", severity: 2 },
  { iconCssClass: "far fa-tired", severity: 3 },
  { iconCssClass: "far fa-dizzy", severity: 3 }
];
function getExhaustionIconsWithSeverity(levels) {
  const levelsIncludingZero = levels + 1;
  if (levelsIncludingZero === 0)
    return [];
  const lastIconWithSeverity = iconsWithSeverity[iconsWithSeverity.length - 1];
  if (levelsIncludingZero === 1)
    return [iconsWithSeverity[0]];
  if (levelsIncludingZero === 2)
    return [iconsWithSeverity[0], lastIconWithSeverity];
  const middleIcons = iconsWithSeverity.slice(1, iconsWithSeverity.length - 1), middleIconsLength = middleIcons.length;
  let distributedIcons = [];
  for (let index2 = 0; index2 < levelsIncludingZero - 2; index2++) {
    const iconIndex = index2 % middleIconsLength;
    distributedIcons.push({
      iconWithSeverity: middleIcons[iconIndex],
      order: iconIndex
    });
  }
  return [
    iconsWithSeverity[0],
    ...distributedIcons.sort((a2, b2) => a2.order - b2.order).map((q) => q.iconWithSeverity),
    lastIconWithSeverity
  ];
}
__name(getExhaustionIconsWithSeverity, "getExhaustionIconsWithSeverity");
var on_click$1u = /* @__PURE__ */ __name((_, context) => mutate(context, get(context).exhaustionConfig = getDefaultExhaustionConfig()), "on_click$1u"), on_click_1$B = /* @__PURE__ */ __name((__1, context) => mutate(context, get(context).vehicleExhaustionConfig = getDefaultExhaustionConfig()), "on_click_1$B"), root$3M = /* @__PURE__ */ template('<div class="settings-form"><!> <h2> </h2> <article class="setting buttons"><button type="button"> </button></article> <!> <h2> </h2> <article class="setting buttons"><button type="button"> </button></article> <!></div>');
function ExhaustionWorldSettingsTab($$anchor, $$props) {
  push($$props, !1);
  const context = mutable_state(getContext(CONSTANTS.SVELTE_CONTEXT.CONTEXT)), localize = FoundryAdapter.localize;
  init();
  var div = root$3M(), node = child(div);
  CheckboxSetting(node, {
    name: "TIDY5E.Settings.UseExhaustion.name",
    hint: "TIDY5E.Settings.UseExhaustion.hint",
    id: "useExhaustion",
    get value() {
      return get(context).settings.useExhaustion;
    },
    set value($$value) {
      mutate(context, get(context).settings.useExhaustion = $$value);
    },
    $$legacy: !0
  });
  var h2 = sibling(node, 2), text2 = child(h2);
  template_effect(() => set_text(text2, localize("TIDY5E.WorldSettings.Exhaustion.Header")));
  var article = sibling(h2, 2), button = child(article);
  button.__click = [on_click$1u, context];
  var text_1 = child(button);
  template_effect(() => set_text(text_1, localize("TIDY5E.UseDefault")));
  var node_1 = sibling(article, 2);
  ExhaustionSetting(node_1, {
    name: "TIDY5E.WorldSettings.Exhaustion.name",
    hint: "TIDY5E.WorldSettings.Exhaustion.hint",
    get config() {
      return get(context).exhaustionConfig;
    },
    set config($$value) {
      mutate(context, get(context).exhaustionConfig = $$value);
    },
    $$legacy: !0
  });
  var h2_1 = sibling(node_1, 2), text_2 = child(h2_1);
  template_effect(() => set_text(text_2, localize("TIDY5E.WorldSettings.VehicleExhaustion.Header")));
  var article_1 = sibling(h2_1, 2), button_1 = child(article_1);
  button_1.__click = [on_click_1$B, context];
  var text_3 = child(button_1);
  template_effect(() => set_text(text_3, localize("TIDY5E.UseDefault")));
  var node_2 = sibling(article_1, 2);
  ExhaustionSetting(node_2, {
    name: "TIDY5E.WorldSettings.VehicleExhaustion.name",
    hint: "TIDY5E.WorldSettings.VehicleExhaustion.hint",
    get config() {
      return get(context).vehicleExhaustionConfig;
    },
    set config($$value) {
      mutate(context, get(context).vehicleExhaustionConfig = $$value);
    },
    $$legacy: !0
  }), append($$anchor, div), pop();
}
__name(ExhaustionWorldSettingsTab, "ExhaustionWorldSettingsTab");
delegate(["click"]);
var root$3L = /* @__PURE__ */ template('<div class="settings-form"><!> <!> <!> <h2> </h2> <p class="tab-notes"> </p> <p class="tab-notes"> </p> <!> <h3> </h3> <!> <!> <!> <h3> </h3> <!> <h3> </h3> <!> <!></div>');
function SheetLockWorldSettingsTab($$anchor, $$props) {
  push($$props, !1);
  const context = mutable_state(getContext(CONSTANTS.SVELTE_CONTEXT.CONTEXT)), localize = FoundryAdapter.localize;
  init();
  var div = root$3L(), node = child(div);
  CheckboxSetting(node, {
    name: "TIDY5E.Settings.PermanentlyUnlockCharacterSheetForGM.name",
    hint: "TIDY5E.Settings.PermanentlyUnlockCharacterSheetForGM.hint",
    id: "permanentlyUnlockCharacterSheetForGm",
    get value() {
      return get(context).settings.permanentlyUnlockCharacterSheetForGm;
    },
    set value($$value) {
      mutate(context, get(context).settings.permanentlyUnlockCharacterSheetForGm = $$value);
    },
    $$legacy: !0
  });
  var node_1 = sibling(node, 2);
  CheckboxSetting(node_1, {
    name: "TIDY5E.Settings.PermanentlyUnlockNPCSheetForGM.name",
    hint: "TIDY5E.Settings.PermanentlyUnlockNPCSheetForGM.hint",
    id: "permanentlyUnlockNpcSheetForGm",
    get value() {
      return get(context).settings.permanentlyUnlockNpcSheetForGm;
    },
    set value($$value) {
      mutate(context, get(context).settings.permanentlyUnlockNpcSheetForGm = $$value);
    },
    $$legacy: !0
  });
  var node_2 = sibling(node_1, 2);
  CheckboxSetting(node_2, {
    name: "TIDY5E.Settings.PermanentlyUnlockVehicleSheetForGM.name",
    hint: "TIDY5E.Settings.PermanentlyUnlockVehicleSheetForGM.hint",
    id: "permanentlyUnlockVehicleSheetForGm",
    get value() {
      return get(context).settings.permanentlyUnlockVehicleSheetForGm;
    },
    set value($$value) {
      mutate(context, get(context).settings.permanentlyUnlockVehicleSheetForGm = $$value);
    },
    $$legacy: !0
  });
  var h2 = sibling(node_2, 2), text2 = child(h2);
  template_effect(() => set_text(text2, localize("TIDY5E.WorldSettings.TabSheetLock.header")));
  var p2 = sibling(h2, 2), text_1 = child(p2);
  template_effect(() => set_text(text_1, localize("TIDY5E.WorldSettings.TabSheetLock.hint")));
  var p_1 = sibling(p2, 2), text_2 = child(p_1);
  template_effect(() => set_text(text_2, localize("TIDY5E.WorldSettings.TabSheetLock.hint2")));
  var node_3 = sibling(p_1, 2);
  CheckboxSetting(node_3, {
    name: "TIDY5E.Settings.UseTotalSheetLock.name",
    hint: "TIDY5E.Settings.UseTotalSheetLock.hint",
    id: "useTotalSheetLock",
    get value() {
      return get(context).settings.useTotalSheetLock;
    },
    set value($$value) {
      mutate(context, get(context).settings.useTotalSheetLock = $$value);
    },
    $$legacy: !0
  });
  var h3 = sibling(node_3, 2), text_3 = child(h3);
  template_effect(() => set_text(text_3, localize("TIDY5E.WorldSettings.TabSheetLock.labelGeneralLocks")));
  var node_4 = sibling(h3, 2);
  CheckboxSetting(node_4, {
    name: "TIDY5E.Settings.LockExpChanges.name",
    hint: "TIDY5E.Settings.LockExpChanges.hint",
    id: "lockExpChanges",
    get value() {
      return get(context).settings.lockExpChanges;
    },
    set value($$value) {
      mutate(context, get(context).settings.lockExpChanges = $$value);
    },
    $$legacy: !0
  });
  var node_5 = sibling(node_4, 2);
  CheckboxSetting(node_5, {
    name: "TIDY5E.Settings.LockHpMaxChanges.name",
    hint: "TIDY5E.Settings.LockHpMaxChanges.hint",
    id: "lockHpMaxChanges",
    get value() {
      return get(context).settings.lockHpMaxChanges;
    },
    set value($$value) {
      mutate(context, get(context).settings.lockHpMaxChanges = $$value);
    },
    $$legacy: !0
  });
  var node_6 = sibling(node_5, 2);
  CheckboxSetting(node_6, {
    name: "TIDY5E.Settings.LockConfigureSheet.name",
    hint: "TIDY5E.Settings.LockConfigureSheet.hint",
    id: "lockConfigureSheet",
    get value() {
      return get(context).settings.lockConfigureSheet;
    },
    set value($$value) {
      mutate(context, get(context).settings.lockConfigureSheet = $$value);
    },
    $$legacy: !0
  });
  var h3_1 = sibling(node_6, 2), text_4 = child(h3_1);
  template_effect(() => set_text(text_4, localize("TIDY5E.WorldSettings.TabSheetLock.labelInventoryLocks")));
  var node_7 = sibling(h3_1, 2);
  CheckboxSetting(node_7, {
    name: "TIDY5E.Settings.LockMoneyChanges.name",
    hint: "TIDY5E.Settings.LockMoneyChanges.hint",
    id: "lockMoneyChanges",
    get value() {
      return get(context).settings.lockMoneyChanges;
    },
    set value($$value) {
      mutate(context, get(context).settings.lockMoneyChanges = $$value);
    },
    $$legacy: !0
  });
  var h3_2 = sibling(node_7, 2), text_5 = child(h3_2);
  template_effect(() => set_text(text_5, localize("TIDY5E.WorldSettings.TabSheetLock.labelFeaturesLocks")));
  var node_8 = sibling(h3_2, 2);
  CheckboxSetting(node_8, {
    name: "TIDY5E.Settings.LockLevelSelector.name",
    hint: "TIDY5E.Settings.LockLevelSelector.hint",
    id: "lockLevelSelector",
    get value() {
      return get(context).settings.lockLevelSelector;
    },
    set value($$value) {
      mutate(context, get(context).settings.lockLevelSelector = $$value);
    },
    $$legacy: !0
  });
  var node_9 = sibling(node_8, 2);
  CheckboxSetting(node_9, {
    name: "TIDY5E.Settings.LockItemQuantity.name",
    hint: "TIDY5E.Settings.LockItemQuantity.hint",
    id: "lockItemQuantity",
    get value() {
      return get(context).settings.lockItemQuantity;
    },
    set value($$value) {
      mutate(context, get(context).settings.lockItemQuantity = $$value);
    },
    $$legacy: !0
  }), append($$anchor, div), pop();
}
__name(SheetLockWorldSettingsTab, "SheetLockWorldSettingsTab");
var root$3K = /* @__PURE__ */ template('<div class="settings-form"><!></div>');
function IconsWorldSettingsTab($$anchor, $$props) {
  push($$props, !1);
  const context = mutable_state(getContext(CONSTANTS.SVELTE_CONTEXT.CONTEXT));
  init();
  var div = root$3K(), node = child(div);
  CheckboxSetting(node, {
    get name() {
      return SettingsProvider.settings.useTidySpellSchoolIcons.options.name;
    },
    get hint() {
      return SettingsProvider.settings.useTidySpellSchoolIcons.options.hint;
    },
    id: "useTidySpellSchoolIcons",
    get value() {
      return get(context).settings.useTidySpellSchoolIcons;
    },
    set value($$value) {
      mutate(context, get(context).settings.useTidySpellSchoolIcons = $$value);
    },
    $$legacy: !0
  }), append($$anchor, div), pop();
}
__name(IconsWorldSettingsTab, "IconsWorldSettingsTab");
async function save(_, applyingChanges, functions) {
  set(applyingChanges, !0);
  try {
    await functions.save();
  } finally {
    set(applyingChanges, !1);
  }
}
__name(save, "save");
async function apply(__1, applyingChanges, functions) {
  set(applyingChanges, !0);
  try {
    await functions.apply();
  } finally {
    set(applyingChanges, !1);
  }
}
__name(apply, "apply");
var root$3J = /* @__PURE__ */ template('<div class="settings-form svelte-1ya24fr"><div role="presentation" class="vertical-tab-container flex-column no-gap svelte-1ya24fr"><!> <div role="presentation" class="remaining-vertical-space svelte-1ya24fr"></div></div> <!> <div class="button-bar svelte-1ya24fr"><button type="button" class="save-changes-btn"><i class="fas fa-save"></i> </button> <button type="button" class="apply-changes-btn"><i class="fas fa-check"></i> </button></div></div>');
function WorldSettings($$anchor, $$props) {
  push($$props, !0);
  let selectedTabId = state(""), functions = getContext(CONSTANTS.SVELTE_CONTEXT.FUNCTIONS);
  getContext(CONSTANTS.SVELTE_CONTEXT.CONTEXT);
  let tabs = [
    {
      id: CONSTANTS.TAB_WORLD_SETTINGS_MISC,
      title: "TIDY5E.WorldSettings.TabMisc.tabLabel",
      content: {
        component: MiscWorldSettingsTab,
        type: "svelte"
      }
    },
    {
      id: CONSTANTS.TAB_WORLD_SETTINGS_CHARACTER,
      title: "TIDY5E.WorldSettings.TabCharacter.tabLabel",
      content: {
        component: CharacterWorldSettingsTab,
        type: "svelte"
      }
    },
    {
      id: CONSTANTS.TAB_WORLD_SETTINGS_NPC,
      title: "TIDY5E.WorldSettings.TabNpc.tabLabel",
      content: {
        component: NpcWorldSettingsTab,
        type: "svelte"
      }
    },
    {
      id: CONSTANTS.TAB_WORLD_SETTINGS_VEHICLE,
      title: "TIDY5E.WorldSettings.TabVehicle.tabLabel",
      content: {
        component: VehicleWorldSettingsTab,
        type: "svelte"
      }
    },
    {
      id: CONSTANTS.TAB_WORLD_SETTINGS_ITEM,
      title: "TIDY5E.WorldSettings.TabItem.tabLabel",
      content: {
        component: ItemWorldSettingsTab,
        type: "svelte"
      }
    },
    {
      id: CONSTANTS.TAB_WORLD_SETTINGS_EXHAUSTION,
      title: "TIDY5E.WorldSettings.TabExhaustion.tabLabel",
      content: {
        component: ExhaustionWorldSettingsTab,
        type: "svelte"
      }
    },
    {
      id: CONSTANTS.TAB_WORLD_SETTINGS_SHEETLOCK,
      title: "TIDY5E.WorldSettings.TabSheetLock.tabLabel",
      content: {
        component: SheetLockWorldSettingsTab,
        type: "svelte"
      }
    },
    {
      id: CONSTANTS.TAB_WORLD_SETTINGS_ICONS,
      title: "TIDY5E.WorldSettings.TabIcons.tabLabel",
      content: {
        component: IconsWorldSettingsTab,
        type: "svelte"
      }
    }
  ];
  set(selectedTabId, proxy(get(selectedTabId) ?? tabs[0].id));
  let applyingChanges = state(!1);
  const localize = FoundryAdapter.localize;
  var div = root$3J(), div_1 = child(div), node = child(div_1);
  Tabs(node, {
    tabs,
    orientation: "vertical",
    get selectedTabId() {
      return get(selectedTabId);
    },
    set selectedTabId($$value) {
      set(selectedTabId, proxy($$value));
    }
  });
  var node_1 = sibling(div_1, 2);
  TabContents(node_1, {
    tabs,
    get selectedTabId() {
      return get(selectedTabId);
    },
    cssClass: "tidy-sheet-body"
  });
  var div_2 = sibling(node_1, 2), button = child(div_2);
  button.__click = [save, applyingChanges, functions];
  var text2 = sibling(child(button));
  template_effect(() => set_text(text2, ` ${localize("TIDY5E.SaveChanges") ?? ""}`));
  var button_1 = sibling(button, 2);
  button_1.__click = [apply, applyingChanges, functions];
  var text_1 = sibling(child(button_1));
  template_effect(() => set_text(text_1, ` ${localize("TIDY5E.ApplyChanges") ?? ""}`)), template_effect(() => {
    button.disabled = get(applyingChanges), button_1.disabled = get(applyingChanges);
  }), append($$anchor, div), pop();
}
__name(WorldSettings, "WorldSettings");
delegate(["click"]);
function clickOutside(node, { callback }) {
  user_effect(() => {
    const controller = new AbortController();
    return setTimeout(() => {
      window.addEventListener(
        "click",
        (e2) => {
          e2.target instanceof Node && !node.contains(e2.target) && callback?.(e2, node);
        },
        { signal: controller.signal }
      );
    }), () => {
      controller.abort();
    };
  });
}
__name(clickOutside, "clickOutside");
function getPositionStyles(openerEl, menuEl, position, anchor, gap) {
  let styleObj = position === "bottom" ? getBottomPositionStyles(openerEl, menuEl) : position === "left" ? getLeftPositionStyles(openerEl, menuEl) : position === "top" ? getTopPositionStyles(openerEl, menuEl) : position === "right" ? getRightPositionStyles(openerEl, menuEl) : null;
  if (!styleObj)
    return "";
  anchor !== "center" && (styleObj = anchorMenu(styleObj, anchor, openerEl, menuEl));
  let styleString = Object.entries({ ...styleObj }).map((x2) => `${x2[0]}: ${x2[1]}px`).join("; ");
  const gapTransform = getGapTransform(position, gap);
  return gapTransform && (styleString += `; transform: ${gapTransform}`), styleString;
}
__name(getPositionStyles, "getPositionStyles");
function getBottomPositionStyles(openerEl, menuEl) {
  const openerCenterX = Math.ceil(
    openerEl.offsetLeft + Math.max(openerEl.offsetWidth, 1) / 2
  );
  return {
    left: Math.ceil(openerCenterX - menuEl.offsetWidth / 2),
    top: Math.ceil(openerEl.offsetTop + openerEl.offsetHeight)
  };
}
__name(getBottomPositionStyles, "getBottomPositionStyles");
function getLeftPositionStyles(openerEl, menuEl) {
  const openerCenterY = Math.ceil(
    openerEl.offsetTop + Math.max(openerEl.offsetHeight, 1) / 2
  );
  return {
    left: Math.ceil(openerEl.offsetLeft - menuEl.offsetWidth),
    top: Math.ceil(openerCenterY - menuEl.offsetHeight / 2)
  };
}
__name(getLeftPositionStyles, "getLeftPositionStyles");
function getRightPositionStyles(openerEl, menuEl) {
  const openerCenterY = Math.ceil(
    openerEl.offsetTop + Math.max(openerEl.offsetHeight, 1) / 2
  );
  return {
    left: Math.ceil(openerEl.offsetLeft + openerEl.offsetWidth),
    top: Math.ceil(openerCenterY - menuEl.offsetHeight / 2)
  };
}
__name(getRightPositionStyles, "getRightPositionStyles");
function getTopPositionStyles(openerEl, menuEl) {
  const openerCenterX = Math.ceil(
    openerEl.offsetLeft + Math.max(openerEl.offsetWidth, 1) / 2
  );
  return {
    left: Math.ceil(openerCenterX - menuEl.offsetWidth / 2),
    top: Math.ceil(openerEl.offsetTop - menuEl.offsetHeight)
  };
}
__name(getTopPositionStyles, "getTopPositionStyles");
function anchorMenu(styleObj, anchor, openerEl, menuEl) {
  switch (anchor) {
    case "top":
      styleObj.top = openerEl.offsetTop;
      break;
    case "right":
      const anchoredMenuLeftPixels = openerEl.offsetLeft + openerEl.offsetWidth - menuEl.offsetWidth;
      styleObj.left = anchoredMenuLeftPixels;
      break;
    case "bottom":
      const anchoredMenuTopPixels = openerEl.offsetTop + openerEl.offsetHeight - menuEl.offsetHeight;
      styleObj.top = anchoredMenuTopPixels;
      break;
    case "left":
      styleObj.left = openerEl.offsetLeft;
      break;
  }
  return styleObj;
}
__name(anchorMenu, "anchorMenu");
function getGapTransform(position, gap) {
  const translation = position === "top" ? `translateY(-${gap})` : position === "right" ? `translateX(${gap})` : position === "bottom" ? `translateY(${gap})` : position === "left" ? `translateX(-${gap})` : null;
  return translation && gap ? translation : null;
}
__name(getGapTransform, "getGapTransform");
var on_click$1t = /* @__PURE__ */ __name((_, open) => open(!open()), "on_click$1t"), root_1$25 = /* @__PURE__ */ template("<i></i>"), root$3I = /* @__PURE__ */ template('<div><button type="button"><!> </button> <!></div>');
function ButtonMenu($$anchor, $$props) {
  push($$props, !0);
  let open = prop($$props, "open", 15, !1), buttonText = prop($$props, "buttonText", 3, ""), iconClass = prop($$props, "iconClass", 3, null), wrapperClass = prop($$props, "wrapperClass", 3, null), listClass = prop($$props, "listClass", 3, null), buttonClass = prop($$props, "buttonClass", 3, null), openerPadding = prop($$props, "openerPadding", 3, null), ariaLabel = prop($$props, "ariaLabel", 3, null), title = prop($$props, "title", 3, null), gap = prop($$props, "gap", 3, "0.25rem"), position = prop($$props, "position", 3, "bottom"), anchor = prop($$props, "anchor", 3, "center"), menuElement = prop($$props, "menuElement", 3, "ul"), buttonStyle = prop($$props, "buttonStyle", 3, "solid"), openerEl, menuStyles = state("");
  setContext(CONSTANTS.SVELTE_CONTEXT.BUTTON_MENU_CONTEXT, { close });
  function close() {
    open(!1);
  }
  __name(close, "close");
  function positionMenu(menuEl) {
    set(menuStyles, proxy(getPositionStyles(openerEl, menuEl, position(), anchor(), gap())));
  }
  __name(positionMenu, "positionMenu");
  let actualIconClass = /* @__PURE__ */ derived(() => {
    if (iconClass() !== null) {
      if (typeof iconClass() == "string")
        return iconClass();
      {
        let potentialClass = open() ? iconClass().opened : iconClass().closed;
        return potentialClass ??= iconClass().opened ?? iconClass().closed, potentialClass;
      }
    }
    return null;
  });
  var div = root$3I(), button = child(div);
  button.__click = [on_click$1t, open];
  var node = child(button);
  {
    var consequent = /* @__PURE__ */ __name(($$anchor2) => {
      var i2 = root_1$25();
      template_effect(() => set_class(i2, clsx(get(actualIconClass)))), append($$anchor2, i2);
    }, "consequent");
    if_block(node, ($$render) => {
      iconClass() && $$render(consequent);
    });
  }
  var text2 = sibling(node);
  bind_this(button, ($$value) => openerEl = $$value, () => openerEl);
  var node_1 = sibling(button, 2);
  {
    var consequent_1 = /* @__PURE__ */ __name(($$anchor2) => {
      var fragment = comment(), node_2 = first_child(fragment);
      element(node_2, menuElement, !1, ($$element, $$anchor3) => {
        action($$element, ($$node, $$action_arg) => clickOutside?.($$node, $$action_arg), () => ({ callback: /* @__PURE__ */ __name(() => close(), "callback") })), action($$element, ($$node) => positionMenu?.($$node));
        let attributes;
        template_effect(() => attributes = set_attributes(
          $$element,
          attributes,
          {
            class: `button-menu-list ${listClass() ?? "" ?? ""}`,
            style: get(menuStyles)
          },
          void 0,
          $$element.namespaceURI === NAMESPACE_SVG,
          $$element.nodeName.includes("-")
        ));
        var fragment_1 = comment(), node_3 = first_child(fragment_1);
        snippet(node_3, () => $$props.children ?? noop), append($$anchor3, fragment_1);
      }), append($$anchor2, fragment);
    }, "consequent_1");
    if_block(node_1, ($$render) => {
      open() && $$render(consequent_1);
    });
  }
  template_effect(() => {
    set_class(div, `button-menu-wrapper ${wrapperClass() ?? "" ?? ""}`), set_attribute(button, "aria-label", ariaLabel()), set_attribute(button, "title", title()), set_class(button, `button-menu-opener ${buttonClass() ?? "" ?? ""} ${buttonStyle() ?? ""}`), set_attribute(button, "tabindex", settings.value.useAccessibleKeyboardSupport ? 0 : -1), set_style(button, "padding", openerPadding()), set_text(text2, ` ${buttonText() ?? ""}`);
  }), append($$anchor, div), pop();
}
__name(ButtonMenu, "ButtonMenu");
delegate(["click"]);
var root$3H = /* @__PURE__ */ template("<li><!></li>");
function ButtonMenuItem($$anchor, $$props) {
  push($$props, !0);
  let cssClass = prop($$props, "cssClass", 3, "");
  var li = root$3H(), node = child(li);
  snippet(node, () => $$props.children ?? noop), template_effect(() => set_class(li, `button-menu-item ${cssClass() ?? ""}`)), append($$anchor, li), pop();
}
__name(ButtonMenuItem, "ButtonMenuItem");
function handleClick(event2, buttonMenuContext, $$props) {
  buttonMenuContext.close(), $$props.onMenuClick?.(event2);
}
__name(handleClick, "handleClick");
var root_3$Q = /* @__PURE__ */ template('<i role="presentation"></i>'), root_2$14 = /* @__PURE__ */ template('<span class="icon-container"><!></span>'), root_1$24 = /* @__PURE__ */ template('<button type="button"><!> <span class="command-text"><!></span></button>');
function ButtonMenuCommand($$anchor, $$props) {
  push($$props, !0);
  let iconClass = prop($$props, "iconClass", 3, ""), useIconColumn = prop($$props, "useIconColumn", 3, !0), title = prop($$props, "title", 3, null), size = prop($$props, "size", 3, "standard"), disabled = prop($$props, "disabled", 3, !1);
  const buttonMenuContext = getContext(CONSTANTS.SVELTE_CONTEXT.BUTTON_MENU_CONTEXT);
  ButtonMenuItem($$anchor, {
    cssClass: "button-menu-command-li",
    children: /* @__PURE__ */ __name(($$anchor2, $$slotProps) => {
      var button = root_1$24();
      button.__click = [handleClick, buttonMenuContext, $$props];
      var node = child(button);
      {
        var consequent_1 = /* @__PURE__ */ __name(($$anchor3) => {
          var span = root_2$14(), node_1 = child(span);
          {
            var consequent = /* @__PURE__ */ __name(($$anchor4) => {
              var i2 = root_3$Q();
              template_effect(() => set_class(i2, clsx(iconClass()))), append($$anchor4, i2);
            }, "consequent");
            if_block(node_1, ($$render) => {
              iconClass() && $$render(consequent);
            });
          }
          append($$anchor3, span);
        }, "consequent_1");
        if_block(node, ($$render) => {
          useIconColumn() && $$render(consequent_1);
        });
      }
      var span_1 = sibling(node, 2), node_2 = child(span_1);
      snippet(node_2, () => $$props.children ?? noop), template_effect(() => {
        set_class(button, `button-menu-command ${size() ?? ""}`), set_attribute(button, "title", title()), button.disabled = disabled(), set_attribute(button, "tabindex", settings.value.useAccessibleKeyboardSupport ? 0 : -1);
      }), append($$anchor2, button);
    }, "children"),
    $$slots: { default: !0 }
  }), pop();
}
__name(ButtonMenuCommand, "ButtonMenuCommand");
delegate(["click"]);
function InlineTextDropdownList($$anchor, $$props) {
  push($$props, !0);
  let isOpen = prop($$props, "isOpen", 15, !1), title = prop($$props, "title", 3, null), buttonClass = prop($$props, "buttonClass", 3, "");
  function optionClicked(selection) {
    $$props.onOptionClicked?.({ ...selection }), isOpen(!1);
  }
  __name(optionClicked, "optionClicked"), ButtonMenu($$anchor, {
    position: "bottom",
    get ariaLabel() {
      return title();
    },
    get title() {
      return title();
    },
    get buttonText() {
      return $$props.selected.text;
    },
    get buttonClass() {
      return `primary ${buttonClass() ?? ""}`;
    },
    buttonStyle: "transparent-inline",
    children: /* @__PURE__ */ __name(($$anchor2, $$slotProps) => {
      var fragment_1 = comment(), node = first_child(fragment_1);
      each(node, 17, () => $$props.options, index, ($$anchor3, option) => {
        ButtonMenuCommand($$anchor3, {
          useIconColumn: !1,
          onMenuClick: /* @__PURE__ */ __name(() => optionClicked(get(option)), "onMenuClick"),
          size: "compact",
          children: /* @__PURE__ */ __name(($$anchor4, $$slotProps2) => {
            var text$1 = text();
            template_effect(() => set_text(text$1, get(option).text)), append($$anchor4, text$1);
          }, "children"),
          $$slots: { default: !0 }
        });
      }), append($$anchor2, fragment_1);
    }, "children"),
    $$slots: { default: !0 }
  }), pop();
}
__name(InlineTextDropdownList, "InlineTextDropdownList");
class ActiveEffectsHelper {
  static {
    __name(this, "ActiveEffectsHelper");
  }
  static isActiveEffectAppliedToField(document2, field) {
    try {
      return document2?.overrides && !isNil(field) && foundry.utils.getProperty(document2.overrides, field);
    } catch (e2) {
      return error(
        "An error occurred while checking if a field has an active effect applied",
        !1,
        e2
      ), debug("Active effect error troubleshooting info", { document: document2, field }), !1;
    }
  }
  static getActiveEffectPills(activeEffect) {
    let result = [];
    return activeEffect.disabled && result.push("EFFECT.Disabled"), activeEffect.transfer && result.push("EFFECT.Transfer"), activeEffect.isSuppressed && result.push("DND5E.Suppressed"), Array.from(activeEffect.statuses).map(
      (x2) => CONFIG.statusEffects.find((y2) => y2.id === x2)?.name ?? x2
    ).forEach((e2) => {
      result.push(e2);
    }), result;
  }
  static findMode(mode, fallback = "—") {
    const entry = Object.entries(CONST.ACTIVE_EFFECT_MODES).find(
      ([_, value]) => value === mode
    );
    return entry ? FoundryAdapter.localize(`EFFECT.MODE_${entry[0]}`) : fallback;
  }
}
function toggleShowAllSkills(_, toggleField, $$props, expanded) {
  toggleField() !== null && $$props.actor.update({ [toggleField()]: !expanded() });
}
__name(toggleShowAllSkills, "toggleShowAllSkills");
var on_click$1s = /* @__PURE__ */ __name((__1, context, skillRef) => FoundryAdapter.renderSkillToolConfig(get(context).actor, "skills", get(skillRef).key), "on_click$1s"), on_click_1$A = /* @__PURE__ */ __name((__2, context, skillRef) => FoundryAdapter.cycleProficiency(get(context).actor, get(skillRef).key, get(skillRef).skill?.value, "skills"), "on_click_1$A"), on_contextmenu$7 = /* @__PURE__ */ __name((__3, context, skillRef) => FoundryAdapter.cycleProficiency(get(context).actor, get(skillRef).key, get(skillRef).skill?.value, "skills", !0), "on_contextmenu$7"), root_3$P = /* @__PURE__ */ template('<button type="button" class="configure-proficiency inline-icon-button svelte-tmgyvr"><i class="fas fa-cog"></i></button> <button type="button" class="skill-proficiency-toggle inline-icon-button svelte-tmgyvr"><!></button>', 1), root_4$C = /* @__PURE__ */ template('<span class="skill-proficiency svelte-tmgyvr"><!></span>'), on_click_2$k = /* @__PURE__ */ __name((event2, context, skillRef) => get(context).actor.rollSkill({ skill: get(skillRef).key, event: event2 }), "on_click_2$k"), root_5$G = /* @__PURE__ */ template('<button type="button" class="tidy5e-skill-name transparent-button rollable svelte-tmgyvr"> </button>'), root_6$u = /* @__PURE__ */ template('<span class="tidy5e-skill-name svelte-tmgyvr"> </span>'), root_8$p = /* @__PURE__ */ template('<span class="skill-ability"> </span>'), root_2$13 = /* @__PURE__ */ template('<li class="proficiency-row skill svelte-tmgyvr"><!> <!> <!> <span class="skill-mod svelte-tmgyvr"> </span> <span class="skill-passive svelte-tmgyvr"> </span></li>'), root_9$p = /* @__PURE__ */ template('<div style="text-align:center;"><a class="toggle-proficient svelte-tmgyvr"><!></a></div>'), root$3G = /* @__PURE__ */ template('<div class="skills-list-container svelte-tmgyvr"><ul class="skills-list svelte-tmgyvr"></ul> <!></div>');
function SkillsList($$anchor, $$props) {
  push($$props, !0);
  let toggleable = prop($$props, "toggleable", 3, !1), expanded = prop($$props, "expanded", 3, !0), toggleField = prop($$props, "toggleField", 3, null), context = /* @__PURE__ */ derived(getSheetContext), skillRefs = /* @__PURE__ */ derived(() => Array.from(Object.entries(get(context).config.skills)).reduce(
    (prev, [key, configSkill]) => {
      const skill = getSkill(key);
      return skill ? (prev.push({
        key,
        label: configSkill.label,
        ability: skill.ability,
        skill
      }), prev) : (warn('Unable to find skill. Ensure custom skills are added at "init" time.', !1, { key, configSkill }), prev);
    },
    []
  ));
  const localize = FoundryAdapter.localize;
  function getSkill(key) {
    return key in get(context).actor.system.skills ? get(context).skills[key] : null;
  }
  __name(getSkill, "getSkill");
  function onSkillAbilityChange(option, skillRef) {
    get(context).actor.update({
      system: {
        skills: { [skillRef.key]: { ability: option } }
      }
    });
  }
  __name(onSkillAbilityChange, "onSkillAbilityChange");
  let showAllSkills = /* @__PURE__ */ derived(() => !toggleable() || expanded()), abilities = /* @__PURE__ */ derived(() => FoundryAdapter.getAbilitiesAsDropdownOptions(get(context).abilities));
  var div = root$3G(), ul = child(div);
  each(ul, 21, () => get(skillRefs), (skillRef) => skillRef.key, ($$anchor2, skillRef) => {
    var fragment = comment();
    const showSkill = /* @__PURE__ */ derived(() => get(skillRef).skill && (get(showAllSkills) || get(skillRef).skill.prof.hasProficiency > 0));
    var node = first_child(fragment);
    {
      var consequent_3 = /* @__PURE__ */ __name(($$anchor3) => {
        var li = root_2$13(), node_1 = child(li);
        {
          var consequent = /* @__PURE__ */ __name(($$anchor4) => {
            var fragment_1 = root_3$P();
            const activeEffectApplied = /* @__PURE__ */ derived(() => ActiveEffectsHelper.isActiveEffectAppliedToField(get(context).actor, `system.skills.${get(skillRef).key}.value`));
            var button = first_child(fragment_1);
            button.__click = [on_click$1s, context, skillRef], template_effect(() => set_attribute(button, "title", localize("DND5E.SkillConfigure")));
            var button_1 = sibling(button, 2);
            button_1.__click = [on_click_1$A, context, skillRef], button_1.__contextmenu = [on_contextmenu$7, context, skillRef], template_effect(() => set_attribute(button_1, "data-tooltip", get(activeEffectApplied) ? localize("DND5E.ActiveEffectOverrideWarning") : null));
            var node_2 = child(button_1);
            html(node_2, () => get(skillRef).skill.icon), template_effect(() => {
              set_attribute(button, "data-tidy-sheet-part", CONSTANTS.SHEET_PARTS.SKILL_CONFIGURATION_CONTROL), set_attribute(button, "tabindex", settings.value.useAccessibleKeyboardSupport ? 0 : -1), set_attribute(button_1, "title", get(skillRef).skill.hover), set_attribute(button_1, "data-tidy-sheet-part", CONSTANTS.SHEET_PARTS.SKILL_PROFICIENCY_TOGGLE), set_attribute(button_1, "tabindex", settings.value.useAccessibleKeyboardSupport ? 0 : -1), button_1.disabled = get(activeEffectApplied);
            }), append($$anchor4, fragment_1);
          }, "consequent"), alternate = /* @__PURE__ */ __name(($$anchor4) => {
            var span = root_4$C(), node_3 = child(span);
            html(node_3, () => get(skillRef).skill.icon), template_effect(() => set_attribute(span, "title", get(skillRef).skill.hover)), append($$anchor4, span);
          }, "alternate");
          if_block(node_1, ($$render) => {
            get(context).editable && get(context).unlocked ? $$render(consequent) : $$render(alternate, !1);
          });
        }
        var node_4 = sibling(node_1, 2);
        {
          var consequent_1 = /* @__PURE__ */ __name(($$anchor4) => {
            var button_2 = root_5$G();
            button_2.__click = [on_click_2$k, context, skillRef];
            var text2 = child(button_2);
            template_effect(() => {
              set_attribute(button_2, "data-tidy-sheet-part", CONSTANTS.SHEET_PARTS.SKILL_ROLLER), set_attribute(button_2, "tabindex", settings.value.useAccessibleKeyboardSupport ? 0 : -1), set_attribute(button_2, "title", get(skillRef).skill.label), set_text(text2, get(skillRef).skill.label);
            }), append($$anchor4, button_2);
          }, "consequent_1"), alternate_1 = /* @__PURE__ */ __name(($$anchor4) => {
            var span_1 = root_6$u(), text_1 = child(span_1);
            template_effect(() => {
              set_attribute(span_1, "title", get(skillRef).skill.label), set_text(text_1, get(skillRef).skill.label);
            }), append($$anchor4, span_1);
          }, "alternate_1");
          if_block(node_4, ($$render) => {
            get(context).editable ? $$render(consequent_1) : $$render(alternate_1, !1);
          });
        }
        var node_5 = sibling(node_4, 2);
        {
          var consequent_2 = /* @__PURE__ */ __name(($$anchor4) => {
            var selected = /* @__PURE__ */ derived(() => ({
              text: get(skillRef).skill.abbreviation,
              value: get(skillRef).skill.abbreviation
            })), title = /* @__PURE__ */ derived(() => get(context).abilities?.[get(skillRef).ability]?.label);
            InlineTextDropdownList($$anchor4, {
              get options() {
                return get(abilities);
              },
              get selected() {
                return get(selected);
              },
              buttonClass: "skill-ability",
              get title() {
                return get(title);
              },
              onOptionClicked: /* @__PURE__ */ __name((option) => onSkillAbilityChange(option, get(skillRef)), "onOptionClicked")
            });
          }, "consequent_2"), alternate_2 = /* @__PURE__ */ __name(($$anchor4) => {
            var span_2 = root_8$p(), text_2 = child(span_2);
            template_effect(() => set_text(text_2, get(skillRef).skill.abbreviation)), append($$anchor4, span_2);
          }, "alternate_2");
          if_block(node_5, ($$render) => {
            get(context).unlocked && get(context).editable ? $$render(consequent_2) : $$render(alternate_2, !1);
          });
        }
        var span_3 = sibling(node_5, 2), text_3 = child(span_3);
        template_effect(() => set_text(text_3, formatAsModifier(get(skillRef).skill.total)));
        var span_4 = sibling(span_3, 2);
        template_effect(() => set_attribute(span_4, "title", `${get(skillRef).skill.label ?? ""} (${localize("DND5E.Passive") ?? ""})`));
        var text_4 = child(span_4);
        template_effect(() => {
          set_attribute(li, "data-tidy-sheet-part", CONSTANTS.SHEET_PARTS.SKILL_CONTAINER), set_attribute(li, "data-key", get(skillRef).key), toggle_class(li, "proficient", get(skillRef).skill.prof.hasProficiency), set_text(text_4, `(${get(skillRef).skill.passive ?? ""})`);
        }), append($$anchor3, li);
      }, "consequent_3");
      if_block(node, ($$render) => {
        get(showSkill) && $$render(consequent_3);
      });
    }
    append($$anchor2, fragment);
  });
  var node_6 = sibling(ul, 2);
  {
    var consequent_5 = /* @__PURE__ */ __name(($$anchor2) => {
      var div_1 = root_9$p(), a2 = child(div_1);
      a2.__click = [
        toggleShowAllSkills,
        toggleField,
        $$props,
        expanded
      ];
      var node_7 = child(a2);
      {
        var consequent_4 = /* @__PURE__ */ __name(($$anchor3) => {
          var text_5 = text();
          template_effect(() => set_text(text_5, localize("TIDY5E.HideNotProficientSkills"))), append($$anchor3, text_5);
        }, "consequent_4"), alternate_3 = /* @__PURE__ */ __name(($$anchor3) => {
          var text_6 = text();
          template_effect(() => set_text(text_6, localize("TIDY5E.ShowNotProficientSkills"))), append($$anchor3, text_6);
        }, "alternate_3");
        if_block(node_7, ($$render) => {
          get(showAllSkills) ? $$render(consequent_4) : $$render(alternate_3, !1);
        });
      }
      template_effect(() => {
        set_attribute(a2, "data-tidy-sheet-part", CONSTANTS.SHEET_PARTS.SKILLS_SHOW_PROFICIENT_TOGGLE), set_attribute(a2, "tabindex", settings.value.useAccessibleKeyboardSupport ? 0 : -1);
      }), append($$anchor2, div_1);
    }, "consequent_5");
    if_block(node_6, ($$render) => {
      toggleable() && get(context).editable && $$render(consequent_5);
    });
  }
  template_effect(() => set_attribute(ul, "data-tidy-sheet-part", CONSTANTS.SHEET_PARTS.SKILLS_LIST)), append($$anchor, div), pop();
}
__name(SkillsList, "SkillsList");
delegate(["click", "contextmenu"]);
var root_2$12 = /* @__PURE__ */ template("<i></i>"), root_3$O = /* @__PURE__ */ template('<span class="trait-label"> </span>'), on_click$1r = /* @__PURE__ */ __name((event2, $$props) => {
  event2.preventDefault(), event2.stopPropagation(), $$props.onConfigureClicked?.(event2);
}, "on_click$1r"), root_4$B = /* @__PURE__ */ template('<button type="button" class="trait-editor inline-icon-button flex-row align-items-flex-start justify-content-center"><i class="fas fa-pencil-alt"></i></button>'), root_1$23 = /* @__PURE__ */ template('<div><span class="trait-icon"><!> <!></span> <div class="trait-label-and-list"><!> <!></div> <!></div>');
function TraitSection($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getSheetContext), iconCssClass = prop($$props, "iconCssClass", 3, void 0), traitCssClass = prop($$props, "traitCssClass", 3, "");
  var fragment = comment(), node = first_child(fragment);
  {
    var consequent_3 = /* @__PURE__ */ __name(($$anchor2) => {
      var div = root_1$23(), span = child(div), node_1 = child(span);
      {
        var consequent = /* @__PURE__ */ __name(($$anchor3) => {
          var i2 = root_2$12();
          template_effect(() => set_class(i2, clsx(iconCssClass()))), append($$anchor3, i2);
        }, "consequent");
        if_block(node_1, ($$render) => {
          iconCssClass() !== void 0 && $$render(consequent);
        });
      }
      var node_2 = sibling(node_1, 2);
      snippet(node_2, () => $$props.customIcon ?? noop);
      var div_1 = sibling(span, 2), node_3 = child(div_1);
      {
        var consequent_1 = /* @__PURE__ */ __name(($$anchor3) => {
          var span_1 = root_3$O(), text2 = child(span_1);
          template_effect(() => set_text(text2, $$props.title)), append($$anchor3, span_1);
        }, "consequent_1");
        if_block(node_3, ($$render) => {
          settings.value.showTraitLabels && $$render(consequent_1);
        });
      }
      var node_4 = sibling(node_3, 2);
      snippet(node_4, () => $$props.children ?? noop);
      var node_5 = sibling(div_1, 2);
      {
        var consequent_2 = /* @__PURE__ */ __name(($$anchor3) => {
          var button = root_4$B();
          button.__click = [on_click$1r, $$props], template_effect(() => {
            set_attribute(button, "title", $$props.configureButtonTitle), set_attribute(button, "tabindex", settings.value.useAccessibleKeyboardSupport ? 0 : -1);
          }), append($$anchor3, button);
        }, "consequent_2");
        if_block(node_5, ($$render) => {
          get(context).unlocked && $$render(consequent_2);
        });
      }
      template_effect(() => {
        set_class(div, `trait-form-group ${traitCssClass() ?? "" ?? ""}`), set_attribute(div, "data-tidy-sheet-part", CONSTANTS.SHEET_PARTS.ACTOR_TRAIT), set_attribute(span, "aria-label", $$props.title), set_attribute(span, "title", $$props.title), set_attribute(div_1, "data-tidy-sheet-part", CONSTANTS.SHEET_PARTS.ACTOR_TRAIT_DETAILS);
      }), append($$anchor2, div);
    }, "consequent_3");
    if_block(node, ($$render) => {
      $$props.show && $$render(consequent_3);
    });
  }
  append($$anchor, fragment), pop();
}
__name(TraitSection, "TraitSection");
delegate(["click"]);
var on_click$1q = /* @__PURE__ */ __name((event2, context, key, tool) => {
  event2.preventDefault(), event2.stopPropagation(), FoundryAdapter.cycleProficiency(get(context).actor, key(), tool().value, "tools");
}, "on_click$1q"), on_contextmenu$6 = /* @__PURE__ */ __name((event2, context, key, tool) => {
  event2.preventDefault(), event2.stopPropagation(), FoundryAdapter.cycleProficiency(get(context).actor, key(), tool().value, "tools", !0);
}, "on_contextmenu$6"), root_2$11 = /* @__PURE__ */ template('<button type="button" class="tool-proficiency-toggle inline-transparent-button"><!></button>'), root_3$N = /* @__PURE__ */ template('<span class="tool-proficiency-readonly"><!></span>'), on_click_1$z = /* @__PURE__ */ __name((event2, context, key) => get(context).actor.rollToolCheck({ tool: key(), event: event2 }), "on_click_1$z"), root_4$A = /* @__PURE__ */ template('<button type="button" class="tool-check-roller inline-transparent-button rollable"> </button>'), root_5$F = /* @__PURE__ */ template('<span class="tool-check-roller"> </span>'), on_click_2$j = /* @__PURE__ */ __name((event2, context, key) => {
  event2.preventDefault(), event2.stopPropagation(), FoundryAdapter.renderSkillToolConfig(get(context).actor, "tools", key());
}, "on_click_2$j"), root_6$t = /* @__PURE__ */ template('<button type="button" class="tool-proficiency-editor inline-icon-button"><i class="fas fa-cog"></i></button>'), root_1$22 = /* @__PURE__ */ template('<li class="tool"><!> <!> <!></li>'), root$3F = /* @__PURE__ */ template('<ul class="trait-list tools"></ul>');
function TraitSectionTools($$anchor, $$props) {
  push($$props, !0);
  let tools = prop($$props, "tools", 19, () => []), context = /* @__PURE__ */ derived(getSheetContext);
  const localize = FoundryAdapter.localize;
  var ul = root$3F();
  each(ul, 21, tools, index, ($$anchor2, $$item) => {
    let key = /* @__PURE__ */ __name(() => get($$item)[0], "key"), tool = /* @__PURE__ */ __name(() => get($$item)[1], "tool");
    var li = root_1$22(), node = child(li);
    {
      var consequent = /* @__PURE__ */ __name(($$anchor3) => {
        var button = root_2$11();
        const activeEffectApplied = /* @__PURE__ */ derived(() => ActiveEffectsHelper.isActiveEffectAppliedToField(get(context).actor, `system.tools.${key()}.value`));
        button.__click = [on_click$1q, context, key, tool], button.__contextmenu = [on_contextmenu$6, context, key, tool], template_effect(() => set_attribute(button, "data-tooltip", get(activeEffectApplied) ? localize("DND5E.ActiveEffectOverrideWarning") : null));
        var node_1 = child(button);
        html(node_1, () => tool().icon), template_effect(() => {
          set_attribute(button, "title", tool().hover), set_attribute(button, "data-tidy-sheet-part", CONSTANTS.SHEET_PARTS.TOOL_PROFICIENCY_TOGGLE), set_attribute(button, "tabindex", settings.value.useAccessibleKeyboardSupport ? 0 : -1), button.disabled = get(activeEffectApplied);
        }), append($$anchor3, button);
      }, "consequent"), alternate = /* @__PURE__ */ __name(($$anchor3) => {
        var span = root_3$N(), node_2 = child(span);
        html(node_2, () => tool().icon), template_effect(() => set_attribute(span, "title", tool().hover)), append($$anchor3, span);
      }, "alternate");
      if_block(node, ($$render) => {
        get(context).editable && !get(context).lockSensitiveFields ? $$render(consequent) : $$render(alternate, !1);
      });
    }
    var node_3 = sibling(node, 2);
    {
      var consequent_1 = /* @__PURE__ */ __name(($$anchor3) => {
        var button_1 = root_4$A();
        button_1.__click = [on_click_1$z, context, key];
        var text2 = child(button_1);
        template_effect(() => {
          set_attribute(button_1, "data-tidy-sheet-part", CONSTANTS.SHEET_PARTS.TOOL_ROLLER), set_attribute(button_1, "tabindex", settings.value.useAccessibleKeyboardSupport ? 0 : -1), set_text(text2, tool().label);
        }), append($$anchor3, button_1);
      }, "consequent_1"), alternate_1 = /* @__PURE__ */ __name(($$anchor3) => {
        var span_1 = root_5$F(), text_1 = child(span_1);
        template_effect(() => set_text(text_1, tool().label)), append($$anchor3, span_1);
      }, "alternate_1");
      if_block(node_3, ($$render) => {
        get(context).editable ? $$render(consequent_1) : $$render(alternate_1, !1);
      });
    }
    var node_4 = sibling(node_3, 2);
    {
      var consequent_2 = /* @__PURE__ */ __name(($$anchor3) => {
        var button_2 = root_6$t();
        template_effect(() => set_attribute(button_2, "title", localize("DND5E.ToolConfigure"))), button_2.__click = [on_click_2$j, context, key], template_effect(() => {
          set_attribute(button_2, "data-tidy-sheet-part", CONSTANTS.SHEET_PARTS.TOOL_CONFIGURATION_CONTROL), set_attribute(button_2, "tabindex", settings.value.useAccessibleKeyboardSupport ? 0 : -1);
        }), append($$anchor3, button_2);
      }, "consequent_2");
      if_block(node_4, ($$render) => {
        get(context).unlocked && $$render(consequent_2);
      });
    }
    template_effect(() => {
      set_attribute(li, "data-tidy-sheet-part", CONSTANTS.SHEET_PARTS.TOOL_CONTAINER), set_attribute(li, "data-key", key());
    }), append($$anchor2, li);
  }), template_effect(() => set_attribute(ul, "data-tidy-sheet-part", CONSTANTS.SHEET_PARTS.TOOLS_LIST)), append($$anchor, ul), pop();
}
__name(TraitSectionTools, "TraitSectionTools");
delegate(["click", "contextmenu"]);
var root_1$21 = /* @__PURE__ */ template("<li><!></li>"), root$3E = /* @__PURE__ */ template('<ul class="trait-list traits"></ul>');
function TraitSectionTags($$anchor, $$props) {
  push($$props, !0);
  let tags = prop($$props, "tags", 19, () => []), tagCssClass = prop($$props, "tagCssClass", 3, "");
  var ul = root$3E();
  each(ul, 21, tags, index, ($$anchor2, $$item) => {
    let key = /* @__PURE__ */ __name(() => get($$item)[0], "key"), value = /* @__PURE__ */ __name(() => get($$item)[1], "value");
    var li = root_1$21(), node = child(li);
    {
      var consequent = /* @__PURE__ */ __name(($$anchor3) => {
        var fragment = comment(), node_1 = first_child(fragment);
        snippet(node_1, () => $$props.children, () => ({ key: key(), value: value() })), append($$anchor3, fragment);
      }, "consequent"), alternate = /* @__PURE__ */ __name(($$anchor3) => {
        var text$1 = text();
        template_effect(() => set_text(text$1, value())), append($$anchor3, text$1);
      }, "alternate");
      if_block(node, ($$render) => {
        $$props.children ? $$render(consequent) : $$render(alternate, !1);
      });
    }
    template_effect(() => set_class(li, `trait-tag ${key() ?? ""} ${tagCssClass() ?? ""}`)), append($$anchor2, li);
  }), append($$anchor, ul), pop();
}
__name(TraitSectionTags, "TraitSectionTags");
var root_2$10 = /* @__PURE__ */ template("<i></i>"), root_1$20 = /* @__PURE__ */ template("<li><!> </li>"), root$3D = /* @__PURE__ */ template('<ul class="damage-modifications"></ul>');
function TraitSectionModifications($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getSheetContext);
  const localize = FoundryAdapter.localize;
  var ul = root$3D();
  each(ul, 21, () => $$props.modifications, index, ($$anchor2, modification) => {
    var li = root_1$20(), node = child(li);
    each(node, 17, () => get(modification).icons ?? [], index, ($$anchor3, icon) => {
      var i2 = root_2$10();
      const propertyLabel = /* @__PURE__ */ derived(() => get(context).config.itemProperties[get(icon)]?.label ?? "");
      template_effect(() => set_attribute(i2, "title", localize("DND5E.DamagePhysicalBypassesShort", { type: get(propertyLabel) }))), template_effect(() => set_class(i2, `damage-modification-icon ${get(icon) ?? ""}`)), append($$anchor3, i2);
    });
    var text2 = sibling(node);
    template_effect(() => {
      set_class(li, `damage-modification ${get(modification).consequence ?? ""} flex-row extra-small-gap`), set_text(text2, ` ${get(modification).label ?? ""}`);
    }), append($$anchor2, li);
  }), append($$anchor, ul), pop();
}
__name(TraitSectionModifications, "TraitSectionModifications");
class TidyFlags {
  static {
    __name(this, "TidyFlags");
  }
  static getFlagPropertyPath(key) {
    return `flags.${CONSTANTS.MODULE_ID}.${key}`;
  }
  /**
   * Determines whether an item whose default Action List behavior has been overridden
   * to be included (`true`) or excluded (`false`).
   * `undefined` means there is no override and standard Action List logic should be used.
   * */
  static actionFilterOverride = {
    key: "action-filter-override",
    prop: TidyFlags.getFlagPropertyPath("action-filter-override"),
    /** Gets the item's Action Filter Override setting. */
    get(item) {
      return TidyFlags.tryGetFlag(
        item,
        TidyFlags.actionFilterOverride.key
      ) ?? void 0;
    },
    /** Sets the item's Action Filter Override setting. */
    set(item, value) {
      return TidyFlags.setFlag(item, TidyFlags.actionFilterOverride.key, value);
    },
    /**
     * Clears the item's Action Filter Override setting,
     * meaning the item should use the standard Action List logic
     * for inclusion or exclusion. */
    unset(item) {
      return TidyFlags.unsetFlag(item, TidyFlags.actionFilterOverride.key);
    }
  };
  /**
   * Indicates a custom section name for a given item,
   * which determines the item's section placement
   * in the Actions tab.
   */
  static actionSection = {
    key: "actionSection",
    prop: TidyFlags.getFlagPropertyPath("actionSection"),
    /** Gets the item's Action Section setting. */
    get(item) {
      return TidyFlags.tryGetFlag(item, TidyFlags.actionSection.key) ?? void 0;
    },
    /** Sets the item's Action Section setting. */
    set(item, value) {
      return TidyFlags.setFlag(item, TidyFlags.actionSection.key, value);
    },
    /**
     * Clears the item's Action Section setting,
     * meaning the item should use its default action section
     * in the Actions tab.
     */
    unset(item) {
      return TidyFlags.unsetFlag(item, TidyFlags.actionSection.key);
    }
  };
  /**
   * The age of an actor.
   * For this module, it is only an informational biographical field.
   */
  static age = {
    key: "age",
    prop: TidyFlags.getFlagPropertyPath("age"),
    /** Gets the actor's age. */
    get(actor) {
      return TidyFlags.tryGetFlag(actor, TidyFlags.age.key) ?? void 0;
    },
    /** Sets the actor's age. */
    set(actor, value) {
      return TidyFlags.setFlag(actor, TidyFlags.age.key, value);
    },
    /** Clears the actor's age. */
    unset(actor) {
      return TidyFlags.unsetFlag(actor, TidyFlags.age.key);
    }
  };
  /**
   * Determines whether an actor's sheet should be editable per the sheet lock feature (default `true`).
   * @param actor the actor
   * @returns whether the sheet should be editable per the sheet lock feature
   */
  static allowEdit = {
    key: "allow-edit",
    prop: TidyFlags.getFlagPropertyPath("allow-edit"),
    /** Denotes whether the sheet is in edit mode. */
    get(document2) {
      return TidyFlags.tryGetFlag(document2, "allow-edit") ?? !0;
    },
    /** Sets whether the sheet is in edit mode. */
    set(document2, value) {
      return TidyFlags.setFlag(document2, TidyFlags.allowEdit.key, value);
    },
    /** Removes the actor's edit mode setting. */
    unset(document2) {
      return TidyFlags.unsetFlag(document2, TidyFlags.allowEdit.key);
    }
  };
  /**
   * The appearance of an actor.
   * For this module, it is only an informational biographical field.
   */
  static appearance = {
    key: "appearance",
    prop: TidyFlags.getFlagPropertyPath("appearance"),
    /** Gets the actor's appearance. */
    get(actor) {
      return TidyFlags.tryGetFlag(actor, TidyFlags.appearance.key) ?? void 0;
    },
    /** Sets the actor's appearance. */
    set(actor, value) {
      return TidyFlags.setFlag(actor, TidyFlags.appearance.key, value);
    },
    /** Clears the actor's appearance. */
    unset(actor) {
      return TidyFlags.unsetFlag(actor, TidyFlags.appearance.key);
    }
  };
  /**
   * A field used to filter spells based on an indicated class,
   * showing only spells whose `system.sourceClass` property matches
   * this `classFilter` selection.
   */
  static classFilter = {
    key: "classFilter",
    prop: TidyFlags.getFlagPropertyPath("classFilter"),
    /** Gets the actor's class filter. */
    get(actor) {
      return TidyFlags.tryGetFlag(actor, TidyFlags.classFilter.key) ?? void 0;
    },
    /** Sets the actor's class filter. */
    set(actor, value) {
      return TidyFlags.setFlag(actor, TidyFlags.classFilter.key, value);
    },
    /** Clears the actor's class filter. */
    unset(actor) {
      return TidyFlags.unsetFlag(actor, TidyFlags.classFilter.key);
    }
  };
  /**
   * The level exhaustion for a given actor.
   * This flag applies to actors which don't yet possess
   * standard exhaustion schema from the dnd5e system.
   */
  static exhaustion = {
    key: "exhaustion",
    prop: TidyFlags.getFlagPropertyPath("exhaustion"),
    /** Gets the actor's exhaustion level. */
    get(actor) {
      return TidyFlags.tryGetFlag(actor, TidyFlags.exhaustion.key) ?? void 0;
    },
    /** Sets the actor's exhaustion level. */
    set(actor, value) {
      return TidyFlags.setFlag(actor, TidyFlags.exhaustion.key, value);
    },
    /** Clears the actor's exhaustion level. */
    unset(actor) {
      return TidyFlags.unsetFlag(actor, TidyFlags.exhaustion.key);
    }
  };
  /**
   * The eyes of an actor.
   * For this module, it is only an informational biographical field.
   */
  static eyes = {
    key: "eyes",
    prop: TidyFlags.getFlagPropertyPath("eyes"),
    /** Gets the actor's eyes. */
    get(actor) {
      return TidyFlags.tryGetFlag(actor, TidyFlags.eyes.key) ?? void 0;
    },
    /** Sets the actor's eyes. */
    set(actor, value) {
      return TidyFlags.setFlag(actor, TidyFlags.eyes.key, value);
    },
    /** Clears the actor's eyes. */
    unset(actor) {
      return TidyFlags.unsetFlag(actor, TidyFlags.eyes.key);
    }
  };
  /**
   * The faith of an actor.
   * For this module, it is only an informational biographical field.
   */
  static faith = {
    key: "faith",
    prop: TidyFlags.getFlagPropertyPath("faith"),
    /** Gets the actor's faith. */
    get(actor) {
      return TidyFlags.tryGetFlag(actor, TidyFlags.faith.key) ?? void 0;
    },
    /** Sets the actor's faith. */
    set(actor, value) {
      return TidyFlags.setFlag(actor, TidyFlags.faith.key, value);
    },
    /** Clears the actor's faith. */
    unset(actor) {
      return TidyFlags.unsetFlag(actor, TidyFlags.faith.key);
    }
  };
  /**
   * The gender of an actor.
   * For this module, it is only an informational biographical field.
   */
  static gender = {
    key: "gender",
    prop: TidyFlags.getFlagPropertyPath("gender"),
    /** Gets the actor's gender. */
    get(actor) {
      return TidyFlags.tryGetFlag(actor, TidyFlags.gender.key) ?? void 0;
    },
    /** Sets the actor's gender. */
    set(actor, value) {
      return TidyFlags.setFlag(actor, TidyFlags.gender.key, value);
    },
    /** Clears the actor's gender. */
    unset(actor) {
      return TidyFlags.unsetFlag(actor, TidyFlags.gender.key);
    }
  };
  /**
   * The hair of an actor.
   * For this module, it is only an informational biographical field.
   */
  static hair = {
    key: "hair",
    prop: TidyFlags.getFlagPropertyPath("hair"),
    /** Gets the actor's hair. */
    get(actor) {
      return TidyFlags.tryGetFlag(actor, TidyFlags.hair.key) ?? void 0;
    },
    /** Sets the actor's hair. */
    set(actor, value) {
      return TidyFlags.setFlag(actor, TidyFlags.hair.key, value);
    },
    /** Clears the actor's hair. */
    unset(actor) {
      return TidyFlags.unsetFlag(actor, TidyFlags.hair.key);
    }
  };
  /**
   * The height of an actor.
   * For this module, it is only an informational biographical field.
   */
  static height = {
    key: "height",
    prop: TidyFlags.getFlagPropertyPath("height"),
    /** Gets the actor's height. */
    get(actor) {
      return TidyFlags.tryGetFlag(actor, TidyFlags.height.key) ?? void 0;
    },
    /** Sets the actor's height. */
    set(actor, value) {
      return TidyFlags.setFlag(actor, TidyFlags.height.key, value);
    },
    /** Clears the actor's height. */
    unset(actor) {
      return TidyFlags.unsetFlag(actor, TidyFlags.height.key);
    }
  };
  /**
   * Denotes whether to show a grid for a given inventory screen.
   */
  static inventoryGrid = {
    key: "inventory-grid",
    prop: TidyFlags.getFlagPropertyPath("inventory-grid"),
    /** Gets whether to show a grid for a given inventory screen. */
    get(document2) {
      return TidyFlags.tryGetFlag(document2, TidyFlags.inventoryGrid.key) === !0;
    },
    /** Sets whether to show a grid for a given inventory screen. */
    set(document2) {
      return TidyFlags.setFlag(document2, TidyFlags.inventoryGrid.key, !0);
    },
    /** Clears whether to show a grid for a given inventory screen. */
    unset(document2) {
      return TidyFlags.unsetFlag(document2, TidyFlags.inventoryGrid.key);
    }
  };
  /**
   * Denotes whether a vehicle is moving.
   */
  static motion = {
    key: "motion",
    prop: TidyFlags.getFlagPropertyPath("motion"),
    /** Gets whether a vehicle is moving. */
    get(actor) {
      return TidyFlags.tryGetFlag(actor, TidyFlags.motion.key) ?? void 0;
    },
    /** Sets whether a vehicle is moving. */
    set(actor, value) {
      return TidyFlags.setFlag(actor, TidyFlags.motion.key, value);
    },
    /** Clears whether a vehicle is moving. */
    unset(actor) {
      return TidyFlags.unsetFlag(actor, TidyFlags.motion.key);
    }
  };
  /**
   * Journal notes for an actor.
   * This flag is for actors which don't yet have the standard notes schema.
   */
  static notes = {
    key: "notes",
    prop: TidyFlags.getFlagPropertyPath("notes"),
    /** Gets the actor's journal notes. */
    get(actor) {
      return TidyFlags.tryGetFlag(
        actor,
        TidyFlags.notes.key
      ) ?? void 0;
    },
    /** Sets the actor's journal notes. */
    set(actor, value) {
      return TidyFlags.setFlag(actor, TidyFlags.notes.key, value);
    },
    /** Clears the actor's journal notes. */
    unset(actor) {
      return TidyFlags.unsetFlag(actor, TidyFlags.notes.key);
    },
    /** The individual members of this flag. For flags that are not primitive values. */
    members: {
      /** The notes HTML. */
      value: {
        key: "notes.value",
        prop: TidyFlags.getFlagPropertyPath("notes.value"),
        /** Gets the actor's notes HTML. */
        get(actor) {
          return TidyFlags.tryGetFlag(
            actor,
            TidyFlags.notes.members.value.key
          ) ?? void 0;
        },
        /** Sets the actor's notes HTML. */
        set(actor, value) {
          return TidyFlags.setFlag(
            actor,
            TidyFlags.notes.members.value.key,
            value
          );
        },
        /** Clears the actor's notes HTML. */
        unset(actor) {
          return TidyFlags.unsetFlag(actor, TidyFlags.notes.members.value.key);
        }
      }
    }
  };
  /**
   * Named journal notes for an actor.
   * These notes represent extra notes that are available
   * to actors for compartmentalizing notes.
   */
  static notes1 = {
    key: "notes1",
    prop: TidyFlags.getFlagPropertyPath("notes1"),
    /** Gets the actor's first named journal notes. */
    get(actor) {
      return TidyFlags.tryGetFlag(actor, TidyFlags.notes1.key) ?? void 0;
    },
    /** Sets the actor's first named journal notes. */
    set(actor, value) {
      return TidyFlags.setFlag(actor, TidyFlags.notes1.key, value);
    },
    /** Clears the actor's first named journal notes. */
    unset(actor) {
      return TidyFlags.unsetFlag(actor, TidyFlags.notes1.key);
    },
    /** The individual members of this flag. For flags that are not primitive values. */
    members: {
      /** The notes name. */
      name: {
        key: "notes1.name",
        prop: TidyFlags.getFlagPropertyPath("notes1.name"),
        /** Gets the actor's first named journal notes name. */
        get(actor) {
          return TidyFlags.tryGetFlag(
            actor,
            TidyFlags.notes1.members.name.key
          ) ?? void 0;
        },
        /** Sets the actor's first named journal notes name. */
        set(actor, value) {
          return TidyFlags.setFlag(
            actor,
            TidyFlags.notes1.members.name.key,
            value
          );
        },
        /** Clears the actor's first named journal notes name. */
        unset(actor) {
          return TidyFlags.unsetFlag(actor, TidyFlags.notes1.members.name.key);
        }
      },
      /** The notes HTML. */
      value: {
        key: "notes1.value",
        prop: TidyFlags.getFlagPropertyPath("notes1.value"),
        /** Gets the actor's first named journal notes HTML. */
        get(actor) {
          return TidyFlags.tryGetFlag(
            actor,
            TidyFlags.notes1.members.value.key
          ) ?? void 0;
        },
        /** Sets the actor's first named journal notes HTML. */
        set(actor, value) {
          return TidyFlags.setFlag(
            actor,
            TidyFlags.notes1.members.value.key,
            value
          );
        },
        /** Clears the actor's first named journal notes HTML. */
        unset(actor) {
          return TidyFlags.unsetFlag(actor, TidyFlags.notes1.members.value.key);
        }
      }
    }
  };
  /**
   * Named journal notes for an actor.
   * These notes represent extra notes that are available
   * to actors for compartmentalizing notes.
   */
  static notes2 = {
    key: "notes2",
    prop: TidyFlags.getFlagPropertyPath("notes2"),
    /** Gets the actor's second named journal notes. */
    get(actor) {
      return TidyFlags.tryGetFlag(actor, TidyFlags.notes2.key) ?? void 0;
    },
    /** Sets the actor's second named journal notes. */
    set(actor, value) {
      return TidyFlags.setFlag(actor, TidyFlags.notes2.key, value);
    },
    /** Clears the actor's second named journal notes. */
    unset(actor) {
      return TidyFlags.unsetFlag(actor, TidyFlags.notes2.key);
    },
    /** The individual members of this flag. For flags that are not primitive values. */
    members: {
      /** The notes name. */
      name: {
        key: "notes2.name",
        prop: TidyFlags.getFlagPropertyPath("notes2.name"),
        /** Gets the actor's second named journal notes name. */
        get(actor) {
          return TidyFlags.tryGetFlag(
            actor,
            TidyFlags.notes2.members.name.key
          ) ?? void 0;
        },
        /** Sets the actor's second named journal notes name. */
        set(actor, value) {
          return TidyFlags.setFlag(
            actor,
            TidyFlags.notes2.members.name.key,
            value
          );
        },
        /** Clears the actor's second named journal notes name. */
        unset(actor) {
          return TidyFlags.unsetFlag(actor, TidyFlags.notes2.members.name.key);
        }
      },
      /** The notes HTML. */
      value: {
        key: "notes2.value",
        prop: TidyFlags.getFlagPropertyPath("notes2.value"),
        /** Gets the actor's second named journal notes HTML. */
        get(actor) {
          return TidyFlags.tryGetFlag(
            actor,
            TidyFlags.notes2.members.value.key
          ) ?? void 0;
        },
        /** Sets the actor's second named journal notes HTML. */
        set(actor, value) {
          return TidyFlags.setFlag(
            actor,
            TidyFlags.notes2.members.value.key,
            value
          );
        },
        /** Clears the actor's second named journal notes HTML. */
        unset(actor) {
          return TidyFlags.unsetFlag(actor, TidyFlags.notes2.members.value.key);
        }
      }
    }
  };
  /**
   * Named journal notes for an actor.
   * These notes represent extra notes that are available
   * to actors for compartmentalizing notes.
   */
  static notes3 = {
    key: "notes3",
    prop: TidyFlags.getFlagPropertyPath("notes3"),
    /** Gets the actor's third named journal notes. */
    get(actor) {
      return TidyFlags.tryGetFlag(actor, TidyFlags.notes3.key) ?? void 0;
    },
    /** Sets the actor's third named journal notes. */
    set(actor, value) {
      return TidyFlags.setFlag(actor, TidyFlags.notes3.key, value);
    },
    /** Clears the actor's third named journal notes. */
    unset(actor) {
      return TidyFlags.unsetFlag(actor, TidyFlags.notes3.key);
    },
    members: {
      name: {
        key: "notes3.name",
        prop: TidyFlags.getFlagPropertyPath("notes3.name"),
        /** Gets the actor's third named journal notes name. */
        get(actor) {
          return TidyFlags.tryGetFlag(
            actor,
            TidyFlags.notes3.members.name.key
          ) ?? void 0;
        },
        /** Sets the actor's third named journal notes name. */
        set(actor, value) {
          return TidyFlags.setFlag(
            actor,
            TidyFlags.notes3.members.name.key,
            value
          );
        },
        /** Clears the actor's third named journal notes name. */
        unset(actor) {
          return TidyFlags.unsetFlag(actor, TidyFlags.notes3.members.name.key);
        }
      },
      value: {
        key: "notes3.value",
        prop: TidyFlags.getFlagPropertyPath("notes3.value"),
        /** Gets the actor's third named journal notes HTML. */
        get(actor) {
          return TidyFlags.tryGetFlag(
            actor,
            TidyFlags.notes3.members.value.key
          ) ?? void 0;
        },
        /** Sets the actor's third named journal notes HTML. */
        set(actor, value) {
          return TidyFlags.setFlag(
            actor,
            TidyFlags.notes3.members.value.key,
            value
          );
        },
        /** Clears the actor's third named journal notes HTML. */
        unset(actor) {
          return TidyFlags.unsetFlag(actor, TidyFlags.notes3.members.value.key);
        }
      }
    }
  };
  /**
   * Named journal notes for an actor.
   * These notes represent extra notes that are available
   * to actors for compartmentalizing notes.
   */
  static notes4 = {
    key: "notes4",
    prop: TidyFlags.getFlagPropertyPath("notes4"),
    /** Gets the actor's fourth named journal notes. */
    get(actor) {
      return TidyFlags.tryGetFlag(actor, TidyFlags.notes4.key) ?? void 0;
    },
    /** Sets the actor's fourth named journal notes. */
    set(actor, value) {
      return TidyFlags.setFlag(actor, TidyFlags.notes4.key, value);
    },
    /** Clears the actor's fourth named journal notes. */
    unset(actor) {
      return TidyFlags.unsetFlag(actor, TidyFlags.notes4.key);
    },
    /** The individual members of this flag. For flags that are not primitive values. */
    members: {
      /** The notes name. */
      name: {
        key: "notes4.name",
        prop: TidyFlags.getFlagPropertyPath("notes4.name"),
        /** Gets the actor's fourth named journal notes name. */
        get(actor) {
          return TidyFlags.tryGetFlag(
            actor,
            TidyFlags.notes4.members.name.key
          ) ?? void 0;
        },
        /** Sets the actor's fourth named journal notes name. */
        set(actor, value) {
          return TidyFlags.setFlag(
            actor,
            TidyFlags.notes4.members.name.key,
            value
          );
        },
        /** Clears the actor's fourth named journal notes name. */
        unset(actor) {
          return TidyFlags.unsetFlag(actor, TidyFlags.notes4.members.name.key);
        }
      },
      /** The notes HTML. */
      value: {
        key: "notes4.value",
        prop: TidyFlags.getFlagPropertyPath("notes4.value"),
        /** Gets the actor's fourth named journal notes HTML. */
        get(actor) {
          return TidyFlags.tryGetFlag(
            actor,
            TidyFlags.notes4.members.value.key
          ) ?? void 0;
        },
        /** Sets the actor's fourth named journal notes HTML. */
        set(actor, value) {
          return TidyFlags.setFlag(
            actor,
            TidyFlags.notes4.members.value.key,
            value
          );
        },
        /** Clears the actor's fourth named journal notes HTML. */
        unset(actor) {
          return TidyFlags.unsetFlag(actor, TidyFlags.notes4.members.value.key);
        }
      }
    }
  };
  /**
   * The name of the player who owns the actor.
   * This is informational and not used for game logic.
   */
  static playerName = {
    key: "playerName",
    prop: TidyFlags.getFlagPropertyPath("playerName"),
    /** Gets the name of the player who owns the actor. */
    get(actor) {
      return TidyFlags.tryGetFlag(actor, TidyFlags.playerName.key) ?? void 0;
    },
    /** Sets the name of the player who owns the actor. */
    set(actor, value) {
      return TidyFlags.setFlag(actor, TidyFlags.playerName.key, value);
    },
    /** Clears the name of the player who owns the actor. */
    unset(actor) {
      return TidyFlags.unsetFlag(actor, TidyFlags.playerName.key);
    }
  };
  /**
   * Indicates a custom section name for a given item
   * which determines the item's section placement
   * in the item's default tab, as well as any other locations
   * that aren't the Actions tab.
   */
  static section = {
    key: "section",
    prop: TidyFlags.getFlagPropertyPath("section"),
    unsetProp: TidyFlags.getFlagPropertyPath("-=section"),
    /** Gets the custom section name for an item. */
    get(item) {
      return TidyFlags.tryGetFlag(item, TidyFlags.section.key) ?? void 0;
    },
    /** Sets the custom section name for an item. */
    set(item, value) {
      return TidyFlags.setFlag(item, TidyFlags.section.key, value);
    },
    /**
     * Clears the item's custom section setting,
     * meaning the item should use its default section
     * in the item's default tab, as well as any other locations
     * that aren't the Actions tab.
     */
    unset(item) {
      return TidyFlags.unsetFlag(item, TidyFlags.section.key);
    }
  };
  /** Determines the order of item table sections for a given document sheet. */
  static sectionConfig = {
    key: "sheet-section-config",
    prop: TidyFlags.getFlagPropertyPath("sheet-section-config"),
    /** Gets the document sheet's section configuration. `undefined` means to use the default settings. */
    get(document2) {
      const sectionConfigs = TidyFlags.tryGetFlag(
        document2,
        TidyFlags.sectionConfig.key
      );
      if (sectionConfigs) {
        for (let section of Object.values(sectionConfigs))
          for (let [key, value] of Object.entries(section)) {
            if (Object.getOwnPropertyNames(value).length > 1)
              continue;
            let newKey = key, newValue = value;
            for (; ; ) {
              const propNames = Object.getOwnPropertyNames(newValue);
              let currentPropAtDepth = propNames[0];
              if (isNil(currentPropAtDepth) || propNames.length > 1)
                break;
              newKey += "." + currentPropAtDepth, newValue = newValue[currentPropAtDepth];
            }
            delete section[key], section[newKey] = newValue;
          }
        return sectionConfigs;
      }
    },
    /** Sets the document sheet's configuration. */
    set(document2, value) {
      return TidyFlags.setFlag(document2, TidyFlags.sectionConfig.key, value);
    },
    /**
     * Clears the document sheet's section config,
     * meaning the target actor should use default settings.
     * */
    unset(document2) {
      return TidyFlags.unsetFlag(document2, TidyFlags.sectionConfig.key);
    }
  };
  /**
   * The tabs that are currently selected for a given actor.
   * This is used to determine which tabs are visible
   * in the actor's sheet.
   * When this field is empty, the actor uses the default tabs.
   */
  static selectedTabs = {
    key: "selected-tabs",
    prop: TidyFlags.getFlagPropertyPath("selected-tabs"),
    /** Gets the selected tabs for an actor. */
    get(actor) {
      return TidyFlags.tryGetFlag(actor, TidyFlags.selectedTabs.key) ?? void 0;
    },
    /** Sets the selected tabs for an actor. */
    set(actor, value) {
      return TidyFlags.setFlag(actor, TidyFlags.selectedTabs.key, value);
    },
    /** Clears the selected tabs for an actor. */
    unset(actor) {
      return TidyFlags.unsetFlag(actor, TidyFlags.selectedTabs.key);
    }
  };
  /**
   * Indicates whether the container panel should be shown for a given actor.
   * This is used to determine whether the container panel is visible
   * in the actor's inventory tab.
   */
  static showContainerPanel = {
    key: "showContainerPanel",
    prop: TidyFlags.getFlagPropertyPath("showContainerPanel"),
    /** Gets whether the container panel should be shown for an actor. */
    get(actor) {
      return TidyFlags.tryGetFlag(
        actor,
        TidyFlags.showContainerPanel.key
      ) ?? void 0;
    },
    /** Sets whether the container panel should be shown for an actor. */
    set(actor, value) {
      return TidyFlags.setFlag(actor, TidyFlags.showContainerPanel.key, value);
    },
    /** Clears whether the container panel should be shown for an actor. */
    unset(actor) {
      return TidyFlags.unsetFlag(actor, TidyFlags.showContainerPanel.key);
    }
  };
  /**
   * Indicates whether the group member tab info panel should be shown for a given Group Sheet.
   */
  static showGroupMemberTabInfoPanel = {
    key: "showGroupMemberTabInfoPanel",
    prop: TidyFlags.getFlagPropertyPath("showGroupMemberTabInfoPanel"),
    /** Gets whether the group member tab info panel should be shown for a group. */
    get(actor) {
      return TidyFlags.tryGetFlag(
        actor,
        TidyFlags.showGroupMemberTabInfoPanel.key
      ) ?? !1;
    },
    /** Sets whether the group member tab info panel should be shown for a group. */
    set(actor, value) {
      return TidyFlags.setFlag(
        actor,
        TidyFlags.showGroupMemberTabInfoPanel.key,
        value
      );
    },
    /** Clears whether the group member tab info panel should be shown for a group. */
    unset(actor) {
      return TidyFlags.unsetFlag(
        actor,
        TidyFlags.showGroupMemberTabInfoPanel.key
      );
    }
  };
  /**
   * Indicates whether the legendary toolbar should be shown for a given NPC.
   */
  static showLegendaryToolbar = {
    key: "showLegendaryToolbar",
    prop: TidyFlags.getFlagPropertyPath("showLegendaryToolbar"),
    /** Gets whether the legendary toolbar should be shown for an NPC. */
    get(actor) {
      return TidyFlags.tryGetFlag(
        actor,
        TidyFlags.showLegendaryToolbar.key
      ) ?? void 0;
    },
    /** Sets whether the legendary toolbar should be shown for an NPC. */
    set(actor, value) {
      return TidyFlags.setFlag(
        actor,
        TidyFlags.showLegendaryToolbar.key,
        value
      );
    },
    /** Clears whether the legendary toolbar should be shown for an NPC. */
    unset(actor) {
      return TidyFlags.unsetFlag(actor, TidyFlags.showLegendaryToolbar.key);
    }
  };
  /**
   * Indicates whether the additional personality info should be shown
   * for a given NPC on the biography tab.
   */
  static showNpcPersonalityInfo = {
    key: "showNpcPersonalityInfo",
    prop: TidyFlags.getFlagPropertyPath("showNpcPersonalityInfo"),
    /** Gets whether the additional personality info should be shown for an NPC. */
    get(actor) {
      return TidyFlags.tryGetFlag(
        actor,
        TidyFlags.showNpcPersonalityInfo.key
      ) ?? void 0;
    },
    /** Sets whether the additional personality info should be shown for an NPC. */
    set(actor, value) {
      return TidyFlags.setFlag(
        actor,
        TidyFlags.showNpcPersonalityInfo.key,
        value
      );
    },
    /** Clears whether the additional personality info should be shown for an NPC. */
    unset(actor) {
      return TidyFlags.unsetFlag(actor, TidyFlags.showNpcPersonalityInfo.key);
    }
  };
  /**
   * Indicates whether the skills section should be expanded for a given actor.
   * If this is set to `true`, all skills are shown.
   * If this is set to `false`, unproficient skills are hidden and the rest are shown.
   */
  static skillsExpanded = {
    key: "skillsExpanded",
    prop: TidyFlags.getFlagPropertyPath("skillsExpanded"),
    /** Gets whether the skills section should be expanded for an actor. */
    get(actor) {
      return TidyFlags.tryGetFlag(actor, TidyFlags.skillsExpanded.key) ?? void 0;
    },
    /** Sets whether the skills section should be expanded for an actor. */
    set(actor, value) {
      return TidyFlags.setFlag(actor, TidyFlags.skillsExpanded.key, value);
    },
    /** Clears whether the skills section should be expanded for an actor. */
    unset(actor) {
      return TidyFlags.unsetFlag(actor, TidyFlags.skillsExpanded.key);
    }
  };
  /**
   * The skin of an actor.
   * This is informational and not used for game logic.
   */
  static skin = {
    key: "skin",
    prop: TidyFlags.getFlagPropertyPath("skin"),
    /** Gets the skin of an actor. */
    get(actor) {
      return TidyFlags.tryGetFlag(actor, TidyFlags.skin.key) ?? void 0;
    },
    /** Sets the skin of an actor. */
    set(actor, value) {
      return TidyFlags.setFlag(actor, TidyFlags.skin.key, value);
    },
    /** Clears the skin of an actor. */
    unset(actor) {
      return TidyFlags.unsetFlag(actor, TidyFlags.skin.key);
    }
  };
  /**
   * Denotes whether to show a grid for a given spellbook screen.
   */
  static spellbookGrid = {
    key: "spellbook-grid",
    prop: TidyFlags.getFlagPropertyPath("spellbook-grid"),
    /** Gets whether to show a grid for a given spellbook screen. */
    get(document2) {
      return TidyFlags.tryGetFlag(document2, TidyFlags.spellbookGrid.key) === !0;
    },
    /** Sets whether to show a grid for a given spellbook screen. */
    set(document2) {
      return TidyFlags.setFlag(document2, TidyFlags.spellbookGrid.key, !0);
    },
    /** Clears whether to show a grid for a given spellbook screen. */
    unset(document2) {
      return TidyFlags.unsetFlag(document2, TidyFlags.spellbookGrid.key);
    }
  };
  /**
   * The trait of an actor.
   * This is informational and not used for game logic.
   */
  static trait = {
    key: "trait",
    prop: TidyFlags.getFlagPropertyPath("trait"),
    /** Gets the trait of an actor. */
    get(actor) {
      return TidyFlags.tryGetFlag(actor, TidyFlags.trait.key) ?? void 0;
    },
    /** Sets the trait of an actor. */
    set(actor, value) {
      return TidyFlags.setFlag(actor, TidyFlags.trait.key, value);
    },
    /** Clears the trait of an actor. */
    unset(actor) {
      return TidyFlags.unsetFlag(actor, TidyFlags.trait.key);
    }
  };
  /**
   * The weight of an actor.
   * For this module, it is only an informational biographical field.
   */
  static weight = {
    key: "weight",
    prop: TidyFlags.getFlagPropertyPath("weight"),
    /** Gets the weight of an actor. */
    get(actor) {
      return TidyFlags.tryGetFlag(actor, TidyFlags.weight.key) ?? void 0;
    },
    /** Sets the weight of an actor. */
    set(actor, value) {
      return TidyFlags.setFlag(actor, TidyFlags.weight.key, value);
    },
    /** Clears the weight of an actor. */
    unset(actor) {
      return TidyFlags.unsetFlag(actor, TidyFlags.weight.key);
    }
  };
  /**
   * Indicates whether the traits section should be expanded for a given actor.
   * If this is set to `true`, all traits are shown.
   * If this is set to `false`, empty traits sections are hidden and the rest are shown.
   * This does not apply to custom traits which are added through the Tidy API.
   */
  static traitsExpanded = {
    key: "traitsExpanded",
    prop: TidyFlags.getFlagPropertyPath("traitsExpanded"),
    /** Gets whether the traits section should be expanded for an actor. */
    get(actor) {
      return TidyFlags.tryGetFlag(actor, TidyFlags.traitsExpanded.key) ?? void 0;
    },
    /** Sets whether the traits section should be expanded for an actor. */
    set(actor, value) {
      return TidyFlags.setFlag(actor, TidyFlags.traitsExpanded.key, value);
    },
    /** Clears whether the traits section should be expanded for an actor. */
    unset(actor) {
      return TidyFlags.unsetFlag(actor, TidyFlags.traitsExpanded.key);
    }
  };
  /**
   * Attempts to get a flag from a document.
   * @param flagged A document which supports flags.
   * @param flagName The name of the flag to get.
   * @returns The flag's value, or `undefined` if the flag is not set.
   *
   * @remarks
   * This function is generic, but it is not performing parsing of the flag's value.
   * It is simply doing an optimistic cast to the target type.
   */
  static tryGetFlag(flagged, flagName) {
    return flagged.getFlag(CONSTANTS.MODULE_ID, flagName);
  }
  /**
   * Sets a flag on a document.
   * @param flagged A document to set the flag on.
   * @param flagName The name of the flag to set.
   * @param value The value to set the flag to.
   * @returns A promise that resolves when the flag is set.
   */
  static setFlag(flagged, flagName, value) {
    return flagged.setFlag(CONSTANTS.MODULE_ID, flagName, value);
  }
  /**
   * Clears a flag from a document.
   * @param flagged A document to clear the flag from.
   * @param flagName The name of the flag to clear.
   * @returns A promise that resolves when the flag is cleared.
   */
  static unsetFlag(flagged, flagName) {
    return flagged.unsetFlag(CONSTANTS.MODULE_ID, flagName);
  }
}
var root_16$9 = /* @__PURE__ */ ns_template(`<svg x="0px" y="0px" viewBox="0 0 512 512" xml:space="preserve" class="svelte-f6iv97"><path d="M443.7,2.6c-2.2-2.5-5.8-3.3-8.8-1.8C417.9,9,358.8,36.1,304.4,43.5c-4.1,0.6-8-0.3-11.3-2.1c-1.5-0.8-2.4-2.5-2.4-4.2v0
          c0-10.7-8.7-19.4-19.5-19.4h-30.5c-10.7,0-19.5,8.7-19.5,19.4v0c0,1.7-0.9,3.4-2.4,4.2c-3.3,1.8-7.2,2.7-11.3,2.1
          C153.2,36.1,94.2,9,77.1,0.7c-3-1.5-6.6-0.7-8.8,1.8C56.3,16.4,21,64.9,21,154.9c0,83.4,30.3,143.6,44.3,166.9
          c2.9,4.9,10,4.7,12.8-0.2c10.5-19,34-59.1,62-91.7c0.4-0.5,0.9-1,1.3-1.5c28.3-30.7,79.9-9.8,79.9,32v232.2
          c0,10.7,8.7,19.4,19.5,19.4h30.5c10.7,0,19.5-8.7,19.5-19.4V260.4c0-41.8,51.5-62.7,79.9-32c0.4,0.5,0.9,1,1.3,1.5
          c28,32.6,51.5,72.7,62,91.7c2.8,5,9.9,5.1,12.8,0.2c14-23.3,44.3-83.4,44.3-166.9C491,64.9,455.7,16.4,443.7,2.6z" class="svelte-f6iv97"></path></svg>`), root_19$6 = /* @__PURE__ */ template('<i class="fas fa-medal"></i>'), root_18$c = /* @__PURE__ */ template("<!> ", 1), root_21$7 = /* @__PURE__ */ ns_template(`<svg x="0px" y="0px" viewBox="0 0 512 512" xml:space="preserve" class="svelte-f6iv97"><path d="M471.7,198.8c0-56.6-37.8-107.3-81.7-147.1c-76-68.9-191.9-68.9-268,0c-43.9,39.8-81.7,90.5-81.7,147.1
        c0,93-3.2,163.9-12.5,203c-3.9,16.2,4,33,18.3,39.6l113.6,66.3c27.9,13.6,60.3-6.7,60.3-37.7V258.3c0-5.2-3.3-9.8-8.3-11.5
        l-91.3-30.4c-4.9-1.6-8.3-6.3-8.3-11.5v-15.1c0-6.7,5.4-12.1,12.1-12.1h263.4c6.7,0,12.1,5.4,12.1,12.1v15.1c0,5.2-3.3,9.8-8.3,11.5
        l-91.3,30.4c-4.9,1.6-8.3,6.3-8.3,11.5V470c0,31,32.5,51.3,60.3,37.7l113.6-66.3c14.3-6.6,22.2-23.4,18.3-39.6
        C474.9,362.7,471.7,291.8,471.7,198.8L471.7,198.8z" class="svelte-f6iv97"></path></svg>`), on_click$1p = /* @__PURE__ */ __name((event2, toggleTraitsExpanded) => {
  event2.preventDefault(), event2.stopPropagation(), toggleTraitsExpanded();
}, "on_click$1p"), root_28$4 = /* @__PURE__ */ template('<a class="toggle-traits svelte-f6iv97"><!></a>'), on_click_1$y = /* @__PURE__ */ __name((event2, context) => {
  event2.preventDefault(), event2.stopPropagation(), FoundryAdapter.renderActorSheetFlags(get(context).actor);
}, "on_click_1$y"), root_31$3 = /* @__PURE__ */ template('<a class="configure-special-traits svelte-f6iv97"><i class="fas fa-star svelte-f6iv97"></i></a>'), root$3C = /* @__PURE__ */ template('<div class="traits svelte-f6iv97"><!> <!> <!> <!> <!> <!> <!> <!> <!> <!> <!> <!> <!></div>');
function Traits($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getSheetContext), useSenses = prop($$props, "useSenses", 3, !0), enableSpecialTraitsConfiguration = prop($$props, "enableSpecialTraitsConfiguration", 3, !0), traitsExpanded = /* @__PURE__ */ derived(() => !$$props.toggleable || TidyFlags.traitsExpanded.get(get(context).actor) === !0);
  function toggleTraitsExpanded() {
    get(traitsExpanded) ? TidyFlags.traitsExpanded.unset(get(context).actor) : TidyFlags.traitsExpanded.set(get(context).actor, !0);
  }
  __name(toggleTraitsExpanded, "toggleTraitsExpanded");
  function getTags(obj) {
    return Object.entries(obj);
  }
  __name(getTags, "getTags");
  const localize = FoundryAdapter.localize;
  var div = root$3C();
  const class_directive = /* @__PURE__ */ derived(() => TidyFlags.traitsExpanded.get(get(context).actor));
  template_effect(() => toggle_class(div, "expanded", get(class_directive)));
  var node = child(div);
  {
    var consequent = /* @__PURE__ */ __name(($$anchor2) => {
      const senses = /* @__PURE__ */ derived(() => getTags(get(context).senses));
      var title = /* @__PURE__ */ derived(() => localize("DND5E.Senses")), configureButtonTitle = /* @__PURE__ */ derived(() => localize("DND5E.SensesConfig")), show = /* @__PURE__ */ derived(() => get(traitsExpanded) || !!get(senses).length);
      TraitSection($$anchor2, {
        get title() {
          return get(title);
        },
        iconCssClass: "fas fa-eye",
        get configureButtonTitle() {
          return get(configureButtonTitle);
        },
        onConfigureClicked: /* @__PURE__ */ __name(() => FoundryAdapter.renderMovementSensesConfig(get(context).actor, "senses"), "onConfigureClicked"),
        get show() {
          return get(show);
        },
        children: /* @__PURE__ */ __name(($$anchor3, $$slotProps) => {
          TraitSectionTags($$anchor3, {
            get tags() {
              return get(senses);
            }
          });
        }, "children"),
        $$slots: { default: !0 }
      });
    }, "consequent");
    if_block(node, ($$render) => {
      useSenses() && get(context).senses && $$render(consequent);
    });
  }
  var node_1 = sibling(node, 2);
  {
    var consequent_1 = /* @__PURE__ */ __name(($$anchor2) => {
      const languages = /* @__PURE__ */ derived(() => getTags(get(context).traits?.traits?.languages?.selected));
      var traitCssClass = /* @__PURE__ */ derived(() => get(context).traits?.traits?.languages?.cssClass ?? ""), title_1 = /* @__PURE__ */ derived(() => localize("DND5E.Languages")), configureButtonTitle_1 = /* @__PURE__ */ derived(() => localize("DND5e.TraitConfig", { trait: localize("DND5E.Languages") })), show_1 = /* @__PURE__ */ derived(() => get(traitsExpanded) || !!get(languages).length);
      TraitSection($$anchor2, {
        get traitCssClass() {
          return get(traitCssClass);
        },
        get title() {
          return get(title_1);
        },
        iconCssClass: "fas fa-comment",
        get configureButtonTitle() {
          return get(configureButtonTitle_1);
        },
        onConfigureClicked: /* @__PURE__ */ __name(() => FoundryAdapter.renderTraitsConfig(get(context).actor, "languages"), "onConfigureClicked"),
        get show() {
          return get(show_1);
        },
        children: /* @__PURE__ */ __name(($$anchor3, $$slotProps) => {
          TraitSectionTags($$anchor3, {
            get tags() {
              return get(languages);
            }
          });
        }, "children"),
        $$slots: { default: !0 }
      });
    }, "consequent_1");
    if_block(node_1, ($$render) => {
      get(context).traits?.traits?.languages && $$render(consequent_1);
    });
  }
  var node_2 = sibling(node_1, 2);
  {
    var consequent_2 = /* @__PURE__ */ __name(($$anchor2) => {
      const damageImmunities = /* @__PURE__ */ derived(() => getTags(get(context).traits.traits.di.selected));
      var traitCssClass_1 = /* @__PURE__ */ derived(() => get(context).traits.traits?.di?.cssClass ?? ""), title_2 = /* @__PURE__ */ derived(() => localize("DND5E.DamImm")), configureButtonTitle_2 = /* @__PURE__ */ derived(() => localize("DND5E.TraitConfig", { trait: localize("DND5E.DamImm") })), show_2 = /* @__PURE__ */ derived(() => get(traitsExpanded) || !!get(damageImmunities).length);
      TraitSection($$anchor2, {
        get traitCssClass() {
          return get(traitCssClass_1);
        },
        get title() {
          return get(title_2);
        },
        iconCssClass: "fas fa-heart",
        get configureButtonTitle() {
          return get(configureButtonTitle_2);
        },
        onConfigureClicked: /* @__PURE__ */ __name(() => FoundryAdapter.openDamagesConfig(get(context).actor, "di"), "onConfigureClicked"),
        get show() {
          return get(show_2);
        },
        children: /* @__PURE__ */ __name(($$anchor3, $$slotProps) => {
          TraitSectionTags($$anchor3, {
            get tags() {
              return get(damageImmunities);
            }
          });
        }, "children"),
        $$slots: { default: !0 }
      });
    }, "consequent_2");
    if_block(node_2, ($$render) => {
      get(context).traits.traits?.di && $$render(consequent_2);
    });
  }
  var node_3 = sibling(node_2, 2);
  {
    var consequent_3 = /* @__PURE__ */ __name(($$anchor2) => {
      const damageResistances = /* @__PURE__ */ derived(() => getTags(get(context).traits.traits.dr.selected));
      var traitCssClass_2 = /* @__PURE__ */ derived(() => get(context).traits.traits?.dr?.cssClass ?? ""), title_3 = /* @__PURE__ */ derived(() => localize("DND5E.DamRes")), configureButtonTitle_3 = /* @__PURE__ */ derived(() => localize("DND5E.TraitConfig", { trait: localize("DND5E.DamRes") })), show_3 = /* @__PURE__ */ derived(() => get(traitsExpanded) || !!get(damageResistances).length);
      TraitSection($$anchor2, {
        get traitCssClass() {
          return get(traitCssClass_2);
        },
        get title() {
          return get(title_3);
        },
        iconCssClass: "far fa-heart",
        get configureButtonTitle() {
          return get(configureButtonTitle_3);
        },
        onConfigureClicked: /* @__PURE__ */ __name(() => FoundryAdapter.openDamagesConfig(get(context).actor, "dr"), "onConfigureClicked"),
        get show() {
          return get(show_3);
        },
        children: /* @__PURE__ */ __name(($$anchor3, $$slotProps) => {
          TraitSectionTags($$anchor3, {
            get tags() {
              return get(damageResistances);
            }
          });
        }, "children"),
        $$slots: { default: !0 }
      });
    }, "consequent_3");
    if_block(node_3, ($$render) => {
      get(context).traits.traits?.dr && $$render(consequent_3);
    });
  }
  var node_4 = sibling(node_3, 2);
  {
    var consequent_4 = /* @__PURE__ */ __name(($$anchor2) => {
      const vulnerabilities = /* @__PURE__ */ derived(() => getTags(get(context).traits.traits.dv.selected));
      var traitCssClass_3 = /* @__PURE__ */ derived(() => get(context).traits.traits?.dv?.cssClass ?? ""), title_4 = /* @__PURE__ */ derived(() => localize("DND5E.DamVuln")), configureButtonTitle_4 = /* @__PURE__ */ derived(() => localize("DND5E.TraitConfig", { trait: localize("DND5E.DamVuln") })), show_4 = /* @__PURE__ */ derived(() => get(traitsExpanded) || !!get(vulnerabilities).length);
      TraitSection($$anchor2, {
        get traitCssClass() {
          return get(traitCssClass_3);
        },
        get title() {
          return get(title_4);
        },
        iconCssClass: "fas fa-heart-broken",
        get configureButtonTitle() {
          return get(configureButtonTitle_4);
        },
        onConfigureClicked: /* @__PURE__ */ __name(() => FoundryAdapter.openDamagesConfig(get(context).actor, "dv"), "onConfigureClicked"),
        get show() {
          return get(show_4);
        },
        children: /* @__PURE__ */ __name(($$anchor3, $$slotProps) => {
          TraitSectionTags($$anchor3, {
            get tags() {
              return get(vulnerabilities);
            }
          });
        }, "children"),
        $$slots: { default: !0 }
      });
    }, "consequent_4");
    if_block(node_4, ($$render) => {
      get(context).traits.traits?.dv && $$render(consequent_4);
    });
  }
  var node_5 = sibling(node_4, 2);
  {
    var consequent_5 = /* @__PURE__ */ __name(($$anchor2) => {
      var title_5 = /* @__PURE__ */ derived(() => localize("DND5E.DamageModification.Label")), configureButtonTitle_5 = /* @__PURE__ */ derived(() => localize("DND5E.TraitConfig", {
        trait: localize("DND5E.DamageModification.Label")
      })), show_5 = /* @__PURE__ */ derived(() => get(traitsExpanded) || !!get(context).traits.traits.dm.length);
      TraitSection($$anchor2, {
        get title() {
          return get(title_5);
        },
        iconCssClass: "fas fa-heart-circle-plus",
        get configureButtonTitle() {
          return get(configureButtonTitle_5);
        },
        onConfigureClicked: /* @__PURE__ */ __name(() => FoundryAdapter.openDamagesConfig(get(context).actor, "dm"), "onConfigureClicked"),
        get show() {
          return get(show_5);
        },
        children: /* @__PURE__ */ __name(($$anchor3, $$slotProps) => {
          var modifications = /* @__PURE__ */ derived(() => get(context).traits.traits?.dm);
          TraitSectionModifications($$anchor3, {
            get modifications() {
              return get(modifications);
            }
          });
        }, "children"),
        $$slots: { default: !0 }
      });
    }, "consequent_5");
    if_block(node_5, ($$render) => {
      get(context).traits.traits?.dm && $$render(consequent_5);
    });
  }
  var node_6 = sibling(node_5, 2);
  {
    var consequent_6 = /* @__PURE__ */ __name(($$anchor2) => {
      const conditionImmunities = /* @__PURE__ */ derived(() => getTags(get(context).traits.traits.ci.selected));
      var traitCssClass_4 = /* @__PURE__ */ derived(() => get(context).traits.traits?.ci?.cssClass ?? ""), title_6 = /* @__PURE__ */ derived(() => localize("DND5E.ConImm")), configureButtonTitle_6 = /* @__PURE__ */ derived(() => localize("DND5E.TraitConfig", { trait: localize("DND5E.ConImm") })), show_6 = /* @__PURE__ */ derived(() => get(traitsExpanded) || !!get(conditionImmunities).length);
      TraitSection($$anchor2, {
        get traitCssClass() {
          return get(traitCssClass_4);
        },
        get title() {
          return get(title_6);
        },
        iconCssClass: "fas fa-shield-virus",
        get configureButtonTitle() {
          return get(configureButtonTitle_6);
        },
        onConfigureClicked: /* @__PURE__ */ __name(() => FoundryAdapter.renderTraitsConfig(get(context).actor, "ci"), "onConfigureClicked"),
        get show() {
          return get(show_6);
        },
        children: /* @__PURE__ */ __name(($$anchor3, $$slotProps) => {
          TraitSectionTags($$anchor3, {
            get tags() {
              return get(conditionImmunities);
            }
          });
        }, "children"),
        $$slots: { default: !0 }
      });
    }, "consequent_6");
    if_block(node_6, ($$render) => {
      get(context).traits.traits?.ci && $$render(consequent_6);
    });
  }
  var node_7 = sibling(node_6, 2);
  {
    var consequent_8 = /* @__PURE__ */ __name(($$anchor2) => {
      const weaponProfs = /* @__PURE__ */ derived(() => getTags(get(context).traits.traits.weaponProf.selected));
      var traitCssClass_5 = /* @__PURE__ */ derived(() => get(context).traits.traits?.weaponProf?.cssClass ?? ""), title_7 = /* @__PURE__ */ derived(() => localize("DND5E.TraitWeaponProf")), configureButtonTitle_7 = /* @__PURE__ */ derived(() => localize("DND5E.TraitConfig", { trait: localize("DND5E.TraitWeaponProf") })), show_7 = /* @__PURE__ */ derived(() => get(traitsExpanded) || !!get(weaponProfs).length);
      TraitSection($$anchor2, {
        get traitCssClass() {
          return get(traitCssClass_5);
        },
        get title() {
          return get(title_7);
        },
        get configureButtonTitle() {
          return get(configureButtonTitle_7);
        },
        onConfigureClicked: /* @__PURE__ */ __name(() => FoundryAdapter.renderWeaponsConfig(get(context).actor), "onConfigureClicked"),
        get show() {
          return get(show_7);
        },
        customIcon: /* @__PURE__ */ __name(($$anchor3) => {
          var svg = root_16$9();
          append($$anchor3, svg);
        }, "customIcon"),
        children: /* @__PURE__ */ __name(($$anchor3, $$slotProps) => {
          TraitSectionTags($$anchor3, {
            get tags() {
              return get(weaponProfs);
            },
            children: /* @__PURE__ */ __name(($$anchor4, $$arg0) => {
              let key = /* @__PURE__ */ __name(() => $$arg0?.().key, "key"), value = /* @__PURE__ */ __name(() => $$arg0?.().value, "value");
              var fragment_16 = root_18$c(), node_8 = first_child(fragment_16);
              {
                var consequent_7 = /* @__PURE__ */ __name(($$anchor5) => {
                  var i2 = root_19$6();
                  template_effect(() => set_attribute(i2, "title", localize("DND5E.WEAPON.Mastery.Label"))), append($$anchor5, i2);
                }, "consequent_7");
                if_block(node_8, ($$render) => {
                  get(context).traits.traits.weaponProf.mastery.value.has(key()) && $$render(consequent_7);
                });
              }
              var text2 = sibling(node_8);
              template_effect(() => set_text(text2, ` ${value() ?? ""}`)), append($$anchor4, fragment_16);
            }, "children"),
            $$slots: { default: !0 }
          });
        }, "children"),
        $$slots: { customIcon: !0, default: !0 }
      });
    }, "consequent_8");
    if_block(node_7, ($$render) => {
      get(context).traits.traits?.weaponProf && $$render(consequent_8);
    });
  }
  var node_9 = sibling(node_7, 2);
  {
    var consequent_9 = /* @__PURE__ */ __name(($$anchor2) => {
      const armorProfs = /* @__PURE__ */ derived(() => getTags(get(context).traits.traits.armorProf.selected));
      var traitCssClass_6 = /* @__PURE__ */ derived(() => get(context).traits.traits?.armorProf?.cssClass ?? ""), title_8 = /* @__PURE__ */ derived(() => localize("DND5E.TraitArmorProf")), configureButtonTitle_8 = /* @__PURE__ */ derived(() => localize("DND5E.TraitConfig", { trait: localize("DND5E.TraitArmorProf") })), show_8 = /* @__PURE__ */ derived(() => get(traitsExpanded) || !!get(armorProfs).length);
      TraitSection($$anchor2, {
        get traitCssClass() {
          return get(traitCssClass_6);
        },
        get title() {
          return get(title_8);
        },
        get configureButtonTitle() {
          return get(configureButtonTitle_8);
        },
        onConfigureClicked: /* @__PURE__ */ __name(() => FoundryAdapter.renderTraitsConfig(get(context).actor, "armor"), "onConfigureClicked"),
        get show() {
          return get(show_8);
        },
        customIcon: /* @__PURE__ */ __name(($$anchor3) => {
          var svg_1 = root_21$7();
          append($$anchor3, svg_1);
        }, "customIcon"),
        children: /* @__PURE__ */ __name(($$anchor3, $$slotProps) => {
          TraitSectionTags($$anchor3, {
            get tags() {
              return get(armorProfs);
            }
          });
        }, "children"),
        $$slots: { customIcon: !0, default: !0 }
      });
    }, "consequent_9");
    if_block(node_9, ($$render) => {
      get(context).traits.traits?.armorProf && $$render(consequent_9);
    });
  }
  var node_10 = sibling(node_9, 2);
  {
    var consequent_11 = /* @__PURE__ */ __name(($$anchor2) => {
      const tools = /* @__PURE__ */ derived(() => Object.entries(get(context).tools));
      var traitCssClass_7 = /* @__PURE__ */ derived(() => get(context).traits.tools?.toolProf?.cssClass ?? ""), title_9 = /* @__PURE__ */ derived(() => localize("DND5E.TraitToolProf")), configureButtonTitle_9 = /* @__PURE__ */ derived(() => localize("DND5E.TraitConfig", { trait: localize("DND5E.TraitToolProf") })), show_9 = /* @__PURE__ */ derived(() => get(traitsExpanded) || !!get(tools).length);
      TraitSection($$anchor2, {
        get traitCssClass() {
          return get(traitCssClass_7);
        },
        get title() {
          return get(title_9);
        },
        iconCssClass: "fas fa-hammer",
        get configureButtonTitle() {
          return get(configureButtonTitle_9);
        },
        onConfigureClicked: /* @__PURE__ */ __name(() => FoundryAdapter.renderToolsConfig(get(context).actor), "onConfigureClicked"),
        get show() {
          return get(show_9);
        },
        children: /* @__PURE__ */ __name(($$anchor3, $$slotProps) => {
          var fragment_20 = comment(), node_11 = first_child(fragment_20);
          {
            var consequent_10 = /* @__PURE__ */ __name(($$anchor4) => {
              TraitSectionTools($$anchor4, {
                get tools() {
                  return get(tools);
                }
              });
            }, "consequent_10");
            if_block(node_11, ($$render) => {
              get(tools).length && $$render(consequent_10);
            });
          }
          append($$anchor3, fragment_20);
        }, "children"),
        $$slots: { default: !0 }
      });
    }, "consequent_11");
    if_block(node_10, ($$render) => {
      get(context).traits.tools && $$render(consequent_11);
    });
  }
  var node_12 = sibling(node_10, 2);
  {
    var consequent_12 = /* @__PURE__ */ __name(($$anchor2) => {
      var fragment_22 = comment(), node_13 = first_child(fragment_22);
      each(node_13, 17, () => get(context).customActorTraits, index, ($$anchor3, trait) => {
        var configureButtonTitle_10 = /* @__PURE__ */ derived(() => get(trait).openConfigurationTooltip ?? ""), show_10 = /* @__PURE__ */ derived(() => get(trait).alwaysShow || get(traitsExpanded));
        TraitSection($$anchor3, {
          get title() {
            return get(trait).title;
          },
          get iconCssClass() {
            return get(trait).iconClass;
          },
          get configureButtonTitle() {
            return get(configureButtonTitle_10);
          },
          onConfigureClicked: /* @__PURE__ */ __name((ev) => {
            try {
              get(trait).openConfiguration?.({
                app: get(context).actor.sheet,
                data: get(context),
                element: FoundryAdapter.getElementFromAppV1OrV2(get(context).actor.sheet.element),
                event: ev
              });
            } catch (e2) {
              error("An error occurred while handling trait configuration click event", !1, e2);
            }
          }, "onConfigureClicked"),
          get show() {
            return get(show_10);
          }
        });
      }), append($$anchor2, fragment_22);
    }, "consequent_12");
    if_block(node_12, ($$render) => {
      get(context).customActorTraits?.length && $$render(consequent_12);
    });
  }
  var node_14 = sibling(node_12, 2);
  {
    var consequent_14 = /* @__PURE__ */ __name(($$anchor2) => {
      var a2 = root_28$4();
      a2.__click = [on_click$1p, toggleTraitsExpanded];
      var node_15 = child(a2);
      {
        var consequent_13 = /* @__PURE__ */ __name(($$anchor3) => {
          var text_1 = text();
          template_effect(() => set_text(text_1, localize("TIDY5E.HideEmptyTraits"))), append($$anchor3, text_1);
        }, "consequent_13"), alternate = /* @__PURE__ */ __name(($$anchor3) => {
          var text_2 = text();
          template_effect(() => set_text(text_2, localize("TIDY5E.ShowEmptyTraits"))), append($$anchor3, text_2);
        }, "alternate");
        if_block(node_15, ($$render) => {
          get(traitsExpanded) ? $$render(consequent_13) : $$render(alternate, !1);
        });
      }
      template_effect(() => toggle_class(a2, "no-pointer-events", !get(context).editable)), append($$anchor2, a2);
    }, "consequent_14");
    if_block(node_14, ($$render) => {
      $$props.toggleable && $$render(consequent_14);
    });
  }
  var node_16 = sibling(node_14, 2);
  {
    var consequent_15 = /* @__PURE__ */ __name(($$anchor2) => {
      var a_1 = root_31$3();
      template_effect(() => set_attribute(a_1, "title", localize("DND5E.TraitConfig", { trait: localize("DND5E.SpecialTraits") }))), a_1.__click = [on_click_1$y, context], template_effect(() => {
        set_attribute(a_1, "tabindex", settings.value.useAccessibleKeyboardSupport ? 0 : -1), toggle_class(a_1, "no-pointer-events", !get(context).editable);
      }), append($$anchor2, a_1);
    }, "consequent_15");
    if_block(node_16, ($$render) => {
      enableSpecialTraitsConfiguration() && !get(context).lockSensitiveFields && $$render(consequent_15);
    });
  }
  append($$anchor, div), pop();
}
__name(Traits, "Traits");
delegate(["click"]);
var root$3B = /* @__PURE__ */ template('<div role="presentation"><div role="presentation" class="expandable-child-animation-wrapper"><!></div></div>');
function ExpandableContainer($$anchor, $$props) {
  push($$props, !0);
  let expanded = prop($$props, "expanded", 3, !0), overflowYHidden = state(!expanded()), expandableContainer;
  onMount(() => {
    const controller = new AbortController();
    return expandableContainer.addEventListener(
      "transitionstart",
      (ev) => {
        ev.target === expandableContainer && set(overflowYHidden, !0);
      },
      { signal: controller.signal }
    ), expandableContainer.addEventListener(
      "transitionend",
      (ev) => {
        ev.target === expandableContainer && set(overflowYHidden, !expanded());
      },
      { signal: controller.signal }
    ), () => {
      controller.abort();
    };
  });
  var div = root$3B(), div_1 = child(div), node = child(div_1);
  snippet(node, () => $$props.children ?? noop), bind_this(div, ($$value) => expandableContainer = $$value, () => expandableContainer), template_effect(() => {
    set_class(div, `expandable ${$$props.class ?? "" ?? ""} svelte-cgte90`), toggle_class(div, "expanded", expanded()), toggle_class(div, "overflow-y-hidden", get(overflowYHidden));
  }), append($$anchor, div), pop();
}
__name(ExpandableContainer, "ExpandableContainer");
class ExpandCollapseService {
  static {
    __name(this, "ExpandCollapseService");
  }
  static contextKey = "expandCollapseService";
  _onItemTableToggle;
  _location;
  #_state = state();
  get _state() {
    return get(this.#_state);
  }
  set _state(value) {
    set(this.#_state, proxy(value));
  }
  get state() {
    return this._state;
  }
  constructor(initialState = { expanded: !0, toggleable: !0 }) {
    this._state = { ...initialState }, this._onItemTableToggle = getContext(CONSTANTS.SVELTE_CONTEXT.ON_ITEM_TABLE_TOGGLE), this._location = getContext(CONSTANTS.SVELTE_CONTEXT.LOCATION);
  }
  toggle() {
    if (!this._state)
      return;
    const newState = !this._state.expanded;
    this._tryCacheExpandedState(newState), this._state.expanded = newState;
  }
  _tryCacheExpandedState(newState) {
    this._location && this._onItemTableToggle?.(this._location, newState);
  }
  set(expanded) {
    this._state && (this._state.expanded = expanded, this._tryCacheExpandedState(expanded));
  }
  static initService(toggleable) {
    const itemTableToggles = getContext(CONSTANTS.SVELTE_CONTEXT.ITEM_TABLE_TOGGLES), location = getContext(CONSTANTS.SVELTE_CONTEXT.LOCATION) ?? "", service = new ExpandCollapseService({
      expanded: itemTableToggles?.get(location) ?? !0,
      toggleable
    });
    return setContext(ExpandCollapseService.contextKey, service), service;
  }
  static getService() {
    return getContext(ExpandCollapseService.contextKey);
  }
}
var root_1$1$ = /* @__PURE__ */ template('<div class="item-table-body"><!></div>'), root$3A = /* @__PURE__ */ template("<section><!> <!></section>");
function ItemTable($$anchor, $$props) {
  push($$props, !0);
  let toggleable = prop($$props, "toggleable", 3, !0), rest = /* @__PURE__ */ rest_props($$props, [
    "$$slots",
    "$$events",
    "$$legacy",
    "key",
    "toggleable",
    "header",
    "body"
  ]), { class: cssClass, ...attributes } = rest;
  const messageBus = getContext(CONSTANTS.SVELTE_CONTEXT.MESSAGE_BUS), tabId = getContext(CONSTANTS.SVELTE_CONTEXT.TAB_ID);
  declareLocation("item-table", $$props.key);
  const expandCollapseService = ExpandCollapseService.initService(toggleable());
  let expandedState = /* @__PURE__ */ derived(() => expandCollapseService.state);
  user_effect(() => {
    messageBus?.message?.tabId === tabId && messageBus?.message?.message === CONSTANTS.MESSAGE_BUS_EXPAND_ALL && expandCollapseService.set(!0), messageBus?.message?.tabId === tabId && messageBus?.message?.message === CONSTANTS.MESSAGE_BUS_COLLAPSE_ALL && expandCollapseService.set(!1);
  });
  var section = root$3A();
  let attributes_1;
  var node = child(section);
  snippet(node, () => $$props.header ?? noop);
  var node_1 = sibling(node, 2), expanded = /* @__PURE__ */ derived(() => get(expandedState)?.expanded);
  ExpandableContainer(node_1, {
    get expanded() {
      return get(expanded);
    },
    children: /* @__PURE__ */ __name(($$anchor2, $$slotProps) => {
      var div = root_1$1$(), node_2 = child(div);
      snippet(node_2, () => $$props.body ?? noop), append($$anchor2, div);
    }, "children"),
    $$slots: { default: !0 }
  }), template_effect(() => attributes_1 = set_attributes(section, attributes_1, {
    class: `item-table ${cssClass ?? "" ?? ""}`,
    "data-tidy-sheet-part": CONSTANTS.SHEET_PARTS.ITEM_TABLE,
    "data-tidy-section-key": $$props.key,
    ...attributes
  })), append($$anchor, section), pop();
}
__name(ItemTable, "ItemTable");
const inputTagNames = /* @__PURE__ */ new Set([
  "INPUT",
  "BUTTON",
  "SELECT",
  "COLOR",
  "DATE",
  "DATETIME-LOCAL",
  "EMAIL",
  "FILE",
  "HIDDEN",
  "A"
]), inputTabNamesSelector = Array.from(inputTagNames).map((i2) => i2.toLowerCase()).join(", ");
function isUserInteractable(el) {
  return (
    // Is it one of the known interactables?
    inputTagNames.has(el.tagName) || // Is it contained within an interactable?
    el.closest(inputTabNamesSelector)
  );
}
__name(isUserInteractable, "isUserInteractable");
function handleHeaderRowClick$1(ev, expandState, expandCollapseService) {
  get(expandState)?.toggleable && (ev.target instanceof HTMLElement && isUserInteractable(ev.target) && ev.target.getAttribute(CONSTANTS.SHEET_PART_ATTRIBUTE) !== CONSTANTS.SHEET_PARTS.EXPANSION_TOGGLE || (ev.stopPropagation(), expandCollapseService.toggle()));
}
__name(handleHeaderRowClick$1, "handleHeaderRowClick$1");
var root_1$1_ = /* @__PURE__ */ template('<i class="expand-indicator fas fa-angle-right svelte-lm7htz"></i>'), root$3z = /* @__PURE__ */ template('<header class="item-table-header-row svelte-lm7htz"><!> <!></header>');
function ItemTableHeaderRow($$anchor, $$props) {
  push($$props, !0);
  const expandCollapseService = ExpandCollapseService.getService();
  let expandState = /* @__PURE__ */ derived(() => expandCollapseService.state);
  var header = root$3z();
  header.__click = [
    handleHeaderRowClick$1,
    expandState,
    expandCollapseService
  ];
  var node = child(header);
  {
    var consequent = /* @__PURE__ */ __name(($$anchor2) => {
      var i2 = root_1$1_();
      template_effect(() => {
        set_attribute(i2, "data-tidy-sheet-part", CONSTANTS.SHEET_PARTS.EXPANSION_TOGGLE), toggle_class(i2, "expanded", get(expandState).expanded);
      }), append($$anchor2, i2);
    }, "consequent");
    if_block(node, ($$render) => {
      get(expandState)?.toggleable && $$render(consequent);
    });
  }
  var node_1 = sibling(node, 2);
  snippet(node_1, () => $$props.children ?? noop), template_effect(() => {
    set_attribute(header, "data-tidy-sheet-part", CONSTANTS.SHEET_PARTS.ITEM_TABLE_HEADER_ROW), toggle_class(header, "toggleable", get(expandState)?.toggleable);
  }), append($$anchor, header), pop();
}
__name(ItemTableHeaderRow, "ItemTableHeaderRow");
delegate(["click"]);
class ItemSummaryRuntime {
  static {
    __name(this, "ItemSummaryRuntime");
  }
  static _itemSummaryCommands = [];
  static registerItemSummaryCommands(commands) {
    ItemSummaryRuntime._itemSummaryCommands.push(...commands);
  }
  static getItemSummaryCommands(item) {
    return [...ItemSummaryRuntime._itemSummaryCommands].filter(
      (c2) => item && (c2.enabled?.({ item }) ?? !0)
    );
  }
}
var on_click$1o = /* @__PURE__ */ __name((_, $$props) => $$props.command.execute?.({ item: $$props.item }), "on_click$1o"), root_1$1Z = /* @__PURE__ */ template("<i></i>"), root$3y = /* @__PURE__ */ template('<button type="button" class="item-summary-command svelte-5inzn8"><!> </button>');
function ItemSummaryCommandButton($$anchor, $$props) {
  push($$props, !0);
  var button = root$3y();
  button.__click = [on_click$1o, $$props];
  var node = child(button);
  {
    var consequent = /* @__PURE__ */ __name(($$anchor2) => {
      var i2 = root_1$1Z();
      template_effect(() => set_class(i2, clsx($$props.command.iconClass), "svelte-5inzn8")), append($$anchor2, i2);
    }, "consequent");
    if_block(node, ($$render) => {
      $$props.command.iconClass && $$render(consequent);
    });
  }
  var text2 = sibling(node);
  template_effect(() => set_text(text2, ` ${FoundryAdapter.localize($$props.command.label ?? "") ?? ""}`)), template_effect(() => {
    set_attribute(button, "title", $$props.command.tooltip ?? null), set_attribute(button, "tabindex", settings.value.useAccessibleKeyboardSupport ? 0 : -1);
  }), append($$anchor, button), pop();
}
__name(ItemSummaryCommandButton, "ItemSummaryCommandButton");
delegate(["click"]);
function ItemSummaryCommandButtonList($$anchor, $$props) {
  push($$props, !0);
  let itemSummaryCommands = /* @__PURE__ */ derived(() => ItemSummaryRuntime.getItemSummaryCommands($$props.item));
  var fragment = comment(), node = first_child(fragment);
  each(node, 17, () => get(itemSummaryCommands), index, ($$anchor2, command) => {
    ItemSummaryCommandButton($$anchor2, {
      get item() {
        return $$props.item;
      },
      get command() {
        return get(command);
      }
    });
  }), append($$anchor, fragment), pop();
}
__name(ItemSummaryCommandButtonList, "ItemSummaryCommandButtonList");
var root$3x = /* @__PURE__ */ template('<div aria-hidden="true" role="presentation"></div>');
function HorizontalLineSeparator($$anchor, $$props) {
  push($$props, !0);
  let borderColor = prop($$props, "borderColor", 3, "faint");
  var div = root$3x();
  template_effect(() => set_class(div, `horizontal-line-separator ${borderColor() ?? ""} ${$$props.class ?? "" ?? ""} svelte-e27htj`)), append($$anchor, div), pop();
}
__name(HorizontalLineSeparator, "HorizontalLineSeparator");
class Enrichers {
  static {
    __name(this, "Enrichers");
  }
  static reference(uuid, text2) {
    return `@UUID[${uuid}]{${text2}}`;
  }
}
var root_1$1Y = /* @__PURE__ */ template('<div class="item-table-body"><!></div>'), root$3w = /* @__PURE__ */ template("<section><!> <!></section>");
function TidyTable($$anchor, $$props) {
  push($$props, !0);
  let toggleable = prop($$props, "toggleable", 3, !0), gridTemplateColumns = prop($$props, "gridTemplateColumns", 3, ""), rest = /* @__PURE__ */ rest_props($$props, [
    "$$slots",
    "$$events",
    "$$legacy",
    "key",
    "toggleable",
    "gridTemplateColumns",
    "header",
    "body"
  ]), { class: cssClass, ...attributes } = rest;
  const messageBus = getContext(CONSTANTS.SVELTE_CONTEXT.MESSAGE_BUS), tabId = getContext(CONSTANTS.SVELTE_CONTEXT.TAB_ID);
  declareLocation("item-table", $$props.key);
  const expandCollapseService = ExpandCollapseService.initService(toggleable());
  let expandedState = /* @__PURE__ */ derived(() => expandCollapseService.state);
  user_effect(() => {
    messageBus?.message?.tabId === tabId && messageBus?.message?.message === CONSTANTS.MESSAGE_BUS_EXPAND_ALL && expandCollapseService.set(!0), messageBus?.message?.tabId === tabId && messageBus?.message?.message === CONSTANTS.MESSAGE_BUS_COLLAPSE_ALL && expandCollapseService.set(!1);
  });
  var section = root$3w();
  let attributes_1;
  var node = child(section);
  snippet(node, () => $$props.header ?? noop);
  var node_1 = sibling(node, 2), expanded = /* @__PURE__ */ derived(() => get(expandedState)?.expanded);
  ExpandableContainer(node_1, {
    get expanded() {
      return get(expanded);
    },
    children: /* @__PURE__ */ __name(($$anchor2, $$slotProps) => {
      var div = root_1$1Y(), node_2 = child(div);
      snippet(node_2, () => $$props.body ?? noop), append($$anchor2, div);
    }, "children"),
    $$slots: { default: !0 }
  }), template_effect(() => attributes_1 = set_attributes(section, attributes_1, {
    class: `tidy-table ${cssClass ?? "" ?? ""}`,
    "data-tidy-sheet-part": CONSTANTS.SHEET_PARTS.ITEM_TABLE,
    "data-tidy-section-key": $$props.key,
    ...attributes,
    style: `--grid-template-columns: ${gridTemplateColumns() ?? ""}`
  })), append($$anchor, section), pop();
}
__name(TidyTable, "TidyTable");
var root$3v = /* @__PURE__ */ template("<div><div><!></div> <!></div>");
function TidyTableRow($$anchor, $$props) {
  push($$props, !0);
  let hidden = prop($$props, "hidden", 3, !1), rowContainerClass = prop($$props, "rowContainerClass", 3, ""), rowClass = prop($$props, "rowClass", 3, ""), rowContainerAttributes = prop($$props, "rowContainerAttributes", 19, () => ({})), rowAttributes = prop($$props, "rowAttributes", 19, () => ({}));
  var div = root$3v();
  let attributes;
  var div_1 = child(div);
  let attributes_1;
  var node = child(div_1);
  snippet(node, () => $$props.children ?? noop);
  var node_1 = sibling(div_1, 2);
  snippet(node_1, () => $$props.afterRow ?? noop), template_effect(() => {
    attributes = set_attributes(div, attributes, {
      class: `tidy-table-row-container ${rowContainerClass() ?? "" ?? ""}`,
      "aria-hidden": hidden(),
      ...rowContainerAttributes()
    }), toggle_class(div, "hidden", hidden()), attributes_1 = set_attributes(div_1, attributes_1, {
      class: `tidy-table-row ${rowClass() ?? "" ?? ""}`,
      "data-tidy-table-row": !0,
      "data-tidy-sheet-part": CONSTANTS.SHEET_PARTS.TABLE_ROW,
      ...rowAttributes(),
      onmousedown: $$props.onmousedown,
      onmouseenter: $$props.onmouseenter,
      onmouseleave: $$props.onmouseleave,
      ondragstart: $$props.ondragstart
    });
  }), append($$anchor, div), pop();
}
__name(TidyTableRow, "TidyTableRow");
var root$3u = /* @__PURE__ */ template("<div><!></div>");
function TidyTableCell($$anchor, $$props) {
  push($$props, !0);
  let primary = prop($$props, "primary", 3, !1), title = prop($$props, "title", 3, void 0), baseWidth = prop($$props, "baseWidth", 3, null), isHovering = state(!1);
  function mouseEnter(ev) {
    set(isHovering, !0);
  }
  __name(mouseEnter, "mouseEnter");
  function mouseLeave(ev) {
    set(isHovering, !1);
  }
  __name(mouseLeave, "mouseLeave");
  var div = root$3u();
  let attributes;
  var node = child(div);
  snippet(node, () => $$props.children ?? noop, () => ({ isHovering: get(isHovering) })), template_effect(() => {
    attributes = set_attributes(div, attributes, {
      class: `tidy-table-cell ${$$props.class ?? "" ?? ""}`,
      title: title(),
      "data-tidy-sheet-part": CONSTANTS.SHEET_PARTS.TABLE_CELL,
      onmouseenter: mouseEnter,
      onmouseleave: mouseLeave,
      ...$$props.attributes
    }), toggle_class(div, "primary", primary()), set_style(div, "flex-basis", baseWidth());
  }), append($$anchor, div), pop();
}
__name(TidyTableCell, "TidyTableCell");
var root_1$1X = /* @__PURE__ */ template("<dnd5e-icon></dnd5e-icon>", 2);
function Dnd5eIcon($$anchor, $$props) {
  push($$props, !0);
  let props = /* @__PURE__ */ rest_props($$props, ["$$slots", "$$events", "$$legacy"]);
  var fragment = comment(), node = first_child(fragment);
  key_block(node, () => $$props.src, ($$anchor2) => {
    var dnd5e_icon = root_1$1X();
    let attributes;
    template_effect(() => attributes = set_attributes(dnd5e_icon, attributes, { ...props }, void 0, !0, !0)), append($$anchor2, dnd5e_icon);
  }), append($$anchor, fragment), pop();
}
__name(Dnd5eIcon, "Dnd5eIcon");
var on_change$8 = /* @__PURE__ */ __name((event2, $$props) => {
  event2.preventDefault(), event2.stopPropagation(), FoundryAdapter.handleActivityUsesChanged(event2, $$props.activity);
}, "on_change$8"), on_change_1$2 = /* @__PURE__ */ __name((event2, onUsesMaxChanged, $$props) => {
  event2.preventDefault(), event2.stopPropagation(), onUsesMaxChanged(event2, $$props.activity);
}, "on_change_1$2"), root$3t = /* @__PURE__ */ template('<div class="activity-uses svelte-17c2itn"><input class="uses-value svelte-17c2itn" type="text" data-tidy-field="uses.value"> / <input class="uses-max svelte-17c2itn" type="text" data-tidy-field="uses.max"></div>');
function ActivityUses($$anchor, $$props) {
  push($$props, !0);
  function onUsesMaxChanged(event2, activity) {
    let uses = parseInt(event2.currentTarget.value ?? activity.uses.max ?? 0);
    return isNaN(uses) && (uses = 0), activity.update({ "uses.max": uses });
  }
  __name(onUsesMaxChanged, "onUsesMaxChanged");
  var div = root$3t(), input = child(div);
  input.__change = [on_change$8, $$props];
  var input_1 = sibling(input, 2);
  input_1.__change = [on_change_1$2, onUsesMaxChanged, $$props], template_effect(() => {
    set_value(input, $$props.activity.uses.value), input.disabled = !$$props.activity.item.isOwner, set_value(input_1, $$props.activity.uses.max), input_1.disabled = !$$props.activity.item.isOwner;
  }), event("focus", input, (ev) => ev.currentTarget.select()), event("focus", input_1, (ev) => ev.currentTarget.select()), append($$anchor, div), pop();
}
__name(ActivityUses, "ActivityUses");
delegate(["change"]);
var root$3s = /* @__PURE__ */ template("<img>");
function ItemImage($$anchor, $$props) {
  let alt = prop($$props, "alt", 3, "");
  var img = root$3s();
  template_effect(() => {
    set_class(img, `item-image ${$$props.classes ?? ""} svelte-9tozoy`), set_attribute(img, "src", $$props.src), set_attribute(img, "alt", alt());
  }), append($$anchor, img);
}
__name(ItemImage, "ItemImage");
class TidyHooks {
  static {
    __name(this, "TidyHooks");
  }
  /**
   * The active effect context menu has established its options and is about to show.
   * @param {ActiveEffect5e} effect The active effect document instance.
   * @param {ContextMenuEntry[]} menuItems The menu items for this active effect.
   * @returns {boolean} `true` to allow the menu to show, `false` to prevent the default menu from showing.
   *
   * @example
   * ```js
   * Hooks.on('dnd5e.getActiveEffectContextOptions', (effect, menuItems) => {
   *   return true;
   * });
   * ```
   */
  static dnd5eGetActiveEffectContextOptions(effect2, menuItems) {
    return Hooks.call("dnd5e.getActiveEffectContextOptions", effect2, menuItems);
  }
  /**
   * Something has been dropped on an item or container sheet. Return `false` to prevent default behavior.
   * @param item the target item
   * @param app the target item sheet
   * @param data the drop data
   * @returns `false` to prevent default behavior, else the result is discarded
   */
  static dnd5eDropItemSheetData(item, app, data) {
    return Hooks.call("dnd5e.dropItemSheetData", item, app, data);
  }
  /**
   * The context menu for the advancements list has been constructed.
   * @param {jQuery} html The HTML element to which the context options are attached.
   * @param {ContextMenuEntry[]} contextOptions The context menu entries.
   * @returns {boolean} `true` to allow the menu to show, `false` to prevent the default menu from showing.
   *
   * @example
   * ```js
   * Hooks.on('dnd5e.getItemAdvancementContext', (html, contextOptions) => {
   *   return true;
   * });
   * ```
   */
  static dnd5eGetItemAdvancementContext(html2, contextOptions) {
    return Hooks.call("dnd5e.getItemAdvancementContext", html2, contextOptions);
  }
  /**
   * The item context menu has established its options and is about to show.
   * @param {Item5e} item The item document instance.
   * @param {ContextMenuEntry[]} menuItems The menu items for this item.
   * @returns {boolean} `true` to allow the menu to show, `false` to prevent the default menu from showing.
   *
   * @example
   * ```js
   * Hooks.on('dnd5e.getItemContextOptions', (item, menuItems) => {
   *   return true;
   * });
   * ```
   */
  static dnd5eGetItemContextOptions(item, menuItems) {
    return Hooks.call("dnd5e.getItemContextOptions", item, menuItems);
  }
  /**
   * The context menu is about to show for a given item on a sheet.
   * @param {Item5e} item The item document instance.
   * @param {object} options The mouse event which triggered the context menu.
   *
   * @example
   * ```js
   * Hooks.on('tidy5e-sheet.actorItemUseContextMenu', (item, options) => {
   *   // Your code here
   * });
   * ```
   */
  static tidy5eSheetsActorItemUseContextMenu(item, options) {
    Hooks.callAll("tidy5e-sheet.actorItemUseContextMenu", item, options);
  }
  /**
   * An item is about to be used by an actor.
   * @param {Item5e} item The affected item document instance.
   * @param {any} config Any configuration for the item use.
   * @param {any} options Any options for the item use.
   * @returns {boolean} `true` to allow the item use, `false` to prevent it.
   *
   * @example
   * ```js
   * Hooks.on('tidy5e-sheet.actorPreUseItem', (item, config, options) => {
   *   return true;
   * });
   * ```
   */
  static tidy5eSheetsActorPreUseItem(item, options) {
    return Hooks.call("tidy5e-sheet.actorPreUseItem", item, options);
  }
  /**
   * The facility add button has been clicked for the specified facility type. Normally, this prompts the Compendium Browser.
   * @param event     The inciting event.
   * @param actor     The affected actor who will own the facility.
   * @param type      The type of facility that is intended to be added.
   * @returns         `true` to allow the default behavior, `false` to prevent it.
   */
  static tidy5eSheetsAddFacilityClicked(event2, actor, type) {
    return Hooks.call("tidy5e-sheet.addFacilityClicked", event2, actor, type);
  }
  /**
   * An empty slot on a facility was clicked. Normally, this opens the Compendium Browser, scoped to actors of any type.
   * @param event The inciting click event
   * @param item The affected facility
   * @param occupantType The intended occupant type
   * @param prop The property path on the target facility to which changes would be applied
   * @returns `true` to allow the default behavior, `false` to prevent it.
   */
  static tidy5eSheetsFacilityEmptyOccupantSlotClicked(event2, item, occupantType, prop2) {
    return Hooks.call(
      "tidy5e-sheet.facilityEmptyOccupantSlotClicked",
      event2,
      item,
      occupantType,
      prop2
    );
  }
  /**
   * The facility occupant context menu has established its options and is about to show.
   * @param actor           The affected actor.
   * @param facility        The affected facility.
   * @param occupantUuid    The occupant UUID.
   * @param prop            The property for saving changes to the target occupant.
   * @param index           The index of the occupant.
   * @param contextOptions  The menu items for this occupant.
   * @returns               `true` to allow the menu to show, `false` to prevent the default menu from showing.
   */
  static dnd5eGetFacilityOccupantContextOptions(actor, facility, occupantUuid, prop2, index2, contextOptions) {
    return Hooks.call(
      "tidy5e-sheet.getFacilityOccupantContextOptions",
      actor,
      facility,
      occupantUuid,
      prop2,
      index2,
      contextOptions
    );
  }
  /**
   * The group member context menu has established its options and is about to show.
   * @param group             The affected group document instance.
   * @param member            The actor which is a member of the group.
   * @param contextOptions    The menu items for this group member.
   *
   * @returns {boolean}       `true` to allow the menu to show, `false` to prevent the default menu from showing.
   * 
   * @example
   * ```js
   * Hooks.on('tidy5e-sheet.getGroupMemberContextOptions', (group, member, contextOptions) => {
   *    // Your code here
   * });
   * ```
   */
  static tidy5eSheetsGetGroupMemberContextOptions(group, member, contextOptions) {
    return Hooks.call(
      "tidy5e-sheet.getGroupMemberContextOptions",
      group,
      member,
      contextOptions
    );
  }
  /**
   * A list of visible activities has been prepared for showing on a sheet for gameplay. This is in contrast to showing activities for maintenance in a place like the Item Activities tab.
   * @param parent             The document (usually an item) which owns the activities.
   * @param data               A containing object with a filtered array of activities to show.
   *
   * @example
   * ```js
   * Hooks.on('tidy5e-sheet.getActivitiesForPlay', (parent, data) => {
   *    data.activities = data.activities.filter(a => a.name === "Hide me!");
   *    data.activities.push(mySecretActivity);
   * });
   * ```
   */
  static tidy5eSheetsGetActivitiesForPlay(parent, data) {
    Hooks.callAll("tidy5e-sheet.getActivitiesForPlay", parent, data);
  }
  /**
   * A user has hovered off an item, typically from an item table row.
   * @param {Event} event The triggering mouse event.
   * @param {any} item The item which is no longer hovered.
   *
   * @example
   * ```js
   * Hooks.on('tidy5e-sheet.itemHoverOff', (event, item) => {
   *   // Your code here
   * });
   * ```
   */
  static tidy5eSheetsItemHoverOff(event2, item) {
    Hooks.callAll("tidy5e-sheet.itemHoverOff", event2, item);
  }
  /**
   * A user has hovered over an item, typically on an item table row.
   * @param {Event} event The triggering mouse event.
   * @param {any} item The hovered-over item.
   *
   * @example
   * ```js
   * Hooks.on('tidy5e-sheet.itemHoverOn', (event, item) => {
   *   // Your code here
   * });
   * ```
   */
  static tidy5eSheetsItemHoverOn(event2, item) {
    Hooks.callAll("tidy5e-sheet.itemHoverOn", event2, item);
  }
  /**
   * Sheet item/effect sections are about to be configured. Use this hook to inject additional items, sections, etc., or to adjust context data.
   * @param {any} app The sheet application instance.
   * @param {HTMLElement} element The sheet HTML element.
   * @param {CharacterSheetContext | NpcSheetContext | ContainerSheetClassicContext} data The data context from `getData()`.
   *
   * @example
   * ```js
   * Hooks.on('tidy5e-sheet.preConfigureSections', (app, element, data) => {
   *   // Your code here
   * });
   * ```
   */
  static tidy5eSheetsPreConfigureSections(app, element2, data) {
    Hooks.callAll("tidy5e-sheet.preConfigureSections", app, element2, data);
  }
  /**
   * An active effect is about to be created for an owning document.
   * This was initiated specifically through Tidy 5e Sheets,
   * whether directly by the user, or indirectly through some user interaction.
   * @param {any} owner The owning document instance which will receive the created effect.
   * @param {object} createData The data used to create it.
   * @param {string} userId The user who initiated the creation.
   * @returns {boolean} `true` to allow the effect creation, `false` to prevent it.
   *
   * @example
   * ```js
   * Hooks.on('tidy5e-sheet.preCreateActiveEffect', (owner, createData, userId) => {
   *   return true;
   * });
   * ```
   */
  static tidy5eSheetsPreCreateActiveEffect(owner, createData, userId) {
    return Hooks.call(
      "tidy5e-sheet.preCreateActiveEffect",
      owner,
      createData,
      userId
    );
  }
  /**
   * An item is about to be created for an owning document.
   * This was initiated specifically through Tidy 5e Sheets,
   * whether directly by the user, or indirectly through some user interaction.
   * @param {any} owner The owning document instance which will receive the created item.
   * @param {object} createData The data used to create it.
   * @param {string} userId The user who initiated the creation.
   * @returns {boolean} `true` to allow the item creation, `false` to prevent it.
   *
   * @example
   * ```js
   * Hooks.on('tidy5e-sheet.preCreateItem', (owner, createData, userId) => {
   *   return true;
   * });
   * ```
   */
  static tidy5eSheetsPreCreateItem(owner, createData, userId) {
    return Hooks.call("tidy5e-sheet.preCreateItem", owner, createData, userId);
  }
  /**
   * The portrait picker is about to open.
   * @param {ActorSheetContextV1 | ActorSheetContextV2} context The actor sheet data from `getData()`.
   * @param {MouseEvent & { currentTarget: EventTarget & HTMLElement }} event The triggering event.
   * @returns {boolean} `true` to allow the picker to open, `false` to prevent it.
   *
   * @example
   * ```js
   * Hooks.on('tidy5e-sheet.preOpenActorPortraitFilePicker', (context, event) => {
   *   return true;
   * });
   * ```
   */
  static tidy5eSheetsPreOpenActorPortraitFilePicker(context, event2) {
    return Hooks.call(
      "tidy5e-sheet.preOpenActorPortraitFilePicker",
      context,
      event2
    );
  }
  /**
   * The floating context menu's positioning is being determined.
   * @param {ContextMenuPositionInfo} positionInfo Context menu positioning info, used for determining where to put the context menu.
   * @returns {boolean} `true` to allow the menu to show, `false` to prevent the default menu from showing.
   *
   * @example
   * ```js
   * Hooks.on('tidy5e-sheet.prepareFloatingContextMenuPosition', (positionInfo) => {
   *   return true;
   * });
   * ```
   */
  static tidy5eSheetsPrepareFloatingContextMenuPosition(positionInfo) {
    return Hooks.call(
      "tidy5e-sheet.prepareFloatingContextMenuPosition",
      positionInfo
    );
  }
  /**
   * Resources have been prepared. Use this hook to adjust them and/or add new resources.
   * @param {TidyResource[]} tidyResources The resources that have been prepared for the sheet.
   * @param {Actor5e} actor The affected actor.
   *
   * @example
   * ```js
   * Hooks.on('tidy5e-sheet.prepareResources', (tidyResources, actor) => {
   *   // Your code here
   * });
   * ```
   */
  static tidy5eSheetsPrepareResources(tidyResources, actor) {
    Hooks.callAll("tidy5e-sheet.prepareResources", tidyResources, actor);
  }
  /**
   * A tab is about to be selected.
   * @param {any} app The sheet application instance.
   * @param {HTMLElement} element The sheet's HTML element.
   * @param {object} data The current tab ID before selecting the new tab, and the new tab ID to be selected.
   * @returns {boolean} `false` to cancel tabbing.
   *
   * @example
   * ```js
   * Hooks.on('tidy5e-sheet.preSelectTab', (app, element, data) => {
   *   return true;
   * });
   * ```
   */
  static tidy5eSheetsPreSelectTab(app, element2, data) {
    return Hooks.call("tidy5e-sheet.preSelectTab", app, element2, data);
  }
  /**
   * Tidy 5e Sheets is ready to be used and customized.
   * @param {Tidy5eSheetsApi} api The Tidy 5e Sheets API, used for customizing and registering content with Tidy 5e Sheets.
   *
   * @example
   * ```js
   * Hooks.on('tidy5e-sheet.ready', (api) => {
   *   // Your code here
   * });
   * ```
   */
  static tidy5eSheetsReady(api) {
    Hooks.callAll("tidy5e-sheet.ready", api);
  }
  /**
   * The actor sheet has rendered all content and registered custom content. Is called on partial and full renders.
   * @param {any} app The sheet application instance.
   * @param {HTMLElement} element The sheet's HTML element.
   * @param {CharacterSheetContext | NpcSheetContext | VehicleSheetContext} data The data context from `getData()`.
   * @param {boolean} forced `true` when performing a full re-render; `false` when performing a partial re-render.
   *
   * @example
   * ```js
   * Hooks.on('tidy5e-sheet.renderActorSheet', (app, element, data, forced) => {
   *   // Your code here
   * });
   * ```
   */
  static tidy5eSheetsRenderActorSheet(app, element2, data, forced) {
    Hooks.callAll("tidy5e-sheet.renderActorSheet", app, element2, data, forced);
  }
  /**
   * The item sheet has rendered all content and registered custom content. Is called on partial and full renders.
   * @param {any} app The target item sheet application class instance.
   * @param {HTMLElement} element The item sheet's HTML element.
   * @param {ContainerSheetClassicContext | ItemSheetContext} data The data context from `getData()`.
   * @param {boolean} forced `true` when performing a full re-render; `false` when performing a partial re-render.
   *
   * @example
   * ```js
   * Hooks.on('tidy5e-sheet.renderItemSheet', (app, element, data, forced) => {
   *   // Your code here
   * });
   * ```
   *
   * @deprecated This hook is now redundant for App V2 item and container sheets. It will be removed as of Tidy V8.
   */
  static tidy5eSheetsRenderItemSheet(app, element2, data, forced) {
    Hooks.callAll("tidy5e-sheet.renderItemSheet", app, element2, data, forced);
  }
  /**
   * A tab has been selected on the sheet.
   * @param {any} app The sheet application instance.
   * @param {HTMLElement} element The sheet's HTML element.
   * @param {string} newTabId The selected tab ID.
   *
   * @example
   * ```js
   * Hooks.on('tidy5e-sheet.selectTab', (app, element, newTabId) => {
   *   // Your code here
   * });
   * ```
   */
  static tidy5eSheetsSelectTab(app, element2, newTabId) {
    Hooks.callAll("tidy5e-sheet.selectTab", app, element2, newTabId);
  }
}
class Activities {
  static {
    __name(this, "Activities");
  }
  static isConfigurable(activity) {
    return CONFIG.DND5E.activityTypes[activity.type]?.configurable !== !1;
  }
  static getVisibleActivities(item, activities) {
    const visibleActivities = {
      activities: activities?.filter(
        (a2) => !item.getFlag("dnd5e", "riders.activity")?.includes(a2.id)
      ) ?? []
    };
    return TidyHooks.tidy5eSheetsGetActivitiesForPlay(item, visibleActivities), visibleActivities.activities;
  }
  static activationMap = {
    action: "DND5E.ActionAbbr",
    bonus: "DND5E.BonusActionAbbr",
    reaction: "DND5E.ReactionAbbr",
    minute: "DND5E.TimeMinuteAbbr",
    hour: "DND5E.TimeHourAbbr",
    day: "DND5E.TimeDayAbbr"
  };
  static getActivityItemContext(activity) {
    const toHit = parseInt(activity.labels.toHit), activationAbbr = Activities.activationMap[activity.activation?.type || ""], hasRecharge = activity.uses?.max && activity.uses.recovery?.[0]?.period === "recharge", isOnCooldown = hasRecharge && activity.uses.value < 1;
    return {
      id: activity.id,
      activity,
      hasRecharge,
      isOnCooldown,
      activation: activationAbbr ? `${activity.activation.value ?? ""}${game.i18n.localize(
        activationAbbr
      )}` : activity.labels.activation,
      save: activity.save ? {
        ability: activity.save.ability?.size ? activity.save.ability.size === 1 ? CONFIG.DND5E.abilities[activity.save.ability.first()]?.abbreviation : game.i18n.localize("DND5E.AbbreviationDC") : null
      } : null,
      toHit: isNaN(toHit) ? null : toHit
    };
  }
}
var on_click$1n = /* @__PURE__ */ __name((ev, disabled, onRechargeClicked) => !get(disabled) && onRechargeClicked(ev), "on_click$1n"), root$3r = /* @__PURE__ */ template('<a class="item-list-button"><i class="fas fa-dice-six"></i> <!></a>');
function RechargeControl($$anchor, $$props) {
  push($$props, !0);
  const localize = FoundryAdapter.localize;
  let rechargeLabel = /* @__PURE__ */ derived(() => localize("TIDY5E.RollRecharge.Hint", {
    rechargeLabel: $$props.document.labels?.recharge ?? ""
  })), context = /* @__PURE__ */ derived(getSheetContext), recovery = /* @__PURE__ */ derived(() => $$props.uses?.recovery[0]), disabled = /* @__PURE__ */ derived(() => !get(context).owner);
  function onRechargeClicked(ev) {
    ev.shiftKey ? $$props.document.update({ [$$props.field]: 0 }) : $$props.uses.rollRecharge();
  }
  __name(onRechargeClicked, "onRechargeClicked");
  var a2 = root$3r();
  a2.__click = [on_click$1n, disabled, onRechargeClicked];
  var text$1 = sibling(child(a2)), node = sibling(text$1);
  {
    var consequent = /* @__PURE__ */ __name(($$anchor2) => {
      var text_1 = text("+");
      append($$anchor2, text_1);
    }, "consequent");
    if_block(node, ($$render) => {
      get(recovery)?.value !== 6 && $$render(consequent);
    });
  }
  template_effect(() => {
    set_attribute(a2, "title", get(rechargeLabel)), set_attribute(a2, "tabindex", settings.value.useAccessibleKeyboardSupport ? 0 : -1), toggle_class(a2, "disabled", get(disabled)), set_text(text$1, ` ${get(recovery)?.formula ?? ""}`);
  }), append($$anchor, a2), pop();
}
__name(RechargeControl, "RechargeControl");
delegate(["click"]);
var on_click$1m = /* @__PURE__ */ __name((ev, item, rollActivity, ctx) => item().isOwner && rollActivity(get(ctx).activity, ev), "on_click$1m"), root_4$z = /* @__PURE__ */ template('<span class="inline-activity-arrow"><i class="fa-solid fa-turn-up fa-fw"></i></span> <a class="inline-activity-roll-button highlight-on-hover"><!> </a>', 1), root_12$e = /* @__PURE__ */ template("<span> </span>"), root_11$g = /* @__PURE__ */ template('<!> <i class="fas fa-bolt"></i>', 1), root_15$e = /* @__PURE__ */ template('<span class="text-body-tertiary">&mdash;</span>'), root_3$M = /* @__PURE__ */ template("<!> <!> <!>", 1), root$3q = /* @__PURE__ */ template('<div class="inline-activities-container"><!></div>');
function InlineActivitiesList($$anchor, $$props) {
  push($$props, !0);
  let item = prop($$props, "item", 3, null), activities = prop($$props, "activities", 19, () => []);
  getContext(CONSTANTS.SVELTE_CONTEXT.TAB_ID);
  const gridTemplateColumns = `
    /* Name */
    1fr
    /* Uses */
    2.5rem
    /* Usage */
    5rem
  `;
  function rollActivity(activity, event2) {
    activity.use({ event: event2 });
  }
  __name(rollActivity, "rollActivity");
  function getActivityUsageLabel(activity) {
    return (
      // @ts-expect-error
      CONFIG.DND5E.activityActivationTypes[activity.activation?.type]?.label ?? activity.activation?.type ?? ""
    );
  }
  __name(getActivityUsageLabel, "getActivityUsageLabel");
  const localize = FoundryAdapter.localize;
  var div = root$3q(), node = child(div);
  TidyTable(node, {
    get key() {
      return `activities-${item().name ?? ""}`;
    },
    toggleable: !1,
    gridTemplateColumns,
    body: /* @__PURE__ */ __name(($$anchor2) => {
      var fragment = comment(), node_1 = first_child(fragment);
      each(node_1, 17, activities, (ctx) => ctx.activity.id, ($$anchor3, ctx) => {
        const configurable = /* @__PURE__ */ derived(() => Activities.isConfigurable(get(ctx).activity));
        var rowAttributes = /* @__PURE__ */ derived(() => ({
          "data-activity-id": get(ctx).activity.id,
          "data-configurable": get(configurable),
          "data-info-card": "activity",
          "data-info-card-entity-uuid": get(ctx).activity.uuid
        }));
        TidyTableRow($$anchor3, {
          get rowAttributes() {
            return get(rowAttributes);
          },
          rowClass: "activity",
          onmousedown: /* @__PURE__ */ __name((event2) => FoundryAdapter.editOnMiddleClick(event2, get(ctx).activity), "onmousedown"),
          children: /* @__PURE__ */ __name(($$anchor4, $$slotProps) => {
            var fragment_2 = root_3$M(), node_2 = first_child(fragment_2);
            TidyTableCell(node_2, {
              primary: !0,
              children: /* @__PURE__ */ __name(($$anchor5, $$slotProps2) => {
                var fragment_3 = root_4$z(), a2 = sibling(first_child(fragment_3), 2);
                a2.__click = [on_click$1m, item, rollActivity, ctx];
                var node_3 = child(a2);
                {
                  var consequent = /* @__PURE__ */ __name(($$anchor6) => {
                    Dnd5eIcon($$anchor6, {
                      get src() {
                        return get(ctx).activity.img;
                      }
                    });
                  }, "consequent"), alternate = /* @__PURE__ */ __name(($$anchor6) => {
                    ItemImage($$anchor6, {
                      classes: "always-visible",
                      get src() {
                        return get(ctx).activity.img;
                      },
                      get alt() {
                        return get(ctx).activity.name;
                      }
                    });
                  }, "alternate");
                  if_block(node_3, ($$render) => {
                    get(ctx).activity.img?.endsWith(".svg") ? $$render(consequent) : $$render(alternate, !1);
                  });
                }
                var text2 = sibling(node_3);
                template_effect(() => {
                  set_attribute(a2, "tabindex", settings.value.useAccessibleKeyboardSupport ? 0 : -1), set_text(text2, ` ${get(ctx).activity.name ?? ""}`);
                }), append($$anchor5, fragment_3);
              }, "children"),
              $$slots: { default: !0 }
            });
            var node_4 = sibling(node_2, 2);
            TidyTableCell(node_4, {
              children: /* @__PURE__ */ __name(($$anchor5, $$slotProps2) => {
                var fragment_6 = comment(), node_5 = first_child(fragment_6);
                {
                  var consequent_5 = /* @__PURE__ */ __name(($$anchor6) => {
                    var fragment_7 = comment(), node_6 = first_child(fragment_7);
                    {
                      var consequent_1 = /* @__PURE__ */ __name(($$anchor7) => {
                        RechargeControl($$anchor7, {
                          get document() {
                            return get(ctx).activity;
                          },
                          field: "uses.spent",
                          get uses() {
                            return get(ctx).activity.uses;
                          }
                        });
                      }, "consequent_1"), alternate_3 = /* @__PURE__ */ __name(($$anchor7) => {
                        var fragment_9 = comment(), node_7 = first_child(fragment_9);
                        {
                          var consequent_3 = /* @__PURE__ */ __name(($$anchor8) => {
                            var fragment_10 = root_11$g();
                            const remaining = /* @__PURE__ */ derived(() => get(ctx).activity.uses.max - get(ctx).activity.uses.spent);
                            var node_8 = first_child(fragment_10);
                            {
                              var consequent_2 = /* @__PURE__ */ __name(($$anchor9) => {
                                var span = root_12$e(), text_1 = child(span);
                                template_effect(() => set_text(text_1, get(remaining))), append($$anchor9, span);
                              }, "consequent_2");
                              if_block(node_8, ($$render) => {
                                get(remaining) > 1 && $$render(consequent_2);
                              });
                            }
                            var i2 = sibling(node_8, 2);
                            template_effect(() => set_attribute(i2, "title", localize("DND5E.Charged"))), append($$anchor8, fragment_10);
                          }, "consequent_3"), alternate_2 = /* @__PURE__ */ __name(($$anchor8) => {
                            var fragment_11 = comment(), node_9 = first_child(fragment_11);
                            {
                              var consequent_4 = /* @__PURE__ */ __name(($$anchor9) => {
                                ActivityUses($$anchor9, {
                                  get activity() {
                                    return get(ctx).activity;
                                  }
                                });
                              }, "consequent_4"), alternate_1 = /* @__PURE__ */ __name(($$anchor9) => {
                                var span_1 = root_15$e();
                                append($$anchor9, span_1);
                              }, "alternate_1");
                              if_block(
                                node_9,
                                ($$render) => {
                                  get(ctx).activity.uses?.max ? $$render(consequent_4) : $$render(alternate_1, !1);
                                },
                                !0
                              );
                            }
                            append($$anchor8, fragment_11);
                          }, "alternate_2");
                          if_block(
                            node_7,
                            ($$render) => {
                              get(ctx).hasRecharge ? $$render(consequent_3) : $$render(alternate_2, !1);
                            },
                            !0
                          );
                        }
                        append($$anchor7, fragment_9);
                      }, "alternate_3");
                      if_block(node_6, ($$render) => {
                        get(ctx).isOnCooldown ? $$render(consequent_1) : $$render(alternate_3, !1);
                      });
                    }
                    append($$anchor6, fragment_7);
                  }, "consequent_5");
                  if_block(node_5, ($$render) => {
                    get(configurable) && $$render(consequent_5);
                  });
                }
                append($$anchor5, fragment_6);
              }, "children"),
              $$slots: { default: !0 }
            });
            var node_10 = sibling(node_4, 2);
            TidyTableCell(node_10, {
              children: /* @__PURE__ */ __name(($$anchor5, $$slotProps2) => {
                var text_2 = text();
                template_effect(() => set_text(text_2, getActivityUsageLabel(get(ctx).activity))), append($$anchor5, text_2);
              }, "children"),
              $$slots: { default: !0 }
            }), append($$anchor4, fragment_2);
          }, "children"),
          $$slots: { default: !0 }
        });
      }), append($$anchor2, fragment);
    }, "body"),
    $$slots: { body: !0 }
  }), template_effect(() => set_attribute(div, "data-item-id", item().id)), append($$anchor, div), pop();
}
__name(InlineActivitiesList, "InlineActivitiesList");
delegate(["click"]);
var root_2$$ = /* @__PURE__ */ template('<div class="item-summary-linked-source"><!></div>'), root_1$1W = /* @__PURE__ */ template("<!> <!>", 1), root_3$L = /* @__PURE__ */ template('<!> <div class="inline-wrapped-elements"><!></div>', 1), root_5$E = /* @__PURE__ */ template('<span class="tag"> </span>'), root_4$y = /* @__PURE__ */ template('<!> <div class="inline-wrapped-elements"></div>', 1), root_6$s = /* @__PURE__ */ template("<!> <!>", 1), root$3p = /* @__PURE__ */ template('<div class="item-summary"><!> <!> <!> <!></div> <!>', 1);
function ItemSummary($$anchor, $$props) {
  push($$props, !0);
  let itemSummaryCommands = /* @__PURE__ */ derived(() => ItemSummaryRuntime.getItemSummaryCommands($$props.item)), concealDetails = /* @__PURE__ */ derived(() => FoundryAdapter.concealDetails($$props.item)), linked = /* @__PURE__ */ derived(() => $$props.item?.system?.linkedActivity?.item);
  const localize = FoundryAdapter.localize;
  let activities = /* @__PURE__ */ derived(() => $$props.item ? Activities.getVisibleActivities($$props.item, $$props.item.system.activities).map(Activities.getActivityItemContext) : []);
  var fragment = root$3p(), div = first_child(fragment), node = child(div);
  {
    var consequent = /* @__PURE__ */ __name(($$anchor2) => {
      var fragment_1 = root_1$1W(), node_1 = first_child(fragment_1);
      await_block(node_1, () => FoundryAdapter.enrichHtml(Enrichers.reference(get(linked).uuid, get(linked).name)), null, ($$anchor3, enriched) => {
        var div_1 = root_2$$(), node_2 = child(div_1);
        html(node_2, () => localize("TIDY5E.Activities.Cast.SourceHintText", { itemName: get(enriched) }), !1, !1), append($$anchor3, div_1);
      });
      var node_3 = sibling(node_1, 2);
      HorizontalLineSeparator(node_3, {}), append($$anchor2, fragment_1);
    }, "consequent");
    if_block(node, ($$render) => {
      get(linked) && $$render(consequent);
    });
  }
  var node_4 = sibling(node, 2);
  html(node_4, () => $$props.chatData.description);
  var node_5 = sibling(node_4, 2);
  {
    var consequent_1 = /* @__PURE__ */ __name(($$anchor2) => {
      var fragment_2 = root_3$L(), node_6 = first_child(fragment_2);
      HorizontalLineSeparator(node_6, {});
      var div_2 = sibling(node_6, 2), node_7 = child(div_2);
      ItemSummaryCommandButtonList(node_7, {
        get item() {
          return $$props.item;
        }
      }), append($$anchor2, fragment_2);
    }, "consequent_1");
    if_block(node_5, ($$render) => {
      get(itemSummaryCommands).length && $$render(consequent_1);
    });
  }
  var node_8 = sibling(node_5, 2);
  {
    var consequent_2 = /* @__PURE__ */ __name(($$anchor2) => {
      var fragment_3 = root_4$y(), node_9 = first_child(fragment_3);
      HorizontalLineSeparator(node_9, {});
      var div_3 = sibling(node_9, 2);
      each(div_3, 21, () => $$props.chatData.properties, index, ($$anchor3, prop2) => {
        var span = root_5$E(), text2 = child(span);
        template_effect(() => set_text(text2, get(prop2))), append($$anchor3, span);
      }), template_effect(() => {
        div_3.inert = get(concealDetails), set_attribute(div_3, "data-tidy-sheet-part", CONSTANTS.SHEET_PARTS.ITEM_PROPERTY_LIST);
      }), append($$anchor2, fragment_3);
    }, "consequent_2");
    if_block(node_8, ($$render) => {
      $$props.chatData.properties && $$render(consequent_2);
    });
  }
  var node_10 = sibling(div, 2);
  {
    var consequent_3 = /* @__PURE__ */ __name(($$anchor2) => {
      var fragment_4 = root_6$s(), node_11 = first_child(fragment_4);
      HorizontalLineSeparator(node_11, {});
      var node_12 = sibling(node_11, 2);
      InlineActivitiesList(node_12, {
        get item() {
          return $$props.item;
        },
        get activities() {
          return get(activities);
        }
      }), append($$anchor2, fragment_4);
    }, "consequent_3");
    if_block(node_10, ($$render) => {
      get(activities).length > 0 && $$render(consequent_3);
    });
  }
  template_effect(() => set_attribute(div, "data-tidy-sheet-part", CONSTANTS.SHEET_PARTS.ITEM_SUMMARY)), append($$anchor, fragment), pop();
}
__name(ItemSummary, "ItemSummary");
var root$3o = /* @__PURE__ */ template("<div><div><!></div> <!></div>");
function ItemTableRow($$anchor, $$props) {
  push($$props, !0);
  let item = prop($$props, "item", 3, null), favoriteId = prop($$props, "favoriteId", 3, null), contextMenu = prop($$props, "contextMenu", 3, null), cssClass = prop($$props, "cssClass", 3, ""), hidden = prop($$props, "hidden", 3, !1), getDragData = prop($$props, "getDragData", 3, null), draggable = /* @__PURE__ */ derived(item);
  const emptyChatData = {
    description: { value: "" },
    properties: [],
    unidentified: { description: "" }
  }, expandedItemData = getContext(CONSTANTS.SVELTE_CONTEXT.EXPANDED_ITEM_DATA), expandedItems = getContext(CONSTANTS.SVELTE_CONTEXT.EXPANDED_ITEMS), onItemToggled = getContext(CONSTANTS.SVELTE_CONTEXT.ON_ITEM_TOGGLED), location = getContext(CONSTANTS.SVELTE_CONTEXT.LOCATION);
  let showSummary = state(!1), chatData = state(void 0);
  async function toggleSummary(actor) {
    if (!item()) {
      warn("Unable to show summary. No item was provided."), set(showSummary, !1);
      return;
    }
    set(chatData, proxy(await item().getChatData({ secrets: actor.isOwner }))), set(showSummary, !get(showSummary)), onItemToggled?.(item().id, get(showSummary), location);
  }
  __name(toggleSummary, "toggleSummary");
  async function onMouseEnter(event2) {
    TidyHooks.tidy5eSheetsItemHoverOn(event2, item());
  }
  __name(onMouseEnter, "onMouseEnter");
  async function onMouseLeave(event2) {
    TidyHooks.tidy5eSheetsItemHoverOff(event2, item());
  }
  __name(onMouseLeave, "onMouseLeave");
  function handleDragStart(event2) {
    if (!get(draggable))
      return;
    onMouseLeave(event2);
    const dragData = getDragData()?.() ?? get(draggable).toDragData?.();
    dragData && event2.dataTransfer?.setData("text/plain", JSON.stringify(dragData));
  }
  __name(handleDragStart, "handleDragStart");
  function restoreItemSummaryIfExpanded() {
    if (!item())
      return;
    expandedItems?.get(item().id)?.has(location) && (set(chatData, proxy(expandedItemData.get(item().id))), set(showSummary, !0));
  }
  __name(restoreItemSummaryIfExpanded, "restoreItemSummaryIfExpanded");
  let first = !0;
  user_effect(() => {
    (async function() {
      if (first) {
        first = !1, restoreItemSummaryIfExpanded();
        return;
      }
      item() && get(showSummary) && set(chatData, proxy(await item().getChatData({ secrets: item().actor.isOwner })));
    })();
  });
  var div = root$3o();
  let attributes;
  var div_1 = child(div);
  let attributes_1;
  var node = child(div_1);
  snippet(node, () => $$props.children ?? noop, () => ({ toggleSummary }));
  var node_1 = sibling(div_1, 2);
  ExpandableContainer(node_1, {
    get expanded() {
      return get(showSummary);
    },
    children: /* @__PURE__ */ __name(($$anchor2, $$slotProps) => {
      var chatData_1 = /* @__PURE__ */ derived(() => get(chatData) ?? emptyChatData);
      ItemSummary($$anchor2, {
        get chatData() {
          return get(chatData_1);
        },
        get item() {
          return item();
        }
      });
    }, "children"),
    $$slots: { default: !0 }
  }), template_effect(() => {
    attributes = set_attributes(
      div,
      attributes,
      {
        class: "item-table-row-container",
        "aria-hidden": hidden(),
        ...$$props.containerAttributes
      },
      "svelte-39lk4e"
    ), toggle_class(div, "hidden", hidden()), attributes_1 = set_attributes(
      div_1,
      attributes_1,
      {
        class: `item-table-row ${cssClass() ?? "" ?? ""}`,
        "data-context-menu": contextMenu()?.type,
        onmousedown: $$props.onMouseDown,
        onmouseenter: onMouseEnter,
        onmouseleave: onMouseLeave,
        ondragstart: handleDragStart,
        draggable: !!get(draggable),
        "data-tidy-table-row": !0,
        "data-tidy-sheet-part": CONSTANTS.SHEET_PARTS.ITEM_TABLE_ROW,
        "data-tidy-item-type": item()?.type ?? "unknown",
        "data-favorite-id": favoriteId() ?? null,
        "data-info-card": item() ? "item" : null,
        "data-info-card-entity-uuid": item()?.uuid ?? null,
        "data-item-id": item()?.id,
        ...$$props.rowAttributes
      },
      "svelte-39lk4e"
    );
  }), append($$anchor, div), pop();
}
__name(ItemTableRow, "ItemTableRow");
var root$3n = /* @__PURE__ */ template('<button type="button" class="item-list-footer-button"><i class="fas fa-plus-circle"></i> </button>');
function ItemCreateButton($$anchor, $$props) {
  push($$props, !0);
  let create = prop($$props, "create", 3, defaultCreateFunction);
  const localize = FoundryAdapter.localize;
  function defaultCreateFunction() {
    return FoundryAdapter.createItem($$props.dataset, $$props.actor);
  }
  __name(defaultCreateFunction, "defaultCreateFunction");
  var button = root$3n();
  button.__click = function(...$$args) {
    create()?.apply(this, $$args);
  }, template_effect(() => set_attribute(button, "title", localize("DND5E.FeatureAdd")));
  var text2 = sibling(child(button));
  template_effect(() => set_text(text2, ` ${localize("DND5E.Add") ?? ""}`)), template_effect(() => {
    set_attribute(button, "data-tidy-sheet-part", CONSTANTS.SHEET_PARTS.ITEM_CREATE_COMMAND), set_attribute(button, "tabindex", settings.value.useAccessibleKeyboardSupport ? 0 : -1);
  }), append($$anchor, button), pop();
}
__name(ItemCreateButton, "ItemCreateButton");
delegate(["click"]);
class ActorItemRuntime {
  static {
    __name(this, "ActorItemRuntime");
  }
  static _actorItemSectionCommands = [];
  static registerActorItemSectionCommands(commands) {
    ActorItemRuntime._actorItemSectionCommands.push(...commands);
  }
  static getActorItemSectionCommands({
    section,
    actor
  }) {
    return [...ActorItemRuntime._actorItemSectionCommands].filter((c2) => {
      try {
        return section && (c2.enabled?.({ section, actor }) ?? !0);
      } catch (e2) {
        return error(
          "Failed to check if actor item section command is enabled",
          !1,
          { error: e2, actor, section }
        ), !1;
      }
    });
  }
}
var on_click$1l = /* @__PURE__ */ __name((ev, command, $$props) => get(command).execute?.({
  section: $$props.section,
  event: ev,
  actor: $$props.actor
}), "on_click$1l"), root_5$D = /* @__PURE__ */ template("<i></i>"), root_4$x = /* @__PURE__ */ template('<button type="button" class="item-list-footer-button"><!> </button>'), root$3m = /* @__PURE__ */ template('<footer class="item-table-footer-row svelte-1ya4qwh"><!> <!></footer>');
function ItemTableFooter($$anchor, $$props) {
  push($$props, !0);
  let canCreate = prop($$props, "canCreate", 3, !0), create = prop($$props, "create", 3, void 0), customCommands = $$props.isItem ? ActorItemRuntime.getActorItemSectionCommands({
    actor: $$props.actor,
    section: $$props.section
  }) : [];
  function createForCustom(custom) {
    if (custom.creationItemTypes.length)
      if (custom.creationItemTypes.length === 1)
        FoundryAdapter.createItem(
          {
            type: custom.creationItemTypes[0],
            ...$$props.section.dataset
          },
          $$props.actor
        );
      else {
        const createData = { ...$$props.section.dataset };
        if (!TidyHooks.tidy5eSheetsPreCreateItem($$props.actor, createData, game.user.id))
          return;
        Item.implementation.createDialog(createData, {
          parent: $$props.actor,
          pack: $$props.actor.pack,
          types: custom.creationItemTypes
        });
      }
  }
  __name(createForCustom, "createForCustom");
  const localize = FoundryAdapter.localize;
  var footer = root$3m(), node = child(footer);
  {
    var consequent_1 = /* @__PURE__ */ __name(($$anchor2) => {
      var fragment = comment();
      const custom = /* @__PURE__ */ derived(() => $$props.section.custom);
      var node_1 = first_child(fragment);
      {
        var consequent = /* @__PURE__ */ __name(($$anchor3) => {
          ItemCreateButton($$anchor3, {
            get dataset() {
              return $$props.section.dataset;
            },
            get actor() {
              return $$props.actor;
            },
            create: /* @__PURE__ */ __name(() => createForCustom(get(custom)), "create")
          });
        }, "consequent"), alternate = /* @__PURE__ */ __name(($$anchor3) => {
          ItemCreateButton($$anchor3, {
            get dataset() {
              return $$props.section.dataset;
            },
            get actor() {
              return $$props.actor;
            },
            get create() {
              return create();
            }
          });
        }, "alternate");
        if_block(node_1, ($$render) => {
          get(custom) ? $$render(consequent) : $$render(alternate, !1);
        });
      }
      append($$anchor2, fragment);
    }, "consequent_1");
    if_block(node, ($$render) => {
      canCreate() && $$render(consequent_1);
    });
  }
  var node_2 = sibling(node, 2);
  each(node_2, 17, () => customCommands, index, ($$anchor2, command) => {
    var button = root_4$x();
    button.__click = [on_click$1l, command, $$props], template_effect(() => set_attribute(button, "title", localize(get(command).tooltip ?? "")));
    var node_3 = child(button);
    {
      var consequent_2 = /* @__PURE__ */ __name(($$anchor3) => {
        var i2 = root_5$D();
        template_effect(() => set_class(i2, clsx(get(command).iconClass), "svelte-1ya4qwh")), append($$anchor3, i2);
      }, "consequent_2");
      if_block(node_3, ($$render) => {
        (get(command).iconClass ?? "") !== "" && $$render(consequent_2);
      });
    }
    var text2 = sibling(node_3);
    template_effect(() => set_text(text2, ` ${localize(get(command).label ?? "") ?? ""}`)), template_effect(() => set_attribute(button, "tabindex", settings.value.useAccessibleKeyboardSupport ? 0 : -1)), append($$anchor2, button);
  }), append($$anchor, footer), pop();
}
__name(ItemTableFooter, "ItemTableFooter");
delegate(["click"]);
var root$3l = /* @__PURE__ */ template("<div><!></div>");
function ItemTableColumn($$anchor, $$props) {
  push($$props, !0);
  let primary = prop($$props, "primary", 3, !1), baseWidth = prop($$props, "baseWidth", 3, null), title = prop($$props, "title", 3, null), cssClass = prop($$props, "cssClass", 3, "");
  var div = root$3l(), node = child(div);
  snippet(node, () => $$props.children ?? noop), template_effect(() => {
    set_class(div, `item-table-column ${cssClass() ?? ""} svelte-14w3uu6`), set_attribute(div, "title", title()), toggle_class(div, "primary", primary()), set_style(div, "flex-basis", baseWidth());
  }), append($$anchor, div), pop();
}
__name(ItemTableColumn, "ItemTableColumn");
var root$3k = /* @__PURE__ */ template("<div><!></div>");
function ItemTableCell($$anchor, $$props) {
  push($$props, !0);
  let baseWidth = prop($$props, "baseWidth", 3, void 0), primary = prop($$props, "primary", 3, !1), cssClass = prop($$props, "cssClass", 3, ""), title = prop($$props, "title", 3, void 0);
  var div = root$3k();
  let attributes;
  var node = child(div);
  snippet(node, () => $$props.children ?? noop), template_effect(() => {
    attributes = set_attributes(div, attributes, {
      class: `item-table-cell ${cssClass() ?? ""}`,
      title: title(),
      ...$$props.attributes
    }), toggle_class(div, "primary", primary()), set_style(div, "flex-basis", baseWidth());
  }), append($$anchor, div), pop();
}
__name(ItemTableCell, "ItemTableCell");
var on_click$1k = /* @__PURE__ */ __name((event2, disabled, $$props) => !disabled() && FoundryAdapter.actorTryUseItem($$props.item, event2), "on_click$1k"), on_contextmenu$5 = /* @__PURE__ */ __name((event2, $$props) => FoundryAdapter.onActorItemButtonContextMenu($$props.item, { event: event2 }), "on_contextmenu$5"), root_1$1V = /* @__PURE__ */ template('<i class="roll-indicator fa fa-dice-d20"></i>'), root$3j = /* @__PURE__ */ template('<a class="item-use-button"><img class="item-image"> <div role="presentation" aria-hidden="true" class="unidentified-glyph no-transition"><i class="fas fa-question"></i></div> <!> <!></a>');
function ItemUseButton($$anchor, $$props) {
  push($$props, !0);
  let imgUrlOverride = prop($$props, "imgUrlOverride", 3, void 0), disabled = prop($$props, "disabled", 3, !1), showDiceIconOnHover = prop($$props, "showDiceIconOnHover", 3, !0);
  var a2 = root$3j();
  a2.__click = [on_click$1k, disabled, $$props], a2.__contextmenu = [on_contextmenu$5, $$props];
  var img = child(a2), div = sibling(img, 2), node = sibling(div, 2);
  {
    var consequent = /* @__PURE__ */ __name(($$anchor2) => {
      var i2 = root_1$1V();
      append($$anchor2, i2);
    }, "consequent");
    if_block(node, ($$render) => {
      showDiceIconOnHover() && $$render(consequent);
    });
  }
  var node_1 = sibling(node, 2);
  snippet(node_1, () => $$props.afterRollButton ?? noop), template_effect(() => {
    set_attribute(img, "alt", $$props.item.name), set_attribute(img, "src", imgUrlOverride() ?? $$props.item.img), set_attribute(img, "data-tidy-sheet-part", CONSTANTS.SHEET_PARTS.GROUP_MEMBER_PORTRAIT), toggle_class(img, "conceal", $$props.item.system.identified === !1), toggle_class(div, "conceal", $$props.item.system.identified === !1);
  }), append($$anchor, a2), pop();
}
__name(ItemUseButton, "ItemUseButton");
delegate(["click", "contextmenu"]);
var root$3i = /* @__PURE__ */ template('<span class="ae-marker svelte-1atytd6">Æ</span>');
function ActiveEffectsMarker($$anchor, $$props) {
  push($$props, !1);
  const localize = FoundryAdapter.localize;
  init();
  var span = root$3i();
  template_effect(() => set_attribute(span, "title", localize("TIDY5E.ActiveEffectsMarkerTitle"))), append($$anchor, span), pop();
}
__name(ActiveEffectsMarker, "ActiveEffectsMarker");
var on_click$1j = /* @__PURE__ */ __name((ev, $$props) => $$props.onToggle?.(ev), "on_click$1j"), root$3h = /* @__PURE__ */ template("<a><!></a> <!>", 1);
function ItemName($$anchor, $$props) {
  push($$props, !0);
  let cssClass = prop($$props, "cssClass", 3, ""), hasChildren = prop($$props, "hasChildren", 3, !0), useActiveEffectsMarker = prop($$props, "useActiveEffectsMarker", 3, !0), hasActiveEffects = /* @__PURE__ */ derived(() => !!$$props.item.effects?.size);
  var fragment = root$3h(), a2 = first_child(fragment);
  a2.__click = [on_click$1j, $$props];
  var node = child(a2);
  snippet(node, () => $$props.children ?? noop);
  var node_1 = sibling(a2, 2);
  {
    var consequent = /* @__PURE__ */ __name(($$anchor2) => {
      ActiveEffectsMarker($$anchor2, {});
    }, "consequent");
    if_block(node_1, ($$render) => {
      useActiveEffectsMarker() && settings.value.showActiveEffectsMarker && get(hasActiveEffects) && $$render(consequent);
    });
  }
  template_effect(() => {
    set_class(a2, `item-name truncate ${cssClass() ?? ""} svelte-tphlr0`), toggle_class(a2, "has-children", hasChildren()), toggle_class(a2, "italic", $$props.item.system.identified === !1);
  }), append($$anchor, fragment), pop();
}
__name(ItemName, "ItemName");
delegate(["click"]);
var on_change$7 = /* @__PURE__ */ __name((event2, $$props) => {
  event2.preventDefault(), event2.stopPropagation(), FoundryAdapter.handleItemUsesChanged(event2, $$props.item);
}, "on_change$7"), on_change_1$1 = /* @__PURE__ */ __name((event2, onUsesMaxChanged, $$props) => {
  event2.preventDefault(), event2.stopPropagation(), onUsesMaxChanged(event2, $$props.item);
}, "on_change_1$1"), root$3g = /* @__PURE__ */ template('<div class="item-uses svelte-dfnk2f"><input class="uses-value svelte-dfnk2f" type="text" data-tidy-field="system.uses.value"> / <input class="uses-max svelte-dfnk2f" type="text" data-tidy-field="system.uses.max"></div>');
function ItemUses($$anchor, $$props) {
  push($$props, !0);
  function onUsesMaxChanged(event2, item) {
    let uses = parseInt(event2.currentTarget.value ?? item.system.uses.max ?? 0);
    return isNaN(uses) && (uses = 0), item.update({ "system.uses.max": uses });
  }
  __name(onUsesMaxChanged, "onUsesMaxChanged");
  var div = root$3g(), input = child(div);
  input.__change = [on_change$7, $$props];
  var input_1 = sibling(input, 2);
  input_1.__change = [on_change_1$1, onUsesMaxChanged, $$props], template_effect(() => {
    set_value(input, $$props.item.system.uses.value), input.disabled = !$$props.item.isOwner, set_value(input_1, $$props.item.system.uses.max), input_1.disabled = !$$props.item.isOwner;
  }), event("focus", input, (ev) => ev.currentTarget.select()), event("focus", input_1, (ev) => ev.currentTarget.select()), append($$anchor, div), pop();
}
__name(ItemUses, "ItemUses");
delegate(["change"]);
var root_1$1U = /* @__PURE__ */ template("<i></i>"), root$3f = /* @__PURE__ */ template('<button type="button"><!> <!></button>');
function ItemControl($$anchor, $$props) {
  push($$props, !0);
  let iconCssClass = prop($$props, "iconCssClass", 3, void 0), iconSrc = prop($$props, "iconSrc", 3, void 0), title = prop($$props, "title", 3, void 0), active = prop($$props, "active", 3, !0), onclick = prop($$props, "onclick", 3, void 0);
  const localize = FoundryAdapter.localize;
  var button = root$3f();
  button.__click = function(...$$args) {
    onclick()?.apply(this, $$args);
  }, template_effect(() => set_attribute(button, "title", title() !== void 0 ? localize(title()) : ""));
  var node = child(button);
  {
    var consequent = /* @__PURE__ */ __name(($$anchor2) => {
      var i2 = root_1$1U();
      template_effect(() => set_class(i2, clsx(iconCssClass()), "svelte-7v6r9g")), append($$anchor2, i2);
    }, "consequent");
    if_block(node, ($$render) => {
      iconCssClass() && $$render(consequent);
    });
  }
  var node_1 = sibling(node, 2);
  {
    var consequent_1 = /* @__PURE__ */ __name(($$anchor2) => {
      Dnd5eIcon($$anchor2, {
        get src() {
          return iconSrc();
        }
      });
    }, "consequent_1");
    if_block(node_1, ($$render) => {
      iconSrc() && $$render(consequent_1);
    });
  }
  template_effect(() => {
    set_class(button, `item-list-button ${$$props.class ?? "" ?? ""} svelte-7v6r9g`), set_attribute(button, "tabindex", settings.value.useAccessibleKeyboardSupport ? 0 : -1), toggle_class(button, "inactive", !active());
  }), append($$anchor, button), pop();
}
__name(ItemControl, "ItemControl");
delegate(["click"]);
function ItemDeleteControl($$anchor, $$props) {
  push($$props, !0);
  let onDelete = prop($$props, "onDelete", 3, () => !0), deleteFn = prop($$props, "deleteFn", 3, () => FoundryAdapter.onActorItemDelete($$props.item.actor, $$props.item));
  const localize = FoundryAdapter.localize;
  var class_1 = /* @__PURE__ */ derived(() => $$props.class ?? ""), title = /* @__PURE__ */ derived(() => localize("DND5E.ItemDelete"));
  ItemControl($$anchor, {
    iconCssClass: "fas fa-trash fa-fw",
    get class() {
      return get(class_1);
    },
    onclick: /* @__PURE__ */ __name(() => onDelete()() && deleteFn()(), "onclick"),
    get title() {
      return get(title);
    }
  }), pop();
}
__name(ItemDeleteControl, "ItemDeleteControl");
function ItemEditControl($$anchor, $$props) {
  push($$props, !0);
  const localize = FoundryAdapter.localize;
  var iconCssClass = /* @__PURE__ */ derived(() => `fas fa-edit fa-fw ${$$props.class ?? "" ?? ""}`), class_1 = /* @__PURE__ */ derived(() => $$props.class ?? ""), title = /* @__PURE__ */ derived(() => localize("DND5E.ItemEdit"));
  ItemControl($$anchor, {
    get iconCssClass() {
      return get(iconCssClass);
    },
    get class() {
      return get(class_1);
    },
    get title() {
      return get(title);
    },
    onclick: /* @__PURE__ */ __name(() => $$props.item.sheet.render(!0), "onclick")
  }), pop();
}
__name(ItemEditControl, "ItemEditControl");
function EquipControl($$anchor, $$props) {
  push($$props, !0);
  function toggleEquipped() {
    const value = FoundryAdapter.getProperty($$props.item, "system.equipped");
    $$props.item.update({ "system.equipped": !value });
  }
  __name(toggleEquipped, "toggleEquipped");
  var title = /* @__PURE__ */ derived(() => $$props.ctx?.toggleTitle);
  ItemControl($$anchor, {
    get title() {
      return get(title);
    },
    iconCssClass: "fas fa-user-alt",
    get active() {
      return $$props.item.system.equipped;
    },
    onclick: toggleEquipped
  }), pop();
}
__name(EquipControl, "EquipControl");
function AttuneControl($$anchor, $$props) {
  push($$props, !0);
  let isAttuned = /* @__PURE__ */ derived(() => $$props.item.system.attuned);
  function toggleAttuned() {
    const actor = $$props.item.actor;
    if (!actor)
      return;
    const currentAttunementCount = actor.system.attributes.attunement.value;
    $$props.item.system.attuned ? $$props.item.update({ "system.attuned": !1 }) : currentAttunementCount >= actor.system.attributes.attunement.max ? ui.notifications.warn(`${FoundryAdapter.localize("TIDY5E.AttunementWarning", { number: currentAttunementCount })}`) : $$props.item.update({ "system.attuned": !0 });
  }
  __name(toggleAttuned, "toggleAttuned");
  var title = /* @__PURE__ */ derived(() => $$props.ctx?.attunement?.title), iconCssClass = /* @__PURE__ */ derived(() => `fas fa-sun ${$$props.ctx?.attunement?.cls ?? ""}`);
  ItemControl($$anchor, {
    get title() {
      return get(title);
    },
    get iconCssClass() {
      return get(iconCssClass);
    },
    get active() {
      return get(isAttuned);
    },
    onclick: toggleAttuned
  }), pop();
}
__name(AttuneControl, "AttuneControl");
var root$3e = /* @__PURE__ */ template('<div class="is-favorite svelte-hgw8rv"><i class="fas fa-bookmark icon-fav fa-fw"></i></div>');
function InlineFavoriteIcon($$anchor, $$props) {
  push($$props, !1);
  const localize = FoundryAdapter.localize;
  init();
  var div = root$3e();
  template_effect(() => set_attribute(div, "title", localize("TIDY5E.Favorite"))), append($$anchor, div), pop();
}
__name(InlineFavoriteIcon, "InlineFavoriteIcon");
function ItemFavoriteControl($$anchor, $$props) {
  push($$props, !0);
  let active = /* @__PURE__ */ derived(() => FoundryAdapter.isItemFavorited($$props.item)), title = /* @__PURE__ */ derived(() => FoundryAdapter.localize(get(active) ? "TIDY5E.RemoveFavorite" : "TIDY5E.AddFavorite"));
  ItemControl($$anchor, {
    iconCssClass: "fas fa-bookmark",
    get active() {
      return get(active);
    },
    get title() {
      return get(title);
    },
    onclick: /* @__PURE__ */ __name(() => FoundryAdapter.toggleFavoriteItem($$props.item), "onclick")
  }), pop();
}
__name(ItemFavoriteControl, "ItemFavoriteControl");
class ActionListRuntime {
  static {
    __name(this, "ActionListRuntime");
  }
  static _activationTypeMappings = {};
  static addActivationTypeMappings(mappings2) {
    ActionListRuntime._activationTypeMappings = foundry.utils.mergeObject(
      ActionListRuntime._activationTypeMappings,
      mappings2
    );
  }
  static getActivationTypeMappings() {
    return { ...ActionListRuntime._activationTypeMappings };
  }
}
function simplifyFormula(formula, removeFlavor = !1) {
  try {
    if (removeFlavor && (formula = formula?.replace(foundry.dice.terms.RollTerm.FLAVOR_REGEXP, "")?.replace(foundry.dice.terms.RollTerm.FLAVOR_REGEXP_STRING, "")?.trim()), formula?.trim() === "")
      return "";
    const simplifiedTerms = Roll.create(formula).terms.map(
      (t2) => t2.isIntermediate ? new foundry.dice.terms.NumericTerm({
        number: t2.evaluate({ allowInteractive: !1 }).total,
        options: t2.options
      }) : t2
    );
    return Roll.fromTerms(simplifiedTerms).formula;
  } catch (e2) {
    return error("Unable to simplify formula due to an error.", !1, e2), formula;
  }
}
__name(simplifyFormula, "simplifyFormula");
function getMaxPreparedSpellsSampleFormulas() {
  return [
    {
      label: "TIDY5E.Class.Artificer",
      value: "@abilities.int.mod + floor(@classes.artificer.levels / 2)"
    },
    {
      label: "TIDY5E.Class.Bard",
      value: "max(@classes.bard.levels + 3 - floor(@classes.bard.levels/20), (min(floor(@classes.bard.levels/10),1) * (14 + min(floor(@classes.bard.levels/11),1) + min(floor(@classes.bard.levels/13),1) + (min(floor(@classes.bard.levels/14),1) * 2) + min(floor(@classes.bard.levels/15),1) + min(floor(@classes.bard.levels/17),1) + (min(floor(@classes.bard.levels/18),1) * 2))))"
    },
    {
      label: "TIDY5E.Class.Cleric",
      value: "@abilities.wis.mod + @classes.cleric.levels"
    },
    {
      label: "TIDY5E.Class.Druid",
      value: "@abilities.wis.mod + @classes.druid.levels"
    },
    {
      label: "TIDY5E.Class.Paladin",
      value: "@abilities.cha.mod + floor(@classes.paladin.levels / 2)"
    },
    { label: "TIDY5E.Class.Ranger", value: "ceil(@classes.ranger.levels/2)+1" },
    {
      label: "TIDY5E.Class.Sorcerer",
      value: "min(@classes.sorcerer.levels + 1, 12 + min(floor(@classes.sorcerer.levels/13),1) + min(floor(@classes.sorcerer.levels/15),1) + min(floor(@classes.sorcerer.levels/17),1))"
    },
    {
      label: "TIDY5E.Class.Wizard",
      value: "@abilities.int.mod + @classes.wizard.levels"
    }
  ];
}
__name(getMaxPreparedSpellsSampleFormulas, "getMaxPreparedSpellsSampleFormulas");
function calculateSpellAttackAndDc(actor, spellClass) {
  try {
    const rollData = actor.getRollData(), prof = actor.system.attributes.prof ?? 0, spellAbility = spellClass?.system?.spellcasting?.ability ?? actor.system.attributes.spellcasting, abilityMod = (spellAbility != "" ? actor.system.abilities[spellAbility].mod : 0) ?? 0, spellAttackMod = prof + abilityMod, rawRsak = Roll.replaceFormulaData(
      actor.system.bonuses.rsak.attack,
      rollData,
      { missing: 0, warn: !1 }
    ), rsakBonusTotal = calculateDeterministicBonus(rawRsak);
    let rsakTotal = (spellAttackMod + rsakBonusTotal).toString();
    rsakTotal.startsWith("-") || (rsakTotal = "+" + rsakTotal);
    let rawMsak = Roll.replaceFormulaData(
      actor.system.bonuses.msak.attack,
      rollData,
      { missing: 0, warn: !1 }
    ), msakBonusTotal = calculateDeterministicBonus(rawMsak), msakTotal = (spellAttackMod + msakBonusTotal).toString();
    msakTotal.startsWith("-") || (msakTotal = "+" + msakTotal);
    const abilityName = CONFIG.DND5E.abilities[spellAbility]?.label ?? FoundryAdapter.localize("DND5E.None");
    return {
      dc: spellClass?.system.spellcasting.save ?? actor.system.attributes.spelldc,
      dcTooltip: getDcTooltip(actor, spellAbility),
      meleeMod: msakTotal,
      meleeTooltip: buildAttackModTooltip(
        abilityName,
        abilityMod,
        prof,
        msakBonusTotal
      ),
      meleeHasBonus: msakBonusTotal !== 0,
      rangedMod: rsakTotal,
      rangedTooltip: buildAttackModTooltip(
        abilityName,
        abilityMod,
        prof,
        rsakBonusTotal
      ),
      rangedHasBonus: rsakBonusTotal !== 0
    };
  } catch (e2) {
    return error("An error occurred while calculating spell attack bonus", !1, e2), debug("Spell attack bonus error troubleshooting details", {
      bonuses: actor.system.bonuses,
      actor
    }), {
      dc: actor.system.attributes.spelldc,
      dcTooltip: "",
      meleeMod: "",
      meleeTooltip: "",
      meleeHasBonus: !1,
      rangedMod: "",
      rangedTooltip: "",
      rangedHasBonus: !1
    };
  }
}
__name(calculateSpellAttackAndDc, "calculateSpellAttackAndDc");
function buildAttackModTooltip(abilityName, abilityMod, proficiency, bonusTotal) {
  let tooltip = "";
  return abilityMod !== 0 && (tooltip += abilityMod < 0 ? " - " : " + ", tooltip += `${Math.abs(abilityMod)} (${abilityName})`), proficiency !== 0 && (tooltip += proficiency < 0 ? " - " : " + ", tooltip += `${Math.abs(proficiency)} (${FoundryAdapter.localize(
    "DND5E.ProficiencyBonus"
  )})`), bonusTotal !== 0 && (tooltip += bonusTotal < 0 ? " - " : " + ", tooltip += `${Math.abs(bonusTotal)} (${FoundryAdapter.localize(
    "DND5E.Bonus"
  )})`), tooltip.trim();
}
__name(buildAttackModTooltip, "buildAttackModTooltip");
function calculateDeterministicBonus(rawBonus) {
  if (!Roll.validate(rawBonus))
    return 0;
  const deterministicRawBonus = new Roll(rawBonus).terms.filter(
    (t2) => t2.isDeterministic
  );
  if (deterministicRawBonus.length == 0)
    return 0;
  let bonusRoll = Roll.fromTerms([new foundry.dice.terms.NumericTerm(0)]);
  try {
    bonusRoll = Roll.fromTerms(deterministicRawBonus);
    let bonusTotal = 0;
    return Roll.validate(bonusRoll.formula) && (bonusTotal = bonusRoll.evaluateSync({ allowInteractive: !1 }).total), bonusTotal;
  } catch (e2) {
    return warn(e2.toString()), 0;
  }
}
__name(calculateDeterministicBonus, "calculateDeterministicBonus");
function getDcTooltip(actor, spellAbility) {
  const abilityMod = (spellAbility != "" ? actor.system.abilities[spellAbility].mod : 0) ?? 0, abilityName = CONFIG.DND5E.abilities[spellAbility]?.label ?? FoundryAdapter.localize("DND5E.None"), prof = actor.system.attributes.prof ?? 0;
  let tooltip = "8";
  abilityMod !== 0 && (tooltip += abilityMod < 0 ? " - " : " + ", tooltip += `${Math.abs(abilityMod)} (${abilityName})`), prof !== 0 && (tooltip += prof < 0 ? " - " : " + ", tooltip += `${Math.abs(prof)} (${FoundryAdapter.localize(
    "DND5E.ProficiencyBonus"
  )})`);
  const rawBonus = actor.system.bonuses.spell.dc?.toString()?.trim();
  if (!isNil(rawBonus, "") && Roll.validate(rawBonus)) {
    const bonusRoll = new Roll(rawBonus);
    bonusRoll.evaluateSync({ allowInteractive: !1 });
    const bonusTotal = bonusRoll.total;
    bonusTotal !== 0 && (tooltip += bonusTotal < 0 ? " - " : " + ", tooltip += `${Math.abs(bonusTotal)} (${FoundryAdapter.localize(
      "DND5E.Bonus"
    )})`);
  }
  return tooltip;
}
__name(getDcTooltip, "getDcTooltip");
async function rollRawSpellAttack(ev, actor, attackType, spellcastingAbility) {
  const rollConfig = {
    evaluate: !0,
    event: ev,
    hookNames: ["rawSpellAttack", "d20Test"],
    rolls: [getSpellAttackRoll(actor, attackType, spellcastingAbility)],
    subject: actor
  };
  let flavorKey = attackType === "rsak" ? "TIDY5E.ActorRangedSpellAttackFlavorText" : attackType === "msak" ? "TIDY5E.ActorMeleeSpellAttackFlavorText" : "TIDY5E.ActorSpellAttackFlavorText", flavor = FoundryAdapter.localize(flavorKey);
  const messageConfig = {
    rollMode: game.settings.get("core", "rollMode"),
    data: {
      "flags.dnd5e.roll": {
        type: "attack"
      },
      speaker: ChatMessage.getSpeaker({ actor }),
      flavor
    }
  };
  let titleKey = attackType === "rsak" ? "TIDY5E.ActorRangedSpellAttackTitle" : attackType === "msak" ? "TIDY5E.ActorMeleeSpellAttackTitle" : "TIDY5E.ActorSpellAttackTitle";
  const dialog = {
    options: { title: FoundryAdapter.localize(titleKey, {
      actorName: actor.name
    }) }
  }, rolls = await CONFIG.Dice.D20Roll.build(
    rollConfig,
    dialog,
    messageConfig
  );
  debug(rolls);
}
__name(rollRawSpellAttack, "rollRawSpellAttack");
function getSpellAttackRoll(actor, attackType, spellcastingAbility) {
  const effectiveAttackType = attackType ?? "rsak", rollData = {}, parts = [], filteredClass = TidyFlags.classFilter.get(actor);
  spellcastingAbility ??= actor.itemTypes.class.find(
    (x2) => x2.system.identifier === filteredClass
  )?.system.spellcasting?.ability;
  const spellcastingMod = actor.system.abilities[spellcastingAbility]?.mod;
  spellcastingAbility !== "none" && spellcastingMod && (parts.push("@mod"), rollData.mod = spellcastingMod), parts.push("@prof"), rollData.prof = actor.system.attributes.prof;
  const actorBonusAttack = actor.system.bonuses?.[effectiveAttackType]?.attack;
  return actorBonusAttack && parts.push(actorBonusAttack), {
    parts,
    data: rollData,
    options: {
      elvenAccuracy: actor.flags.dnd5e?.elvenAccuracy ?? !1,
      halflingLucky: actor.flags.dnd5e?.halflingLucky ?? !1
    },
    subject: actor
  };
}
__name(getSpellAttackRoll, "getSpellAttackRoll");
class ItemUtils {
  static {
    __name(this, "ItemUtils");
  }
  static canUse(item) {
    return ItemUtils.hasActivationType(item) && (ItemUtils.hasUnlimitedUses(item) || ItemUtils.hasSufficientLimitedUses(item)) && (!ItemUtils.hasConsumptionRequirements(item) || ItemUtils.hasSufficientConsumptionAmount(item)) && (!item.hasRecharge || !item.isOnCooldown) && ItemUtils.atLeastOneExists(item);
  }
  static atLeastOneExists(item) {
    return (item.system.quantity ?? 1) >= 1;
  }
  static hasActivationType(item) {
    return !!item.system.activities?.size;
  }
  static hasSpecificActivationType(item, type) {
    return !!item.system.activities?.some(
      (a2) => a2.activation.type === type
    );
  }
  static hasUnlimitedUses(item) {
    return !item.system.hasLimitedUses;
  }
  static hasSufficientLimitedUses(item) {
    return ItemUtils.hasConfiguredUses(item) && item.system.uses?.value > 0;
  }
  static hasConfiguredUses(item) {
    return item.system.hasLimitedUses && item.system.uses.recovery.length;
  }
  static hasConsumptionRequirements(item) {
    return !isNil(item.system.consume?.type, "");
  }
  static hasSufficientConsumptionAmount(item) {
    const consumeTarget = item.parent?.items?.get(item.system.consume.target);
    return (
      // If there's no consume target, then we'll be permissive and allow the system to deal with whether it's usable
      // Note: this is intentionally ignoring non-item / non-item-use consumption scenarios like consuming attributes
      isNil(item.system.consume?.target, "") || (consumeTarget?.system.quantity ?? consumeTarget?.system.uses?.value ?? 0) >= item.system.consume?.amount
    );
  }
  static getMaxUses(item) {
    return item.system.uses?.max;
  }
  static sortItems(items, sortMode) {
    sortMode === "a" ? items.sort((a2, b2) => a2.name.localeCompare(b2.name, game.i18n.lang)) : sortMode === "m" && items.sort((a2, b2) => (a2.sort || 0) - (b2.sort || 0));
  }
  static getSortedItems(items, sortMode) {
    return sortMode === "a" ? items.toSorted(
      (a2, b2) => a2.name.localeCompare(b2.name, game.i18n.lang)
    ) : sortMode === "m" ? items.toSorted((a2, b2) => (a2.sort || 0) - (b2.sort || 0)) : items;
  }
}
class SpellUtils {
  static {
    __name(this, "SpellUtils");
  }
  /** Is a cantrip. */
  static isCantrip(item) {
    return item.type === CONSTANTS.ITEM_TYPE_SPELL && item.system.level === 0;
  }
  /** The cantrip is castable. If cantrip preparation is turned on, then require the cantrip to be prepared to be castable. */
  static isCastableCantrip(item) {
    return SpellUtils.isCantrip(item) && (SpellUtils.isCantripPrepared(item) || SpellUtils.isAlwaysPrepared(item) || SpellUtils.isUnlimitedAtWill(item) || SpellUtils.isUnlimitedInnate(item) || ItemUtils.hasSufficientLimitedUses(item));
  }
  /** While the Cantrip Formulas rule is enabled, this cantrip must have prepared status. If the rule is not enabled, a cantrip is always prepared.  */
  static isCantripPrepared(item) {
    const prepareCantrips = settings.value.allowCantripsToBePrepared;
    return !prepareCantrips || prepareCantrips && SpellUtils.isPrepared(item);
  }
  /** Spell is castable in this moment. */
  static isCastableSpell(item) {
    return SpellUtils.isSpell(item) && (SpellUtils.isPrepared(item) || SpellUtils.isAlwaysPrepared(item) || SpellUtils.isUnlimitedAtWill(item) || SpellUtils.isUnlimitedInnate(item) || ItemUtils.hasSufficientLimitedUses(item) || SpellUtils.isPactMagic(item));
  }
  /** A spell item with a non-cantrip level. */
  static isSpell(item) {
    return item.type === CONSTANTS.ITEM_TYPE_SPELL && item.system.level > 0;
  }
  /** Spell is always prepared. */
  static isAlwaysPrepared(item) {
    return item.system.preparation?.mode === CONSTANTS.SPELL_PREPARATION_MODE_ALWAYS;
  }
  /** Is an At-Will spell with no limit on uses. */
  static isUnlimitedAtWill(item) {
    return SpellUtils.isAtWill(item) && !ItemUtils.hasConfiguredUses(item);
  }
  /** Is an At-Will spell. */
  static isAtWill(item) {
    return item.system.preparation?.mode === CONSTANTS.SPELL_PREPARATION_MODE_ATWILL;
  }
  /** Is an Innate spell with no limit on uses. */
  static isUnlimitedInnate(item) {
    return SpellUtils.isInnate(item) && !ItemUtils.hasConfiguredUses(item);
  }
  /** Is an Innate spell. */
  static isInnate(item) {
    return item.system.preparation?.mode === CONSTANTS.SPELL_PREPARATION_MODE_INNATE;
  }
  /** Is pact magic. */
  static isPactMagic(item) {
    return item.system.preparation?.mode === CONSTANTS.SPELL_PREPARATION_MODE_PACT;
  }
  /** Is a spell that requires preparation and is prepared. */
  static isPrepared(item) {
    return item.system.preparation?.mode === "prepared" && item.system.preparation?.prepared;
  }
  /** Is a spell that requires preparation but is unprepared. */
  static isUnprepared(item) {
    return item.system.preparation?.mode === "prepared" && !item.system.preparation?.prepared;
  }
  static getToggleTitle(item) {
    const prep = item.system.preparation || {}, isAlways = prep.mode === "always", isPrepared = !!prep.prepared;
    return isAlways ? CONFIG.DND5E.spellPreparationModes.always.label : isPrepared ? CONFIG.DND5E.spellPreparationModes.prepared.label : game.i18n.localize("DND5E.SpellUnprepared");
  }
  static tryFilterByClass(spells, selectedClassFilter) {
    return !settings.value.useMulticlassSpellbookFilter || selectedClassFilter === "" ? spells : spells.filter(
      (spell) => spell.system.sourceClass?.trim() === selectedClassFilter?.trim()
    );
  }
}
class Inventory {
  static {
    __name(this, "Inventory");
  }
  static getDefaultInventoryTypes() {
    return Object.entries(CONFIG.Item.dataModels).filter(([, model]) => model.metadata?.inventoryItem).sort(
      ([, lhs], [, rhs]) => lhs.metadata.inventoryOrder - rhs.metadata.inventoryOrder
    ).map((entry) => entry[0]);
  }
  static isInventoryType(item) {
    return !!CONFIG.Item.dataModels[item.type]?.metadata?.inventoryItem;
  }
  static getDefaultInventorySections(options = {}) {
    const inventoryTypes = Inventory.getDefaultInventoryTypes(), inventory = {};
    for (const type of inventoryTypes)
      inventory[type] = {
        canCreate: !0,
        dataset: { type },
        items: [],
        key: type,
        label: `${CONFIG.Item.typeLabels[type]}Pl`,
        show: !0,
        custom: void 0,
        isExternal: !1,
        ...options
      };
    return inventory;
  }
  static applyInventoryItemToSection(inventory, item, defaultInventoryTypes, customSectionOptions) {
    const customSectionName = TidyFlags.section.get(item);
    if (!customSectionName) {
      inventory[item.type].items.push(item);
      return;
    }
    (inventory[customSectionName] ??= {
      dataset: { [TidyFlags.section.prop]: customSectionName },
      items: [],
      label: customSectionName,
      canCreate: !0,
      key: customSectionName,
      custom: {
        section: customSectionName,
        creationItemTypes: [...defaultInventoryTypes]
      },
      show: !0,
      ...customSectionOptions
    }).items.push(item);
  }
  static async getContainerPanelItems(items) {
    let containerPanelItems = [];
    try {
      let containers = items.filter((i2) => i2.type === CONSTANTS.ITEM_TYPE_CONTAINER).toSorted((a2, b2) => a2.sort - b2.sort);
      for (let container of containers) {
        const capacity = await container.system.computeCapacity();
        containerPanelItems.push({
          container,
          ...capacity
        });
      }
    } catch (e2) {
      error(
        "An error occurred while preparing containers for the container panel",
        !1,
        e2
      );
    }
    return containerPanelItems;
  }
  static getInventory(items, options = {
    canCreate: !1
  }) {
    const inventory = Inventory.getDefaultInventorySections(), inventoryTypes = Inventory.getDefaultInventoryTypes();
    for (let item of items)
      Inventory.applyInventoryItemToSection(
        inventory,
        item,
        inventoryTypes,
        options
      );
    return Object.values(inventory);
  }
}
class Container {
  static {
    __name(this, "Container");
  }
  static async getContainerContents(item) {
    const containerItems = (await item.system.contents).values();
    return {
      capacity: await item.system.computeCapacity(),
      currency: item.system.currency,
      contents: Inventory.getInventory(containerItems),
      itemContext: await Container.getContainerItemContext(item)
    };
  }
  static async getContainerItemContext(container) {
    const itemContext = {}, favorites = container.actor?.system.favorites, containerValues = (await container.system.contents).values();
    for (const item of containerValues) {
      const ctx = itemContext[item.id] ??= {};
      if (ctx.totalWeight = (await item.system.totalWeight).toNearest(0.1), ctx.isStack = item.system.quantity > 1, ctx.attunement = FoundryAdapter.getAttunementContext(item), favorites) {
        const relativeUuid = item.getRelativeUUID(container.actor);
        ctx.favoriteId = item.actor.system.favorites?.find(
          (f2) => f2.id === relativeUuid
        )?.id;
      }
      item.type === CONSTANTS.ITEM_TYPE_CONTAINER && (ctx.containerContents = await Container.getContainerContents(item)), ctx.activities = Activities.getVisibleActivities(
        item,
        item.system.activities
      )?.map(Activities.getActivityItemContext);
    }
    return itemContext;
  }
}
const itemTypeSortValues = {
  weapon: 1,
  equipment: 2,
  feat: 3,
  spell: 4,
  consumable: 5,
  tool: 6,
  class: 8,
  loot: 9
}, activationTypeSortValues = {
  action: 1,
  bonus: 2,
  reaction: 3,
  legendary: 4,
  mythic: 5,
  lair: 6,
  crew: 7,
  special: 8
};
async function getActorActionSections(actor) {
  try {
    let eligibleItems = [];
    for (let item of actor.items)
      isItemInActionList(item) && eligibleItems.push(await mapActionItem(item));
    return buildActionSections(actor, eligibleItems);
  } catch (e2) {
    return error("An error occurred while getting actions", !1, e2), [];
  }
}
__name(getActorActionSections, "getActorActionSections");
function getSortedActions(section, sortMode) {
  return section.actions.toSorted(({ item: a2 }, { item: b2 }) => sortMode === "a" ? a2.name.localeCompare(b2.name, game.i18n.lang) : a2.type !== b2.type ? itemTypeSortValues[a2.type] - itemTypeSortValues[b2.type] : a2.type === "spell" && b2.type === "spell" ? a2.system.level - b2.system.level : (a2.sort || 0) - (b2.sort || 0));
}
__name(getSortedActions, "getSortedActions");
function buildActionSections(actor, actionItems) {
  const customMappings = ActionListRuntime.getActivationTypeMappings();
  let actionSections = {};
  Object.keys(activationTypeSortValues).forEach((activationType) => {
    actionSections[activationType] = {
      actions: [],
      dataset: {},
      label: FoundryAdapter.getActivationTypeLabel(activationType),
      key: activationType,
      show: !0
    };
  });
  for (let actionItem of actionItems) {
    const customSectionName = TidyFlags.actionSection.get(actionItem.item);
    if (customSectionName)
      (actionSections[customSectionName] ??= {
        actions: [],
        dataset: {},
        key: customSectionName,
        label: FoundryAdapter.localize(customSectionName),
        show: !0,
        custom: {
          creationItemTypes: [],
          section: customSectionName
        }
      }).actions.push(actionItem);
    else {
      const activationType = getActivationType(actionItem.item.system.activities?.contents[0]?.activation.type, customMappings);
      (actionSections[activationType] ??= {
        actions: [],
        dataset: {},
        key: activationType,
        label: FoundryAdapter.getActivationTypeLabel(activationType),
        show: !0
      }).actions.push(actionItem);
    }
  }
  return Object.values(actionSections);
}
__name(buildActionSections, "buildActionSections");
function isItemInActionList(item) {
  const override = TidyFlags.actionFilterOverride.get(item);
  if (override != null)
    return override;
  switch (item.type) {
    case CONSTANTS.ITEM_TYPE_WEAPON:
      return item.system.equipped;
    case CONSTANTS.ITEM_TYPE_EQUIPMENT:
      return item.system.equipped && isActiveItem(item.system.activities?.contents[0]?.activation.type);
    case CONSTANTS.ITEM_TYPE_CONSUMABLE:
      return settings.value.actionListIncludeConsumables && isActiveItem(item.system.activities?.contents[0]?.activation.type);
    case CONSTANTS.ITEM_TYPE_SPELL: {
      const limitToCantrips = settings.value.actionListLimitActionsToCantrips;
      if (!SpellUtils.isCantrip(item) && (limitToCantrips || SpellUtils.isUnprepared(item)))
        return !1;
      const isReaction = item.system.activities?.contents[0]?.activation.type === CONSTANTS.ACTIVATION_COST_REACTION, isBonusAction = item.system.activities?.contents[0]?.activation.type === CONSTANTS.ACTIVATION_COST_BONUS, isDamageDealer = getActivityFirstDamage(item)?.parts?.length > 0;
      let shouldInclude = isReaction || isBonusAction || isDamageDealer;
      if (settings.value.actionListIncludeMinuteLongSpellsAsActions) {
        const isOneMinuter = item.system?.duration?.units === "minute" && item.system?.duration?.value === 1, isOneRounder = item.system?.duration?.units === "round" && item.system?.duration?.value === 1;
        shouldInclude = shouldInclude || isOneMinuter || isOneRounder;
      }
      if (settings.value.actionListIncludeSpellsWithActiveEffects) {
        const hasEffects = !!item.effects.size;
        shouldInclude = shouldInclude || hasEffects;
      }
      return shouldInclude;
    }
    case CONSTANTS.ITEM_TYPE_FEAT:
      return !!item.system.activities?.contents[0]?.activation.type;
    default:
      return !1;
  }
}
__name(isItemInActionList, "isItemInActionList");
function getActivityFirstDamage(item) {
  return {
    parts: (item.system.activities?.getByType("attack")[0] || item.system.activities?.getByType("damage")[0] || item.system.activities?.getByType("save")[0])?.damage.parts.map((d2) => [d2.formula, d2.types.first() ?? ""]) ?? [],
    versatile: ""
  };
}
__name(getActivityFirstDamage, "getActivityFirstDamage");
async function mapActionItem(item) {
  try {
    let calculatedDerivedDamage = Array.isArray(item.labels.damages) ? [...item.labels.damages].map(({ formula, label, damageType }, i2) => {
      getActivityFirstDamage(item).parts?.[0]?.[0]?.trim() === "" && (formula = "");
      const formulaBeforeSimplificaton = formula;
      formula = simplifyFormula(formula, !0), formula.includes("NaN") && (formula = formulaBeforeSimplificaton);
      const damageHealingTypeLabel = FoundryAdapter.lookupDamageType(damageType) ?? FoundryAdapter.lookupHealingType(damageType) ?? "";
      return {
        label,
        formula,
        damageType,
        damageHealingTypeLabel
      };
    }) : [], containerContents;
    return item.type === CONSTANTS.ITEM_TYPE_CONTAINER && (containerContents = await Container.getContainerContents(item)), {
      item,
      typeLabel: FoundryAdapter.localize(`TYPES.Item.${item.type}`),
      calculatedDerivedDamage,
      containerContents,
      ...getRangeTitles(item)
    };
  } catch (e2) {
    return error("An error occurred while processing an item for the action list", !1, e2), debug("Action list mapping error troubleshooting info", { item }), {
      item,
      typeLabel: FoundryAdapter.localize(`TYPES.Item.${item.type}`),
      calculatedDerivedDamage: [],
      rangeTitle: "",
      rangeSubtitle: ""
    };
  }
}
__name(mapActionItem, "mapActionItem");
function getRangeTitles(item) {
  const firstActivity = item.system.activities?.contents[0] ?? {}, rangeSubtitle = (firstActivity.target?.affects?.type ?? firstActivity.target?.template?.type) && item.labels?.target ? item.labels.target : null;
  return { rangeTitle: firstActivity.target?.type === "self" ? item.labels.target : hasRange(item) ? item.labels.range : rangeSubtitle !== null ? "—" : null, rangeSubtitle };
}
__name(getRangeTitles, "getRangeTitles");
function hasRange(item) {
  return !isNil(item.system.activities?.contents[0]?.range?.units);
}
__name(hasRange, "hasRange");
function getActivationType(activationType, customMappings) {
  const customMapping = customMappings[activationType];
  return customMapping || (activationType in activationTypeSortValues ? activationType : "other");
}
__name(getActivationType, "getActivationType");
function isActiveItem(activationType) {
  return !(!activationType || ["minute", "hour", "day", "none"].includes(activationType));
}
__name(isActiveItem, "isActiveItem");
class Actions {
  static {
    __name(this, "Actions");
  }
  static get damageAndHealingTypesIconSrcMap() {
    const damageTypes = Object.entries(CONFIG.DND5E.damageTypes).reduce(
      (obj, [key, damageType]) => (obj[key] = damageType.icon, obj),
      {}
    ), healingTypes = Object.entries(CONFIG.DND5E.healingTypes).reduce(
      (obj, [key, damageType]) => (obj[key] = damageType.icon, obj),
      {}
    );
    return { ...damageTypes, ...healingTypes };
  }
}
function actorUsesActionFeature(actor) {
  const selectedTabIds = TidyFlags.selectedTabs.get(actor);
  return selectedTabIds ? selectedTabIds.includes(CONSTANTS.TAB_ACTOR_ACTIONS) : (actor.type === CONSTANTS.SHEET_TYPE_CHARACTER ? settings.value.defaultCharacterSheetTabs : actor.type === CONSTANTS.SHEET_TYPE_NPC ? settings.value.defaultNpcSheetTabs : actor.type === CONSTANTS.SHEET_TYPE_VEHICLE ? settings.value.defaultVehicleSheetTabs : []).includes(CONSTANTS.TAB_ACTOR_ACTIONS);
}
__name(actorUsesActionFeature, "actorUsesActionFeature");
function ActionFilterOverrideControl($$anchor, $$props) {
  push($$props, !0);
  let title = /* @__PURE__ */ derived(() => {
    const flagValue = TidyFlags.actionFilterOverride.get($$props.item), titleKey = flagValue === !0 ? "TIDY5E.Actions.OverriddenSetOverrideFalse" : flagValue === !1 ? "TIDY5E.Actions.OverriddenSetOverrideTrue" : isItemInActionList($$props.item) ? "TIDY5E.Actions.SetOverrideFalse" : "TIDY5E.Actions.SetOverrideTrue";
    return localize(titleKey);
  });
  const localize = FoundryAdapter.localize;
  let active = /* @__PURE__ */ derived(() => isItemInActionList($$props.item));
  ItemControl($$anchor, {
    iconCssClass: "fas fa-fist-raised",
    get active() {
      return get(active);
    },
    get title() {
      return get(title);
    },
    onclick: /* @__PURE__ */ __name((ev) => ev.shiftKey ? TidyFlags.actionFilterOverride.unset($$props.item) : TidyFlags.actionFilterOverride.set($$props.item, !isItemInActionList($$props.item)), "onclick")
  }), pop();
}
__name(ActionFilterOverrideControl, "ActionFilterOverrideControl");
function processInputChangeDelta(value, entity, field) {
  if (["+", "-"].includes(value[0])) {
    const delta = parseFloat(value);
    return Number(FoundryAdapter.getProperty(entity, field)) + delta;
  } else if (value[0] === "=")
    return Number(value.slice(1));
  return Number(value);
}
__name(processInputChangeDelta, "processInputChangeDelta");
function processInputChangeDeltaFromValues(newValue, originalValue) {
  if (["+", "-"].includes(newValue[0])) {
    const delta = parseFloat(newValue);
    return Number(originalValue) + delta;
  } else if (newValue[0] === "=")
    return Number(newValue.slice(1));
  return Number(newValue);
}
__name(processInputChangeDeltaFromValues, "processInputChangeDeltaFromValues");
var root$3d = /* @__PURE__ */ template("<input>");
function TextInput($$anchor, $$props) {
  push($$props, !0);
  let value = prop($$props, "value", 7, null), placeholder = prop($$props, "placeholder", 3, null), tooltip = prop($$props, "tooltip", 3, null), id = prop($$props, "id", 3, null), dataset = prop($$props, "dataset", 3, null), maxlength = prop($$props, "maxlength", 3, null), ariaDescribedBy = prop($$props, "ariaDescribedBy", 3, null), selectOnFocus = prop($$props, "selectOnFocus", 3, !1), saveEmptyAsNull = prop($$props, "saveEmptyAsNull", 3, !1), title = prop($$props, "title", 3, null), allowDeltaChanges = prop($$props, "allowDeltaChanges", 3, !1), disabled = prop($$props, "disabled", 3, !1), onSaveChange = prop($$props, "onSaveChange", 3, () => !0), additionalDataToSave = prop($$props, "additionalDataToSave", 19, () => ({})), stopChangePropagation = prop($$props, "stopChangePropagation", 3, !1), theInput = state(void 0);
  async function saveChange(event2) {
    stopChangePropagation() && event2.stopPropagation();
    const targetValue = event2.currentTarget.value;
    let valueToSave = saveEmptyAsNull() && targetValue === "" ? null : !isNaN(parseInt(targetValue)) && allowDeltaChanges() ? processInputChangeDelta(targetValue, $$props.document, $$props.field) : targetValue;
    await $$props.document.update({
      ...additionalDataToSave(),
      [$$props.field]: valueToSave
    }), value(value()?.toString() ?? ""), setTimeout(() => {
      selectOnFocus() && get(theInput) === window.document.activeElement && get(theInput).select();
    });
  }
  __name(saveChange, "saveChange");
  const context = /* @__PURE__ */ derived(getSheetContext), localize = FoundryAdapter.localize;
  let actualDataset = /* @__PURE__ */ derived(() => buildDataset(dataset())), activeEffectApplied = /* @__PURE__ */ derived(() => ActiveEffectsHelper.isActiveEffectAppliedToField($$props.document, $$props.field)), isEnchanted = /* @__PURE__ */ derived(() => get(context).itemOverrides instanceof Set && get(context).itemOverrides.has($$props.field)), overrideTooltip = /* @__PURE__ */ derived(() => get(isEnchanted) ? localize("DND5E.ENCHANTMENT.Warning.Override") : localize("DND5E.ActiveEffectOverrideWarning"));
  var input = root$3d(), event_handler = /* @__PURE__ */ __name((ev) => onSaveChange()(ev) && saveChange(ev), "event_handler"), event_handler_1 = /* @__PURE__ */ __name((ev) => selectOnFocus() && ev.currentTarget.select(), "event_handler_1");
  let attributes;
  bind_this(input, ($$value) => set(theInput, $$value), () => get(theInput)), template_effect(() => attributes = set_attributes(input, attributes, {
    type: "text",
    id: id(),
    value: value(),
    placeholder: placeholder(),
    "data-tooltip": get(activeEffectApplied) ? get(overrideTooltip) : tooltip(),
    ...get(actualDataset),
    ...$$props.attributes,
    class: $$props.class ?? "",
    maxlength: maxlength(),
    "aria-describedby": ariaDescribedBy(),
    title: title(),
    disabled: disabled() || get(activeEffectApplied),
    onchange: event_handler,
    onclick: $$props.onclick,
    onkeypress: $$props.onkeypress,
    onfocus: event_handler_1,
    "data-tidy-field": $$props.field
  })), append($$anchor, input), pop();
}
__name(TextInput, "TextInput");
var root_3$K = /* @__PURE__ */ template("<span>&nbsp;</span>"), root$3c = /* @__PURE__ */ template('<div class="tidy5e-classic-controls svelte-m2fs4"></div>');
function ClassicControls($$anchor, $$props) {
  var div = root$3c();
  each(div, 21, () => $$props.controls, index, ($$anchor2, control) => {
    var fragment = comment(), node = first_child(fragment);
    {
      var consequent = /* @__PURE__ */ __name(($$anchor3) => {
        var fragment_1 = comment(), node_1 = first_child(fragment_1), spread_element = /* @__PURE__ */ derived(() => get(control).props?.($$props.params));
        component(node_1, () => get(control).component, ($$anchor4, $$component) => {
          $$component($$anchor4, spread_props(() => get(spread_element)));
        }), append($$anchor3, fragment_1);
      }, "consequent"), alternate = /* @__PURE__ */ __name(($$anchor3) => {
        var span = root_3$K();
        append($$anchor3, span);
      }, "alternate");
      if_block(node, ($$render) => {
        get(control).visible === void 0 || get(control).visible($$props.params) ? $$render(consequent) : $$render(alternate, !1);
      });
    }
    append($$anchor2, fragment);
  }), append($$anchor, div);
}
__name(ClassicControls, "ClassicControls");
var root_1$1T = /* @__PURE__ */ template('<span class="capacity-label svelte-17thhxi"> </span>'), root$3b = /* @__PURE__ */ template('<div class="tidy-capacity svelte-17thhxi" role="meter" aria-valuemin="0"><!></div>');
function CapacityBar$1($$anchor, $$props) {
  push($$props, !0);
  let showLabel = prop($$props, "showLabel", 3, !0), readableValue = /* @__PURE__ */ derived(() => $$props.container.system.capacity.type === CONSTANTS.ITEM_CAPACITY_TYPE_WEIGHT ? ($$props.capacity.value ?? 0).toFixed(2) : Math.ceil($$props.capacity.value ?? 0)), capacityLabel = /* @__PURE__ */ derived(() => `${get(readableValue)}/${$$props.capacity.max} ${$$props.capacity.units}`), percentage = /* @__PURE__ */ derived(() => Math.round($$props.capacity.pct));
  const localize = FoundryAdapter.localize;
  var div = root$3b();
  template_effect(() => set_attribute(div, "aria-label", localize("DND5E.ItemContainerCapacity")));
  var node = child(div);
  {
    var consequent = /* @__PURE__ */ __name(($$anchor2) => {
      var span = root_1$1T(), text2 = child(span);
      template_effect(() => set_text(text2, get(capacityLabel))), append($$anchor2, span);
    }, "consequent");
    if_block(node, ($$render) => {
      showLabel() && $$render(consequent);
    });
  }
  template_effect(() => {
    set_attribute(div, "title", get(capacityLabel)), set_attribute(div, "aria-valuetext", get(capacityLabel)), set_attribute(div, "aria-valuenow", $$props.capacity.value), set_attribute(div, "aria-valuemax", $$props.capacity.max), set_attribute(div, "style", `--percentage: ${get(percentage) ?? ""}%`), toggle_class(div, "empty", get(percentage) === 0);
  }), append($$anchor, div), pop();
}
__name(CapacityBar$1, "CapacityBar$1");
var root$3a = /* @__PURE__ */ template('<i class="expand-indicator fas fa-angle-right"></i>');
function TidyTableToggleIcon($$anchor, $$props) {
  push($$props, !0);
  let expanded = prop($$props, "expanded", 3, !0);
  var i2 = root$3a();
  template_effect(() => {
    set_attribute(i2, "data-tidy-sheet-part", CONSTANTS.SHEET_PARTS.EXPANSION_TOGGLE), toggle_class(i2, "expanded", expanded());
  }), append($$anchor, i2), pop();
}
__name(TidyTableToggleIcon, "TidyTableToggleIcon");
var root$39 = /* @__PURE__ */ template("<div><!> <!></div>");
function TidyTableHeaderCell($$anchor, $$props) {
  push($$props, !0);
  let primary = prop($$props, "primary", 3, !1), baseWidth = prop($$props, "baseWidth", 3, null), title = prop($$props, "title", 3, null);
  const expandCollapseService = ExpandCollapseService.getService();
  let expandState = /* @__PURE__ */ derived(() => expandCollapseService.state);
  var div = root$39(), node = child(div);
  {
    var consequent = /* @__PURE__ */ __name(($$anchor2) => {
      TidyTableToggleIcon($$anchor2, {
        get expanded() {
          return get(expandState).expanded;
        }
      });
    }, "consequent");
    if_block(node, ($$render) => {
      primary() && get(expandState)?.toggleable && $$render(consequent);
    });
  }
  var node_1 = sibling(node, 2);
  snippet(node_1, () => $$props.children ?? noop), template_effect(() => {
    set_class(div, `tidy-table-header-cell ${$$props.class ?? "" ?? ""}`), set_attribute(div, "data-tidy-sheet-part", CONSTANTS.SHEET_PARTS.TABLE_HEADER_CELL), set_attribute(div, "title", title()), toggle_class(div, "primary", primary()), set_style(div, "flex-basis", baseWidth());
  }), append($$anchor, div), pop();
}
__name(TidyTableHeaderCell, "TidyTableHeaderCell");
function handleHeaderRowClick(ev, expandState, expandCollapseService) {
  get(expandState)?.toggleable && (ev.target instanceof HTMLElement && isUserInteractable(ev.target) && ev.target.getAttribute(CONSTANTS.SHEET_PART_ATTRIBUTE) !== CONSTANTS.SHEET_PARTS.EXPANSION_TOGGLE || (ev.stopPropagation(), expandCollapseService.toggle()));
}
__name(handleHeaderRowClick, "handleHeaderRowClick");
var root$38 = /* @__PURE__ */ template('<header class="tidy-table-header-row"><!></header>');
function TidyTableHeaderRow($$anchor, $$props) {
  push($$props, !0);
  const expandCollapseService = ExpandCollapseService.getService();
  let expandState = /* @__PURE__ */ derived(() => expandCollapseService.state);
  var header = root$38();
  header.__click = [
    handleHeaderRowClick,
    expandState,
    expandCollapseService
  ];
  var node = child(header);
  snippet(node, () => $$props.children ?? noop), template_effect(() => {
    set_attribute(header, "data-tidy-sheet-part", CONSTANTS.SHEET_PARTS.TABLE_HEADER_ROW), toggle_class(header, "toggleable", get(expandState)?.toggleable);
  }), append($$anchor, header), pop();
}
__name(TidyTableHeaderRow, "TidyTableHeaderRow");
delegate(["click"]);
function ItemTableRowV2($$anchor, $$props) {
  push($$props, !0);
  let item = prop($$props, "item", 3, null), contextMenu = prop($$props, "contextMenu", 3, null), rowClass = prop($$props, "rowClass", 3, ""), hidden = prop($$props, "hidden", 3, !1), draggable = prop($$props, "draggable", 3, !0);
  const emptyChatData = {
    description: { value: "" },
    properties: [],
    unidentified: { description: "" }
  }, expandedItemData = getContext(CONSTANTS.SVELTE_CONTEXT.EXPANDED_ITEM_DATA), expandedItems = getContext(CONSTANTS.SVELTE_CONTEXT.EXPANDED_ITEMS), onItemToggled = getContext(CONSTANTS.SVELTE_CONTEXT.ON_ITEM_TOGGLED), location = getContext(CONSTANTS.SVELTE_CONTEXT.LOCATION);
  let showSummary = state(!1), chatData = state(void 0);
  async function toggleSummary() {
    if (!item()) {
      warn("Unable to show summary. No item was provided."), set(showSummary, !1);
      return;
    }
    set(chatData, proxy(get(chatData) ?? await item().getChatData({ secrets: item().isOwner }))), set(showSummary, !get(showSummary)), onItemToggled?.(item().id, get(showSummary), location);
  }
  __name(toggleSummary, "toggleSummary");
  async function onMouseEnter(event2) {
    TidyHooks.tidy5eSheetsItemHoverOn(event2, item());
  }
  __name(onMouseEnter, "onMouseEnter");
  async function onMouseLeave(event2) {
    TidyHooks.tidy5eSheetsItemHoverOff(event2, item());
  }
  __name(onMouseLeave, "onMouseLeave");
  function handleDragStart(event2) {
    if (!item())
      return;
    onMouseLeave(event2);
    const dragData = item().toDragData();
    event2.dataTransfer?.setData("text/plain", JSON.stringify(dragData));
  }
  __name(handleDragStart, "handleDragStart");
  function restoreItemSummaryIfExpanded() {
    if (!item())
      return;
    expandedItems?.get(item().id)?.has(location) && (set(chatData, proxy(expandedItemData.get(item().id))), set(showSummary, !0));
  }
  __name(restoreItemSummaryIfExpanded, "restoreItemSummaryIfExpanded"), user_effect(() => {
    let first = !0;
    (async () => {
      if (first) {
        first = !1, restoreItemSummaryIfExpanded();
        return;
      }
      item() && get(showSummary) ? set(chatData, proxy(await item().getChatData({ secrets: item().actor.isOwner }))) : item() && !get(showSummary) && get(chatData) && set(chatData, void 0);
    })();
  });
  var rowAttributes = /* @__PURE__ */ derived(() => ({
    "data-context-menu": contextMenu()?.type,
    "data-item-id": item()?.id,
    "data-tidy-table-row": "",
    "data-tidy-sheet-part": CONSTANTS.SHEET_PARTS.ITEM_TABLE_ROW,
    "data-tidy-item-type": item()?.type ?? "unknown",
    "data-info-card": item() ? "item" : null,
    "data-info-card-entity-uuid": item()?.uuid ?? null,
    draggable: draggable()
  })), rowClass_1 = /* @__PURE__ */ derived(() => `tidy-table-row-v2 ${rowClass() ?? "" ?? ""}`);
  TidyTableRow($$anchor, {
    get hidden() {
      return hidden();
    },
    get rowAttributes() {
      return get(rowAttributes);
    },
    get rowClass() {
      return get(rowClass_1);
    },
    onmousedown: /* @__PURE__ */ __name((event2) => item() && FoundryAdapter.editOnMiddleClick(event2, item()), "onmousedown"),
    onmouseenter: onMouseEnter,
    onmouseleave: onMouseLeave,
    ondragstart: handleDragStart,
    afterRow: /* @__PURE__ */ __name(($$anchor2) => {
      ExpandableContainer($$anchor2, {
        get expanded() {
          return get(showSummary);
        },
        children: /* @__PURE__ */ __name(($$anchor3, $$slotProps) => {
          var chatData_1 = /* @__PURE__ */ derived(() => get(chatData) ?? emptyChatData);
          ItemSummary($$anchor3, {
            get chatData() {
              return get(chatData_1);
            },
            get item() {
              return item();
            }
          });
        }, "children"),
        $$slots: { default: !0 }
      });
    }, "afterRow"),
    children: /* @__PURE__ */ __name(($$anchor2, $$slotProps) => {
      var fragment_3 = comment(), node = first_child(fragment_3);
      snippet(node, () => $$props.children ?? noop, () => ({ toggleSummary })), append($$anchor2, fragment_3);
    }, "children"),
    $$slots: { afterRow: !0, default: !0 }
  }), pop();
}
__name(ItemTableRowV2, "ItemTableRowV2");
function increment(source2) {
  set(source2, source2.v + 1);
}
__name(increment, "increment");
var read_methods = ["forEach", "isDisjointFrom", "isSubsetOf", "isSupersetOf"], set_like_methods = ["difference", "intersection", "symmetricDifference", "union"], inited = !1;
class SvelteSet extends Set {
  static {
    __name(this, "SvelteSet");
  }
  /** @type {Map<T, Source<boolean>>} */
  #sources = /* @__PURE__ */ new Map();
  #version = source(0);
  #size = source(0);
  /**
   * @param {Iterable<T> | null | undefined} [value]
   */
  constructor(value) {
    if (super(), value) {
      for (var element2 of value)
        super.add(element2);
      this.#size.v = super.size;
    }
    inited || this.#init();
  }
  // We init as part of the first instance so that we can treeshake this class
  #init() {
    inited = !0;
    var proto = SvelteSet.prototype, set_proto = Set.prototype;
    for (const method of read_methods)
      proto[method] = function(...v2) {
        return get(this.#version), set_proto[method].apply(this, v2);
      };
    for (const method of set_like_methods)
      proto[method] = function(...v2) {
        get(this.#version);
        var set2 = (
          /** @type {Set<T>} */
          set_proto[method].apply(this, v2)
        );
        return new SvelteSet(set2);
      };
  }
  /** @param {T} value */
  has(value) {
    var has = super.has(value), sources = this.#sources, s2 = sources.get(value);
    if (s2 === void 0) {
      if (!has)
        return get(this.#version), !1;
      s2 = source(!0), sources.set(value, s2);
    }
    return get(s2), has;
  }
  /** @param {T} value */
  add(value) {
    return super.has(value) || (super.add(value), set(this.#size, super.size), increment(this.#version)), this;
  }
  /** @param {T} value */
  delete(value) {
    var deleted = super.delete(value), sources = this.#sources, s2 = sources.get(value);
    return s2 !== void 0 && (sources.delete(value), set(s2, !1)), deleted && (set(this.#size, super.size), increment(this.#version)), deleted;
  }
  clear() {
    if (super.size !== 0) {
      super.clear();
      var sources = this.#sources;
      for (var s2 of sources.values())
        set(s2, !1);
      sources.clear(), set(this.#size, 0), increment(this.#version);
    }
  }
  keys() {
    return this.values();
  }
  values() {
    return get(this.#version), super.values();
  }
  entries() {
    return get(this.#version), super.entries();
  }
  [Symbol.iterator]() {
    return this.keys();
  }
  get size() {
    return get(this.#size);
  }
}
class SvelteMap extends Map {
  static {
    __name(this, "SvelteMap");
  }
  /** @type {Map<K, Source<number>>} */
  #sources = /* @__PURE__ */ new Map();
  #version = source(0);
  #size = source(0);
  /**
   * @param {Iterable<readonly [K, V]> | null | undefined} [value]
   */
  constructor(value) {
    if (super(), value) {
      for (var [key, v2] of value)
        super.set(key, v2);
      this.#size.v = super.size;
    }
  }
  /** @param {K} key */
  has(key) {
    var sources = this.#sources, s2 = sources.get(key);
    if (s2 === void 0) {
      var ret = super.get(key);
      if (ret !== void 0)
        s2 = source(0), sources.set(key, s2);
      else
        return get(this.#version), !1;
    }
    return get(s2), !0;
  }
  /**
   * @param {(value: V, key: K, map: Map<K, V>) => void} callbackfn
   * @param {any} [this_arg]
   */
  forEach(callbackfn, this_arg) {
    this.#read_all(), super.forEach(callbackfn, this_arg);
  }
  /** @param {K} key */
  get(key) {
    var sources = this.#sources, s2 = sources.get(key);
    if (s2 === void 0) {
      var ret = super.get(key);
      if (ret !== void 0)
        s2 = source(0), sources.set(key, s2);
      else {
        get(this.#version);
        return;
      }
    }
    return get(s2), super.get(key);
  }
  /**
   * @param {K} key
   * @param {V} value
   * */
  set(key, value) {
    var sources = this.#sources, s2 = sources.get(key), prev_res = super.get(key), res = super.set(key, value), version = this.#version;
    if (s2 === void 0)
      sources.set(key, source(0)), set(this.#size, super.size), increment(version);
    else if (prev_res !== value) {
      increment(s2);
      var v_reactions = version.reactions === null ? null : new Set(version.reactions), needs_version_increase = v_reactions === null || !s2.reactions?.every(
        (r2) => (
          /** @type {NonNullable<typeof v_reactions>} */
          v_reactions.has(r2)
        )
      );
      needs_version_increase && increment(version);
    }
    return res;
  }
  /** @param {K} key */
  delete(key) {
    var sources = this.#sources, s2 = sources.get(key), res = super.delete(key);
    return s2 !== void 0 && (sources.delete(key), set(this.#size, super.size), set(s2, -1), increment(this.#version)), res;
  }
  clear() {
    if (super.size !== 0) {
      super.clear();
      var sources = this.#sources;
      set(this.#size, 0);
      for (var s2 of sources.values())
        set(s2, -1);
      increment(this.#version), sources.clear();
    }
  }
  #read_all() {
    get(this.#version);
    var sources = this.#sources;
    if (this.#size.v !== sources.size)
      for (var key of super.keys())
        sources.has(key) || sources.set(key, source(0));
    for (var [, s2] of this.#sources)
      get(s2);
  }
  keys() {
    return get(this.#version), super.keys();
  }
  values() {
    return this.#read_all(), super.values();
  }
  entries() {
    return this.#read_all(), super.entries();
  }
  [Symbol.iterator]() {
    return this.entries();
  }
  get size() {
    return get(this.#size), super.size;
  }
}
class InlineToggleService {
  static {
    __name(this, "InlineToggleService");
  }
  /** A map of tab IDs to set of entity IDs, typically Items. */
  map = new SvelteMap();
  /** Toggle an entity to be expanded or collapsed, based on its current state. */
  toggle(tabId, entityId) {
    this.map.has(tabId) || this.map.set(tabId, new SvelteSet());
    const tab = this.map.get(tabId);
    tab.has(entityId) ? tab.delete(entityId) : tab.add(entityId);
  }
}
var on_click$1i = /* @__PURE__ */ __name((_, $$props, tabId) => $$props.inlineToggleService.toggle(tabId, $$props.entityId), "on_click$1i"), root$37 = /* @__PURE__ */ template('<button type="button" class="inline-toggle inline-transparent-button px-1"><i></i></button>');
function InlineToggleControl($$anchor, $$props) {
  push($$props, !0);
  let iconClass = prop($$props, "iconClass", 3, ""), tabId = getContext(CONSTANTS.SVELTE_CONTEXT.TAB_ID), toggleServiceMap = /* @__PURE__ */ derived(() => $$props.inlineToggleService.map);
  var button = root$37();
  button.__click = [on_click$1i, $$props, tabId];
  var i2 = child(button);
  const class_directive = /* @__PURE__ */ derived(() => get(toggleServiceMap).get(tabId)?.has($$props.entityId));
  template_effect(() => {
    set_attribute(button, "tabindex", settings.value.useAccessibleKeyboardSupport ? 0 : -1), set_attribute(button, "data-tidy-sheet-part", CONSTANTS.SHEET_PARTS.INLINE_CONTAINER_TOGGLE), set_class(i2, `fa-solid fa-angle-right expand-indicator ${iconClass() ?? ""}`), toggle_class(i2, "expanded", get(class_directive));
  }), append($$anchor, button), pop();
}
__name(InlineToggleControl, "InlineToggleControl");
delegate(["click"]);
class SheetPreferencesService {
  static {
    __name(this, "SheetPreferencesService");
  }
  static async setDocumentTypeTabPreference(documentType, tabId, property, value) {
    await game.user.setFlag(
      CONSTANTS.MODULE_ID,
      `sheetPreferences.${documentType}.tabs.${tabId}.${property}`,
      value
    );
  }
  static async setDocumentTypePreference(documentType, property, value) {
    await game.user.setFlag(
      CONSTANTS.MODULE_ID,
      `sheetPreferences.${documentType}.${property}`,
      value
    );
  }
  static get() {
    return foundry.utils.getProperty(
      game.user,
      `flags.${CONSTANTS.MODULE_ID}.sheetPreferences`
    ) ?? {};
  }
  static getByType(documentType) {
    return foundry.utils.getProperty(
      game.user,
      `flags.${CONSTANTS.MODULE_ID}.sheetPreferences.${documentType}`
    ) ?? {};
  }
}
class SheetSections {
  static {
    __name(this, "SheetSections");
  }
  static generateCustomSpellbookSections(spells, options) {
    const customSpellbook = {};
    return spells.forEach(
      (s2) => SheetSections.applySpellToSection(customSpellbook, s2, options)
    ), Object.values(customSpellbook);
  }
  static applySpellToSection(spellbook, spell, options) {
    const customSectionName = TidyFlags.section.get(spell);
    if (!customSectionName)
      return;
    (spellbook[customSectionName] ??= {
      dataset: {
        [TidyFlags.section.prop]: customSectionName
      },
      spells: [],
      label: customSectionName,
      canCreate: !0,
      canPrepare: !0,
      usesSlots: !1,
      key: customSectionName,
      custom: {
        section: customSectionName,
        creationItemTypes: [CONSTANTS.ITEM_TYPE_SPELL]
      },
      show: !0,
      ...options
    }).spells.push(spell);
  }
  static sortKeyedSections(sections, sectionConfigs) {
    const sortMap = new Map(
      Object.values(sectionConfigs ?? {}).map((e2) => [e2.key, e2.order])
    ), defaultSortMap = new Map(
      SheetSections.getDefaultSortOrder(sections).map((e2, i2) => [e2, i2])
    ), maxLength = sections.length;
    return sections.toSorted(
      (a2, b2) => (sortMap.get(a2.key) ?? defaultSortMap.get(a2.key) ?? maxLength) - (sortMap.get(b2.key) ?? defaultSortMap.get(b2.key) ?? maxLength)
    );
  }
  static getDefaultSortOrder(sections) {
    const { defaultSections, customSections } = sections.reduce(
      (prev, curr) => (curr.custom ? prev.customSections.push(curr.key) : prev.defaultSections.push(curr.key), prev),
      { defaultSections: [], customSections: [] }
    );
    var sortedCustomSections = customSections.toSorted(
      (a2, b2) => a2.localeCompare(b2, game.i18n.lang)
    );
    return [...defaultSections, ...sortedCustomSections];
  }
  static prepareTidySpellbook(context, spells, options = {}, app) {
    const customSectionSpells = spells.filter((s2) => TidyFlags.section.get(s2));
    spells = spells.filter((s2) => !TidyFlags.section.get(s2));
    const spellbookMap = app._prepareSpellbook(context, spells).map(
      (s2) => ({
        ...s2,
        key: s2.key ?? s2.prop,
        show: !0
      })
    ).reduce(
      (prev, curr) => {
        let key = curr.prop ?? "";
        return curr.order === "item" && (key = "dnd5e-cast-activity-additional-spells", curr.canCreate = !1), curr.key = key, curr.dataset.system = {
          level: curr.dataset.level,
          preparationMode: curr.dataset.preparationMode
        }, delete curr.dataset.level, delete curr.dataset.preparationMode, prev[key] = curr, prev;
      },
      {}
    );
    return customSectionSpells.forEach((spell) => {
      SheetSections.applySpellToSection(spellbookMap, spell, options);
    }), Object.values(spellbookMap);
  }
  static prepareClassItems(context, classes, subclasses, actor) {
    const maxLevelDelta = CONFIG.DND5E.maxLevel - actor.system.details.level;
    return classes.reduce((arr, cls) => {
      arr.push(cls);
      const ctx = context.itemContext[cls.id] ??= {};
      ctx.availableLevels = Array.fromRange(CONFIG.DND5E.maxLevel + 1).slice(1).map((level) => {
        const delta = level - cls.system.levels;
        return { level, delta, disabled: delta > maxLevelDelta };
      });
      const identifier = cls.system.identifier || cls.name.slugify({ strict: !0 }), subclass = subclasses.findSplice(
        (s2) => s2.system.classIdentifier === identifier
      );
      if (subclass) {
        arr.push(subclass);
        const subclassCtx = context.itemContext[subclass.id] ??= {};
        subclassCtx.parent = cls;
      } else {
        const subclassAdvancement = cls.advancement.byType.Subclass?.[0];
        subclassAdvancement && subclassAdvancement.level <= cls.system.levels && (ctx.needsSubclass = !0);
      }
      return arr;
    }, []);
  }
  static collocateSubItems(context, items) {
    const itemContext = context.itemContext, { parents, parentIdToChildren } = items.reduce(
      (prev, item) => {
        const parentItem = itemContext[item.id]?.parent;
        if (!!parentItem) {
          const children = prev.parentIdToChildren.get(parentItem.id) ?? [];
          children.push(item), prev.parentIdToChildren.set(parentItem.id, children);
        } else
          prev.parents.push(item);
        return prev;
      },
      { parents: [], parentIdToChildren: /* @__PURE__ */ new Map() }
    );
    return parents.length === items.length ? items : parents.reduce((result, item) => {
      result.push(item);
      const children = parentIdToChildren.get(item.id);
      return children && result.push(...children), result;
    }, []);
  }
  static accountForExternalSections(props, data) {
    props.forEach((prop2) => {
      data[prop2]?.forEach((section) => {
        isNil(section.key) && (section.key = SheetSections.getSectionKey(section), section.canCreate = !1, section.show = !0);
      });
    });
  }
  static getSectionKey(section) {
    return isNil(section.key) ? `${section.label}-external` : section.key;
  }
  static configureInventory(sections, tabId, sheetPreferences, sectionConfig) {
    try {
      sections = SheetSections.sortKeyedSections(sections, sectionConfig);
      const sortMode = sheetPreferences.tabs?.[tabId]?.sort ?? "m";
      return sections.map(({ ...section }) => (section.items = ItemUtils.getSortedItems(section.items, sortMode), section.show = sectionConfig?.[section.key]?.show !== !1, section));
    } catch (e2) {
      error("An error occurred while configuring inventory", !1, e2);
    }
    return sections;
  }
  static configureSpellbook(document2, tabId, sections, spellClassFilter = "") {
    try {
      const sectionConfigs = TidyFlags.sectionConfig.get(document2);
      sections = SheetSections.sortKeyedSections(
        sections,
        sectionConfigs?.[tabId]
      );
      const sortMode = SheetPreferencesService.getByType(
        document2.type
      ).tabs?.[tabId]?.sort ?? "m";
      return sections.map(({ ...section }) => (section.spells = SpellUtils.tryFilterByClass(
        section.spells,
        spellClassFilter
      ), section.spells = ItemUtils.getSortedItems(section.spells, sortMode), section.show = sectionConfigs?.[CONSTANTS.TAB_CHARACTER_SPELLBOOK]?.[section.key]?.show !== !1, section));
    } catch (e2) {
      error("An error occurred while configuring spells", !1, e2);
    }
    return sections;
  }
  static configureFavorites(favoriteSections, actor, tabId, sheetPreferences, sectionConfig) {
    let configuredFavorites = [];
    try {
      configuredFavorites = SheetSections.sortKeyedSections(
        favoriteSections,
        sectionConfig
      );
      const sortMode = sheetPreferences.tabs?.[tabId]?.sort ?? "m", favoritesIdMap = actor.system.favorites.reduce(
        (map, f2) => (map.set(f2.id, f2), map),
        /* @__PURE__ */ new Map()
      );
      return configuredFavorites.map(
        ({ ...section }) => {
          if ("effects" in section) {
            let effectContexts = section.effects;
            if (sortMode === "m") {
              const getSort = /* @__PURE__ */ __name((effects) => favoritesIdMap.get(effects.getRelativeUUID(actor))?.sort ?? Number.MAX_SAFE_INTEGER, "getSort");
              effectContexts = effectContexts.toSorted(
                (a2, b2) => getSort(a2.effect) - getSort(b2.effect)
              );
            } else
              effectContexts = effectContexts.toSorted(
                (a2, b2) => a2.effect.name.localeCompare(b2.effect.name, game.i18n.lang)
              );
          } else if ("activities" in section) {
            let activities = section.activities;
            if (sortMode === "m") {
              const getSort = /* @__PURE__ */ __name((activity) => favoritesIdMap.get(activity.relativeUUID)?.sort ?? Number.MAX_SAFE_INTEGER, "getSort");
              activities = activities.toSorted(
                (a2, b2) => getSort(a2) - getSort(b2)
              );
            } else
              activities = activities.toSorted(
                (a2, b2) => a2.name.localeCompare(b2.name, game.i18n.lang)
              );
          } else {
            let items = "spells" in section ? section.spells : section.items;
            if (sortMode === "m") {
              const getSort = /* @__PURE__ */ __name((item) => favoritesIdMap.get(item.getRelativeUUID(actor))?.sort ?? Number.MAX_SAFE_INTEGER, "getSort");
              items = items.toSorted((a2, b2) => getSort(a2) - getSort(b2));
            } else
              items = ItemUtils.getSortedItems(items, sortMode);
            "spells" in section ? section.spells = items : section.items = items;
          }
          return section.show = sectionConfig?.[section.key]?.show !== !1, section;
        }
      );
    } catch (e2) {
      error("An error occurred while configuring favorites", !1, e2);
    }
    return configuredFavorites;
  }
  static configureFeatures(features, context, tabId, sheetPreferences, sectionConfig) {
    try {
      features = SheetSections.sortKeyedSections(features, sectionConfig);
      const sortMode = sheetPreferences.tabs?.[tabId]?.sort ?? "m";
      return features.map(({ ...section }) => (section.items = ItemUtils.getSortedItems(section.items, sortMode), section.items = SheetSections.collocateSubItems(context, section.items), section.show = sectionConfig?.[section.key]?.show !== !1, section));
    } catch (e2) {
      error("An error occurred while configuring features", !1, e2);
    }
    return features;
  }
  static configureActions(sections, tabId, sheetPreferences, sectionConfigs) {
    try {
      sections = SheetSections.sortKeyedSections(sections, sectionConfigs);
      const sortMode = sheetPreferences.tabs?.[tabId]?.sort ?? "m";
      return sections.map(({ ...section }) => (section.actions = getSortedActions(section, sortMode), section.show = sectionConfigs?.[section.key]?.show !== !1, section));
    } catch (e2) {
      error("An error occurred while configuring actions", !1, e2);
    }
    return sections;
  }
}
function createSearchResultsState() {
  let uuids = state(void 0);
  return {
    get uuids() {
      return get(uuids);
    },
    set uuids(value) {
      set(uuids, proxy(value));
    },
    show(uuid) {
      return !get(uuids) || get(uuids).has(uuid);
    }
  };
}
__name(createSearchResultsState, "createSearchResultsState");
let searchKey = Symbol(CONSTANTS.SVELTE_CONTEXT.SEARCH_RESULTS_STATE);
function getSearchResultsContext() {
  return getContext(searchKey) ?? createSearchResultsState();
}
__name(getSearchResultsContext, "getSearchResultsContext");
function setSearchResultsContext(value) {
  setContext(searchKey, value);
}
__name(setSearchResultsContext, "setSearchResultsContext");
var root_6$r = /* @__PURE__ */ template('<i class="fas fa-bolt"></i>'), root_4$w = /* @__PURE__ */ template("<!> <!> <!> <!> <!>", 1), root_15$d = /* @__PURE__ */ template('<span class="truncate flex-1"> </span>'), root_17$9 = /* @__PURE__ */ template('<i style="margin-left: auto; align-self: center;"></i>'), root_13$9 = /* @__PURE__ */ template("<!> <!> <!> <!> <!>", 1), root_21$6 = /* @__PURE__ */ template('<span class="text-body-tertiary">&mdash;</span>'), root_22$4 = /* @__PURE__ */ template('<span class="truncate"> </span>'), root_12$d = /* @__PURE__ */ template("<!> <!> <!> <!> <!>", 1), root_11$f = /* @__PURE__ */ template("<!> <!>", 1), root_2$_ = /* @__PURE__ */ template('<section class="container-contents-list-section"><!></section>');
function ContainerContentsSections$1($$anchor, $$props) {
  push($$props, !0);
  let unlocked = prop($$props, "unlocked", 3, !0);
  const tabId = getContext(CONSTANTS.SVELTE_CONTEXT.TAB_ID);
  let configuredContents = /* @__PURE__ */ derived(() => SheetSections.configureInventory($$props.contents.filter((i2) => i2.items.length), tabId, SheetPreferencesService.getByType($$props.sheetDocument.type), TidyFlags.sectionConfig.get($$props.container)?.[CONSTANTS.TAB_CONTAINER_CONTENTS]));
  const searchResults = getSearchResultsContext();
  let classicControls = /* @__PURE__ */ derived(() => {
    let result = [];
    return result.push({
      component: ItemEditControl,
      getProps: /* @__PURE__ */ __name((item) => ({ item }), "getProps")
    }), unlocked() && result.push({
      component: ItemDeleteControl,
      getProps: /* @__PURE__ */ __name((item) => ({ item, deleteFn: /* @__PURE__ */ __name(() => item.deleteDialog(), "deleteFn") }), "getProps")
    }), result;
  });
  const weightUnit = FoundryAdapter.getWeightUnit(), classicControlWidthRems = 1.5;
  let useClassicControls = /* @__PURE__ */ derived(() => FoundryAdapter.useClassicControls($$props.container)), classicControlsWidth = /* @__PURE__ */ derived(() => get(useClassicControls) ? `/* Controls */ ${classicControlWidthRems * get(classicControls).length}rem` : ""), gridTemplateColumns = /* @__PURE__ */ derived(() => `/* Name */ 1fr /* Uses */ 3.125rem /* Weight */ 3rem /* Quantity */ 3rem ${get(classicControlsWidth)}`);
  const localize = FoundryAdapter.localize;
  var fragment = comment(), node = first_child(fragment);
  each(node, 17, () => get(configuredContents), (section) => section.key, ($$anchor2, section) => {
    var fragment_1 = comment(), node_1 = first_child(fragment_1);
    {
      var consequent_8 = /* @__PURE__ */ __name(($$anchor3) => {
        var section_1 = root_2$_();
        const itemEntries = /* @__PURE__ */ derived(() => get(section).items.map((item) => ({ item, ctx: $$props.itemContext[item.id] })));
        var node_2 = child(section_1), data_custom_section = /* @__PURE__ */ derived(() => get(section).custom ? !0 : null);
        TidyTable(node_2, {
          get key() {
            return get(section).key;
          },
          get "data-custom-section"() {
            return get(data_custom_section);
          },
          get gridTemplateColumns() {
            return get(gridTemplateColumns);
          },
          header: /* @__PURE__ */ __name(($$anchor4) => {
            TidyTableHeaderRow($$anchor4, {
              children: /* @__PURE__ */ __name(($$anchor5, $$slotProps) => {
                var fragment_3 = root_4$w(), node_3 = first_child(fragment_3);
                TidyTableHeaderCell(node_3, {
                  primary: !0,
                  children: /* @__PURE__ */ __name(($$anchor6, $$slotProps2) => {
                    var text$1 = text();
                    template_effect(() => set_text(text$1, `${localize(get(section).label) ?? ""} (${get(itemEntries).length ?? ""})`)), append($$anchor6, text$1);
                  }, "children"),
                  $$slots: { default: !0 }
                });
                var node_4 = sibling(node_3, 2), title = /* @__PURE__ */ derived(() => localize("DND5E.Charges"));
                TidyTableHeaderCell(node_4, {
                  get title() {
                    return get(title);
                  },
                  children: /* @__PURE__ */ __name(($$anchor6, $$slotProps2) => {
                    var i_1 = root_6$r();
                    append($$anchor6, i_1);
                  }, "children"),
                  $$slots: { default: !0 }
                });
                var node_5 = sibling(node_4, 2);
                TidyTableHeaderCell(node_5, {
                  children: /* @__PURE__ */ __name(($$anchor6, $$slotProps2) => {
                    var text_1 = text();
                    template_effect(() => set_text(text_1, localize("DND5E.Weight"))), append($$anchor6, text_1);
                  }, "children"),
                  $$slots: { default: !0 }
                });
                var node_6 = sibling(node_5, 2);
                TidyTableHeaderCell(node_6, {
                  children: /* @__PURE__ */ __name(($$anchor6, $$slotProps2) => {
                    var text_2 = text();
                    template_effect(() => set_text(text_2, localize("DND5E.QuantityAbbr"))), append($$anchor6, text_2);
                  }, "children"),
                  $$slots: { default: !0 }
                });
                var node_7 = sibling(node_6, 2);
                {
                  var consequent = /* @__PURE__ */ __name(($$anchor6) => {
                    TidyTableHeaderCell($$anchor6, {});
                  }, "consequent");
                  if_block(node_7, ($$render) => {
                    $$props.editable && get(useClassicControls) && $$render(consequent);
                  });
                }
                append($$anchor5, fragment_3);
              }, "children"),
              $$slots: { default: !0 }
            });
          }, "header"),
          body: /* @__PURE__ */ __name(($$anchor4) => {
            var fragment_8 = comment(), node_8 = first_child(fragment_8);
            each(node_8, 17, () => get(itemEntries), ({ item, ctx }) => item.id, ($$anchor5, $$item) => {
              let item = /* @__PURE__ */ __name(() => get($$item).item, "item"), ctx = /* @__PURE__ */ __name(() => get($$item).ctx, "ctx");
              var fragment_9 = root_11$f();
              const weight = /* @__PURE__ */ derived(() => ctx()?.totalWeight ?? item().system.weight.value);
              var node_9 = first_child(fragment_9), hidden = /* @__PURE__ */ derived(() => !searchResults.show(item().uuid)), rowClass = /* @__PURE__ */ derived(() => FoundryAdapter.getInventoryRowClasses(item(), $$props.itemContext[item().id]?.attunement)), contextMenu = /* @__PURE__ */ derived(() => ({
                type: CONSTANTS.CONTEXT_MENU_TYPE_ITEMS,
                uuid: item().uuid
              }));
              ItemTableRowV2(node_9, {
                get item() {
                  return item();
                },
                get hidden() {
                  return get(hidden);
                },
                get rowClass() {
                  return get(rowClass);
                },
                get contextMenu() {
                  return get(contextMenu);
                },
                get draggable() {
                  return $$props.editable;
                },
                children: /* @__PURE__ */ __name(($$anchor6, $$arg0) => {
                  let toggleSummary = /* @__PURE__ */ __name(() => $$arg0?.().toggleSummary, "toggleSummary");
                  var fragment_10 = root_12$d(), node_10 = first_child(fragment_10);
                  TidyTableCell(node_10, {
                    class: "flex-row extra-small-gap",
                    primary: !0,
                    children: /* @__PURE__ */ __name(($$anchor7, $$slotProps) => {
                      var fragment_11 = root_13$9(), node_11 = first_child(fragment_11), disabled = /* @__PURE__ */ derived(() => !FoundryAdapter.canUseItem(item()));
                      ItemUseButton(node_11, {
                        get disabled() {
                          return get(disabled);
                        },
                        get item() {
                          return item();
                        }
                      });
                      var node_12 = sibling(node_11, 2);
                      {
                        var consequent_1 = /* @__PURE__ */ __name(($$anchor8) => {
                          InlineToggleControl($$anchor8, {
                            get entityId() {
                              return item().id;
                            },
                            get inlineToggleService() {
                              return $$props.inlineToggleService;
                            }
                          });
                        }, "consequent_1");
                        if_block(node_12, ($$render) => {
                          "containerContents" in ctx() && ctx().containerContents && $$render(consequent_1);
                        });
                      }
                      var node_13 = sibling(node_12, 2);
                      ItemName(node_13, {
                        onToggle: /* @__PURE__ */ __name(() => toggleSummary()(), "onToggle"),
                        cssClass: "align-self-stretch flex-row align-items-center",
                        get item() {
                          return item();
                        },
                        children: /* @__PURE__ */ __name(($$anchor8, $$slotProps2) => {
                          var span = root_15$d(), text_3 = child(span);
                          template_effect(() => {
                            set_attribute(span, "data-tidy-item-name", item().name), set_attribute(span, "data-tidy-sheet-part", CONSTANTS.SHEET_PARTS.ITEM_NAME), set_text(text_3, item().name);
                          }), append($$anchor8, span);
                        }, "children"),
                        $$slots: { default: !0 }
                      });
                      var node_14 = sibling(node_13, 2);
                      {
                        var consequent_3 = /* @__PURE__ */ __name(($$anchor8) => {
                          var fragment_13 = comment();
                          const attunementContext = /* @__PURE__ */ derived(() => FoundryAdapter.getAttunementContext(item()));
                          var node_15 = first_child(fragment_13);
                          {
                            var consequent_2 = /* @__PURE__ */ __name(($$anchor9) => {
                              var i_2 = root_17$9();
                              template_effect(() => set_attribute(i_2, "title", localize(get(attunementContext).title))), template_effect(() => set_class(i_2, `item-state-icon fas ${get(attunementContext).icon ?? ""} ${get(attunementContext).cls ?? ""} fa-fw`)), append($$anchor9, i_2);
                            }, "consequent_2");
                            if_block(node_15, ($$render) => {
                              get(attunementContext) && $$render(consequent_2);
                            });
                          }
                          append($$anchor8, fragment_13);
                        }, "consequent_3");
                        if_block(node_14, ($$render) => {
                          FoundryAdapter.concealDetails(item()) || $$render(consequent_3);
                        });
                      }
                      var node_16 = sibling(node_14, 2);
                      {
                        var consequent_4 = /* @__PURE__ */ __name(($$anchor8) => {
                          InlineFavoriteIcon($$anchor8, {});
                        }, "consequent_4");
                        if_block(node_16, ($$render) => {
                          ctx().favoriteId && $$render(consequent_4);
                        });
                      }
                      append($$anchor7, fragment_11);
                    }, "children"),
                    $$slots: { default: !0 }
                  });
                  var node_17 = sibling(node_10, 2);
                  TidyTableCell(node_17, {
                    children: /* @__PURE__ */ __name(($$anchor7, $$slotProps) => {
                      var fragment_15 = comment(), node_18 = first_child(fragment_15);
                      {
                        var consequent_5 = /* @__PURE__ */ __name(($$anchor8) => {
                          ItemUses($$anchor8, {
                            get item() {
                              return item();
                            }
                          });
                        }, "consequent_5"), alternate = /* @__PURE__ */ __name(($$anchor8) => {
                          var span_1 = root_21$6();
                          append($$anchor8, span_1);
                        }, "alternate");
                        if_block(node_18, ($$render) => {
                          item().hasLimitedUses ? $$render(consequent_5) : $$render(alternate, !1);
                        });
                      }
                      append($$anchor7, fragment_15);
                    }, "children"),
                    $$slots: { default: !0 }
                  });
                  var node_19 = sibling(node_17, 2), title_1 = /* @__PURE__ */ derived(() => localize("TIDY5E.Inventory.Weight.Text", { weight: get(weight), weightUnit }));
                  TidyTableCell(node_19, {
                    get title() {
                      return get(title_1);
                    },
                    children: /* @__PURE__ */ __name(($$anchor7, $$slotProps) => {
                      var span_2 = root_22$4(), text_4 = child(span_2);
                      template_effect(() => set_text(text_4, get(weight))), append($$anchor7, span_2);
                    }, "children"),
                    $$slots: { default: !0 }
                  });
                  var node_20 = sibling(node_19, 2);
                  TidyTableCell(node_20, {
                    children: /* @__PURE__ */ __name(($$anchor7, $$slotProps) => {
                      var disabled_1 = /* @__PURE__ */ derived(() => !$$props.editable || $$props.lockItemQuantity);
                      TextInput($$anchor7, {
                        get document() {
                          return item();
                        },
                        field: "system.quantity",
                        get value() {
                          return item().system.quantity;
                        },
                        selectOnFocus: !0,
                        get disabled() {
                          return get(disabled_1);
                        },
                        placeholder: "0",
                        allowDeltaChanges: !0
                      });
                    }, "children"),
                    $$slots: { default: !0 }
                  });
                  var node_21 = sibling(node_20, 2);
                  {
                    var consequent_6 = /* @__PURE__ */ __name(($$anchor7) => {
                      TidyTableCell($$anchor7, {
                        children: /* @__PURE__ */ __name(($$anchor8, $$slotProps) => {
                          var fragment_19 = comment(), node_22 = first_child(fragment_19);
                          each(node_22, 17, () => get(classicControls), index, ($$anchor9, control) => {
                            var fragment_20 = comment(), node_23 = first_child(fragment_20), spread_element = /* @__PURE__ */ derived(() => get(control).getProps(item()));
                            component(node_23, () => get(control).component, ($$anchor10, $$component) => {
                              $$component($$anchor10, spread_props(() => get(spread_element), { class: "tidy-table-control" }));
                            }), append($$anchor9, fragment_20);
                          }), append($$anchor8, fragment_19);
                        }, "children"),
                        $$slots: { default: !0 }
                      });
                    }, "consequent_6");
                    if_block(node_21, ($$render) => {
                      $$props.editable && get(useClassicControls) && $$render(consequent_6);
                    });
                  }
                  append($$anchor6, fragment_10);
                }, "children"),
                $$slots: { default: !0 }
              });
              var node_24 = sibling(node_9, 2);
              {
                var consequent_7 = /* @__PURE__ */ __name(($$anchor6) => {
                  InlineContainerView$1($$anchor6, {
                    get container() {
                      return item();
                    },
                    get containerContents() {
                      return ctx().containerContents;
                    },
                    get editable() {
                      return $$props.editable;
                    },
                    get inlineToggleService() {
                      return $$props.inlineToggleService;
                    },
                    get lockItemQuantity() {
                      return $$props.lockItemQuantity;
                    },
                    get sheetDocument() {
                      return $$props.sheetDocument;
                    },
                    get unlocked() {
                      return unlocked();
                    }
                  });
                }, "consequent_7");
                if_block(node_24, ($$render) => {
                  "containerContents" in ctx() && ctx().containerContents && $$render(consequent_7);
                });
              }
              append($$anchor5, fragment_9);
            }), append($$anchor4, fragment_8);
          }, "body"),
          $$slots: { header: !0, body: !0 }
        }), append($$anchor3, section_1);
      }, "consequent_8");
      if_block(node_1, ($$render) => {
        get(section).show && $$render(consequent_8);
      });
    }
    append($$anchor2, fragment_1);
  }), append($$anchor, fragment), pop();
}
__name(ContainerContentsSections$1, "ContainerContentsSections$1");
var root_2$Z = /* @__PURE__ */ template('<div class="empty-container"><span class="empty-container-text"> </span></div>'), root_1$1S = /* @__PURE__ */ template('<div class="flex-column extra-small-gap flex-1 inline-container-view"><!> <!> <!></div>');
function InlineContainerView$1($$anchor, $$props) {
  push($$props, !0);
  let unlocked = prop($$props, "unlocked", 3, !0), toggleServiceMap = /* @__PURE__ */ derived(() => $$props.inlineToggleService.map);
  const searchResults = getSearchResultsContext();
  let tabId = getContext(CONSTANTS.SVELTE_CONTEXT.TAB_ID);
  async function onDrop(event2) {
    $$props.container.sheet._onDrop(event2), event2.preventDefault(), event2.stopImmediatePropagation();
  }
  __name(onDrop, "onDrop");
  var expanded = /* @__PURE__ */ derived(() => get(toggleServiceMap).get(tabId)?.has($$props.container.id) === !0), class_1 = /* @__PURE__ */ derived(() => searchResults.show($$props.container.uuid) ? "" : "hidden");
  ExpandableContainer($$anchor, {
    get expanded() {
      return get(expanded);
    },
    get class() {
      return get(class_1);
    },
    children: /* @__PURE__ */ __name(($$anchor2, $$slotProps) => {
      var div = root_1$1S(), node = child(div);
      CapacityBar$1(node, {
        get container() {
          return $$props.container;
        },
        get capacity() {
          return $$props.containerContents.capacity;
        }
      });
      var node_1 = sibling(node, 2);
      ContainerContentsSections$1(node_1, {
        get contents() {
          return $$props.containerContents.contents;
        },
        get container() {
          return $$props.container;
        },
        get editable() {
          return $$props.editable;
        },
        get itemContext() {
          return $$props.containerContents.itemContext;
        },
        get lockItemQuantity() {
          return $$props.lockItemQuantity;
        },
        get inlineToggleService() {
          return $$props.inlineToggleService;
        },
        get sheetDocument() {
          return $$props.sheetDocument;
        },
        get unlocked() {
          return unlocked();
        }
      });
      var node_2 = sibling(node_1, 2);
      {
        var consequent = /* @__PURE__ */ __name(($$anchor3) => {
          var div_1 = root_2$Z(), span = child(div_1), text2 = child(span);
          template_effect(() => set_text(text2, FoundryAdapter.localize("TIDY5E.EmptyContainer"))), append($$anchor3, div_1);
        }, "consequent");
        if_block(node_2, ($$render) => {
          $$props.containerContents.contents.some((c2) => c2.items.length > 0) || $$render(consequent);
        });
      }
      template_effect(() => set_attribute(div, "data-tidy-container-id", $$props.container.id)), event("drop", div, onDrop), append($$anchor2, div);
    }, "children"),
    $$slots: { default: !0 }
  }), pop();
}
__name(InlineContainerView$1, "InlineContainerView$1");
var root_5$C = /* @__PURE__ */ template('<i class="fas fa-weight-hanging"></i>'), root_6$q = /* @__PURE__ */ template('<i class="fas fa-bolt"></i>'), root_2$Y = /* @__PURE__ */ template("<!> <!> <!> <!> <!> <!>", 1), root_15$c = /* @__PURE__ */ template('<span class="truncate flex-1"> </span>'), root_17$8 = /* @__PURE__ */ template('<div class="item-detail attunement svelte-16qwexh"><i></i></div>'), root_16$8 = /* @__PURE__ */ template("<!> <!>", 1), root_13$8 = /* @__PURE__ */ template('<!> <!> <!> <div class="primary-cell-extras"><!></div>', 1), root_20$a = /* @__PURE__ */ template('<span class="truncate"> </span>'), root_23$5 = /* @__PURE__ */ template('<span class="text-body-tertiary">&mdash;</span>'), root_12$c = /* @__PURE__ */ template("<!> <!> <!> <!> <!> <!>", 1), root_11$e = /* @__PURE__ */ template("<!> <!>", 1), root_10$n = /* @__PURE__ */ template("<!> <!>", 1), root$36 = /* @__PURE__ */ template('<section class="inventory-list-section svelte-16qwexh"><!></section>');
function InventoryList($$anchor, $$props) {
  push($$props, !0);
  let extraInventoryRowClasses = prop($$props, "extraInventoryRowClasses", 3, ""), lockControls = prop($$props, "lockControls", 3, !1), allowFavoriteIconNextToName = prop($$props, "allowFavoriteIconNextToName", 3, !0), includeWeightColumn = prop($$props, "includeWeightColumn", 3, !0), allowAttuneControl = prop($$props, "allowAttuneControl", 3, !0), allowEquipControl = prop($$props, "allowEquipControl", 3, !0), inlineToggleService = getContext(CONSTANTS.SVELTE_CONTEXT.INLINE_TOGGLE_SERVICE), context = /* @__PURE__ */ derived(getSheetContext), itemEntries = /* @__PURE__ */ derived(() => $$props.section.items.map((item) => ({
    item,
    ctx: get(context).itemContext[item.id],
    // TODO: Determine if this is needed any longer
    itemName: item.system.identified === !1 ? coalesce(item.system.unidentified.name, localize("DND5E.Unidentified.Title")) : item.name
  })));
  const searchResults = getSearchResultsContext(), localize = FoundryAdapter.localize, weightUnit = FoundryAdapter.getWeightUnit();
  let controls = /* @__PURE__ */ derived(() => {
    let result = [];
    return allowAttuneControl() && result.push({
      component: AttuneControl,
      props: /* @__PURE__ */ __name(({ item, ctx }) => ({ item, ctx }), "props"),
      visible: /* @__PURE__ */ __name(({ item, ctx }) => ctx?.attunement && !FoundryAdapter.concealDetails(item), "visible")
    }), allowEquipControl() && result.push({
      component: EquipControl,
      props: /* @__PURE__ */ __name(({ item, ctx }) => ({ item, ctx }), "props"),
      visible: /* @__PURE__ */ __name(({ ctx }) => ctx?.canToggle === !0, "visible")
    }), "favorites" in get(context).actor.system && result.push({
      component: ItemFavoriteControl,
      props: /* @__PURE__ */ __name(({ item }) => ({ item }), "props")
    }), result.push({
      component: ItemEditControl,
      props: /* @__PURE__ */ __name(({ item }) => ({ item }), "props")
    }), get(context).unlocked && result.push({
      component: ItemDeleteControl,
      props: /* @__PURE__ */ __name(({ item }) => ({ item }), "props")
    }), get(context).useActionsFeature && result.push({
      component: ActionFilterOverrideControl,
      props: /* @__PURE__ */ __name(({ item }) => ({ item }), "props")
    }), result;
  }), classicControlsIconWidth = 1.25, classicControlsColumnWidth = /* @__PURE__ */ derived(() => `${classicControlsIconWidth * get(controls).length}rem`);
  function getInventoryRowClasses(item) {
    const extras = [];
    return extraInventoryRowClasses() && extras.push(extraInventoryRowClasses()), FoundryAdapter.getInventoryRowClasses(item, get(context).itemContext[item.id], extras);
  }
  __name(getInventoryRowClasses, "getInventoryRowClasses");
  var section_1 = root$36(), node = child(section_1), data_custom_section = /* @__PURE__ */ derived(() => $$props.section.custom ? !0 : null);
  ItemTable(node, {
    get key() {
      return $$props.section.key;
    },
    get "data-custom-section"() {
      return get(data_custom_section);
    },
    header: /* @__PURE__ */ __name(($$anchor2) => {
      ItemTableHeaderRow($$anchor2, {
        children: /* @__PURE__ */ __name(($$anchor3, $$slotProps) => {
          var fragment_1 = root_2$Y(), node_1 = first_child(fragment_1);
          ItemTableColumn(node_1, {
            primary: !0,
            children: /* @__PURE__ */ __name(($$anchor4, $$slotProps2) => {
              var text$1 = text();
              template_effect(() => set_text(text$1, $$props.primaryColumnName)), append($$anchor4, text$1);
            }, "children"),
            $$slots: { default: !0 }
          });
          var node_2 = sibling(node_1, 2);
          {
            var consequent = /* @__PURE__ */ __name(($$anchor4) => {
              var title = /* @__PURE__ */ derived(() => `${localize("DND5E.Weight") ?? ""} (${weightUnit ?? ""})`);
              ItemTableColumn($$anchor4, {
                get title() {
                  return get(title);
                },
                baseWidth: "4rem",
                children: /* @__PURE__ */ __name(($$anchor5, $$slotProps2) => {
                  var i2 = root_5$C();
                  append($$anchor5, i2);
                }, "children"),
                $$slots: { default: !0 }
              });
            }, "consequent");
            if_block(node_2, ($$render) => {
              includeWeightColumn() && $$render(consequent);
            });
          }
          var node_3 = sibling(node_2, 2), title_1 = /* @__PURE__ */ derived(() => localize("DND5E.Charges"));
          ItemTableColumn(node_3, {
            get title() {
              return get(title_1);
            },
            baseWidth: "3.125rem",
            children: /* @__PURE__ */ __name(($$anchor4, $$slotProps2) => {
              var i_1 = root_6$q();
              append($$anchor4, i_1);
            }, "children"),
            $$slots: { default: !0 }
          });
          var node_4 = sibling(node_3, 2);
          ItemTableColumn(node_4, {
            baseWidth: "7.5rem",
            children: /* @__PURE__ */ __name(($$anchor4, $$slotProps2) => {
              var text_1 = text();
              template_effect(() => set_text(text_1, localize("DND5E.Usage"))), append($$anchor4, text_1);
            }, "children"),
            $$slots: { default: !0 }
          });
          var node_5 = sibling(node_4, 2);
          ItemTableColumn(node_5, {
            baseWidth: "3rem",
            children: /* @__PURE__ */ __name(($$anchor4, $$slotProps2) => {
              var text_2 = text();
              template_effect(() => set_text(text_2, localize("DND5E.QuantityAbbr"))), append($$anchor4, text_2);
            }, "children"),
            $$slots: { default: !0 }
          });
          var node_6 = sibling(node_5, 2);
          {
            var consequent_1 = /* @__PURE__ */ __name(($$anchor4) => {
              ItemTableColumn($$anchor4, {
                get baseWidth() {
                  return get(classicControlsColumnWidth);
                }
              });
            }, "consequent_1");
            if_block(node_6, ($$render) => {
              get(context).editable && get(context).useClassicControls && !lockControls() && $$render(consequent_1);
            });
          }
          append($$anchor3, fragment_1);
        }, "children"),
        $$slots: { default: !0 }
      });
    }, "header"),
    body: /* @__PURE__ */ __name(($$anchor2) => {
      var fragment_7 = root_10$n(), node_7 = first_child(fragment_7);
      each(node_7, 17, () => get(itemEntries), ({ item, ctx, itemName }) => item.id, ($$anchor3, $$item) => {
        let item = /* @__PURE__ */ __name(() => get($$item).item, "item"), ctx = /* @__PURE__ */ __name(() => get($$item).ctx, "ctx"), itemName = /* @__PURE__ */ __name(() => get($$item).itemName, "itemName");
        var fragment_8 = root_11$e(), node_8 = first_child(fragment_8), contextMenu = /* @__PURE__ */ derived(() => ({
          type: CONSTANTS.CONTEXT_MENU_TYPE_ITEMS,
          uuid: item().uuid
        })), cssClass = /* @__PURE__ */ derived(() => getInventoryRowClasses(item())), hidden = /* @__PURE__ */ derived(() => !searchResults.show(item().uuid)), favoriteId = /* @__PURE__ */ derived(() => "favoriteId" in ctx() ? ctx().favoriteId : null);
        ItemTableRow(node_8, {
          get item() {
            return item();
          },
          onMouseDown: /* @__PURE__ */ __name((event2) => FoundryAdapter.editOnMiddleClick(event2, item()), "onMouseDown"),
          get contextMenu() {
            return get(contextMenu);
          },
          get cssClass() {
            return get(cssClass);
          },
          get hidden() {
            return get(hidden);
          },
          get favoriteId() {
            return get(favoriteId);
          },
          children: /* @__PURE__ */ __name(($$anchor4, $$arg0) => {
            let toggleSummary = /* @__PURE__ */ __name(() => $$arg0?.().toggleSummary, "toggleSummary");
            var fragment_9 = root_12$c(), node_9 = first_child(fragment_9);
            ItemTableCell(node_9, {
              primary: !0,
              children: /* @__PURE__ */ __name(($$anchor5, $$slotProps) => {
                var fragment_10 = root_13$8(), node_10 = first_child(fragment_10), disabled = /* @__PURE__ */ derived(() => !get(context).editable);
                ItemUseButton(node_10, {
                  get disabled() {
                    return get(disabled);
                  },
                  get item() {
                    return item();
                  }
                });
                var node_11 = sibling(node_10, 2);
                {
                  var consequent_2 = /* @__PURE__ */ __name(($$anchor6) => {
                    InlineToggleControl($$anchor6, {
                      get entityId() {
                        return item().id;
                      },
                      inlineToggleService
                    });
                  }, "consequent_2");
                  if_block(node_11, ($$render) => {
                    "containerContents" in ctx() && ctx().containerContents && $$render(consequent_2);
                  });
                }
                var node_12 = sibling(node_11, 2);
                ItemName(node_12, {
                  onToggle: /* @__PURE__ */ __name(() => toggleSummary()(get(context).actor), "onToggle"),
                  cssClass: "extra-small-gap",
                  get item() {
                    return item();
                  },
                  children: /* @__PURE__ */ __name(($$anchor6, $$slotProps2) => {
                    var span = root_15$c(), text_3 = child(span);
                    template_effect(() => {
                      set_attribute(span, "data-tidy-item-name", itemName()), set_attribute(span, "data-tidy-sheet-part", CONSTANTS.SHEET_PARTS.ITEM_NAME), set_text(text_3, itemName());
                    }), append($$anchor6, span);
                  }, "children"),
                  $$slots: { default: !0 }
                });
                var div = sibling(node_12, 2), node_13 = child(div);
                {
                  var consequent_5 = /* @__PURE__ */ __name(($$anchor6) => {
                    var fragment_12 = root_16$8(), node_14 = first_child(fragment_12);
                    {
                      var consequent_3 = /* @__PURE__ */ __name(($$anchor7) => {
                        var div_1 = root_17$8(), i_2 = child(div_1);
                        template_effect(() => set_attribute(i_2, "title", localize(ctx().attunement.title))), template_effect(() => set_class(i_2, `item-state-icon fas ${ctx().attunement.icon ?? ""} ${ctx().attunement.cls ?? ""} svelte-16qwexh`)), append($$anchor7, div_1);
                      }, "consequent_3");
                      if_block(node_14, ($$render) => {
                        ctx()?.attunement && !FoundryAdapter.concealDetails(item()) && $$render(consequent_3);
                      });
                    }
                    var node_15 = sibling(node_14, 2);
                    {
                      var consequent_4 = /* @__PURE__ */ __name(($$anchor7) => {
                        InlineFavoriteIcon($$anchor7, {});
                      }, "consequent_4");
                      if_block(node_15, ($$render) => {
                        "favoriteId" in ctx() && ctx().favoriteId && allowFavoriteIconNextToName() && $$render(consequent_4);
                      });
                    }
                    append($$anchor6, fragment_12);
                  }, "consequent_5");
                  if_block(node_13, ($$render) => {
                    get(context).useClassicControls || $$render(consequent_5);
                  });
                }
                append($$anchor5, fragment_10);
              }, "children"),
              $$slots: { default: !0 }
            });
            var node_16 = sibling(node_9, 2);
            {
              var consequent_6 = /* @__PURE__ */ __name(($$anchor5) => {
                const weight = /* @__PURE__ */ derived(() => ctx()?.totalWeight ?? item().system.weight.value);
                var title_2 = /* @__PURE__ */ derived(() => localize("TIDY5E.Inventory.Weight.Tooltip", { weight: get(weight), weightUnit }));
                ItemTableCell($$anchor5, {
                  baseWidth: "4rem",
                  get title() {
                    return get(title_2);
                  },
                  children: /* @__PURE__ */ __name(($$anchor6, $$slotProps) => {
                    var span_1 = root_20$a(), text_4 = child(span_1);
                    template_effect(() => set_text(text_4, localize("TIDY5E.Inventory.Weight.Text", { weight: get(weight), weightUnit }))), append($$anchor6, span_1);
                  }, "children"),
                  $$slots: { default: !0 }
                });
              }, "consequent_6");
              if_block(node_16, ($$render) => {
                includeWeightColumn() && $$render(consequent_6);
              });
            }
            var node_17 = sibling(node_16, 2), title_3 = /* @__PURE__ */ derived(() => localize("DND5E.Uses"));
            ItemTableCell(node_17, {
              baseWidth: "3.125rem",
              get title() {
                return get(title_3);
              },
              children: /* @__PURE__ */ __name(($$anchor5, $$slotProps) => {
                var fragment_15 = comment(), node_18 = first_child(fragment_15);
                {
                  var consequent_7 = /* @__PURE__ */ __name(($$anchor6) => {
                    ItemUses($$anchor6, {
                      get item() {
                        return item();
                      }
                    });
                  }, "consequent_7"), alternate = /* @__PURE__ */ __name(($$anchor6) => {
                    var span_2 = root_23$5();
                    append($$anchor6, span_2);
                  }, "alternate");
                  if_block(node_18, ($$render) => {
                    ctx()?.hasUses ? $$render(consequent_7) : $$render(alternate, !1);
                  });
                }
                append($$anchor5, fragment_15);
              }, "children"),
              $$slots: { default: !0 }
            });
            var node_19 = sibling(node_17, 2), title_4 = /* @__PURE__ */ derived(() => localize("DND5E.Usage"));
            ItemTableCell(node_19, {
              baseWidth: "7.5rem",
              get title() {
                return get(title_4);
              },
              children: /* @__PURE__ */ __name(($$anchor5, $$slotProps) => {
                var fragment_17 = comment(), node_20 = first_child(fragment_17);
                {
                  var consequent_8 = /* @__PURE__ */ __name(($$anchor6) => {
                    var text_5 = text();
                    template_effect(() => set_text(text_5, item().labels?.activation ?? "")), append($$anchor6, text_5);
                  }, "consequent_8");
                  if_block(node_20, ($$render) => {
                    ItemUtils.hasActivationType(item()) && $$render(consequent_8);
                  });
                }
                append($$anchor5, fragment_17);
              }, "children"),
              $$slots: { default: !0 }
            });
            var node_21 = sibling(node_19, 2);
            ItemTableCell(node_21, {
              baseWidth: "3rem",
              children: /* @__PURE__ */ __name(($$anchor5, $$slotProps) => {
                var disabled_1 = /* @__PURE__ */ derived(() => !get(context).editable || get(context).lockItemQuantity);
                TextInput($$anchor5, {
                  get document() {
                    return item();
                  },
                  field: "system.quantity",
                  get value() {
                    return item().system.quantity;
                  },
                  selectOnFocus: !0,
                  get disabled() {
                    return get(disabled_1);
                  },
                  placeholder: "0",
                  allowDeltaChanges: !0,
                  class: "text-align-center"
                });
              }, "children"),
              $$slots: { default: !0 }
            });
            var node_22 = sibling(node_21, 2);
            {
              var consequent_9 = /* @__PURE__ */ __name(($$anchor5) => {
                ItemTableCell($$anchor5, {
                  get baseWidth() {
                    return get(classicControlsColumnWidth);
                  },
                  children: /* @__PURE__ */ __name(($$anchor6, $$slotProps) => {
                    var params = /* @__PURE__ */ derived(() => ({ item: item(), ctx: ctx() }));
                    ClassicControls($$anchor6, {
                      get controls() {
                        return get(controls);
                      },
                      get params() {
                        return get(params);
                      }
                    });
                  }, "children"),
                  $$slots: { default: !0 }
                });
              }, "consequent_9");
              if_block(node_22, ($$render) => {
                get(context).editable && get(context).useClassicControls && !lockControls() && $$render(consequent_9);
              });
            }
            append($$anchor4, fragment_9);
          }, "children"),
          $$slots: { default: !0 }
        });
        var node_23 = sibling(node_8, 2);
        {
          var consequent_10 = /* @__PURE__ */ __name(($$anchor4) => {
            InlineContainerView$1($$anchor4, {
              get container() {
                return item();
              },
              get containerContents() {
                return ctx().containerContents;
              },
              get editable() {
                return get(context).editable;
              },
              inlineToggleService,
              get lockItemQuantity() {
                return get(context).lockItemQuantity;
              },
              get sheetDocument() {
                return get(context).actor;
              },
              get unlocked() {
                return get(context).unlocked;
              }
            });
          }, "consequent_10");
          if_block(node_23, ($$render) => {
            "containerContents" in ctx() && ctx().containerContents && $$render(consequent_10);
          });
        }
        append($$anchor3, fragment_8);
      });
      var node_24 = sibling(node_7, 2);
      {
        var consequent_11 = /* @__PURE__ */ __name(($$anchor3) => {
          ItemTableFooter($$anchor3, {
            get actor() {
              return get(context).actor;
            },
            get section() {
              return $$props.section;
            },
            isItem: !0
          });
        }, "consequent_11");
        if_block(node_24, ($$render) => {
          get(context).unlocked && $$props.section.canCreate && $$render(consequent_11);
        });
      }
      append($$anchor2, fragment_7);
    }, "body"),
    $$slots: { header: !0, body: !0 }
  }), append($$anchor, section_1), pop();
}
__name(InventoryList, "InventoryList");
var root_2$X = /* @__PURE__ */ template("<!> <!> <!>", 1), root_10$m = /* @__PURE__ */ template('<span class="truncate flex-1"> </span>'), root_9$o = /* @__PURE__ */ template("<!> <!>", 1), root_15$b = /* @__PURE__ */ template("<span> </span>"), root_14$6 = /* @__PURE__ */ template('<!> <i class="fas fa-bolt"></i>', 1), root_18$b = /* @__PURE__ */ template('<span class="text-body-tertiary">&mdash;</span>'), root_8$o = /* @__PURE__ */ template("<!> <!> <!>", 1);
function FavoriteFeaturesList($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getCharacterSheetContext), itemEntries = /* @__PURE__ */ derived(() => $$props.section.items.map((item) => ({
    item,
    ctx: get(context).itemContext[item.id]
  })));
  const searchResults = getSearchResultsContext();
  getContext(CONSTANTS.SVELTE_CONTEXT.INLINE_TOGGLE_SERVICE);
  const localize = FoundryAdapter.localize;
  var data_custom_section = /* @__PURE__ */ derived(() => $$props.section.custom ? !0 : null);
  ItemTable($$anchor, {
    get key() {
      return $$props.section.key;
    },
    get "data-custom-section"() {
      return get(data_custom_section);
    },
    header: /* @__PURE__ */ __name(($$anchor2) => {
      ItemTableHeaderRow($$anchor2, {
        children: /* @__PURE__ */ __name(($$anchor3, $$slotProps) => {
          var fragment_2 = root_2$X(), node = first_child(fragment_2);
          ItemTableColumn(node, {
            primary: !0,
            children: /* @__PURE__ */ __name(($$anchor4, $$slotProps2) => {
              var text$1 = text();
              template_effect(() => set_text(text$1, localize($$props.section.label ?? "DND5E.Features"))), append($$anchor4, text$1);
            }, "children"),
            $$slots: { default: !0 }
          });
          var node_1 = sibling(node, 2);
          ItemTableColumn(node_1, {
            baseWidth: "3.125rem",
            children: /* @__PURE__ */ __name(($$anchor4, $$slotProps2) => {
              var text_1 = text();
              template_effect(() => set_text(text_1, localize("DND5E.Uses"))), append($$anchor4, text_1);
            }, "children"),
            $$slots: { default: !0 }
          });
          var node_2 = sibling(node_1, 2);
          ItemTableColumn(node_2, {
            baseWidth: "7.5rem",
            children: /* @__PURE__ */ __name(($$anchor4, $$slotProps2) => {
              var text_2 = text();
              template_effect(() => set_text(text_2, localize("DND5E.Usage"))), append($$anchor4, text_2);
            }, "children"),
            $$slots: { default: !0 }
          }), append($$anchor3, fragment_2);
        }, "children"),
        $$slots: { default: !0 }
      });
    }, "header"),
    body: /* @__PURE__ */ __name(($$anchor2) => {
      var fragment_6 = comment(), node_3 = first_child(fragment_6);
      each(node_3, 17, () => get(itemEntries), ({ item, ctx }) => item.id, ($$anchor3, $$item) => {
        let item = /* @__PURE__ */ __name(() => get($$item).item, "item"), ctx = /* @__PURE__ */ __name(() => get($$item).ctx, "ctx");
        var contextMenu = /* @__PURE__ */ derived(() => ({
          type: CONSTANTS.CONTEXT_MENU_TYPE_ITEMS,
          uuid: item().uuid
        })), hidden = /* @__PURE__ */ derived(() => !searchResults.show(item().uuid));
        ItemTableRow($$anchor3, {
          get item() {
            return item();
          },
          onMouseDown: /* @__PURE__ */ __name((event2) => FoundryAdapter.editOnMiddleClick(event2, item()), "onMouseDown"),
          get contextMenu() {
            return get(contextMenu);
          },
          get hidden() {
            return get(hidden);
          },
          get favoriteId() {
            return ctx().favoriteId;
          },
          children: /* @__PURE__ */ __name(($$anchor4, $$arg0) => {
            let toggleSummary = /* @__PURE__ */ __name(() => $$arg0?.().toggleSummary, "toggleSummary");
            var fragment_8 = root_8$o(), node_4 = first_child(fragment_8);
            ItemTableCell(node_4, {
              primary: !0,
              children: /* @__PURE__ */ __name(($$anchor5, $$slotProps) => {
                var fragment_9 = root_9$o(), node_5 = first_child(fragment_9), disabled = /* @__PURE__ */ derived(() => !get(context).editable);
                ItemUseButton(node_5, {
                  get disabled() {
                    return get(disabled);
                  },
                  get item() {
                    return item();
                  }
                });
                var node_6 = sibling(node_5, 2);
                ItemName(node_6, {
                  onToggle: /* @__PURE__ */ __name(() => toggleSummary()(get(context).actor), "onToggle"),
                  hasChildren: !1,
                  get item() {
                    return item();
                  },
                  children: /* @__PURE__ */ __name(($$anchor6, $$slotProps2) => {
                    var span = root_10$m(), text_3 = child(span);
                    template_effect(() => {
                      set_attribute(span, "data-tidy-item-name", item().name), set_attribute(span, "data-tidy-sheet-part", CONSTANTS.SHEET_PARTS.ITEM_NAME), set_text(text_3, item().name);
                    }), append($$anchor6, span);
                  }, "children"),
                  $$slots: { default: !0 }
                }), append($$anchor5, fragment_9);
              }, "children"),
              $$slots: { default: !0 }
            });
            var node_7 = sibling(node_4, 2);
            ItemTableCell(node_7, {
              baseWidth: "3.125rem",
              children: /* @__PURE__ */ __name(($$anchor5, $$slotProps) => {
                var fragment_10 = comment(), node_8 = first_child(fragment_10);
                {
                  var consequent = /* @__PURE__ */ __name(($$anchor6) => {
                    RechargeControl($$anchor6, {
                      get document() {
                        return item();
                      },
                      field: "system.uses.spent",
                      get uses() {
                        return item().system.uses;
                      }
                    });
                  }, "consequent"), alternate_2 = /* @__PURE__ */ __name(($$anchor6) => {
                    var fragment_12 = comment(), node_9 = first_child(fragment_12);
                    {
                      var consequent_2 = /* @__PURE__ */ __name(($$anchor7) => {
                        var fragment_13 = root_14$6();
                        const remaining = /* @__PURE__ */ derived(() => item().system.uses.max - item().system.uses.spent);
                        var node_10 = first_child(fragment_13);
                        {
                          var consequent_1 = /* @__PURE__ */ __name(($$anchor8) => {
                            var span_1 = root_15$b(), text_4 = child(span_1);
                            template_effect(() => set_text(text_4, get(remaining))), append($$anchor8, span_1);
                          }, "consequent_1");
                          if_block(node_10, ($$render) => {
                            get(remaining) > 1 && $$render(consequent_1);
                          });
                        }
                        var i2 = sibling(node_10, 2);
                        template_effect(() => set_attribute(i2, "title", localize("DND5E.Charged"))), append($$anchor7, fragment_13);
                      }, "consequent_2"), alternate_1 = /* @__PURE__ */ __name(($$anchor7) => {
                        var fragment_14 = comment(), node_11 = first_child(fragment_14);
                        {
                          var consequent_3 = /* @__PURE__ */ __name(($$anchor8) => {
                            ItemUses($$anchor8, {
                              get item() {
                                return item();
                              }
                            });
                          }, "consequent_3"), alternate = /* @__PURE__ */ __name(($$anchor8) => {
                            var span_2 = root_18$b();
                            append($$anchor8, span_2);
                          }, "alternate");
                          if_block(
                            node_11,
                            ($$render) => {
                              ctx()?.hasUses ? $$render(consequent_3) : $$render(alternate, !1);
                            },
                            !0
                          );
                        }
                        append($$anchor7, fragment_14);
                      }, "alternate_1");
                      if_block(
                        node_9,
                        ($$render) => {
                          item().hasRecharge ? $$render(consequent_2) : $$render(alternate_1, !1);
                        },
                        !0
                      );
                    }
                    append($$anchor6, fragment_12);
                  }, "alternate_2");
                  if_block(node_8, ($$render) => {
                    item().isOnCooldown ? $$render(consequent) : $$render(alternate_2, !1);
                  });
                }
                append($$anchor5, fragment_10);
              }, "children"),
              $$slots: { default: !0 }
            });
            var node_12 = sibling(node_7, 2);
            ItemTableCell(node_12, {
              baseWidth: "7.5rem",
              children: /* @__PURE__ */ __name(($$anchor5, $$slotProps) => {
                var fragment_16 = comment(), node_13 = first_child(fragment_16);
                {
                  var consequent_4 = /* @__PURE__ */ __name(($$anchor6) => {
                    var text_5 = text();
                    template_effect(() => set_text(text_5, item().labels?.activation ?? "")), append($$anchor6, text_5);
                  }, "consequent_4");
                  if_block(node_13, ($$render) => {
                    ItemUtils.hasActivationType(item()) && $$render(consequent_4);
                  });
                }
                append($$anchor5, fragment_16);
              }, "children"),
              $$slots: { default: !0 }
            }), append($$anchor4, fragment_8);
          }, "children"),
          $$slots: { default: !0 }
        });
      }), append($$anchor2, fragment_6);
    }, "body"),
    $$slots: { header: !0, body: !0 }
  }), pop();
}
__name(FavoriteFeaturesList, "FavoriteFeaturesList");
var root_1$1R = /* @__PURE__ */ template('<span class="spell-component svelte-vhpebl"> </span>');
function SpellComponents($$anchor, $$props) {
  push($$props, !0);
  var fragment = comment(), node = first_child(fragment);
  each(node, 17, () => $$props.spell.labels.components.all, index, ($$anchor2, component2) => {
    var span = root_1$1R(), text2 = child(span);
    template_effect(() => {
      set_attribute(span, "title", $$props.spellComponentLabels[get(component2).abbr] ?? get(component2).abbr), toggle_class(span, "spell-tag", get(component2).tag), set_text(text2, get(component2).abbr);
    }), append($$anchor2, span);
  }), append($$anchor, fragment), pop();
}
__name(SpellComponents, "SpellComponents");
var on_click$1h = /* @__PURE__ */ __name((_, context) => FoundryAdapter.openSpellSlotsConfig(get(context).actor), "on_click$1h"), root$35 = /* @__PURE__ */ template('<button type="button" class="spell-slot-config inline-icon-button"><i class="fas fa-pencil"></i></button>');
function SpellSlotConfigButton($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getSheetContext);
  const localize = FoundryAdapter.localize;
  var button = root$35();
  template_effect(() => set_attribute(button, "title", localize("DND5E.SpellSlotsConfig"))), template_effect(() => set_attribute(button, "aria-label", localize("DND5E.SpellSlotsConfig"))), button.__click = [on_click$1h, context], template_effect(() => set_attribute(button, "tabindex", settings.value.useAccessibleKeyboardSupport ? 0 : -1)), append($$anchor, button), pop();
}
__name(SpellSlotConfigButton, "SpellSlotConfigButton");
delegate(["click"]);
var root$34 = /* @__PURE__ */ template('<div class="spell-slots-detail svelte-1y8yhny"><!> <span class="sep">/</span> <span class="spell-max svelte-1y8yhny"> </span></div>');
function SpellSlotUses($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getSheetContext);
  var div = root$34(), node = child(div), disabled = /* @__PURE__ */ derived(() => !get(context).editable);
  TextInput(node, {
    get document() {
      return get(context).actor;
    },
    get field() {
      return `system.spells.${$$props.section.prop ?? ""}.value`;
    },
    class: "spell-slot-uses",
    get value() {
      return $$props.section.uses;
    },
    placeholder: "0",
    selectOnFocus: !0,
    allowDeltaChanges: !0,
    get disabled() {
      return get(disabled);
    }
  });
  var span = sibling(node, 4), text2 = child(span);
  template_effect(() => {
    set_attribute(span, "data-level", $$props.section.prop), set_attribute(span, "data-slots", $$props.section.slots), set_text(text2, $$props.section.slots);
  }), append($$anchor, div), pop();
}
__name(SpellSlotUses, "SpellSlotUses");
var root$33 = /* @__PURE__ */ template('<a class="pip spell-pip"></a>');
function SpellPip($$anchor, $$props) {
  push($$props, !0);
  let isEmpty = /* @__PURE__ */ derived(() => $$props.index >= $$props.uses), previousIsEmpty = state(null), pipEl;
  user_effect(() => {
    if (get(previousIsEmpty) === null) {
      set(previousIsEmpty, proxy(get(isEmpty)));
      return;
    }
    if (get(previousIsEmpty) !== get(isEmpty)) {
      let className = get(isEmpty) ? "animate-expended" : "animate-restored", controller = new AbortController();
      pipEl.addEventListener(
        "transitionend",
        () => {
          pipEl.classList.remove(className), controller.abort();
        },
        { signal: controller.signal }
      ), pipEl.classList.add(className), set(previousIsEmpty, proxy(get(isEmpty)));
    }
  });
  var a2 = root$33();
  a2.__click = function(...$$args) {
    $$props.onclick?.apply(this, $$args);
  }, bind_this(a2, ($$value) => pipEl = $$value, () => pipEl), template_effect(() => {
    toggle_class(a2, "inactive", get(isEmpty)), toggle_class(a2, "active", !get(isEmpty));
  }), event("mouseenter", a2, function(...$$args) {
    $$props.onmouseenter?.apply(this, $$args);
  }), event("mouseleave", a2, function(...$$args) {
    $$props.onmouseleave?.apply(this, $$args);
  }), append($$anchor, a2), pop();
}
__name(SpellPip, "SpellPip");
delegate(["click"]);
var root$32 = /* @__PURE__ */ template('<div class="pips spell-pips"><!> <span class="pip-end"></span></div>');
function SpellPips($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getSheetContext);
  function onPipClick(index2) {
    let value = index2 >= ($$props.section.uses ?? 0) ? index2 + 1 : index2;
    get(context).actor.update({
      [`system.spells.${$$props.section.prop}.value`]: value
    });
  }
  __name(onPipClick, "onPipClick");
  var div = root$32(), node = child(div);
  each(node, 17, () => ({ length: $$props.section.slots ?? 0 }), index, ($$anchor2, $$item, index2) => {
    var uses = /* @__PURE__ */ derived(() => $$props.section.uses ?? 0);
    SpellPip($$anchor2, {
      get uses() {
        return get(uses);
      },
      index: index2,
      onclick: /* @__PURE__ */ __name(() => get(context).editable && onPipClick(index2), "onclick")
    });
  }), append($$anchor, div), pop();
}
__name(SpellPips, "SpellPips");
var root$31 = /* @__PURE__ */ template('<div class="flex-row extra-small-gap"><!> <!> <!></div>');
function SpellSlotManagement($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getSheetContext);
  var div = root$31(), node = child(div);
  {
    var consequent = /* @__PURE__ */ __name(($$anchor2) => {
      SpellPips($$anchor2, {
        get section() {
          return $$props.section;
        }
      });
    }, "consequent");
    if_block(node, ($$render) => {
      get(context).spellSlotTrackerMode === CONSTANTS.SPELL_SLOT_TRACKER_MODE_PIPS && $$render(consequent);
    });
  }
  var node_1 = sibling(node, 2);
  {
    var consequent_1 = /* @__PURE__ */ __name(($$anchor2) => {
      SpellSlotUses($$anchor2, {
        get section() {
          return $$props.section;
        }
      });
    }, "consequent_1");
    if_block(node_1, ($$render) => {
      get(context).spellSlotTrackerMode === CONSTANTS.SPELL_SLOT_TRACKER_MODE_VALUE_MAX && $$render(consequent_1);
    });
  }
  var node_2 = sibling(node_1, 2);
  {
    var consequent_2 = /* @__PURE__ */ __name(($$anchor2) => {
      SpellSlotConfigButton($$anchor2, {});
    }, "consequent_2");
    if_block(node_2, ($$render) => {
      get(context).unlocked && $$render(consequent_2);
    });
  }
  append($$anchor, div), pop();
}
__name(SpellSlotManagement, "SpellSlotManagement");
var root_1$1Q = /* @__PURE__ */ template('<i class="concentration-overlay fas fa-arrow-rotate-left fa-spin fa-spin-reverse svelte-p1q0eh"></i>');
function ConcentrationOverlayIcon($$anchor, $$props) {
  push($$props, !0);
  const localize = FoundryAdapter.localize;
  var fragment = comment(), node = first_child(fragment);
  {
    var consequent = /* @__PURE__ */ __name(($$anchor2) => {
      var i2 = root_1$1Q();
      template_effect(() => set_attribute(i2, "aria-label", localize("DND5E.Concentration"))), append($$anchor2, i2);
    }, "consequent");
    if_block(node, ($$render) => {
      $$props.ctx.concentration && $$render(consequent);
    });
  }
  append($$anchor, fragment), pop();
}
__name(ConcentrationOverlayIcon, "ConcentrationOverlayIcon");
var root_5$B = /* @__PURE__ */ template('<span class="spell-primary-column-label svelte-xf2hju"> </span>'), root_3$J = /* @__PURE__ */ template("<!> <!>", 1), root_7$x = /* @__PURE__ */ template('<i class="fas fa-mortar-pestle"></i>'), root_2$W = /* @__PURE__ */ template("<!> <!> <!>", 1), root_14$5 = /* @__PURE__ */ template('<span class="truncate flex-1"> </span>'), root_12$b = /* @__PURE__ */ template("<!> <!>", 1), root_11$d = /* @__PURE__ */ template("<!> <!> <!> <!>", 1), root$30 = /* @__PURE__ */ template('<section class="spellbook-list-section"><!></section>');
function FavoriteSpellsList($$anchor, $$props) {
  push($$props, !0), getContext(CONSTANTS.SVELTE_CONTEXT.INLINE_TOGGLE_SERVICE);
  let context = /* @__PURE__ */ derived(getCharacterSheetContext), spellEntries = /* @__PURE__ */ derived(() => $$props.section.spells.map((spell) => ({
    spell,
    ctx: get(context).itemContext[spell.id],
    spellImgUrl: FoundryAdapter.getSpellImageUrl(get(context), spell)
  })));
  const searchResults = getSearchResultsContext(), localize = FoundryAdapter.localize;
  var section_1 = root$30(), node = child(section_1), data_custom_section = /* @__PURE__ */ derived(() => $$props.section.custom ? !0 : null);
  ItemTable(node, {
    get key() {
      return $$props.section.key;
    },
    get "data-custom-section"() {
      return get(data_custom_section);
    },
    header: /* @__PURE__ */ __name(($$anchor2) => {
      ItemTableHeaderRow($$anchor2, {
        children: /* @__PURE__ */ __name(($$anchor3, $$slotProps) => {
          var fragment_1 = root_2$W(), node_1 = first_child(fragment_1);
          ItemTableColumn(node_1, {
            primary: !0,
            children: /* @__PURE__ */ __name(($$anchor4, $$slotProps2) => {
              var fragment_2 = root_3$J(), node_2 = first_child(fragment_2);
              {
                var consequent = /* @__PURE__ */ __name(($$anchor5) => {
                  var text$1 = text();
                  template_effect(() => set_text(text$1, localize("TIDY5E.FavoriteSpellLevelLabel", { number: $$props.section.dataset.level }))), append($$anchor5, text$1);
                }, "consequent"), alternate = /* @__PURE__ */ __name(($$anchor5) => {
                  var span = root_5$B(), text_1 = child(span);
                  template_effect(() => set_text(text_1, localize($$props.section.label))), append($$anchor5, span);
                }, "alternate");
                if_block(node_2, ($$render) => {
                  $$props.section.dataset["preparation.mode"] === CONSTANTS.SPELL_PREPARATION_MODE_PREPARED && $$props.section.dataset.level > 0 ? $$render(consequent) : $$render(alternate, !1);
                });
              }
              var node_3 = sibling(node_2, 2);
              {
                var consequent_1 = /* @__PURE__ */ __name(($$anchor5) => {
                  SpellSlotManagement($$anchor5, {
                    get section() {
                      return $$props.section;
                    }
                  });
                }, "consequent_1");
                if_block(node_3, ($$render) => {
                  $$props.section.usesSlots && $$render(consequent_1);
                });
              }
              append($$anchor4, fragment_2);
            }, "children"),
            $$slots: { default: !0 }
          });
          var node_4 = sibling(node_1, 2), title = /* @__PURE__ */ derived(() => localize("DND5E.SpellComponents"));
          ItemTableColumn(node_4, {
            baseWidth: "4.375rem",
            get title() {
              return get(title);
            },
            children: /* @__PURE__ */ __name(($$anchor4, $$slotProps2) => {
              var i2 = root_7$x();
              append($$anchor4, i2);
            }, "children"),
            $$slots: { default: !0 }
          });
          var node_5 = sibling(node_4, 2), title_1 = /* @__PURE__ */ derived(() => localize("DND5E.SpellUsage"));
          ItemTableColumn(node_5, {
            get title() {
              return get(title_1);
            },
            baseWidth: "7.5rem",
            children: /* @__PURE__ */ __name(($$anchor4, $$slotProps2) => {
              var text_2 = text();
              template_effect(() => set_text(text_2, localize("DND5E.Usage"))), append($$anchor4, text_2);
            }, "children"),
            $$slots: { default: !0 }
          }), append($$anchor3, fragment_1);
        }, "children"),
        $$slots: { default: !0 }
      });
    }, "header"),
    body: /* @__PURE__ */ __name(($$anchor2) => {
      var fragment_6 = comment(), node_6 = first_child(fragment_6);
      each(node_6, 17, () => get(spellEntries), ({ spell, ctx, spellImgUrl }) => spell.id, ($$anchor3, $$item) => {
        let spell = /* @__PURE__ */ __name(() => get($$item).spell, "spell"), ctx = /* @__PURE__ */ __name(() => get($$item).ctx, "ctx"), spellImgUrl = /* @__PURE__ */ __name(() => get($$item).spellImgUrl, "spellImgUrl");
        var contextMenu = /* @__PURE__ */ derived(() => ({
          type: CONSTANTS.CONTEXT_MENU_TYPE_ITEMS,
          uuid: spell().uuid
        })), cssClass = /* @__PURE__ */ derived(() => FoundryAdapter.getSpellRowClasses(spell())), hidden = /* @__PURE__ */ derived(() => !searchResults.show(spell().uuid));
        ItemTableRow($$anchor3, {
          get item() {
            return spell();
          },
          onMouseDown: /* @__PURE__ */ __name((event2) => FoundryAdapter.editOnMiddleClick(event2, spell()), "onMouseDown"),
          get contextMenu() {
            return get(contextMenu);
          },
          get cssClass() {
            return get(cssClass);
          },
          get hidden() {
            return get(hidden);
          },
          get favoriteId() {
            return ctx().favoriteId;
          },
          children: /* @__PURE__ */ __name(($$anchor4, $$arg0) => {
            let toggleSummary = /* @__PURE__ */ __name(() => $$arg0?.().toggleSummary, "toggleSummary");
            var fragment_8 = root_11$d(), node_7 = first_child(fragment_8);
            ItemTableCell(node_7, {
              primary: !0,
              children: /* @__PURE__ */ __name(($$anchor5, $$slotProps) => {
                var fragment_9 = root_12$b(), node_8 = first_child(fragment_9), disabled = /* @__PURE__ */ derived(() => !get(context).editable);
                ItemUseButton(node_8, {
                  get disabled() {
                    return get(disabled);
                  },
                  get item() {
                    return spell();
                  },
                  get imgUrlOverride() {
                    return spellImgUrl();
                  },
                  afterRollButton: /* @__PURE__ */ __name(($$anchor6) => {
                    ConcentrationOverlayIcon($$anchor6, {
                      get ctx() {
                        return ctx();
                      }
                    });
                  }, "afterRollButton"),
                  $$slots: { afterRollButton: !0 }
                });
                var node_9 = sibling(node_8, 2);
                ItemName(node_9, {
                  onToggle: /* @__PURE__ */ __name(() => toggleSummary()(get(context).actor), "onToggle"),
                  get item() {
                    return spell();
                  },
                  children: /* @__PURE__ */ __name(($$anchor6, $$slotProps2) => {
                    var span_1 = root_14$5(), text_3 = child(span_1);
                    template_effect(() => {
                      set_attribute(span_1, "data-tidy-item-name", spell().name), set_attribute(span_1, "data-tidy-sheet-part", CONSTANTS.SHEET_PARTS.ITEM_NAME), set_text(text_3, spell().name);
                    }), append($$anchor6, span_1);
                  }, "children"),
                  $$slots: { default: !0 }
                }), append($$anchor5, fragment_9);
              }, "children"),
              $$slots: { default: !0 }
            });
            var node_10 = sibling(node_7, 2);
            {
              var consequent_2 = /* @__PURE__ */ __name(($$anchor5) => {
                ItemTableCell($$anchor5, {
                  baseWidth: "3.125rem",
                  children: /* @__PURE__ */ __name(($$anchor6, $$slotProps) => {
                    ItemUses($$anchor6, {
                      get item() {
                        return spell();
                      }
                    });
                  }, "children"),
                  $$slots: { default: !0 }
                });
              }, "consequent_2");
              if_block(node_10, ($$render) => {
                spell().system.uses.per && $$render(consequent_2);
              });
            }
            var node_11 = sibling(node_10, 2);
            ItemTableCell(node_11, {
              baseWidth: "4.375rem",
              cssClass: "no-gap",
              children: /* @__PURE__ */ __name(($$anchor5, $$slotProps) => {
                SpellComponents($$anchor5, {
                  get spell() {
                    return spell();
                  },
                  get spellComponentLabels() {
                    return get(context).spellComponentLabels;
                  }
                });
              }, "children"),
              $$slots: { default: !0 }
            });
            var node_12 = sibling(node_11, 2), title_2 = /* @__PURE__ */ derived(() => localize("DND5E.SpellUsage"));
            ItemTableCell(node_12, {
              baseWidth: "7.5rem",
              get title() {
                return get(title_2);
              },
              children: /* @__PURE__ */ __name(($$anchor5, $$slotProps) => {
                var text_4 = text();
                template_effect(() => set_text(text_4, spell().labels.activation)), append($$anchor5, text_4);
              }, "children"),
              $$slots: { default: !0 }
            }), append($$anchor4, fragment_8);
          }, "children"),
          $$slots: { default: !0 }
        });
      }), append($$anchor2, fragment_6);
    }, "body"),
    $$slots: { header: !0, body: !0 }
  }), append($$anchor, section_1), pop();
}
__name(FavoriteSpellsList, "FavoriteSpellsList");
var root_1$1P = /* @__PURE__ */ template("<i></i>"), root$2$ = /* @__PURE__ */ template('<label><!> <div role="switch"><!></div> <input type="checkbox" class="hidden"></label>');
function TidySwitch($$anchor, $$props) {
  push($$props, !0);
  let checked = prop($$props, "checked", 11, !1), disabled = prop($$props, "disabled", 3, !1), thumbIconClass = prop($$props, "thumbIconClass", 3, void 0);
  const switchLabelId = `switch-${foundry.utils.randomID()}-label`;
  var label = root$2$();
  set_attribute(label, "id", switchLabelId);
  var node = child(label);
  snippet(node, () => $$props.children ?? noop);
  var div = sibling(node, 2);
  set_attribute(div, "aria-labelledby", switchLabelId);
  var node_1 = child(div);
  {
    var consequent = /* @__PURE__ */ __name(($$anchor2) => {
      var i2 = root_1$1P();
      template_effect(() => set_class(i2, `thumb-icon ${thumbIconClass() ?? ""}`)), append($$anchor2, i2);
    }, "consequent");
    if_block(node_1, ($$render) => {
      thumbIconClass() && $$render(consequent);
    });
  }
  var input = sibling(div, 2);
  input.__change = function(...$$args) {
    $$props.onChange?.apply(this, $$args);
  }, template_effect(() => {
    set_class(label, `tidy-switch ${$$props.class ?? "" ?? ""}`), set_attribute(label, "title", $$props.title ?? null), toggle_class(label, "disabled", disabled()), set_attribute(div, "aria-checked", checked()), set_checked(input, checked()), input.disabled = disabled();
  }), append($$anchor, label), pop();
}
__name(TidySwitch, "TidySwitch");
delegate(["change"]);
var root_2$V = /* @__PURE__ */ template("<!> <!> <!>", 1), root_7$w = /* @__PURE__ */ template('<!> <span class="align-self-center truncate"> </span>', 1), root_6$p = /* @__PURE__ */ template("<!> <!> <!>", 1);
function FavoriteEffectsList($$anchor, $$props) {
  push($$props, !0);
  let visibleEffectIdSubset = prop($$props, "visibleEffectIdSubset", 3, null);
  const localize = FoundryAdapter.localize;
  function toggleEffect(context) {
    context.effect.update({ disabled: !context.effect.disabled });
  }
  __name(toggleEffect, "toggleEffect");
  const subtitleColumnWidth = "5rem", controlsColumnWidth = "3rem";
  ItemTable($$anchor, {
    get key() {
      return $$props.section.key;
    },
    class: "favorite-effects",
    header: /* @__PURE__ */ __name(($$anchor2) => {
      ItemTableHeaderRow($$anchor2, {
        children: /* @__PURE__ */ __name(($$anchor3, $$slotProps) => {
          var fragment_2 = root_2$V(), node = first_child(fragment_2);
          ItemTableColumn(node, {
            primary: !0,
            children: /* @__PURE__ */ __name(($$anchor4, $$slotProps2) => {
              var text$1 = text();
              template_effect(() => set_text(text$1, localize($$props.section.label ?? "DND5E.Effect"))), append($$anchor4, text$1);
            }, "children"),
            $$slots: { default: !0 }
          });
          var node_1 = sibling(node, 2);
          ItemTableColumn(node_1, { baseWidth: subtitleColumnWidth });
          var node_2 = sibling(node_1, 2);
          ItemTableColumn(node_2, { baseWidth: controlsColumnWidth }), append($$anchor3, fragment_2);
        }, "children"),
        $$slots: { default: !0 }
      });
    }, "header"),
    body: /* @__PURE__ */ __name(($$anchor2) => {
      var fragment_4 = comment(), node_3 = first_child(fragment_4);
      each(node_3, 17, () => $$props.section.effects, (effectContext) => effectContext.effectId, ($$anchor3, effectContext) => {
        var contextMenu = /* @__PURE__ */ derived(() => ({
          type: CONSTANTS.CONTEXT_MENU_TYPE_EFFECTS,
          uuid: get(effectContext).effect.uuid
        })), hidden = /* @__PURE__ */ derived(() => visibleEffectIdSubset() !== null && !visibleEffectIdSubset().has(get(effectContext).effect.id)), cssClass = /* @__PURE__ */ derived(() => get(effectContext).suppressed ? "suppressed" : "");
        ItemTableRow($$anchor3, {
          onMouseDown: /* @__PURE__ */ __name((event2) => FoundryAdapter.editOnMiddleClick(event2, get(effectContext).effect), "onMouseDown"),
          get contextMenu() {
            return get(contextMenu);
          },
          get hidden() {
            return get(hidden);
          },
          get favoriteId() {
            return get(effectContext).id;
          },
          get cssClass() {
            return get(cssClass);
          },
          children: /* @__PURE__ */ __name(($$anchor4, $$slotProps) => {
            var fragment_6 = root_6$p(), node_4 = first_child(fragment_6), attributes = /* @__PURE__ */ derived(() => ({
              "data-tidy-effect-name-container": !0,
              "data-effect-id": get(effectContext).id
            }));
            ItemTableCell(node_4, {
              primary: !0,
              get attributes() {
                return get(attributes);
              },
              children: /* @__PURE__ */ __name(($$anchor5, $$slotProps2) => {
                var fragment_7 = root_7$w(), node_5 = first_child(fragment_7);
                ItemImage(node_5, {
                  get src() {
                    return get(effectContext).img;
                  }
                });
                var span = sibling(node_5, 2), text_1 = child(span);
                template_effect(() => {
                  set_attribute(span, "data-tidy-effect-name", get(effectContext).effect.name), set_text(text_1, get(effectContext).effect.name);
                }), append($$anchor5, fragment_7);
              }, "children"),
              $$slots: { default: !0 }
            });
            var node_6 = sibling(node_4, 2);
            ItemTableCell(node_6, {
              baseWidth: subtitleColumnWidth,
              children: /* @__PURE__ */ __name(($$anchor5, $$slotProps2) => {
                var text_2 = text();
                template_effect(() => set_text(text_2, get(effectContext).subtitle ?? "")), append($$anchor5, text_2);
              }, "children"),
              $$slots: { default: !0 }
            });
            var node_7 = sibling(node_6, 2);
            ItemTableCell(node_7, {
              baseWidth: controlsColumnWidth,
              children: /* @__PURE__ */ __name(($$anchor5, $$slotProps2) => {
                TidySwitch($$anchor5, {
                  get disabled() {
                    return get(effectContext).suppressed;
                  },
                  get checked() {
                    return get(effectContext).toggle.value;
                  },
                  onChange: /* @__PURE__ */ __name(() => toggleEffect(get(effectContext)), "onChange")
                });
              }, "children"),
              $$slots: { default: !0 }
            }), append($$anchor4, fragment_6);
          }, "children"),
          $$slots: { default: !0 }
        });
      }), append($$anchor2, fragment_4);
    }, "body"),
    $$slots: { header: !0, body: !0 }
  }), pop();
}
__name(FavoriteEffectsList, "FavoriteEffectsList");
const defaultItemFilters = {
  activationCostAction: {
    name: "activationCostAction",
    predicate: /* @__PURE__ */ __name((item) => !!item.system.activities?.some(
      (a2) => a2.activation?.type === CONSTANTS.ACTIVATION_COST_ACTION
    ), "predicate"),
    text: "DND5E.Action"
  },
  activationCostBonus: {
    name: "activationCostBonus",
    predicate: /* @__PURE__ */ __name((item) => !!item.system.activities?.some(
      (a2) => a2.activation?.type === CONSTANTS.ACTIVATION_COST_BONUS
    ), "predicate"),
    text: "DND5E.BonusAction"
  },
  activationCostReaction: {
    name: "activationCostReaction",
    predicate: /* @__PURE__ */ __name((item) => !!item.system.activities?.some(
      (a2) => a2.activation?.type === CONSTANTS.ACTIVATION_COST_REACTION
    ), "predicate"),
    text: "DND5E.Reaction"
  },
  activationCostLegendary: {
    name: "activationCostLegendary",
    predicate: /* @__PURE__ */ __name((item) => !!item.system.activities?.some(
      (a2) => a2.activation?.type === CONSTANTS.ACTIVATION_COST_LEGENDARY
    ), "predicate"),
    text: "DND5E.LegendaryActionLabel"
  },
  activationCostMythic: {
    name: "activationCostMythic",
    predicate: /* @__PURE__ */ __name((item) => !!item.system.activities?.some(
      (a2) => a2.activation?.type === CONSTANTS.ACTIVATION_COST_MYTHIC
    ), "predicate"),
    text: "DND5E.MythicActionLabel"
  },
  activationCostLair: {
    name: "activationCostLair",
    predicate: /* @__PURE__ */ __name((item) => !!item.system.activities?.some(
      (a2) => a2.activation?.type === CONSTANTS.ACTIVATION_COST_LAIR
    ), "predicate"),
    text: "DND5E.LairActionLabel"
  },
  activationCostCrew: {
    name: "activationCostCrew",
    predicate: /* @__PURE__ */ __name((item) => !!item.system.activities?.some(
      (a2) => a2.activation?.type === CONSTANTS.ACTIVATION_COST_CREW
    ), "predicate"),
    text: "DND5E.VehicleCrewAction"
  },
  activationCostSpecial: {
    name: "activationCostSpecial",
    predicate: /* @__PURE__ */ __name((item) => !!item.system.activities?.some(
      (a2) => a2.activation?.type === CONSTANTS.ACTIVATION_COST_SPECIAL
    ), "predicate"),
    text: "DND5E.Special"
  },
  activationCostOther: {
    name: "activationCostOther",
    predicate: /* @__PURE__ */ __name((item) => !!item.system.activities?.every(
      (a2) => ![
        CONSTANTS.ACTIVATION_COST_ACTION,
        CONSTANTS.ACTIVATION_COST_BONUS,
        CONSTANTS.ACTIVATION_COST_REACTION
      ].includes(a2.activation?.type)
    ), "predicate"),
    text: "TIDY5E.ItemFilters.Filter.Other"
  },
  ritual: {
    name: "ritual",
    predicate: /* @__PURE__ */ __name((item) => item.system.properties?.has("ritual") === !0, "predicate"),
    text: "DND5E.Ritual"
  },
  concentration: {
    name: "concentration",
    predicate: /* @__PURE__ */ __name((item) => item.system.properties?.has("concentration") === !0, "predicate"),
    text: "DND5E.Concentration",
    abbreviation: "DND5E.AbbreviationConc"
  },
  verbal: {
    name: "verbal",
    predicate: /* @__PURE__ */ __name((item) => item.system.properties?.has("vocal") === !0, "predicate"),
    text: "DND5E.ComponentVerbal"
  },
  somatic: {
    name: "somatic",
    predicate: /* @__PURE__ */ __name((item) => item.system.properties?.has("somatic") === !0, "predicate"),
    text: "DND5E.ComponentSomatic"
  },
  material: {
    name: "material",
    predicate: /* @__PURE__ */ __name((item) => item.system.properties?.has("material") === !0, "predicate"),
    text: "DND5E.ComponentMaterial"
  },
  prepared: {
    name: "prepared",
    predicate: /* @__PURE__ */ __name((item) => SpellUtils.isCantrip(item) && SpellUtils.isCantripPrepared(item) || SpellUtils.isAlwaysPrepared(item) || SpellUtils.isInnate(item) || SpellUtils.isPrepared(item), "predicate"),
    text: "DND5E.Prepared"
  },
  canCastSpell: {
    name: "canCastSpell",
    predicate: /* @__PURE__ */ __name((item) => item.type === CONSTANTS.ITEM_TYPE_SPELL && (SpellUtils.isCastableCantrip(item) || SpellUtils.isCastableSpell(item)), "predicate"),
    text: "TIDY5E.ItemFilters.CanCast"
  },
  canUse: {
    name: "canUse",
    predicate: /* @__PURE__ */ __name((item) => ItemUtils.canUse(item), "predicate"),
    text: "TIDY5E.ItemFilters.CanUse"
  },
  equipped: {
    name: "equipped",
    predicate: /* @__PURE__ */ __name((item) => item.system.equipped === !0, "predicate"),
    text: "DND5E.Equipped"
  }
};
function getItemRarityFilters() {
  const itemRarity = CONFIG.DND5E.itemRarity;
  return Object.entries(itemRarity).map(
    ([key, text2]) => ({
      name: key,
      predicate: /* @__PURE__ */ __name((item) => !FoundryAdapter.concealDetails(item) && item.system.rarity === key, "predicate"),
      text: text2
    })
  );
}
__name(getItemRarityFilters, "getItemRarityFilters");
function getItemRarityFiltersAsObject() {
  return getItemRarityFilters().reduce(
    (prev, curr) => (prev[curr.name] = curr, prev),
    {}
  );
}
__name(getItemRarityFiltersAsObject, "getItemRarityFiltersAsObject");
function getSpellSchoolFilters() {
  const spellSchools = CONFIG.DND5E.spellSchools;
  return Object.entries(spellSchools).map(
    ([key, schoolData]) => ({
      name: key,
      predicate: /* @__PURE__ */ __name((item) => item.system.school === key, "predicate"),
      text: schoolData.label
    })
  );
}
__name(getSpellSchoolFilters, "getSpellSchoolFilters");
function getSpellSchoolFiltersAsObject() {
  return getSpellSchoolFilters().reduce(
    (prev, curr) => (prev[curr.name] = curr, prev),
    {}
  );
}
__name(getSpellSchoolFiltersAsObject, "getSpellSchoolFiltersAsObject");
function getAttunementFilters() {
  return [
    {
      name: "attunement-optional",
      predicate: /* @__PURE__ */ __name((item) => !FoundryAdapter.concealDetails(item) && item.system.attunement === CONSTANTS.ATTUNEMENT_OPTIONAL, "predicate"),
      text: CONFIG.DND5E.attunementTypes[CONSTANTS.ATTUNEMENT_OPTIONAL]
    },
    {
      name: "attunement-required",
      predicate: /* @__PURE__ */ __name((item) => !FoundryAdapter.concealDetails(item) && item.system.attunement === CONSTANTS.ATTUNEMENT_REQUIRED, "predicate"),
      text: CONFIG.DND5E.attunementTypes[CONSTANTS.ATTUNEMENT_REQUIRED]
    },
    {
      name: "attuned",
      predicate: /* @__PURE__ */ __name((item) => !FoundryAdapter.concealDetails(item) && !!CONFIG.DND5E.attunementTypes[item.system.attunement] && item.system.attuned, "predicate"),
      text: "DND5E.AttunementAttuned"
    }
  ];
}
__name(getAttunementFilters, "getAttunementFilters");
function getAttunementFiltersAsObject() {
  return getAttunementFilters().reduce(
    (prev, curr) => (prev[curr.name] = curr, prev),
    {}
  );
}
__name(getAttunementFiltersAsObject, "getAttunementFiltersAsObject");
function getStandardSpellSchoolFilterCategories() {
  return {
    "DND5E.SpellComponents": [
      defaultItemFilters.verbal,
      defaultItemFilters.somatic,
      defaultItemFilters.material,
      defaultItemFilters.concentration,
      defaultItemFilters.ritual
    ],
    "DND5E.SpellPreparation.Mode": [
      defaultItemFilters.prepared,
      defaultItemFilters.canCastSpell
    ],
    "DND5E.SpellSchool": /* @__PURE__ */ __name(() => getSpellSchoolFilters(), "DND5E.SpellSchool")
  };
}
__name(getStandardSpellSchoolFilterCategories, "getStandardSpellSchoolFilterCategories");
function getActionListFilterCategories() {
  return {
    "DND5E.ItemActivationCost": [
      defaultItemFilters.activationCostAction,
      defaultItemFilters.activationCostBonus,
      defaultItemFilters.activationCostReaction,
      defaultItemFilters.activationCostLegendary,
      defaultItemFilters.activationCostMythic,
      defaultItemFilters.activationCostLair,
      defaultItemFilters.activationCostCrew,
      defaultItemFilters.activationCostSpecial
    ],
    ...getStandardSpellSchoolFilterCategories()
  };
}
__name(getActionListFilterCategories, "getActionListFilterCategories");
class ItemFilterRuntime {
  static {
    __name(this, "ItemFilterRuntime");
  }
  static _registeredItemFilters = {};
  static init() {
    ItemFilterRuntime._registeredItemFilters = {
      ...defaultItemFilters,
      ...getAttunementFiltersAsObject(),
      ...getItemRarityFiltersAsObject(),
      ...getSpellSchoolFiltersAsObject()
    };
  }
  static defaultFilterPins = {
    [CONSTANTS.SHEET_TYPE_CHARACTER]: {
      [CONSTANTS.TAB_CHARACTER_ATTRIBUTES]: /* @__PURE__ */ new Set([
        defaultItemFilters.activationCostAction.name,
        defaultItemFilters.activationCostBonus.name,
        defaultItemFilters.activationCostReaction.name,
        defaultItemFilters.canUse.name,
        defaultItemFilters.canCastSpell.name
      ]),
      [CONSTANTS.TAB_ACTOR_INVENTORY]: /* @__PURE__ */ new Set([
        defaultItemFilters.activationCostAction.name,
        defaultItemFilters.activationCostBonus.name,
        defaultItemFilters.activationCostReaction.name,
        defaultItemFilters.equipped.name
      ]),
      [CONSTANTS.TAB_CHARACTER_FEATURES]: /* @__PURE__ */ new Set([
        defaultItemFilters.activationCostAction.name,
        defaultItemFilters.activationCostBonus.name,
        defaultItemFilters.activationCostReaction.name,
        defaultItemFilters.canUse.name
      ]),
      [CONSTANTS.TAB_CHARACTER_SPELLBOOK]: /* @__PURE__ */ new Set([
        defaultItemFilters.activationCostAction.name,
        defaultItemFilters.activationCostBonus.name,
        defaultItemFilters.activationCostReaction.name,
        defaultItemFilters.concentration.name,
        defaultItemFilters.ritual.name,
        defaultItemFilters.canCastSpell.name
      ]),
      [CONSTANTS.TAB_ACTOR_ACTIONS]: /* @__PURE__ */ new Set([
        defaultItemFilters.activationCostAction.name,
        defaultItemFilters.activationCostBonus.name,
        defaultItemFilters.activationCostReaction.name
      ])
    },
    [CONSTANTS.SHEET_TYPE_NPC]: {
      [CONSTANTS.TAB_NPC_ABILITIES]: /* @__PURE__ */ new Set([
        defaultItemFilters.activationCostAction.name,
        defaultItemFilters.activationCostBonus.name,
        defaultItemFilters.activationCostReaction.name
      ]),
      [CONSTANTS.TAB_NPC_SPELLBOOK]: /* @__PURE__ */ new Set([
        defaultItemFilters.activationCostAction.name,
        defaultItemFilters.activationCostBonus.name,
        defaultItemFilters.activationCostReaction.name,
        defaultItemFilters.concentration.name,
        defaultItemFilters.ritual.name,
        defaultItemFilters.canCastSpell.name
      ]),
      [CONSTANTS.TAB_ACTOR_ACTIONS]: /* @__PURE__ */ new Set([
        defaultItemFilters.activationCostAction.name,
        defaultItemFilters.activationCostBonus.name,
        defaultItemFilters.activationCostReaction.name
      ]),
      [CONSTANTS.TAB_ACTOR_INVENTORY]: /* @__PURE__ */ new Set([
        defaultItemFilters.activationCostAction.name,
        defaultItemFilters.activationCostBonus.name,
        defaultItemFilters.activationCostReaction.name,
        defaultItemFilters.equipped.name
      ])
    },
    [CONSTANTS.SHEET_TYPE_VEHICLE]: {
      [CONSTANTS.TAB_ACTOR_ACTIONS]: /* @__PURE__ */ new Set([
        defaultItemFilters.activationCostAction.name,
        defaultItemFilters.activationCostBonus.name,
        defaultItemFilters.activationCostReaction.name
      ])
    },
    [CONSTANTS.SHEET_TYPE_CONTAINER]: {
      [CONSTANTS.TAB_CONTAINER_CONTENTS]: /* @__PURE__ */ new Set([
        defaultItemFilters.activationCostAction.name,
        defaultItemFilters.activationCostBonus.name,
        defaultItemFilters.activationCostReaction.name,
        defaultItemFilters.equipped.name
      ])
    },
    [CONSTANTS.SHEET_TYPE_GROUP]: {
      [CONSTANTS.TAB_ACTOR_INVENTORY]: /* @__PURE__ */ new Set([
        defaultItemFilters.activationCostAction.name,
        defaultItemFilters.activationCostBonus.name,
        defaultItemFilters.activationCostReaction.name,
        defaultItemFilters.equipped.name
      ])
    }
  };
  static _documentTabFilters = {
    [CONSTANTS.SHEET_TYPE_CHARACTER]: {
      [CONSTANTS.TAB_CHARACTER_ATTRIBUTES]: {
        "DND5E.ItemActivationCost": [
          defaultItemFilters.activationCostAction,
          defaultItemFilters.activationCostBonus,
          defaultItemFilters.activationCostReaction,
          defaultItemFilters.activationCostOther
        ],
        "DND5E.SpellComponents": [
          defaultItemFilters.verbal,
          defaultItemFilters.somatic,
          defaultItemFilters.material,
          defaultItemFilters.concentration,
          defaultItemFilters.ritual
        ],
        "DND5E.SpellPreparation.Mode": [
          defaultItemFilters.prepared,
          defaultItemFilters.canCastSpell
        ],
        "TIDY5E.ItemFilters.Category.Miscellaneous": /* @__PURE__ */ __name(() => [
          defaultItemFilters.equipped,
          defaultItemFilters.canUse
        ], "TIDY5E.ItemFilters.Category.Miscellaneous")
      },
      [CONSTANTS.TAB_ACTOR_INVENTORY]: {
        "DND5E.ItemActivationCost": [
          defaultItemFilters.activationCostAction,
          defaultItemFilters.activationCostBonus,
          defaultItemFilters.activationCostReaction
        ],
        "DND5E.Rarity": /* @__PURE__ */ __name(() => getItemRarityFilters(), "DND5E.Rarity"),
        "TIDY5E.ItemFilters.Category.Miscellaneous": /* @__PURE__ */ __name(() => [
          defaultItemFilters.equipped,
          ...getAttunementFilters()
        ], "TIDY5E.ItemFilters.Category.Miscellaneous")
      },
      [CONSTANTS.TAB_CHARACTER_SPELLBOOK]: {
        "DND5E.ItemActivationCost": [
          defaultItemFilters.activationCostAction,
          defaultItemFilters.activationCostBonus,
          defaultItemFilters.activationCostReaction,
          defaultItemFilters.activationCostOther
        ],
        ...getStandardSpellSchoolFilterCategories()
      },
      [CONSTANTS.TAB_CHARACTER_FEATURES]: {
        "DND5E.ItemActivationCost": [
          defaultItemFilters.activationCostAction,
          defaultItemFilters.activationCostBonus,
          defaultItemFilters.activationCostReaction
        ],
        "TIDY5E.ItemFilters.Category.Miscellaneous": /* @__PURE__ */ __name(() => [defaultItemFilters.canUse], "TIDY5E.ItemFilters.Category.Miscellaneous")
      },
      [CONSTANTS.TAB_ACTOR_ACTIONS]: { ...getActionListFilterCategories() }
    },
    [CONSTANTS.SHEET_TYPE_NPC]: {
      [CONSTANTS.TAB_NPC_SPELLBOOK]: {
        "DND5E.ItemActivationCost": [
          defaultItemFilters.activationCostAction,
          defaultItemFilters.activationCostBonus,
          defaultItemFilters.activationCostReaction,
          defaultItemFilters.activationCostOther
        ],
        ...getStandardSpellSchoolFilterCategories()
      },
      [CONSTANTS.TAB_NPC_ABILITIES]: {
        // TODO: Upgrade the filter system so that it's easier to dynamically graft in additional filter sets rather than hardcoding them in
        "DND5E.ItemActivationCost": [
          defaultItemFilters.activationCostAction,
          defaultItemFilters.activationCostBonus,
          defaultItemFilters.activationCostReaction,
          defaultItemFilters.activationCostLegendary,
          defaultItemFilters.activationCostMythic,
          defaultItemFilters.activationCostLair,
          defaultItemFilters.activationCostOther
        ],
        ...getStandardSpellSchoolFilterCategories()
      },
      [CONSTANTS.TAB_ACTOR_INVENTORY]: {
        "DND5E.ItemActivationCost": [
          defaultItemFilters.activationCostAction,
          defaultItemFilters.activationCostBonus,
          defaultItemFilters.activationCostReaction
        ],
        "DND5E.Rarity": /* @__PURE__ */ __name(() => getItemRarityFilters(), "DND5E.Rarity"),
        "TIDY5E.ItemFilters.Category.Miscellaneous": /* @__PURE__ */ __name(() => [
          defaultItemFilters.equipped,
          ...getAttunementFilters()
        ], "TIDY5E.ItemFilters.Category.Miscellaneous")
      },
      [CONSTANTS.TAB_ACTOR_ACTIONS]: { ...getActionListFilterCategories() }
    },
    [CONSTANTS.SHEET_TYPE_VEHICLE]: {
      [CONSTANTS.TAB_ACTOR_ACTIONS]: { ...getActionListFilterCategories() }
    },
    [CONSTANTS.SHEET_TYPE_CONTAINER]: {
      [CONSTANTS.TAB_CONTAINER_CONTENTS]: {
        "DND5E.ItemActivationCost": [
          defaultItemFilters.activationCostAction,
          defaultItemFilters.activationCostBonus,
          defaultItemFilters.activationCostReaction
        ],
        "DND5E.Rarity": /* @__PURE__ */ __name(() => getItemRarityFilters(), "DND5E.Rarity"),
        "TIDY5E.ItemFilters.Category.Miscellaneous": /* @__PURE__ */ __name(() => [
          defaultItemFilters.equipped,
          ...getAttunementFilters()
        ], "TIDY5E.ItemFilters.Category.Miscellaneous")
      }
    },
    [CONSTANTS.SHEET_TYPE_GROUP]: {
      [CONSTANTS.TAB_ACTOR_INVENTORY]: {
        "DND5E.ItemActivationCost": [
          defaultItemFilters.activationCostAction,
          defaultItemFilters.activationCostBonus,
          defaultItemFilters.activationCostReaction
        ],
        "DND5E.Rarity": /* @__PURE__ */ __name(() => getItemRarityFilters(), "DND5E.Rarity"),
        "TIDY5E.ItemFilters.Category.Miscellaneous": /* @__PURE__ */ __name(() => [
          defaultItemFilters.equipped,
          ...getAttunementFilters()
        ], "TIDY5E.ItemFilters.Category.Miscellaneous")
      }
    }
  };
  static getFilter(filterName) {
    return ItemFilterRuntime._registeredItemFilters[filterName];
  }
  static getDocumentFilters(document2) {
    return ItemFilterRuntime._documentTabFilters[document2.type] ?? {};
  }
  static getPinnedFiltersForTab(filterPins, filterData, tabId) {
    let pinnedFilters = /* @__PURE__ */ new Map();
    try {
      let tabFilterPins = filterPins[tabId] ?? /* @__PURE__ */ new Set();
      for (let categoryFilters of Object.values(filterData[tabId] ?? {}))
        for (let filter of categoryFilters)
          tabFilterPins.has(filter.name) && pinnedFilters.set(filter.name, filter);
    } catch (e2) {
      error(`An error occurred while searching for pinned filters on the ${tabId} tab.`, !1, e2), debug("Filter pins error troubleshooting info", { filterData, filterPins, tabId });
    }
    return Array.from(pinnedFilters.values());
  }
}
class ItemFilterService {
  static {
    __name(this, "ItemFilterService");
  }
  #_filterData = state();
  get _filterData() {
    return get(this.#_filterData);
  }
  set _filterData(value) {
    set(this.#_filterData, proxy(value));
  }
  _document;
  // TODO: Have sheets send in what they have in session storage upon construction
  constructor(filterData = {}, document2) {
    this._filterData = filterData, this._document = document2;
  }
  // TODO: Better yet, have composed store ready to use, and have it update whenever the filters update
  compose(filterGroup) {
    const group = this._getGroup(filterGroup) ?? {}, composition = Object.entries(group).map(([filterName, value]) => ({
      filter: ItemFilterRuntime.getFilter(filterName),
      value
    })).filter((f2) => typeof f2.filter?.predicate == "function").reduce(
      (prev, curr) => (item) => prev(item) && curr.filter?.predicate?.(item) == curr.value,
      (item) => !0
    );
    return (item) => {
      try {
        return composition(item);
      } catch (e2) {
        error("An error occurred while filtering an item", !1, e2), debug("Item filtering error troubleshooting info", { item, filters: group });
      }
      return !0;
    };
  }
  onFilter(filterGroup, filterName, value) {
    try {
      let group = this._getGroup(filterGroup);
      if (value === null) {
        delete group[filterName];
        return;
      }
      group[filterName] = value;
    } finally {
      this._document.render();
    }
  }
  onFilterClearAll(filterGroup) {
    isNil(filterGroup, "") ? this._filterData = {} : delete this._filterData[filterGroup], this._document.render();
  }
  _getGroup(filterGroup) {
    let group = this._filterData[filterGroup];
    return group || (this._filterData[filterGroup] = group = {}), group;
  }
  getDocumentItemFilterData() {
    const documentFilters = ItemFilterRuntime.getDocumentFilters(this._document), documentItemFilterData = {};
    for (let [tab, categories] of Object.entries(documentFilters)) {
      documentItemFilterData[tab] ??= {};
      for (let [category, filters] of Object.entries(categories)) {
        documentItemFilterData[tab][category] ??= [];
        const effectiveFilters = Array.isArray(filters) ? filters : filters();
        for (let filter of effectiveFilters)
          try {
            documentItemFilterData[tab][category].push({
              ...filter,
              value: this._filterData[tab]?.[filter.name] ?? null
            });
          } catch (e2) {
            error("An error occurred while setting up document item filter data", !1, e2), debug("Document item filter data error troubleshooting info", { tab, category, filter, effectiveFilters });
          }
      }
    }
    return documentItemFilterData;
  }
  get filterData() {
    return this._filterData;
  }
}
class ItemVisibility {
  static {
    __name(this, "ItemVisibility");
  }
  static countVisibleItems(items, uuids) {
    return uuids ? items.reduce(
      (prev, curr) => prev + (uuids.has(curr.uuid) ? 1 : 0),
      0
    ) : items.length;
  }
  static getItemsToShowAtDepth(args) {
    const filter = getContext(
      "itemFilterService"
    )?.compose(args.tabId) ?? (() => !0), items = args.sections.flatMap(
      (x2) => "items" in x2 ? x2.items : "spells" in x2 ? x2.spells : x2.actions.map((y2) => y2.item)
    ), results = new Set(
      ItemVisibility.recursivelyFindEligibleItems({
        criteria: args.criteria,
        filter,
        itemContext: args.itemContext,
        items
      })
    );
    return debug("Item IDs to show", { results, ...args }), results;
  }
  static recursivelyFindEligibleItems(args) {
    let results = [];
    for (let item of args.items) {
      const containerContents = args.itemContext[item.id]?.containerContents;
      let containedItemsToInclude = [];
      containerContents && (containedItemsToInclude = ItemVisibility.recursivelyFindEligibleItems({
        criteria: args.criteria,
        filter: args.filter,
        itemContext: containerContents.itemContext,
        items: containerContents.contents.flatMap((s2) => s2.items)
      }), results = results.concat(containedItemsToInclude)), (FoundryAdapter.searchItem(item, args.criteria) && args.filter(item) || !!containedItemsToInclude.length) && results.push(item.uuid);
    }
    return results;
  }
}
function getTidyFacilityIcon(order) {
  const tidyIcon = TidyFacilityIconsMap[order];
  if (tidyIcon)
    return {
      type: "fa-icon-class",
      className: tidyIcon
    };
  const dnd5eIconSrc = CONFIG.DND5E.facilities.orders[order]?.icon;
  return dnd5eIconSrc ? {
    type: "dnd5e-icon",
    src: dnd5eIconSrc
  } : null;
}
__name(getTidyFacilityIcon, "getTidyFacilityIcon");
const TidyFacilityIconsMap = {
  build: "fas fa-trowel-bricks",
  change: "fas fa-rotate",
  craft: "fas fa-hammer-crash",
  empower: "fas fa-wreath-laurel",
  enlarge: "fas fa-maximize",
  harvest: "fas fa-wheat",
  maintain: "fas fa-hammer-brush",
  recruit: "fas fa-handshake-angle",
  repair: "fas fa-screwdriver-wrench",
  research: "fas fa-flask",
  trade: "fas fa-coins"
};
var root_2$U = /* @__PURE__ */ template("<i></i>"), root_1$1O = /* @__PURE__ */ template('<span class="order"><!> <span class="progress-meter-label truncate"><!></span></span> <span class="counter"><span class="value"> </span> &sol; <span class="max"> </span></span>', 1), root_8$n = /* @__PURE__ */ template("<i></i>"), root_7$v = /* @__PURE__ */ template('<span class="order"><!> <span class="progress-meter-label truncate"> </span></span>'), root$2_ = /* @__PURE__ */ template('<div role="meter" aria-valuemin="0"><div class="label"><!></div></div>');
function FacilityOrderProgressMeter($$anchor, $$props) {
  push($$props, !0);
  let showCraftName = prop($$props, "showCraftName", 3, !0), icon = /* @__PURE__ */ derived(() => getTidyFacilityIcon($$props.chosen.progress.order)), orderLabel = /* @__PURE__ */ derived(() => CONFIG.DND5E.facilities.orders[$$props.chosen.progress.order]?.label ?? $$props.chosen.progress.order);
  const localize = FoundryAdapter.localize;
  var div = root$2_();
  template_effect(() => set_attribute(div, "aria-valuetext", $$props.chosen.progress.value?.toString()));
  var div_1 = child(div), node = child(div_1);
  {
    var consequent_3 = /* @__PURE__ */ __name(($$anchor2) => {
      var fragment = root_1$1O(), span = first_child(fragment), node_1 = child(span);
      {
        var consequent = /* @__PURE__ */ __name(($$anchor3) => {
          var i2 = root_2$U();
          template_effect(() => set_class(i2, clsx(get(icon).className))), append($$anchor3, i2);
        }, "consequent"), alternate = /* @__PURE__ */ __name(($$anchor3) => {
          var fragment_1 = comment(), node_2 = first_child(fragment_1);
          {
            var consequent_1 = /* @__PURE__ */ __name(($$anchor4) => {
              Dnd5eIcon($$anchor4, {
                get src() {
                  return get(icon).src;
                }
              });
            }, "consequent_1");
            if_block(
              node_2,
              ($$render) => {
                get(icon)?.type === "dnd5e-icon" && $$render(consequent_1);
              },
              !0
            );
          }
          append($$anchor3, fragment_1);
        }, "alternate");
        if_block(node_1, ($$render) => {
          get(icon)?.type === "fa-icon-class" ? $$render(consequent) : $$render(alternate, !1);
        });
      }
      var span_1 = sibling(node_1, 2), node_3 = child(span_1);
      {
        var consequent_2 = /* @__PURE__ */ __name(($$anchor3) => {
          var text$1 = text();
          template_effect(() => set_text(text$1, localize("TIDY5E.Facilities.Progress.OrderAndCraftLabel", {
            orderName: get(orderLabel),
            craftingItemName: $$props.chosen.craft.name
          }))), append($$anchor3, text$1);
        }, "consequent_2"), alternate_1 = /* @__PURE__ */ __name(($$anchor3) => {
          var text_1 = text();
          template_effect(() => set_text(text_1, get(orderLabel))), append($$anchor3, text_1);
        }, "alternate_1");
        if_block(node_3, ($$render) => {
          $$props.chosen.craft && showCraftName() ? $$render(consequent_2) : $$render(alternate_1, !1);
        });
      }
      var span_2 = sibling(span, 2), span_3 = child(span_2), text_2 = child(span_3), span_4 = sibling(span_3, 2), text_3 = child(span_4);
      template_effect(() => {
        set_text(text_2, $$props.chosen.progress.value), set_text(text_3, $$props.chosen.progress.max);
      }), append($$anchor2, fragment);
    }, "consequent_3"), alternate_3 = /* @__PURE__ */ __name(($$anchor2) => {
      var span_5 = root_7$v(), node_4 = child(span_5);
      {
        var consequent_4 = /* @__PURE__ */ __name(($$anchor3) => {
          var i_1 = root_8$n();
          template_effect(() => set_class(i_1, clsx(get(icon).className))), append($$anchor3, i_1);
        }, "consequent_4"), alternate_2 = /* @__PURE__ */ __name(($$anchor3) => {
          var fragment_5 = comment(), node_5 = first_child(fragment_5);
          {
            var consequent_5 = /* @__PURE__ */ __name(($$anchor4) => {
              Dnd5eIcon($$anchor4, {
                get src() {
                  return get(icon).src;
                }
              });
            }, "consequent_5");
            if_block(
              node_5,
              ($$render) => {
                get(icon)?.type === "dnd5e-icon" && $$render(consequent_5);
              },
              !0
            );
          }
          append($$anchor3, fragment_5);
        }, "alternate_2");
        if_block(node_4, ($$render) => {
          get(icon)?.type === "fa-icon-class" ? $$render(consequent_4) : $$render(alternate_2, !1);
        });
      }
      var span_6 = sibling(node_4, 2), text_4 = child(span_6);
      template_effect(() => set_text(text_4, get(orderLabel))), append($$anchor2, span_5);
    }, "alternate_3");
    if_block(node, ($$render) => {
      $$props.chosen.disabled ? $$render(alternate_3, !1) : $$render(consequent_3);
    });
  }
  template_effect(() => {
    set_class(div, `facility-progress-meter ${$$props.class ?? "" ?? ""}`), set_attribute(div, "aria-valuenow", $$props.chosen.progress.pct), set_attribute(div, "aria-valuemax", $$props.chosen.progress.max), set_attribute(div, "style", `--bar-percentage: ${$$props.chosen.progress.pct ?? ""}%`);
  }), append($$anchor, div), pop();
}
__name(FacilityOrderProgressMeter, "FacilityOrderProgressMeter");
class Tooltip {
  static {
    __name(this, "Tooltip");
  }
  static show(target, markup) {
    game.tooltip.activate(target, {
      text: markup,
      cssClass: "tidy5e-sheet app-v1 app-v2 classic"
    });
  }
}
var root_1$1N = /* @__PURE__ */ template('<li class="flex-row extra-small-gap align-items-center"><div class="item-image"></div> <div class="item-name truncate"> </div></li>'), root$2Z = /* @__PURE__ */ template('<div class="document-list-summary-tooltip"><h3> </h3> <hr> <ul></ul></div>');
function OccupantSummaryTooltip($$anchor, $$props) {
  push($$props, !0);
  let occupants = prop($$props, "occupants", 19, () => []), title = prop($$props, "title", 3, ""), tooltip;
  function getMarkup() {
    return tooltip.outerHTML;
  }
  __name(getMarkup, "getMarkup");
  var div = root$2Z(), h3 = child(div), text2 = child(h3), ul = sibling(h3, 4);
  return each(ul, 21, occupants, index, ($$anchor2, occupant) => {
    var li = root_1$1N(), div_1 = child(li), div_2 = sibling(div_1, 2), text_1 = child(div_2);
    template_effect(() => {
      set_attribute(div_1, "style", `background-image: url('${get(occupant).img ?? ""}')`), set_text(text_1, get(occupant).name);
    }), append($$anchor2, li);
  }), bind_this(div, ($$value) => tooltip = $$value, () => tooltip), template_effect(() => set_text(text2, title())), append($$anchor, div), pop({ getMarkup });
}
__name(OccupantSummaryTooltip, "OccupantSummaryTooltip");
var root_5$A = /* @__PURE__ */ template('<i class="fas fa-shield"></i>'), root_6$o = /* @__PURE__ */ template('<i class="fas fa-user"></i>'), root_7$u = /* @__PURE__ */ template('<i class="fas fa-horse-head"></i>'), root_2$T = /* @__PURE__ */ template("<!> <!> <!> <!> <!>", 1), root_12$a = /* @__PURE__ */ template('<span class="truncate flex-1"> </span>'), root_11$c = /* @__PURE__ */ template("<!> <!>", 1), on_mouseover$3 = /* @__PURE__ */ __name((ev, showOccupantSummaryTooltip, item, localize) => showOccupantSummaryTooltip(ev, item().system.defenders.value ?? [], localize("TIDY5E.Facilities.Defenders.Label")), "on_mouseover$3"), root_15$a = /* @__PURE__ */ template('<div data-tooltip-direction="UP"><!></div>'), on_mouseover_1 = /* @__PURE__ */ __name((ev, showOccupantSummaryTooltip, item, localize) => showOccupantSummaryTooltip(ev, item().system.hirelings.value ?? [], localize("TIDY5E.Facilities.Hirelings.Label")), "on_mouseover_1"), root_18$a = /* @__PURE__ */ template('<div data-tooltip-direction="UP"><!></div>'), on_mouseover_2 = /* @__PURE__ */ __name((ev, showOccupantSummaryTooltip, item, localize) => showOccupantSummaryTooltip(ev, item().system.trade.creatures.value ?? [], localize("TIDY5E.Facilities.Creatures.Label")), "on_mouseover_2"), root_21$5 = /* @__PURE__ */ template('<div data-tooltip-direction="UP"><!></div>'), root_10$l = /* @__PURE__ */ template("<!> <!> <!> <!> <!>", 1), root$2Y = /* @__PURE__ */ template('<div class="hidden"><!></div> <section class="facility-list-section"><!></section>', 1);
function FavoriteFacilitiesList($$anchor, $$props) {
  push($$props, !0), getContext(CONSTANTS.SVELTE_CONTEXT.INLINE_TOGGLE_SERVICE);
  let context = /* @__PURE__ */ derived(getCharacterSheetContext), itemEntries = /* @__PURE__ */ derived(() => $$props.section.items.map((item) => ({
    item,
    ctx: get(context).itemContext[item.id]
  }))), tooltipOccupants = state(proxy([])), tooltipTitle = state("");
  const searchResults = getSearchResultsContext(), ordersWidth = "10rem", defendersWidth = "2.5rem", hirelingsWidth = "2.5rem", creaturesWidth = "2.5rem", localize = FoundryAdapter.localize;
  let occupantSummaryTooltip;
  async function showOccupantSummaryTooltip(event2, uuids, title) {
    if (!uuids.length)
      return;
    const occupants = [];
    for (const uuid of uuids)
      occupants.push(await fromUuid(uuid));
    set(tooltipOccupants, proxy(occupants)), set(tooltipTitle, proxy(title)), await tick(), Tooltip.show(event2?.target ?? event2.currentTarget, occupantSummaryTooltip.getMarkup());
  }
  __name(showOccupantSummaryTooltip, "showOccupantSummaryTooltip");
  var fragment = root$2Y(), div = first_child(fragment), node = child(div);
  bind_this(
    OccupantSummaryTooltip(node, {
      get occupants() {
        return get(tooltipOccupants);
      },
      get title() {
        return get(tooltipTitle);
      }
    }),
    ($$value) => occupantSummaryTooltip = $$value,
    () => occupantSummaryTooltip
  );
  var section_1 = sibling(div, 2), node_1 = child(section_1);
  ItemTable(node_1, {
    get key() {
      return $$props.section.key;
    },
    header: /* @__PURE__ */ __name(($$anchor2) => {
      ItemTableHeaderRow($$anchor2, {
        children: /* @__PURE__ */ __name(($$anchor3, $$slotProps) => {
          var fragment_2 = root_2$T(), node_2 = first_child(fragment_2);
          ItemTableColumn(node_2, {
            primary: !0,
            children: /* @__PURE__ */ __name(($$anchor4, $$slotProps2) => {
              var text$1 = text();
              template_effect(() => set_text(text$1, localize($$props.section.label))), append($$anchor4, text$1);
            }, "children"),
            $$slots: { default: !0 }
          });
          var node_3 = sibling(node_2, 2);
          ItemTableColumn(node_3, {
            baseWidth: ordersWidth,
            children: /* @__PURE__ */ __name(($$anchor4, $$slotProps2) => {
              var text_1 = text();
              template_effect(() => set_text(text_1, localize("DND5E.FACILITY.FIELDS.order.label"))), append($$anchor4, text_1);
            }, "children"),
            $$slots: { default: !0 }
          });
          var node_4 = sibling(node_3, 2), title_1 = /* @__PURE__ */ derived(() => localize("TIDY5E.Facilities.Defenders.Label"));
          ItemTableColumn(node_4, {
            baseWidth: defendersWidth,
            get title() {
              return get(title_1);
            },
            children: /* @__PURE__ */ __name(($$anchor4, $$slotProps2) => {
              var i2 = root_5$A();
              append($$anchor4, i2);
            }, "children"),
            $$slots: { default: !0 }
          });
          var node_5 = sibling(node_4, 2), title_2 = /* @__PURE__ */ derived(() => localize("TIDY5E.Facilities.Hirelings.Label"));
          ItemTableColumn(node_5, {
            baseWidth: hirelingsWidth,
            get title() {
              return get(title_2);
            },
            children: /* @__PURE__ */ __name(($$anchor4, $$slotProps2) => {
              var i_1 = root_6$o();
              append($$anchor4, i_1);
            }, "children"),
            $$slots: { default: !0 }
          });
          var node_6 = sibling(node_5, 2), title_3 = /* @__PURE__ */ derived(() => localize("TIDY5E.Facilities.Creatures.Label"));
          ItemTableColumn(node_6, {
            baseWidth: creaturesWidth,
            get title() {
              return get(title_3);
            },
            children: /* @__PURE__ */ __name(($$anchor4, $$slotProps2) => {
              var i_2 = root_7$u();
              append($$anchor4, i_2);
            }, "children"),
            $$slots: { default: !0 }
          }), append($$anchor3, fragment_2);
        }, "children"),
        $$slots: { default: !0 }
      });
    }, "header"),
    body: /* @__PURE__ */ __name(($$anchor2) => {
      var fragment_5 = comment(), node_7 = first_child(fragment_5);
      each(node_7, 17, () => get(itemEntries), ({ item, ctx }) => item.id, ($$anchor3, $$item) => {
        let item = /* @__PURE__ */ __name(() => get($$item).item, "item"), ctx = /* @__PURE__ */ __name(() => get($$item).ctx, "ctx");
        const disabledClass = /* @__PURE__ */ derived(() => ctx()?.chosen?.disabled === !0 ? "disabled" : "");
        var contextMenu = /* @__PURE__ */ derived(() => ({
          type: CONSTANTS.CONTEXT_MENU_TYPE_ITEMS,
          uuid: item().uuid
        })), hidden = /* @__PURE__ */ derived(() => !searchResults.show(item().uuid));
        ItemTableRow($$anchor3, {
          get item() {
            return item();
          },
          get cssClass() {
            return `favorite-facility-row ${get(disabledClass) ?? ""}`;
          },
          onMouseDown: /* @__PURE__ */ __name((event2) => FoundryAdapter.editOnMiddleClick(event2, item()), "onMouseDown"),
          get contextMenu() {
            return get(contextMenu);
          },
          get hidden() {
            return get(hidden);
          },
          get favoriteId() {
            return ctx().favoriteId;
          },
          children: /* @__PURE__ */ __name(($$anchor4, $$arg0) => {
            let toggleSummary = /* @__PURE__ */ __name(() => $$arg0?.().toggleSummary, "toggleSummary");
            var fragment_7 = root_10$l(), node_8 = first_child(fragment_7);
            ItemTableCell(node_8, {
              primary: !0,
              children: /* @__PURE__ */ __name(($$anchor5, $$slotProps) => {
                var fragment_8 = root_11$c(), node_9 = first_child(fragment_8), disabled = /* @__PURE__ */ derived(() => !get(context).editable && (!ctx()?.chosen?.disabled || FoundryAdapter.userIsGm()));
                ItemUseButton(node_9, {
                  get disabled() {
                    return get(disabled);
                  },
                  get item() {
                    return item();
                  }
                });
                var node_10 = sibling(node_9, 2);
                ItemName(node_10, {
                  onToggle: /* @__PURE__ */ __name(() => toggleSummary()(get(context).actor), "onToggle"),
                  get item() {
                    return item();
                  },
                  children: /* @__PURE__ */ __name(($$anchor6, $$slotProps2) => {
                    var span = root_12$a(), text_2 = child(span);
                    template_effect(() => {
                      set_attribute(span, "data-tidy-item-name", item().name), set_attribute(span, "data-tidy-sheet-part", CONSTANTS.SHEET_PARTS.ITEM_NAME), set_text(text_2, item().name);
                    }), append($$anchor6, span);
                  }, "children"),
                  $$slots: { default: !0 }
                }), append($$anchor5, fragment_8);
              }, "children"),
              $$slots: { default: !0 }
            });
            var node_11 = sibling(node_8, 2);
            ItemTableCell(node_11, {
              baseWidth: ordersWidth,
              cssClass: "justify-content-stretch",
              children: /* @__PURE__ */ __name(($$anchor5, $$slotProps) => {
                var fragment_9 = comment();
                const chosen = /* @__PURE__ */ derived(() => ctx()?.chosen);
                var node_12 = first_child(fragment_9);
                {
                  var consequent = /* @__PURE__ */ __name(($$anchor6) => {
                    FacilityOrderProgressMeter($$anchor6, {
                      class: "flex-1",
                      get chosen() {
                        return get(chosen);
                      }
                    });
                  }, "consequent");
                  if_block(node_12, ($$render) => {
                    (get(chosen)?.progress?.max || get(chosen)?.executing) && $$render(consequent);
                  });
                }
                append($$anchor5, fragment_9);
              }, "children"),
              $$slots: { default: !0 }
            });
            var node_13 = sibling(node_11, 2);
            ItemTableCell(node_13, {
              baseWidth: defendersWidth,
              children: /* @__PURE__ */ __name(($$anchor5, $$slotProps) => {
                var div_1 = root_15$a();
                div_1.__mouseover = [
                  on_mouseover$3,
                  showOccupantSummaryTooltip,
                  item,
                  localize
                ];
                var node_14 = child(div_1);
                {
                  var consequent_1 = /* @__PURE__ */ __name(($$anchor6) => {
                    var text_3 = text();
                    template_effect(() => set_text(text_3, `${item().system.defenders.value.length ?? ""}/${item().system.defenders.max ?? ""}`)), append($$anchor6, text_3);
                  }, "consequent_1"), alternate = /* @__PURE__ */ __name(($$anchor6) => {
                    var text_4 = text("—");
                    append($$anchor6, text_4);
                  }, "alternate");
                  if_block(node_14, ($$render) => {
                    item().system.type.value === CONSTANTS.FACILITY_TYPE_SPECIAL && item().system.defenders.max ? $$render(consequent_1) : $$render(alternate, !1);
                  });
                }
                append($$anchor5, div_1);
              }, "children"),
              $$slots: { default: !0 }
            });
            var node_15 = sibling(node_13, 2);
            ItemTableCell(node_15, {
              baseWidth: hirelingsWidth,
              children: /* @__PURE__ */ __name(($$anchor5, $$slotProps) => {
                var div_2 = root_18$a();
                div_2.__mouseover = [
                  on_mouseover_1,
                  showOccupantSummaryTooltip,
                  item,
                  localize
                ];
                var node_16 = child(div_2);
                {
                  var consequent_2 = /* @__PURE__ */ __name(($$anchor6) => {
                    var text_5 = text();
                    template_effect(() => set_text(text_5, `${item().system.hirelings.value.length ?? ""}/${item().system.hirelings.max ?? ""}`)), append($$anchor6, text_5);
                  }, "consequent_2"), alternate_1 = /* @__PURE__ */ __name(($$anchor6) => {
                    var text_6 = text("—");
                    append($$anchor6, text_6);
                  }, "alternate_1");
                  if_block(node_16, ($$render) => {
                    item().system.type.value === CONSTANTS.FACILITY_TYPE_SPECIAL && item().system.hirelings.max ? $$render(consequent_2) : $$render(alternate_1, !1);
                  });
                }
                append($$anchor5, div_2);
              }, "children"),
              $$slots: { default: !0 }
            });
            var node_17 = sibling(node_15, 2);
            ItemTableCell(node_17, {
              baseWidth: creaturesWidth,
              children: /* @__PURE__ */ __name(($$anchor5, $$slotProps) => {
                var div_3 = root_21$5();
                div_3.__mouseover = [
                  on_mouseover_2,
                  showOccupantSummaryTooltip,
                  item,
                  localize
                ];
                var node_18 = child(div_3);
                {
                  var consequent_3 = /* @__PURE__ */ __name(($$anchor6) => {
                    var text_7 = text();
                    template_effect(() => set_text(text_7, `${item().system.trade.creatures.value.length ?? ""}/${item().system.trade.creatures.max ?? ""}`)), append($$anchor6, text_7);
                  }, "consequent_3"), alternate_2 = /* @__PURE__ */ __name(($$anchor6) => {
                    var text_8 = text("—");
                    append($$anchor6, text_8);
                  }, "alternate_2");
                  if_block(node_18, ($$render) => {
                    item().system.type.value === CONSTANTS.FACILITY_TYPE_SPECIAL && item().system.trade.creatures.max ? $$render(consequent_3) : $$render(alternate_2, !1);
                  });
                }
                append($$anchor5, div_3);
              }, "children"),
              $$slots: { default: !0 }
            }), append($$anchor4, fragment_7);
          }, "children"),
          $$slots: { default: !0 }
        });
      }), append($$anchor2, fragment_5);
    }, "body"),
    $$slots: { header: !0, body: !0 }
  }), append($$anchor, fragment), pop();
}
__name(FavoriteFacilitiesList, "FavoriteFacilitiesList");
delegate(["mouseover"]);
var root_5$z = /* @__PURE__ */ template('<i class="fas fa-bolt"></i>'), root_7$t = /* @__PURE__ */ template('<i class="fas fa-wand-sparkles"></i> <i class="fas fa-shield"></i>', 1), root_2$S = /* @__PURE__ */ template("<!> <!> <!> <!> <!>", 1), on_click$1g = /* @__PURE__ */ __name((event2, context, activity) => get(context).editable && activity().use({ event: event2 }), "on_click$1g"), root_11$b = /* @__PURE__ */ template('<a class="item-table-image-button"><img> <i class="fa fa-dice-d20 roll-indicator"></i></a> <span class="truncate"> </span>', 1), on_click_1$x = /* @__PURE__ */ __name((ev, context, activity) => get(context).editable && activity().item.sheet.render(!0), "on_click_1$x"), root_12$9 = /* @__PURE__ */ template('<a class="activity-item-link truncate align-self-stretch align-content-center flex-1"> </a>'), root_15$9 = /* @__PURE__ */ template("<span>—</span>"), root_17$7 = /* @__PURE__ */ template('<span class="truncate"> </span>'), root_18$9 = /* @__PURE__ */ template('<span class="truncate"> </span>'), root_10$k = /* @__PURE__ */ template("<!> <!> <!> <!> <!>", 1);
function FavoriteActivitiesList($$anchor, $$props) {
  push($$props, !0);
  const gridTemplateColumns = `
    /* Name */
    1fr
    /* Item Source */
    10rem
    /* Uses */
    2.5rem
    /* Usage */
    5rem
    /* Mod/Save */
    3.5rem
  `, localize = FoundryAdapter.localize;
  let context = /* @__PURE__ */ derived(getCharacterSheetContext), activityEntries = /* @__PURE__ */ derived(() => $$props.section.activities.map((activity) => ({ activity })));
  function activityHasUses(activity) {
    return (activity.consumption?.targets ?? []).some((t2) => (t2.value ?? 0) > 0 && t2.type === "activityUses");
  }
  __name(activityHasUses, "activityHasUses"), TidyTable($$anchor, {
    get key() {
      return $$props.section.key;
    },
    class: "favorite-activities",
    gridTemplateColumns,
    header: /* @__PURE__ */ __name(($$anchor2) => {
      TidyTableHeaderRow($$anchor2, {
        children: /* @__PURE__ */ __name(($$anchor3, $$slotProps) => {
          var fragment_2 = root_2$S(), node = first_child(fragment_2);
          TidyTableHeaderCell(node, {
            primary: !0,
            children: /* @__PURE__ */ __name(($$anchor4, $$slotProps2) => {
              var text$1 = text();
              template_effect(() => set_text(text$1, localize($$props.section.label ?? "DND5E.Effect"))), append($$anchor4, text$1);
            }, "children"),
            $$slots: { default: !0 }
          });
          var node_1 = sibling(node, 2);
          TidyTableHeaderCell(node_1, {
            children: /* @__PURE__ */ __name(($$anchor4, $$slotProps2) => {
              var text_1 = text();
              template_effect(() => set_text(text_1, localize("DOCUMENT.Item"))), append($$anchor4, text_1);
            }, "children"),
            $$slots: { default: !0 }
          });
          var node_2 = sibling(node_1, 2);
          TidyTableHeaderCell(node_2, {
            children: /* @__PURE__ */ __name(($$anchor4, $$slotProps2) => {
              var i2 = root_5$z();
              append($$anchor4, i2);
            }, "children"),
            $$slots: { default: !0 }
          });
          var node_3 = sibling(node_2, 2);
          TidyTableHeaderCell(node_3, {
            children: /* @__PURE__ */ __name(($$anchor4, $$slotProps2) => {
              var text_2 = text();
              template_effect(() => set_text(text_2, localize("DND5E.Usage"))), append($$anchor4, text_2);
            }, "children"),
            $$slots: { default: !0 }
          });
          var node_4 = sibling(node_3, 2);
          TidyTableHeaderCell(node_4, {
            children: /* @__PURE__ */ __name(($$anchor4, $$slotProps2) => {
              var fragment_6 = root_7$t();
              append($$anchor4, fragment_6);
            }, "children"),
            $$slots: { default: !0 }
          }), append($$anchor3, fragment_2);
        }, "children"),
        $$slots: { default: !0 }
      });
    }, "header"),
    body: /* @__PURE__ */ __name(($$anchor2) => {
      var fragment_7 = comment(), node_5 = first_child(fragment_7);
      each(node_5, 17, () => get(activityEntries), ({ activity }) => activity.uuid, ($$anchor3, $$item) => {
        let activity = /* @__PURE__ */ __name(() => get($$item).activity, "activity");
        var rowAttributes = /* @__PURE__ */ derived(() => ({
          "data-activity-id": activity().id,
          "data-configurable": Activities.isConfigurable(activity()),
          "data-item-id": activity().item.id,
          "data-info-card": "activity",
          "data-info-card-entity-uuid": activity().uuid
        })), hidden = /* @__PURE__ */ derived(() => $$props.visibleActivityUuidSubset !== null && !$$props.visibleActivityUuidSubset.has(activity().uuid));
        TidyTableRow($$anchor3, {
          rowClass: "activity",
          get rowAttributes() {
            return get(rowAttributes);
          },
          onmousedown: /* @__PURE__ */ __name((ev) => FoundryAdapter.editOnMiddleClick(ev, activity()), "onmousedown"),
          get hidden() {
            return get(hidden);
          },
          children: /* @__PURE__ */ __name(($$anchor4, $$slotProps) => {
            var fragment_9 = root_10$k(), node_6 = first_child(fragment_9);
            TidyTableCell(node_6, {
              primary: !0,
              children: /* @__PURE__ */ __name(($$anchor5, $$slotProps2) => {
                var fragment_10 = root_11$b(), a2 = first_child(fragment_10);
                a2.__click = [on_click$1g, context, activity];
                var img = child(a2), span = sibling(a2, 2), text_3 = child(span);
                template_effect(() => {
                  set_attribute(img, "src", activity().img), set_attribute(span, "data-tidy-activity-name", activity().name), set_attribute(span, "data-tidy-sheet-part", CONSTANTS.SHEET_PARTS.ITEM_NAME), set_text(text_3, activity().name);
                }), append($$anchor5, fragment_10);
              }, "children"),
              $$slots: { default: !0 }
            });
            var node_7 = sibling(node_6, 2);
            TidyTableCell(node_7, {
              children: /* @__PURE__ */ __name(($$anchor5, $$slotProps2) => {
                var a_1 = root_12$9();
                a_1.__click = [on_click_1$x, context, activity];
                var text_4 = child(a_1);
                template_effect(() => {
                  set_attribute(a_1, "title", activity().item.name), toggle_class(a_1, "highlight-on-hover", get(context).editable), set_text(text_4, activity().item.name);
                }), append($$anchor5, a_1);
              }, "children"),
              $$slots: { default: !0 }
            });
            var node_8 = sibling(node_7, 2);
            TidyTableCell(node_8, {
              children: /* @__PURE__ */ __name(($$anchor5, $$slotProps2) => {
                var fragment_11 = comment();
                const hasActivityUses = /* @__PURE__ */ derived(() => activityHasUses(activity()));
                var node_9 = first_child(fragment_11);
                {
                  var consequent = /* @__PURE__ */ __name(($$anchor6) => {
                    ActivityUses($$anchor6, {
                      get activity() {
                        return activity();
                      }
                    });
                  }, "consequent"), alternate = /* @__PURE__ */ __name(($$anchor6) => {
                    var span_1 = root_15$9();
                    append($$anchor6, span_1);
                  }, "alternate");
                  if_block(node_9, ($$render) => {
                    get(hasActivityUses) ? $$render(consequent) : $$render(alternate, !1);
                  });
                }
                append($$anchor5, fragment_11);
              }, "children"),
              $$slots: { default: !0 }
            });
            var node_10 = sibling(node_8, 2);
            TidyTableCell(node_10, {
              children: /* @__PURE__ */ __name(($$anchor5, $$slotProps2) => {
                var fragment_13 = comment(), node_11 = first_child(fragment_13);
                {
                  var consequent_1 = /* @__PURE__ */ __name(($$anchor6) => {
                    var span_2 = root_17$7(), text_5 = child(span_2);
                    template_effect(() => set_text(text_5, activity().activationLabels?.activation ?? "")), append($$anchor6, span_2);
                  }, "consequent_1");
                  if_block(node_11, ($$render) => {
                    activity().activation?.type && $$render(consequent_1);
                  });
                }
                append($$anchor5, fragment_13);
              }, "children"),
              $$slots: { default: !0 }
            });
            var node_12 = sibling(node_10, 2);
            TidyTableCell(node_12, {
              children: /* @__PURE__ */ __name(($$anchor5, $$slotProps2) => {
                var span_3 = root_18$9();
                const label = /* @__PURE__ */ derived(() => activity().labels.toHit ? activity().labels.toHit : activity().save?.ability && activity().save?.dc?.value ? `${FoundryAdapter.getSaveAbilityAbbreviation(activity().save)} ${activity().save.dc.value}`.toLocaleUpperCase() : "—");
                var text_6 = child(span_3);
                template_effect(() => {
                  set_attribute(span_3, "title", get(label)), set_text(text_6, get(label));
                }), append($$anchor5, span_3);
              }, "children"),
              $$slots: { default: !0 }
            }), append($$anchor4, fragment_9);
          }, "children"),
          $$slots: { default: !0 }
        });
      }), append($$anchor2, fragment_7);
    }, "body"),
    $$slots: { header: !0, body: !0 }
  }), pop();
}
__name(FavoriteActivitiesList, "FavoriteActivitiesList");
delegate(["click"]);
var root_2$R = /* @__PURE__ */ template("<!> <!> <!> <!> <!> <!>", 1), root$2X = /* @__PURE__ */ template('<div class="flex-column small-gap" data-tidy-favorites=""></div>');
function Favorites($$anchor, $$props) {
  push($$props, !0);
  let searchCriteria = prop($$props, "searchCriteria", 3, ""), context = /* @__PURE__ */ derived(getCharacterSheetContext), tabId = getContext(CONSTANTS.SVELTE_CONTEXT.TAB_ID);
  const searchResults = createSearchResultsState();
  setSearchResultsContext(searchResults), user_effect(() => {
    const sections = $$props.favorites.filter((x2) => x2.type !== CONSTANTS.FAVORITES_SECTION_TYPE_EFFECT && x2.type !== CONSTANTS.FAVORITES_SECTION_TYPE_ACTIVITY);
    searchResults.uuids = ItemVisibility.getItemsToShowAtDepth({
      criteria: searchCriteria(),
      itemContext: get(context).itemContext,
      sections,
      tabId
    });
  });
  const localize = FoundryAdapter.localize;
  var div = root$2X();
  each(div, 21, () => $$props.favorites, index, ($$anchor2, section) => {
    var fragment = comment(), node = first_child(fragment);
    {
      var consequent_6 = /* @__PURE__ */ __name(($$anchor3) => {
        var fragment_1 = root_2$R(), node_1 = first_child(fragment_1);
        {
          var consequent = /* @__PURE__ */ __name(($$anchor4) => {
            var primaryColumnName = /* @__PURE__ */ derived(() => localize(get(section).label));
            InventoryList($$anchor4, {
              get section() {
                return get(section);
              },
              get primaryColumnName() {
                return get(primaryColumnName);
              },
              lockControls: !0,
              allowFavoriteIconNextToName: !1,
              includeWeightColumn: !1
            });
          }, "consequent");
          if_block(node_1, ($$render) => {
            get(section).type === CONSTANTS.TAB_ACTOR_INVENTORY && $$render(consequent);
          });
        }
        var node_2 = sibling(node_1, 2);
        {
          var consequent_1 = /* @__PURE__ */ __name(($$anchor4) => {
            FavoriteFeaturesList($$anchor4, {
              get section() {
                return get(section);
              }
            });
          }, "consequent_1");
          if_block(node_2, ($$render) => {
            (get(section).type === CONSTANTS.FAVORITES_SECTION_TYPE_FEATURE || get(section).type === CONSTANTS.FAVORITES_SECTION_TYPE_GENERIC) && $$render(consequent_1);
          });
        }
        var node_3 = sibling(node_2, 2);
        {
          var consequent_2 = /* @__PURE__ */ __name(($$anchor4) => {
            FavoriteSpellsList($$anchor4, {
              get section() {
                return get(section);
              }
            });
          }, "consequent_2");
          if_block(node_3, ($$render) => {
            get(section).type === CONSTANTS.FAVORITES_SECTION_TYPE_SPELLBOOK && $$render(consequent_2);
          });
        }
        var node_4 = sibling(node_3, 2);
        {
          var consequent_3 = /* @__PURE__ */ __name(($$anchor4) => {
            const visibleEffectIdSubset = /* @__PURE__ */ derived(() => FoundryAdapter.searchEffects(searchCriteria(), get(section).effects.map((e2) => e2.effect)));
            FavoriteEffectsList($$anchor4, {
              get section() {
                return get(section);
              },
              get visibleEffectIdSubset() {
                return get(visibleEffectIdSubset);
              }
            });
          }, "consequent_3");
          if_block(node_4, ($$render) => {
            get(section).type === CONSTANTS.FAVORITES_SECTION_TYPE_EFFECT && $$render(consequent_3);
          });
        }
        var node_5 = sibling(node_4, 2);
        {
          var consequent_4 = /* @__PURE__ */ __name(($$anchor4) => {
            FavoriteFacilitiesList($$anchor4, {
              get section() {
                return get(section);
              }
            });
          }, "consequent_4");
          if_block(node_5, ($$render) => {
            get(section).type === CONSTANTS.FAVORITES_SECTION_TYPE_FACILITY && $$render(consequent_4);
          });
        }
        var node_6 = sibling(node_5, 2);
        {
          var consequent_5 = /* @__PURE__ */ __name(($$anchor4) => {
            const visibleActivityUuidSubset = /* @__PURE__ */ derived(() => FoundryAdapter.searchActivities(searchCriteria(), get(section).activities));
            FavoriteActivitiesList($$anchor4, {
              get section() {
                return get(section);
              },
              get visibleActivityUuidSubset() {
                return get(visibleActivityUuidSubset);
              }
            });
          }, "consequent_5");
          if_block(node_6, ($$render) => {
            get(section).type === CONSTANTS.FAVORITES_SECTION_TYPE_ACTIVITY && $$render(consequent_5);
          });
        }
        append($$anchor3, fragment_1);
      }, "consequent_6");
      if_block(node, ($$render) => {
        get(section).show && $$render(consequent_6);
      });
    }
    append($$anchor2, fragment);
  }), append($$anchor, div), pop();
}
__name(Favorites, "Favorites");
var on_change$6 = /* @__PURE__ */ __name((event2, context, $$props) => {
  event2.preventDefault(), event2.stopPropagation(), get(context).actor.update({
    [$$props.resource.srName]: event2.currentTarget.checked
  });
}, "on_change$6"), on_change_1 = /* @__PURE__ */ __name((event2, context, $$props) => {
  event2.preventDefault(), event2.stopPropagation(), get(context).actor.update({
    [$$props.resource.lrName]: event2.currentTarget.checked
  });
}, "on_change_1"), on_click$1f = /* @__PURE__ */ __name((_, configActive) => {
  set(configActive, !get(configActive));
}, "on_click$1f"), root_1$1M = /* @__PURE__ */ template('<button type="button" class="inline-icon-button resource-options svelte-1ld4o9f"><i class="fas fa-cog"></i></button>'), root$2W = /* @__PURE__ */ template('<li><h4 class="resource-name svelte-1ld4o9f"><!></h4> <div class="resource-value multiple svelte-1ld4o9f"><!> <span class="sep svelte-1ld4o9f">/</span> <!></div> <header class="resource-header svelte-1ld4o9f"><div class="resource-rest svelte-1ld4o9f"><h4 class="svelte-1ld4o9f"> </h4> <input type="checkbox" class="svelte-1ld4o9f"> <label class="checkbox svelte-1ld4o9f"> </label> <input type="checkbox" class="svelte-1ld4o9f"> <label class="checkbox svelte-1ld4o9f"> </label></div> <!></header></li>');
function Resource($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getCharacterSheetContext), appId = /* @__PURE__ */ derived(() => get(context).actor.id);
  const localize = FoundryAdapter.localize;
  let configActive = state(!1), viewingConfig = state(!1);
  var li = root$2W();
  const class_derived = /* @__PURE__ */ derived(() => `resource ${$$props.resource.cssClasses?.join(" ") ?? "" ?? ""} svelte-1ld4o9f`);
  var h4 = child(li), node = child(h4), disabled = /* @__PURE__ */ derived(() => !get(context).editable || get(context).lockSensitiveFields);
  TextInput(node, {
    get document() {
      return get(context).actor;
    },
    get field() {
      return $$props.resource.labelName;
    },
    get value() {
      return $$props.resource.label;
    },
    get placeholder() {
      return $$props.resource.placeholder;
    },
    selectOnFocus: !0,
    get disabled() {
      return get(disabled);
    }
  });
  var div = sibling(h4, 2), node_1 = child(div), value = /* @__PURE__ */ derived(() => $$props.resource.value ?? null), disabled_1 = /* @__PURE__ */ derived(() => !get(context).editable);
  TextInput(node_1, {
    class: "resource-value",
    get document() {
      return get(context).actor;
    },
    get field() {
      return $$props.resource.valueName;
    },
    get value() {
      return get(value);
    },
    placeholder: "0",
    allowDeltaChanges: !0,
    maxlength: 3,
    selectOnFocus: !0,
    get disabled() {
      return get(disabled_1);
    }
  });
  var node_2 = sibling(node_1, 4), value_1 = /* @__PURE__ */ derived(() => $$props.resource.max ?? null), disabled_2 = /* @__PURE__ */ derived(() => !get(context).editable || get(context).lockSensitiveFields);
  TextInput(node_2, {
    get document() {
      return get(context).actor;
    },
    get field() {
      return $$props.resource.maxName;
    },
    class: "resource-max",
    get value() {
      return get(value_1);
    },
    placeholder: "0",
    allowDeltaChanges: !0,
    maxlength: 3,
    selectOnFocus: !0,
    get disabled() {
      return get(disabled_2);
    }
  });
  var header = sibling(div, 2), div_1 = child(header), h4_1 = child(div_1), text2 = child(h4_1);
  template_effect(() => set_text(text2, localize("TIDY5E.RestoreOnRest")));
  var input = sibling(h4_1, 2);
  input.__change = [on_change$6, context, $$props];
  var label = sibling(input, 2);
  template_effect(() => set_attribute(label, "title", localize("TIDY5E.ShortRest")));
  var text_1 = child(label);
  template_effect(() => set_text(text_1, localize("DND5E.RestS")));
  var input_1 = sibling(label, 2);
  input_1.__change = [on_change_1, context, $$props];
  var label_1 = sibling(input_1, 2);
  template_effect(() => set_attribute(label_1, "title", localize("TIDY5E.LongRest")));
  var text_2 = child(label_1);
  template_effect(() => set_text(text_2, localize("DND5E.RestL")));
  var node_3 = sibling(div_1, 2);
  {
    var consequent = /* @__PURE__ */ __name(($$anchor2) => {
      var button = root_1$1M();
      button.__click = [on_click$1f, configActive], template_effect(() => {
        set_attribute(button, "tabindex", settings.value.useAccessibleKeyboardSupport ? 0 : -1), toggle_class(button, "active", get(configActive));
      }), append($$anchor2, button);
    }, "consequent");
    if_block(node_3, ($$render) => {
      get(context).editable && !get(context).lockSensitiveFields && $$render(consequent);
    });
  }
  template_effect(() => {
    set_class(li, get(class_derived)), set_attribute(li, "data-tidy-sheet-part", CONSTANTS.SHEET_PARTS.RESOURCE), toggle_class(h4, "hidden", get(viewingConfig) || get(configActive)), toggle_class(div, "hidden", get(viewingConfig) || get(configActive)), toggle_class(header, "active", get(configActive)), set_attribute(input, "id", `${get(appId) ?? ""}-${$$props.resource.name ?? ""}-sr`), set_checked(input, $$props.resource.sr), input.disabled = !get(context).editable || get(context).lockSensitiveFields, set_attribute(input, "data-tidy-field", $$props.resource.srName), set_attribute(label, "for", `${get(appId) ?? ""}-${$$props.resource.name ?? ""}-sr`), set_attribute(input_1, "id", `${get(appId) ?? ""}-${$$props.resource.name ?? ""}-lr`), set_checked(input_1, $$props.resource.lr), input_1.disabled = !get(context).editable || get(context).lockSensitiveFields, set_attribute(input_1, "data-tidy-field", $$props.resource.lrName), set_attribute(label_1, "for", `${get(appId) ?? ""}-${$$props.resource.name ?? ""}-lr`);
  }), event("mouseenter", header, () => set(viewingConfig, !0)), event("mouseleave", header, () => set(viewingConfig, !1)), append($$anchor, li), pop();
}
__name(Resource, "Resource");
delegate(["change", "click"]);
var root$2V = /* @__PURE__ */ template('<ul class="resources svelte-1swh5wo"></ul>');
function Resources($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getCharacterSheetContext);
  var ul = root$2V();
  each(ul, 21, () => get(context).tidyResources, index, ($$anchor2, resource) => {
    Resource($$anchor2, {
      get resource() {
        return get(resource);
      }
    });
  }), template_effect(() => set_attribute(ul, "data-tidy-sheet-part", CONSTANTS.SHEET_PARTS.RESOURCES_CONTAINER)), append($$anchor, ul), pop();
}
__name(Resources, "Resources");
var root$2U = /* @__PURE__ */ template("<section><!></section>");
function UtilityToolbar($$anchor, $$props) {
  push($$props, !0);
  var section = root$2U(), node = child(section);
  snippet(node, () => $$props.children ?? noop), template_effect(() => {
    set_class(section, `utility-toolbar ${$$props.class ?? "" ?? ""} svelte-1jwzmnw`), set_attribute(section, "data-tidy-sheet-part", CONSTANTS.SHEET_PARTS.UTILITY_TOOLBAR);
  }), append($$anchor, section), pop();
}
__name(UtilityToolbar, "UtilityToolbar");
var on_click$1e = /* @__PURE__ */ __name((ev, $$props, context, sections) => $$props.onExecute?.({
  event: ev,
  context: get(context),
  sections: sections()
}), "on_click$1e"), root_1$1L = /* @__PURE__ */ template("<i></i>"), root$2T = /* @__PURE__ */ template('<button type="button" class="inline-icon-button"><!> <!></button>');
function UtilityToolbarCommand($$anchor, $$props) {
  push($$props, !0);
  let title = prop($$props, "title", 3, void 0), iconClass = prop($$props, "iconClass", 3, void 0), text$1 = prop($$props, "text", 3, void 0), visible = prop($$props, "visible", 3, !0), sections = prop($$props, "sections", 19, () => []);
  const context = /* @__PURE__ */ derived(getSheetContext);
  var button = root$2T();
  button.__click = [on_click$1e, $$props, context, sections];
  var node = child(button);
  {
    var consequent = /* @__PURE__ */ __name(($$anchor2) => {
      var i2 = root_1$1L();
      template_effect(() => set_class(i2, clsx(iconClass()))), append($$anchor2, i2);
    }, "consequent");
    if_block(node, ($$render) => {
      isNil(iconClass(), "") || $$render(consequent);
    });
  }
  var node_1 = sibling(node, 2);
  {
    var consequent_1 = /* @__PURE__ */ __name(($$anchor2) => {
      var text_1 = text();
      template_effect(() => set_text(text_1, text$1())), append($$anchor2, text_1);
    }, "consequent_1");
    if_block(node_1, ($$render) => {
      isNil(text$1(), "") || $$render(consequent_1);
    });
  }
  template_effect(() => {
    set_attribute(button, "title", title()), set_attribute(button, "tabindex", settings.value.useAccessibleKeyboardSupport ? 0 : -1), set_attribute(button, "data-tidy-sheet-part", CONSTANTS.SHEET_PARTS.UTILITY_TOOLBAR_COMMAND), toggle_class(button, "hidden", !visible());
  }), append($$anchor, button), pop();
}
__name(UtilityToolbarCommand, "UtilityToolbarCommand");
delegate(["click"]);
var on_click$1d = /* @__PURE__ */ __name((_, clearSearch) => clearSearch(), "on_click$1d"), root_1$1K = /* @__PURE__ */ template('<button class="inline-icon-button search-close-button svelte-1jfram5"><i class="fas fa-times"></i></button>'), root$2S = /* @__PURE__ */ template('<div class="search-container svelte-1jfram5"><input class="search svelte-1jfram5" type="text"> <!></div>');
function Search$1($$anchor, $$props) {
  push($$props, !0);
  let value = prop($$props, "value", 15);
  async function rememberSearch() {
    onSearch?.(location, value());
  }
  __name(rememberSearch, "rememberSearch");
  async function clearSearch() {
    value(""), rememberSearch();
  }
  __name(clearSearch, "clearSearch");
  const searchFilters = getContext(CONSTANTS.SVELTE_CONTEXT.SEARCH_FILTERS), onSearch = getContext(CONSTANTS.SVELTE_CONTEXT.ON_SEARCH), location = getContext(CONSTANTS.SVELTE_CONTEXT.LOCATION), localize = FoundryAdapter.localize;
  onMount(() => {
    value(searchFilters?.get(location) ?? "");
  });
  var div = root$2S(), input = child(div);
  template_effect(() => set_attribute(input, "title", localize("TIDY5E.SearchHint"))), template_effect(() => set_attribute(input, "placeholder", localize("TIDY5E.Search")));
  var node = sibling(input, 2);
  {
    var consequent = /* @__PURE__ */ __name(($$anchor2) => {
      var button = root_1$1K();
      button.__click = [on_click$1d, clearSearch], template_effect(() => {
        set_attribute(button, "data-tidy-sheet-part", CONSTANTS.SHEET_PARTS.SEARCH_CLEAR), set_attribute(button, "tabindex", settings.value.useAccessibleKeyboardSupport ? 0 : -1);
      }), append($$anchor2, button);
    }, "consequent");
    if_block(node, ($$render) => {
      value()?.trim() !== "" && $$render(consequent);
    });
  }
  template_effect(() => {
    set_attribute(div, "data-tidy-sheet-part", CONSTANTS.SHEET_PARTS.SEARCH_CONTAINER), set_attribute(input, "data-tidy-sheet-part", CONSTANTS.SHEET_PARTS.SEARCH_INPUT);
  }), event("blur", input, (event2) => {
    event2.preventDefault(), event2.stopPropagation(), rememberSearch();
  }), bind_value(input, value), append($$anchor, div), pop();
}
__name(Search$1, "Search$1");
delegate(["click"]);
const filterCycle = [null, !0, !1];
function cycleNullTrueFalseForward(currentValue) {
  const currentValueIndex = filterCycle.indexOf(currentValue);
  return filterCycle[(currentValueIndex + 1) % filterCycle.length];
}
__name(cycleNullTrueFalseForward, "cycleNullTrueFalseForward");
function cycleNullTrueFalseBackward(currentValue) {
  const currentValueIndex = filterCycle.indexOf(currentValue);
  return filterCycle.at(currentValueIndex - 1) ?? null;
}
__name(cycleNullTrueFalseBackward, "cycleNullTrueFalseBackward");
var on_click$1c = /* @__PURE__ */ __name((_, cycleFilterForward, $$props) => cycleFilterForward($$props.filter.name, $$props.filter.value), "on_click$1c"), on_contextmenu$4 = /* @__PURE__ */ __name((__1, cycleFilterBackward, $$props) => cycleFilterBackward($$props.filter.name, $$props.filter.value), "on_contextmenu$4"), root$2R = /* @__PURE__ */ template('<button type="button" class="pinned-filter-toggle truncate"><!></button>');
function PinnedFilterToggle($$anchor, $$props) {
  push($$props, !0);
  const onFilter = getContext("onFilter");
  function cycleFilterForward(name, currentValue) {
    onFilter($$props.filterGroupName, name, cycleNullTrueFalseForward(currentValue));
  }
  __name(cycleFilterForward, "cycleFilterForward");
  function cycleFilterBackward(name, currentValue) {
    onFilter($$props.filterGroupName, name, cycleNullTrueFalseBackward(currentValue));
  }
  __name(cycleFilterBackward, "cycleFilterBackward");
  const localize = FoundryAdapter.localize;
  var button = root$2R();
  button.__click = [on_click$1c, cycleFilterForward, $$props], button.__contextmenu = [on_contextmenu$4, cycleFilterBackward, $$props], template_effect(() => set_attribute(button, "title", localize($$props.filter.text)));
  var node = child(button);
  snippet(node, () => $$props.children ?? noop), template_effect(() => {
    set_attribute(button, "tabindex", settings.value.useAccessibleKeyboardSupport ? 0 : -1), toggle_class(button, "include", $$props.filter.value === !0), toggle_class(button, "exclude", $$props.filter.value === !1);
  }), append($$anchor, button), pop();
}
__name(PinnedFilterToggle, "PinnedFilterToggle");
delegate(["click", "contextmenu"]);
var root_1$1J = /* @__PURE__ */ template('<div role="presentation" class="pinned-filter-toggles"></div>');
function PinnedFilterToggles($$anchor, $$props) {
  push($$props, !0);
  const localize = FoundryAdapter.localize;
  var fragment = comment(), node = first_child(fragment);
  {
    var consequent = /* @__PURE__ */ __name(($$anchor2) => {
      var div = root_1$1J();
      each(div, 21, () => $$props.filters, (filter) => filter.name, ($$anchor3, filter) => {
        PinnedFilterToggle($$anchor3, {
          get filterGroupName() {
            return $$props.filterGroupName;
          },
          get filter() {
            return get(filter);
          },
          children: /* @__PURE__ */ __name(($$anchor4, $$slotProps) => {
            var text$1 = text();
            template_effect(() => set_text(text$1, localize(get(filter).abbreviation ?? get(filter).text))), append($$anchor4, text$1);
          }, "children"),
          $$slots: { default: !0 }
        });
      }), append($$anchor2, div);
    }, "consequent");
    if_block(node, ($$render) => {
      $$props.filters.length && $$render(consequent);
    });
  }
  append($$anchor, fragment), pop();
}
__name(PinnedFilterToggles, "PinnedFilterToggles");
var on_click$1b = /* @__PURE__ */ __name((_, cycleFilterForward, $$props) => cycleFilterForward($$props.filter.name, $$props.filter.value), "on_click$1b"), on_contextmenu$3 = /* @__PURE__ */ __name((__1, cycleFilterBackward, $$props) => cycleFilterBackward($$props.filter.name, $$props.filter.value), "on_contextmenu$3"), root$2Q = /* @__PURE__ */ template('<button type="button" class="filter-toggle-button pill-button truncate"><!></button>');
function FilterToggleButton($$anchor, $$props) {
  push($$props, !0);
  const onFilter = getContext("onFilter");
  function cycleFilterForward(name, currentValue) {
    onFilter($$props.filterGroupName, name, cycleNullTrueFalseForward(currentValue));
  }
  __name(cycleFilterForward, "cycleFilterForward");
  function cycleFilterBackward(name, currentValue) {
    onFilter($$props.filterGroupName, name, cycleNullTrueFalseBackward(currentValue));
  }
  __name(cycleFilterBackward, "cycleFilterBackward");
  const localize = FoundryAdapter.localize;
  var button = root$2Q();
  button.__click = [on_click$1b, cycleFilterForward, $$props], button.__contextmenu = [on_contextmenu$3, cycleFilterBackward, $$props], template_effect(() => set_attribute(button, "title", localize($$props.filter.text)));
  var node = child(button);
  snippet(node, () => $$props.children ?? noop), template_effect(() => {
    set_attribute(button, "tabindex", settings.value.useAccessibleKeyboardSupport ? 0 : -1), toggle_class(button, "include", $$props.filter.value === !0), toggle_class(button, "exclude", $$props.filter.value === !1);
  }), append($$anchor, button), pop();
}
__name(FilterToggleButton, "FilterToggleButton");
delegate(["click", "contextmenu"]);
var root$2P = /* @__PURE__ */ template('<li class="button-menu-divider" role="presentation"></li>');
function ButtonMenuDivider($$anchor) {
  var li = root$2P();
  append($$anchor, li);
}
__name(ButtonMenuDivider, "ButtonMenuDivider");
var root_2$Q = /* @__PURE__ */ template('<section class="filter-group"><h4 class="filter-group-header"> </h4> <div class="filters"></div></section>'), on_click$1a = /* @__PURE__ */ __name((ev, onFilterClearAll, $$props, menuOpen) => {
  onFilterClearAll($$props.tabId), set(menuOpen, !1);
}, "on_click$1a"), root_1$1I = /* @__PURE__ */ template('<!> <!> <section class="filter-footer flex-row justify-content-center"><button type="button" class="clear-all-button pill-button flex-row extra-small-gap align-items-center"><i class="fas fa-filter-slash"></i> </button></section>', 1), root$2O = /* @__PURE__ */ template('<div role="presentation" class="filter-menu"><!></div>');
function FilterMenu($$anchor, $$props) {
  push($$props, !0);
  const localize = FoundryAdapter.localize, context = /* @__PURE__ */ derived(getSheetContext), onFilterClearAll = getContext("onFilterClearAll");
  let categories = /* @__PURE__ */ derived(() => get(context).filterData[$$props.tabId] ?? {}), hasActiveFilters = /* @__PURE__ */ derived(() => Object.entries(get(categories)).some(([_, filters]) => filters.some((f2) => f2.value !== null))), menuOpen = state(!1);
  var div = root$2O(), node = child(div), buttonClass = /* @__PURE__ */ derived(() => `filter-menu-button ${(get(hasActiveFilters) ? "has-active-filters" : "") ?? ""} ${(get(menuOpen) ? "menu-is-open" : "") ?? ""}`), title = /* @__PURE__ */ derived(() => localize("TIDY5E.ItemFilters.MenuTooltip.Filters"));
  ButtonMenu(node, {
    iconClass: "fas fa-filter",
    get buttonClass() {
      return get(buttonClass);
    },
    position: "bottom",
    anchor: "right",
    get title() {
      return get(title);
    },
    menuElement: "div",
    buttonStyle: "transparent-inline-icon",
    get open() {
      return get(menuOpen);
    },
    set open($$value) {
      set(menuOpen, proxy($$value));
    },
    children: /* @__PURE__ */ __name(($$anchor2, $$slotProps) => {
      var fragment = root_1$1I(), node_1 = first_child(fragment);
      each(node_1, 17, () => Object.entries(get(categories)), ([category, filters]) => category, ($$anchor3, $$item) => {
        let category = /* @__PURE__ */ __name(() => get($$item)[0], "category"), filters = /* @__PURE__ */ __name(() => get($$item)[1], "filters");
        var section = root_2$Q(), h4 = child(section), text$1 = child(h4);
        template_effect(() => set_text(text$1, localize(category())));
        var div_1 = sibling(h4, 2);
        each(div_1, 21, filters, (filter) => filter.text, ($$anchor4, filter) => {
          FilterToggleButton($$anchor4, {
            get filterGroupName() {
              return $$props.tabId;
            },
            get filter() {
              return get(filter);
            },
            children: /* @__PURE__ */ __name(($$anchor5, $$slotProps2) => {
              var text_1 = text();
              template_effect(() => set_text(text_1, localize(get(filter).text))), append($$anchor5, text_1);
            }, "children"),
            $$slots: { default: !0 }
          });
        }), append($$anchor3, section);
      });
      var node_2 = sibling(node_1, 2);
      ButtonMenuDivider(node_2);
      var section_1 = sibling(node_2, 2), button = child(section_1);
      button.__click = [
        on_click$1a,
        onFilterClearAll,
        $$props,
        menuOpen
      ];
      var text_2 = sibling(child(button));
      template_effect(() => set_text(text_2, ` ${localize("TIDY5E.ItemFilters.ClearAll") ?? ""}`)), append($$anchor2, fragment);
    }, "children"),
    $$slots: { default: !0 }
  }), append($$anchor, div), pop();
}
__name(FilterMenu, "FilterMenu");
delegate(["click"]);
var root_1$1H = /* @__PURE__ */ template("<!> <!> <!> <!>", 1), root$2N = /* @__PURE__ */ template('<!> <div class="scroll-container"><div class="attributes-tab-contents svelte-1nht630"><section class="side-panel svelte-1nht630"><!> <!></section> <section class="main-panel svelte-1nht630"><!> <!> <!></section></div></div>', 1);
function CharacterAttributesTab($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getCharacterSheetContext), tabId = getContext(CONSTANTS.SVELTE_CONTEXT.TAB_ID), showResources = /* @__PURE__ */ derived(() => get(context).unlocked || get(context).resources.some((x2) => !isNil(x2.value) || !isNil(x2.value, "") || !isNil(x2.max))), searchCriteria = state(""), utilityBarCommands = /* @__PURE__ */ derived(() => get(context).utilities[tabId]?.utilityToolbarCommands ?? []), favorites = /* @__PURE__ */ derived(() => SheetSections.configureFavorites(get(context).favorites, get(context).actor, tabId, SheetPreferencesService.getByType(get(context).actor.type), TidyFlags.sectionConfig.get(get(context).actor)?.[tabId]));
  var fragment = root$2N(), node = first_child(fragment);
  UtilityToolbar(node, {
    children: /* @__PURE__ */ __name(($$anchor2, $$slotProps) => {
      var fragment_1 = root_1$1H(), node_1 = first_child(fragment_1);
      Search$1(node_1, {
        get value() {
          return get(searchCriteria);
        },
        set value($$value) {
          set(searchCriteria, proxy($$value));
        }
      });
      var node_2 = sibling(node_1, 2), filters = /* @__PURE__ */ derived(() => ItemFilterRuntime.getPinnedFiltersForTab(get(context).filterPins, get(context).filterData, tabId));
      PinnedFilterToggles(node_2, {
        filterGroupName: tabId,
        get filters() {
          return get(filters);
        }
      });
      var node_3 = sibling(node_2, 2);
      FilterMenu(node_3, { tabId });
      var node_4 = sibling(node_3, 2);
      each(node_4, 17, () => get(utilityBarCommands), (command) => command.title, ($$anchor3, command) => {
        var visible = /* @__PURE__ */ derived(() => get(command).visible ?? !0);
        UtilityToolbarCommand($$anchor3, {
          get title() {
            return get(command).title;
          },
          get iconClass() {
            return get(command).iconClass;
          },
          get text() {
            return get(command).text;
          },
          get visible() {
            return get(visible);
          },
          onExecute: /* @__PURE__ */ __name((ev) => get(command).execute?.(ev), "onExecute"),
          get sections() {
            return get(favorites);
          }
        });
      }), append($$anchor2, fragment_1);
    }, "children"),
    $$slots: { default: !0 }
  });
  var div = sibling(node, 2), div_1 = child(div), section = child(div_1), node_5 = child(section), expanded = /* @__PURE__ */ derived(() => !!TidyFlags.skillsExpanded.get(get(context).actor));
  SkillsList(node_5, {
    get actor() {
      return get(context).actor;
    },
    get toggleable() {
      return settings.value.toggleEmptyCharacterSkills;
    },
    get expanded() {
      return get(expanded);
    },
    get toggleField() {
      return TidyFlags.skillsExpanded.prop;
    }
  });
  var node_6 = sibling(node_5, 2);
  {
    var consequent = /* @__PURE__ */ __name(($$anchor2) => {
      Traits($$anchor2, {
        get toggleable() {
          return settings.value.toggleEmptyCharacterTraits;
        }
      });
    }, "consequent");
    if_block(node_6, ($$render) => {
      settings.value.moveTraitsBelowCharacterResources || $$render(consequent);
    });
  }
  var section_1 = sibling(section, 2), node_7 = child(section_1);
  {
    var consequent_1 = /* @__PURE__ */ __name(($$anchor2) => {
      Resources($$anchor2, {});
    }, "consequent_1");
    if_block(node_7, ($$render) => {
      get(showResources) && $$render(consequent_1);
    });
  }
  var node_8 = sibling(node_7, 2);
  {
    var consequent_2 = /* @__PURE__ */ __name(($$anchor2) => {
      Traits($$anchor2, {
        get toggleable() {
          return settings.value.toggleEmptyCharacterTraits;
        }
      });
    }, "consequent_2");
    if_block(node_8, ($$render) => {
      settings.value.moveTraitsBelowCharacterResources && $$render(consequent_2);
    });
  }
  var node_9 = sibling(node_8, 2);
  Favorites(node_9, {
    get favorites() {
      return get(favorites);
    },
    get searchCriteria() {
      return get(searchCriteria);
    }
  }), append($$anchor, fragment), pop();
}
__name(CharacterAttributesTab, "CharacterAttributesTab");
class EventHelper {
  static {
    __name(this, "EventHelper");
  }
  static triggerContextMenu(event2, targetSelector) {
    event2.preventDefault(), event2.stopPropagation();
    const { clientX, clientY } = event2;
    event2.currentTarget.closest(targetSelector)?.dispatchEvent(
      new PointerEvent("contextmenu", {
        view: window,
        bubbles: !0,
        cancelable: !0,
        clientX,
        clientY
      })
    );
  }
}
var on_click$19 = /* @__PURE__ */ __name((ev, context, onOccupantClick) => get(context).editable && onOccupantClick(ev), "on_click$19"), root_2$P = /* @__PURE__ */ template('<i class="fa-solid fa-cog occupant-menu-icon"></i>'), root_1$1G = /* @__PURE__ */ template("<li><a><img> <!></a></li>"), on_click_1$w = /* @__PURE__ */ __name((ev, context, onSlotClick) => get(context).editable && onSlotClick(ev), "on_click_1$w"), root_3$I = /* @__PURE__ */ template("<li><a><i></i></a></li>");
function FacilityOccupant($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getCharacterSheetContext);
  function onOccupantClick(event2) {
    if (get(context).unlocked) {
      EventHelper.triggerContextMenu(event2, "[data-actor-uuid]");
      return;
    }
    $$props.occupant.sheet.render(!0);
  }
  __name(onOccupantClick, "onOccupantClick");
  async function onSlotClick(ev) {
    if (!TidyHooks.tidy5eSheetsFacilityEmptyOccupantSlotClicked(ev, get(context).actor.items.get($$props.facilityId), $$props.type, $$props.prop))
      return;
    const result = await dnd5e.applications.CompendiumBrowser.selectOne({
      filters: {
        locked: {
          documentClass: "Actor",
          types: /* @__PURE__ */ new Set(["character", "npc", "vehicle", "group"])
        }
      }
    });
    result && get(context).actor.sheet._onDropActorAddToFacility(get(context).actor.items.get($$props.facilityId), $$props.prop, result);
  }
  __name(onSlotClick, "onSlotClick");
  let hoveredFacilityOccupant = getContext(CONSTANTS.SVELTE_CONTEXT.HOVERED_FACILITY_OCCUPANT);
  var fragment = comment(), node = first_child(fragment);
  {
    var consequent_1 = /* @__PURE__ */ __name(($$anchor2) => {
      var li = root_1$1G();
      const imageTypeClassName = /* @__PURE__ */ derived(() => $$props.occupant.token ? "token" : "portrait"), imageSrc = /* @__PURE__ */ derived(() => get(imageTypeClassName) == "token" ? $$props.occupant.token.img : $$props.occupant.img);
      var a2 = child(li);
      a2.__click = [on_click$19, context, onOccupantClick];
      var img = child(a2), node_1 = sibling(img, 2);
      {
        var consequent = /* @__PURE__ */ __name(($$anchor3) => {
          var i2 = root_2$P();
          append($$anchor3, i2);
        }, "consequent");
        if_block(node_1, ($$render) => {
          get(context).unlocked && $$render(consequent);
        });
      }
      template_effect(() => {
        set_class(li, `slot occupant-slot ${$$props.type ?? ""} ${get(imageTypeClassName) ?? ""} occupant-with-menu`), set_attribute(li, "data-actor-uuid", $$props.occupant.uuid), set_attribute(li, "data-tooltip", $$props.occupant.name), set_attribute(li, "data-facility-id", $$props.facilityId), set_attribute(li, "data-facility-name", $$props.facilityName), set_attribute(li, "data-prop", $$props.prop), set_attribute(li, "data-index", $$props.index), set_attribute(li, "data-context-menu", CONSTANTS.CONTEXT_MENU_TYPE_FACILITY_OCCUPANTS), toggle_class(li, "highlight", hoveredFacilityOccupant.value === `${$$props.facilityId}-${$$props.index}-${$$props.occupant.uuid}`), toggle_class(li, "unlocked", get(context).unlocked), set_attribute(img, "src", get(imageSrc)), set_attribute(img, "alt", $$props.occupant.name);
      }), event("mouseenter", li, () => hoveredFacilityOccupant.value = `${$$props.facilityId}-${$$props.index}-${$$props.occupant.uuid}`), event("mouseleave", li, () => hoveredFacilityOccupant.value = ""), append($$anchor2, li);
    }, "consequent_1"), alternate = /* @__PURE__ */ __name(($$anchor2) => {
      var li_1 = root_3$I(), a_1 = child(li_1);
      a_1.__click = [on_click_1$w, context, onSlotClick];
      var i_1 = child(a_1);
      template_effect(() => {
        set_class(li_1, `slot occupant-slot ${$$props.type ?? ""} empty`), set_attribute(li_1, "data-index", $$props.index), set_class(i_1, clsx($$props.iconClass));
      }), append($$anchor2, li_1);
    }, "alternate");
    if_block(node, ($$render) => {
      $$props.occupant ? $$render(consequent_1) : $$render(alternate, !1);
    });
  }
  append($$anchor, fragment), pop();
}
__name(FacilityOccupant, "FacilityOccupant");
delegate(["click"]);
var on_click$18 = /* @__PURE__ */ __name((ev, context, onRosterMemberClicked) => get(context).editable && onRosterMemberClicked(ev), "on_click$18"), root_1$1F = /* @__PURE__ */ template('<i class="fa-solid fa-cog occupant-menu-icon"></i>'), root$2M = /* @__PURE__ */ template("<li><a><img> <!></a></li>");
function FacilityRosterOccupant($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getCharacterSheetContext), hoveredFacilityOccupant = getContext(CONSTANTS.SVELTE_CONTEXT.HOVERED_FACILITY_OCCUPANT);
  function onRosterMemberClicked(event2) {
    if (get(context).unlocked) {
      EventHelper.triggerContextMenu(event2, "[data-actor-uuid]");
      return;
    }
    $$props.occupant.sheet.render(!0);
  }
  __name(onRosterMemberClicked, "onRosterMemberClicked");
  const localize = FoundryAdapter.localize;
  var li = root$2M();
  template_effect(() => set_attribute(li, "data-tooltip", localize("TIDY5E.Facilities.RosterMember.Label", {
    actorName: $$props.occupant.name,
    facilityName: $$props.facilityName
  })));
  var a2 = child(li);
  a2.__click = [on_click$18, context, onRosterMemberClicked];
  var img = child(a2), node = sibling(img, 2);
  {
    var consequent = /* @__PURE__ */ __name(($$anchor2) => {
      var i2 = root_1$1F();
      append($$anchor2, i2);
    }, "consequent");
    if_block(node, ($$render) => {
      get(context).unlocked && $$render(consequent);
    });
  }
  template_effect(() => {
    set_class(li, `roster-member ${$$props.type ?? ""} occupant-with-menu`), set_attribute(li, "data-actor-uuid", $$props.occupant.uuid), set_attribute(li, "data-facility-id", $$props.facilityId), set_attribute(li, "data-facility-name", $$props.facilityName), set_attribute(li, "data-prop", $$props.prop), set_attribute(li, "data-index", $$props.index), set_attribute(li, "data-context-menu", CONSTANTS.CONTEXT_MENU_TYPE_FACILITY_OCCUPANTS), toggle_class(li, "highlight", hoveredFacilityOccupant.value === `${$$props.facilityId}-${$$props.index}-${$$props.occupant.uuid}`), toggle_class(li, "unlocked", get(context).unlocked), set_attribute(img, "src", $$props.occupant.img), set_attribute(img, "alt", $$props.occupant.name);
  }), event("mouseenter", li, () => hoveredFacilityOccupant.value = `${$$props.facilityId}-${$$props.index}-${$$props.occupant.uuid}`), event("mouseleave", li, () => hoveredFacilityOccupant.value = ""), append($$anchor, li), pop();
}
__name(FacilityRosterOccupant, "FacilityRosterOccupant");
delegate(["click"]);
var on_click$17 = /* @__PURE__ */ __name((_, context, editCraftingItem, $$props) => get(context).editable && editCraftingItem($$props.chosen.craft.uuid), "on_click$17"), root_2$O = /* @__PURE__ */ template('<a><img class="crafting-item"></a>'), root_1$1E = /* @__PURE__ */ template('<div class="sub-header"> </div> <div class="craft-and-meter"><!> <!></div>', 1);
function FacilityOrderProgressTracker($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getCharacterSheetContext);
  const localize = FoundryAdapter.localize;
  function onMouseEnterCraft(event2, item) {
    TidyHooks.tidy5eSheetsItemHoverOn(event2, item);
  }
  __name(onMouseEnterCraft, "onMouseEnterCraft");
  function onMouseLeaveCraft(event2, item) {
    TidyHooks.tidy5eSheetsItemHoverOff(event2, item);
  }
  __name(onMouseLeaveCraft, "onMouseLeaveCraft");
  async function editCraftingItem(itemUuid) {
    (await fromUuidSync(itemUuid)).sheet.render(!0);
  }
  __name(editCraftingItem, "editCraftingItem");
  var fragment = comment(), node = first_child(fragment);
  {
    var consequent_1 = /* @__PURE__ */ __name(($$anchor2) => {
      var fragment_1 = root_1$1E(), div = first_child(fragment_1), text2 = child(div);
      template_effect(() => set_text(text2, localize("DND5E.FACILITY.FIELDS.order.label")));
      var div_1 = sibling(div, 2), node_1 = child(div_1);
      {
        var consequent = /* @__PURE__ */ __name(($$anchor3) => {
          var a2 = root_2$O();
          a2.__click = [
            on_click$17,
            context,
            editCraftingItem,
            $$props
          ], set_attribute(a2, "data-info-card", "item");
          var img = child(a2);
          template_effect(() => {
            set_attribute(a2, "data-info-card-entity-uuid", $$props.chosen.craft.uuid), set_attribute(img, "data-uuid", $$props.chosen.craft.uuid), set_attribute(img, "src", $$props.chosen.craft.img), set_attribute(img, "alt", $$props.chosen.craft.name);
          }), event("mouseenter", img, (ev) => onMouseEnterCraft(ev, $$props.chosen.craft)), event("mouseleave", img, (ev) => onMouseLeaveCraft(ev, $$props.chosen.craft)), append($$anchor3, a2);
        }, "consequent");
        if_block(node_1, ($$render) => {
          $$props.chosen.craft && $$render(consequent);
        });
      }
      var node_2 = sibling(node_1, 2);
      FacilityOrderProgressMeter(node_2, {
        get chosen() {
          return $$props.chosen;
        }
      }), append($$anchor2, fragment_1);
    }, "consequent_1");
    if_block(node, ($$render) => {
      ($$props.chosen.progress.max || $$props.chosen.executing) && $$render(consequent_1);
    });
  }
  append($$anchor, fragment), pop();
}
__name(FacilityOrderProgressTracker, "FacilityOrderProgressTracker");
delegate(["click"]);
function SheetEditor($$anchor, $$props) {
  push($$props, !0);
  var fragment = comment(), node = first_child(fragment);
  html(node, () => FoundryAdapter.createEditorHtml($$props.content, $$props.target, $$props.editable)), append($$anchor, fragment), pop();
}
__name(SheetEditor, "SheetEditor");
function RerenderAfterFormSubmission($$anchor, $$props) {
  push($$props, !0);
  let stats = getContext(CONSTANTS.SVELTE_CONTEXT.STATS), andOnValueChange = prop($$props, "andOnValueChange", 3, null);
  var fragment = comment(), node = first_child(fragment);
  key_block(node, () => stats.lastSubmissionTime, ($$anchor2) => {
    var fragment_1 = comment(), node_1 = first_child(fragment_1);
    key_block(node_1, andOnValueChange, ($$anchor3) => {
      var fragment_2 = comment(), node_2 = first_child(fragment_2);
      snippet(node_2, () => $$props.children ?? noop), append($$anchor3, fragment_2);
    }), append($$anchor2, fragment_1);
  }), append($$anchor, fragment), pop();
}
__name(RerenderAfterFormSubmission, "RerenderAfterFormSubmission");
function applyDropzoneClass(node, dropzoneClass) {
  let dragCounter = 0;
  node.addEventListener("dragenter", () => {
    dragCounter++, node.classList.add(dropzoneClass);
  }), node.addEventListener("dragleave", () => {
    dragCounter--, dragCounter === 0 && node.classList.remove(dropzoneClass);
  }), node.addEventListener("drop", () => {
    dragCounter = 0, node.classList.remove(dropzoneClass);
  });
}
__name(applyDropzoneClass, "applyDropzoneClass");
var root_1$1D = /* @__PURE__ */ template("<div><!></div>");
function InlineSvg($$anchor, $$props) {
  push($$props, !0);
  let removeInlineStyles = prop($$props, "removeInlineStyles", 3, !0), svgHtml = state("");
  user_effect(() => {
    $$props.svgUrl && (async () => {
      try {
        const response = await fetch($$props.svgUrl);
        response.ok && set(svgHtml, proxy(await response.text()));
      } catch (e2) {
        error("An error occurred while getting SVG images. See devtools console for more details.", !0, e2), set(svgHtml, `<img src="${$$props.svgUrl}" alt="" />`);
      }
    })();
  });
  function preprocessSvg(node) {
    removeInlineStyles() && node.querySelector("svg")?.removeAttribute("style");
  }
  __name(preprocessSvg, "preprocessSvg");
  var fragment = comment(), node_1 = first_child(fragment);
  key_block(node_1, () => get(svgHtml), ($$anchor2) => {
    var div = root_1$1D(), node_2 = child(div);
    html(node_2, () => get(svgHtml)), action(div, ($$node) => preprocessSvg?.($$node)), template_effect(() => set_class(div, clsx($$props.class ?? ""))), append($$anchor2, div);
  }), append($$anchor, fragment), pop();
}
__name(InlineSvg, "InlineSvg");
var root_3$H = /* @__PURE__ */ template('<div class="document-name"> </div>'), on_mousedown$3 = /* @__PURE__ */ __name((ev, chosen) => FoundryAdapter.editOnMiddleClick(ev, get(chosen).facility), "on_mousedown$3"), on_click$16 = /* @__PURE__ */ __name((ev, context, useFacility, chosen) => get(context).editable && useFacility(ev, get(chosen)), "on_click$16"), root_6$n = /* @__PURE__ */ template('<img class="facility-image">'), on_click_1$v = /* @__PURE__ */ __name((ev) => EventHelper.triggerContextMenu(ev, "[data-item-id]"), "on_click_1$v"), root_7$s = /* @__PURE__ */ template('<div class="facility-occupants" data-prop="system.hirelings"><div class="sub-header"> </div> <ul class="slots hirelings"></ul></div>'), root_9$n = /* @__PURE__ */ template('<div class="facility-occupants" data-prop="system.defenders"><div class="sub-header"> </div> <ul class="slots facility-occupants defenders"></ul></div>'), root_11$a = /* @__PURE__ */ template('<div class="facility-occupants" data-prop="system.trade.creatures"><div class="sub-header"> </div> <ul class="slots creatures"></ul></div>'), root_4$v = /* @__PURE__ */ template('<li class="facility special"><div class="facility-header"><a class="facility-header-details"><!> <div class="title-and-subtitle"><span class="title"> </span> <span class="subtitle"><!></span></div></a> <a class="facility-menu highlight-on-hover"><i class="fas fa-ellipsis-vertical"></i></a></div> <!> <!> <!> <!></li>'), on_click_2$i = /* @__PURE__ */ __name((ev, context, addFacility) => get(context).editable && addFacility(ev, CONSTANTS.FACILITY_TYPE_SPECIAL), "on_click_2$i"), root_13$7 = /* @__PURE__ */ template('<li class="facility empty"><a class="highlight-on-hover"><i class="fas fa-building-columns"></i> </a></li>'), on_mousedown_1 = /* @__PURE__ */ __name((ev, chosen) => FoundryAdapter.editOnMiddleClick(ev, get(chosen).facility), "on_mousedown_1"), on_click_3$8 = /* @__PURE__ */ __name((ev, context, useFacility, chosen) => get(context).editable && useFacility(ev, get(chosen)), "on_click_3$8"), root_16$7 = /* @__PURE__ */ template('<img class="facility-image">'), on_click_4$3 = /* @__PURE__ */ __name((ev) => EventHelper.triggerContextMenu(ev, "[data-item-id]"), "on_click_4$3"), root_14$4 = /* @__PURE__ */ template('<li class="facility basic"><div class="facility-header"><a class="facility-header-details"><!> <div class="title-and-subtitle"><span class="title"> </span> <span class="subtitle"><!></span></div></a> <a class="facility-menu highlight-on-hover"><i class="fas fa-ellipsis-vertical"></i></a></div> <!></li>'), on_click_5 = /* @__PURE__ */ __name((ev, context, addFacility) => get(context).editable && addFacility(ev, CONSTANTS.FACILITY_TYPE_BASIC), "on_click_5"), root_18$8 = /* @__PURE__ */ template('<i class="fa-solid fa-trowel"></i>'), root_19$5 = /* @__PURE__ */ template('<i class="fas fa-chess-rook"></i>'), root_17$6 = /* @__PURE__ */ template('<div class="facility empty"><a class="highlight-on-hover"><!> </a></div>'), root_20$9 = /* @__PURE__ */ template('<section class="roster defenders"><h3><i class="fa-solid fa-shield"></i> </h3> <ul class="roster-list"></ul></section>'), root_24$4 = /* @__PURE__ */ template('<section class="roster hirelings"><h3><i class="fa-solid fa-users"></i> </h3> <ul class="roster-list"></ul></section>'), root_28$3 = /* @__PURE__ */ template('<section class="roster creatures"><h3><i class="fa-solid fa-horse-head"></i> </h3> <ul class="roster-list"></ul></section>'), root_32$2 = /* @__PURE__ */ template('<section class="description"><h3><i class="fa-solid fa-books"></i> Description</h3> <!></section>'), root$2L = /* @__PURE__ */ template('<div class="bastion-container scroll-container"><section class="name"><!></section> <section class="facility-panels"><section class="facilities special"><h3><i class="fas fa-building-columns"></i> <span class="counter"><span class="value"> </span> / <span class="max"> </span></span></h3> <ul class="facility-list"><!> <!></ul></section> <section class="facilities basic"><h3><i class="fas fa-chess-rook"></i> </h3> <ul class="facility-list"><!> <!></ul></section></section> <!> <!> <!> <!></div>');
function CharacterBastionTab($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getCharacterSheetContext);
  function onMouseEnterFacility(event2, item) {
    TidyHooks.tidy5eSheetsItemHoverOn(event2, item);
  }
  __name(onMouseEnterFacility, "onMouseEnterFacility");
  function onMouseLeaveFacility(event2, item) {
    TidyHooks.tidy5eSheetsItemHoverOff(event2, item);
  }
  __name(onMouseLeaveFacility, "onMouseLeaveFacility");
  let hoveredFacilityOccupant = proxy({ value: "" });
  setContext(CONSTANTS.SVELTE_CONTEXT.HOVERED_FACILITY_OCCUPANT, hoveredFacilityOccupant);
  let hasDefenders = /* @__PURE__ */ derived(() => get(context).facilities.special.chosen.some((c2) => c2.defenders.some((d2) => !d2.empty))), hasHirelings = /* @__PURE__ */ derived(() => get(context).facilities.special.chosen.some((c2) => c2.hirelings.some((d2) => !d2.empty))), hasCreatures = /* @__PURE__ */ derived(() => get(context).facilities.special.chosen.some((c2) => c2.creatures.some((d2) => !d2.empty)));
  const basicSvgFilePathRegex = /\.svg$/i;
  function isSvg(iconPath) {
    return basicSvgFilePathRegex.test(iconPath?.trim());
  }
  __name(isSvg, "isSvg");
  async function addFacility(ev, type) {
    if (!TidyHooks.tidy5eSheetsAddFacilityClicked(ev, get(context).actor, type))
      return;
    const otherType = type === CONSTANTS.FACILITY_TYPE_BASIC ? CONSTANTS.FACILITY_TYPE_SPECIAL : CONSTANTS.FACILITY_TYPE_BASIC, result = await dnd5e.applications.CompendiumBrowser.selectOne({
      filters: {
        locked: {
          types: /* @__PURE__ */ new Set(["facility"]),
          additional: {
            type: { [type]: 1, [otherType]: -1 },
            level: {
              max: get(context).actor.system.details.level
            }
          }
        }
      }
    });
    result && get(context).actor.sheet._onDropItemCreate(await fromUuid(result));
  }
  __name(addFacility, "addFacility");
  function useFacility(event2, chosen) {
    return get(context).actor.items.get(chosen.id)?.use({ legacy: !1, chooseActivity: !0, event: event2 });
  }
  __name(useFacility, "useFacility");
  const localize = FoundryAdapter.localize;
  var div = root$2L(), section = child(div), node = child(section);
  {
    var consequent = /* @__PURE__ */ __name(($$anchor2) => {
      var placeholder = /* @__PURE__ */ derived(() => localize("DND5E.Bastion.Label"));
      TextInput($$anchor2, {
        get document() {
          return get(context).actor;
        },
        field: "system.bastion.name",
        get value() {
          return get(context).system.bastion.name;
        },
        selectOnFocus: !0,
        get placeholder() {
          return get(placeholder);
        }
      });
    }, "consequent"), alternate = /* @__PURE__ */ __name(($$anchor2) => {
      var fragment_1 = comment(), node_1 = first_child(fragment_1);
      {
        var consequent_1 = /* @__PURE__ */ __name(($$anchor3) => {
          var div_1 = root_3$H(), text2 = child(div_1);
          template_effect(() => set_text(text2, get(context).system.bastion.name)), append($$anchor3, div_1);
        }, "consequent_1");
        if_block(
          node_1,
          ($$render) => {
            isNil(get(context).system.bastion.name, "") || $$render(consequent_1);
          },
          !0
        );
      }
      append($$anchor2, fragment_1);
    }, "alternate");
    if_block(node, ($$render) => {
      get(context).unlocked ? $$render(consequent) : $$render(alternate, !1);
    });
  }
  var section_1 = sibling(section, 2), section_2 = child(section_1), h3 = child(section_2), text_1 = sibling(child(h3));
  template_effect(() => set_text(text_1, ` ${localize("DND5E.FACILITY.Types.Special.Label.other") ?? ""} `));
  var span = sibling(text_1), span_1 = child(span), text_2 = child(span_1), span_2 = sibling(span_1, 2), text_3 = child(span_2), ul = sibling(h3, 2), node_2 = child(ul);
  each(node_2, 17, () => get(context).facilities.special.chosen, index, ($$anchor2, chosen) => {
    var li = root_4$v();
    const bgImg = /* @__PURE__ */ derived(() => get(chosen).img.includes("systems/dnd5e/icons/svg/items/facility.svg") ? "../../modules/tidy5e-sheet/images/facility-default-background.webp" : get(chosen).img), img = /* @__PURE__ */ derived(() => get(chosen).disabled ? get(context).config.facilities.orders.repair.icon : get(chosen).img);
    set_attribute(li, "data-info-card", "item");
    const class_directive = /* @__PURE__ */ derived(() => get(chosen).disabled && !FoundryAdapter.userIsGm());
    var div_2 = child(li), a2 = child(div_2);
    a2.__mousedown = [on_mousedown$3, chosen], a2.__click = [on_click$16, context, useFacility, chosen];
    var node_3 = child(a2);
    {
      var consequent_2 = /* @__PURE__ */ __name(($$anchor3) => {
        InlineSvg($$anchor3, {
          class: "facility-image",
          get svgUrl() {
            return get(img);
          }
        });
      }, "consequent_2"), alternate_1 = /* @__PURE__ */ __name(($$anchor3) => {
        var img_1 = root_6$n();
        template_effect(() => {
          set_attribute(img_1, "src", get(img)), set_attribute(img_1, "alt", get(chosen).name);
        }), append($$anchor3, img_1);
      }, "alternate_1");
      if_block(node_3, ($$render) => {
        isSvg(get(img)) ? $$render(consequent_2) : $$render(alternate_1, !1);
      });
    }
    var div_3 = sibling(node_3, 2), span_3 = child(div_3), text_4 = child(span_3), span_4 = sibling(span_3, 2), node_4 = child(span_4);
    html(node_4, () => get(chosen).subtitle);
    var a_1 = sibling(a2, 2);
    a_1.__click = [on_click_1$v];
    var node_5 = sibling(div_2, 2);
    {
      var consequent_3 = /* @__PURE__ */ __name(($$anchor3) => {
        var div_4 = root_7$s(), div_5 = child(div_4), text_5 = child(div_5);
        template_effect(() => set_text(text_5, localize("DND5E.FACILITY.FIELDS.hirelings.max.label")));
        var ul_1 = sibling(div_5, 2);
        each(ul_1, 21, () => get(chosen).hirelings, index, ($$anchor4, $$item, index2) => {
          let actor = /* @__PURE__ */ __name(() => get($$item).actor, "actor");
          FacilityOccupant($$anchor4, {
            get occupant() {
              return actor();
            },
            index: index2,
            type: "hireling",
            iconClass: "far fa-user",
            get facilityId() {
              return get(chosen).id;
            },
            get facilityName() {
              return get(chosen).name;
            },
            prop: "system.hirelings"
          });
        }), action(div_4, ($$node, $$action_arg) => applyDropzoneClass?.($$node, $$action_arg), () => "occupant-dropzone"), append($$anchor3, div_4);
      }, "consequent_3");
      if_block(node_5, ($$render) => {
        get(chosen).hirelings.length && $$render(consequent_3);
      });
    }
    var node_6 = sibling(node_5, 2);
    {
      var consequent_4 = /* @__PURE__ */ __name(($$anchor3) => {
        var div_6 = root_9$n(), div_7 = child(div_6), text_6 = child(div_7);
        template_effect(() => set_text(text_6, localize("DND5E.FACILITY.FIELDS.defenders.max.label")));
        var ul_2 = sibling(div_7, 2);
        each(ul_2, 21, () => get(chosen).defenders, index, ($$anchor4, $$item, index2) => {
          let actor = /* @__PURE__ */ __name(() => get($$item).actor, "actor");
          FacilityOccupant($$anchor4, {
            get occupant() {
              return actor();
            },
            index: index2,
            type: "defender",
            iconClass: "far fa-shield",
            get facilityId() {
              return get(chosen).id;
            },
            get facilityName() {
              return get(chosen).name;
            },
            prop: "system.defenders"
          });
        }), action(div_6, ($$node, $$action_arg) => applyDropzoneClass?.($$node, $$action_arg), () => "occupant-dropzone"), append($$anchor3, div_6);
      }, "consequent_4");
      if_block(node_6, ($$render) => {
        get(chosen).defenders.length && $$render(consequent_4);
      });
    }
    var node_7 = sibling(node_6, 2);
    {
      var consequent_5 = /* @__PURE__ */ __name(($$anchor3) => {
        var div_8 = root_11$a(), div_9 = child(div_8), text_7 = child(div_9);
        template_effect(() => set_text(text_7, localize("TIDY5E.Facilities.Creatures.Label")));
        var ul_3 = sibling(div_9, 2);
        each(ul_3, 21, () => get(chosen).creatures, index, ($$anchor4, $$item, index2) => {
          let actor = /* @__PURE__ */ __name(() => get($$item).actor, "actor");
          FacilityOccupant($$anchor4, {
            get occupant() {
              return actor();
            },
            index: index2,
            type: "creature",
            iconClass: "far fa-horse-head",
            get facilityId() {
              return get(chosen).id;
            },
            get facilityName() {
              return get(chosen).name;
            },
            prop: "system.trade.creatures"
          });
        }), action(div_8, ($$node, $$action_arg) => applyDropzoneClass?.($$node, $$action_arg), () => "occupant-dropzone"), append($$anchor3, div_8);
      }, "consequent_5");
      if_block(node_7, ($$render) => {
        get(chosen).creatures.length && $$render(consequent_5);
      });
    }
    var node_8 = sibling(node_7, 2);
    FacilityOrderProgressTracker(node_8, {
      get chosen() {
        return get(chosen);
      }
    }), template_effect(() => {
      set_attribute(li, "data-item-id", get(chosen).id), set_attribute(li, "data-facility-id", get(chosen).id), set_attribute(li, "data-context-menu", CONSTANTS.CONTEXT_MENU_TYPE_ITEMS), set_attribute(li, "style", `--underlay: url('${get(bgImg) ?? ""}')`), set_attribute(li, "data-info-card-entity-uuid", get(chosen).facility.uuid), toggle_class(li, "disabled", get(chosen).disabled), toggle_class(li, "no-events", get(class_directive)), toggle_class(li, "building", get(chosen).building), set_text(text_4, get(chosen).name);
    }), event("mouseenter", a2, (ev) => onMouseEnterFacility(ev, get(chosen).facility)), event("mouseleave", a2, (ev) => onMouseLeaveFacility(ev, get(chosen).facility)), append($$anchor2, li);
  });
  var node_9 = sibling(node_2, 2);
  each(node_9, 17, () => get(context).facilities.special.available, index, ($$anchor2, available) => {
    var li_1 = root_13$7(), a_2 = child(li_1);
    a_2.__click = [on_click_2$i, context, addFacility];
    var text_8 = sibling(child(a_2));
    template_effect(() => set_text(text_8, ` ${localize(get(available).label) ?? ""}`)), append($$anchor2, li_1);
  });
  var section_3 = sibling(section_2, 2), h3_1 = child(section_3), text_9 = sibling(child(h3_1));
  template_effect(() => set_text(text_9, ` ${localize("DND5E.FACILITY.Types.Basic.Label.other") ?? ""}`));
  var ul_4 = sibling(h3_1, 2), node_10 = child(ul_4);
  each(node_10, 17, () => get(context).facilities.basic.chosen, index, ($$anchor2, chosen) => {
    var li_2 = root_14$4();
    const bgImg = /* @__PURE__ */ derived(() => get(chosen).img.includes("systems/dnd5e/icons/svg/items/facility.svg") ? "../../modules/tidy5e-sheet/images/facility-default-background.webp" : get(chosen).img), img = /* @__PURE__ */ derived(() => get(chosen).disabled ? get(context).config.facilities.orders.repair.icon : get(chosen).img);
    set_attribute(li_2, "data-info-card", "item");
    const class_directive_1 = /* @__PURE__ */ derived(() => get(chosen).disabled && !FoundryAdapter.userIsGm());
    var div_10 = child(li_2), a_3 = child(div_10);
    a_3.__mousedown = [on_mousedown_1, chosen], a_3.__click = [on_click_3$8, context, useFacility, chosen];
    var node_11 = child(a_3);
    {
      var consequent_6 = /* @__PURE__ */ __name(($$anchor3) => {
        InlineSvg($$anchor3, {
          class: "facility-image",
          get svgUrl() {
            return get(img);
          }
        });
      }, "consequent_6"), alternate_2 = /* @__PURE__ */ __name(($$anchor3) => {
        var img_2 = root_16$7();
        template_effect(() => {
          set_attribute(img_2, "src", get(img)), set_attribute(img_2, "alt", get(chosen).name);
        }), append($$anchor3, img_2);
      }, "alternate_2");
      if_block(node_11, ($$render) => {
        isSvg(get(img)) ? $$render(consequent_6) : $$render(alternate_2, !1);
      });
    }
    var div_11 = sibling(node_11, 2), span_5 = child(div_11), text_10 = child(span_5), span_6 = sibling(span_5, 2), node_12 = child(span_6);
    html(node_12, () => get(chosen).subtitle);
    var a_4 = sibling(a_3, 2);
    a_4.__click = [on_click_4$3];
    var node_13 = sibling(div_10, 2);
    FacilityOrderProgressTracker(node_13, {
      get chosen() {
        return get(chosen);
      }
    }), template_effect(() => {
      set_attribute(li_2, "data-item-id", get(chosen).id), set_attribute(li_2, "data-facility-id", get(chosen).id), set_attribute(li_2, "data-context-menu", CONSTANTS.CONTEXT_MENU_TYPE_ITEMS), set_attribute(li_2, "style", `--underlay: url('${get(bgImg) ?? ""}')`), set_attribute(li_2, "data-info-card-entity-uuid", get(chosen).facility.uuid), toggle_class(li_2, "disabled", get(chosen).disabled), toggle_class(li_2, "no-events", get(class_directive_1)), toggle_class(li_2, "building", get(chosen).building), set_text(text_10, get(chosen).name);
    }), event("mouseenter", a_3, (ev) => onMouseEnterFacility(ev, get(chosen).facility)), event("mouseleave", a_3, (ev) => onMouseLeaveFacility(ev, get(chosen).facility)), append($$anchor2, li_2);
  });
  var node_14 = sibling(node_10, 2);
  each(node_14, 17, () => get(context).facilities.basic.available, index, ($$anchor2, available) => {
    var div_12 = root_17$6(), a_5 = child(div_12);
    a_5.__click = [on_click_5, context, addFacility];
    var node_15 = child(a_5);
    {
      var consequent_7 = /* @__PURE__ */ __name(($$anchor3) => {
        var i2 = root_18$8();
        append($$anchor3, i2);
      }, "consequent_7"), alternate_3 = /* @__PURE__ */ __name(($$anchor3) => {
        var i_1 = root_19$5();
        append($$anchor3, i_1);
      }, "alternate_3");
      if_block(node_15, ($$render) => {
        get(available).label.includes("build") ? $$render(consequent_7) : $$render(alternate_3, !1);
      });
    }
    var text_11 = sibling(node_15);
    template_effect(() => set_text(text_11, ` ${localize(get(available).label) ?? ""}`)), append($$anchor2, div_12);
  });
  var node_16 = sibling(section_1, 2);
  {
    var consequent_9 = /* @__PURE__ */ __name(($$anchor2) => {
      var section_4 = root_20$9(), h3_2 = child(section_4), text_12 = sibling(child(h3_2));
      template_effect(() => set_text(text_12, ` ${localize("TIDY5E.Facilities.Defenders.Label") ?? ""}`));
      var ul_5 = sibling(h3_2, 2);
      each(ul_5, 21, () => get(context).facilities.special.chosen, index, ($$anchor3, chosen) => {
        var fragment_7 = comment(), node_17 = first_child(fragment_7);
        each(node_17, 17, () => get(chosen).defenders, index, ($$anchor4, $$item, index2) => {
          let actor = /* @__PURE__ */ __name(() => get($$item).actor, "actor"), empty = /* @__PURE__ */ __name(() => get($$item).empty, "empty");
          var fragment_8 = comment(), node_18 = first_child(fragment_8);
          {
            var consequent_8 = /* @__PURE__ */ __name(($$anchor5) => {
              FacilityRosterOccupant($$anchor5, {
                get occupant() {
                  return actor();
                },
                type: "defender",
                index: index2,
                prop: "system.defenders",
                get facilityId() {
                  return get(chosen).id;
                },
                get facilityName() {
                  return get(chosen).name;
                }
              });
            }, "consequent_8");
            if_block(node_18, ($$render) => {
              empty() || $$render(consequent_8);
            });
          }
          append($$anchor4, fragment_8);
        }), append($$anchor3, fragment_7);
      }), append($$anchor2, section_4);
    }, "consequent_9");
    if_block(node_16, ($$render) => {
      get(hasDefenders) && $$render(consequent_9);
    });
  }
  var node_19 = sibling(node_16, 2);
  {
    var consequent_11 = /* @__PURE__ */ __name(($$anchor2) => {
      var section_5 = root_24$4(), h3_3 = child(section_5), text_13 = sibling(child(h3_3));
      template_effect(() => set_text(text_13, ` ${localize("TIDY5E.Facilities.Hirelings.Label") ?? ""}`));
      var ul_6 = sibling(h3_3, 2);
      each(ul_6, 21, () => get(context).facilities.special.chosen, index, ($$anchor3, chosen) => {
        var fragment_10 = comment(), node_20 = first_child(fragment_10);
        each(node_20, 17, () => get(chosen).hirelings, index, ($$anchor4, $$item, index2) => {
          let actor = /* @__PURE__ */ __name(() => get($$item).actor, "actor"), empty = /* @__PURE__ */ __name(() => get($$item).empty, "empty");
          var fragment_11 = comment(), node_21 = first_child(fragment_11);
          {
            var consequent_10 = /* @__PURE__ */ __name(($$anchor5) => {
              FacilityRosterOccupant($$anchor5, {
                get occupant() {
                  return actor();
                },
                type: "hireling",
                index: index2,
                prop: "system.hirelings",
                get facilityId() {
                  return get(chosen).id;
                },
                get facilityName() {
                  return get(chosen).name;
                }
              });
            }, "consequent_10");
            if_block(node_21, ($$render) => {
              empty() || $$render(consequent_10);
            });
          }
          append($$anchor4, fragment_11);
        }), append($$anchor3, fragment_10);
      }), append($$anchor2, section_5);
    }, "consequent_11");
    if_block(node_19, ($$render) => {
      get(hasHirelings) && $$render(consequent_11);
    });
  }
  var node_22 = sibling(node_19, 2);
  {
    var consequent_13 = /* @__PURE__ */ __name(($$anchor2) => {
      var section_6 = root_28$3(), h3_4 = child(section_6), text_14 = sibling(child(h3_4));
      template_effect(() => set_text(text_14, ` ${localize("TIDY5E.Facilities.Creatures.Label") ?? ""}`));
      var ul_7 = sibling(h3_4, 2);
      each(ul_7, 21, () => get(context).facilities.special.chosen, index, ($$anchor3, chosen) => {
        var fragment_13 = comment(), node_23 = first_child(fragment_13);
        each(node_23, 17, () => get(chosen).creatures, index, ($$anchor4, $$item, index2) => {
          let actor = /* @__PURE__ */ __name(() => get($$item).actor, "actor"), empty = /* @__PURE__ */ __name(() => get($$item).empty, "empty");
          var fragment_14 = comment(), node_24 = first_child(fragment_14);
          {
            var consequent_12 = /* @__PURE__ */ __name(($$anchor5) => {
              FacilityRosterOccupant($$anchor5, {
                get occupant() {
                  return actor();
                },
                type: "creature",
                index: index2,
                prop: "system.trade.creatures",
                get facilityId() {
                  return get(chosen).id;
                },
                get facilityName() {
                  return get(chosen).name;
                }
              });
            }, "consequent_12");
            if_block(node_24, ($$render) => {
              empty() || $$render(consequent_12);
            });
          }
          append($$anchor4, fragment_14);
        }), append($$anchor3, fragment_13);
      }), append($$anchor2, section_6);
    }, "consequent_13");
    if_block(node_22, ($$render) => {
      get(hasCreatures) && $$render(consequent_13);
    });
  }
  var node_25 = sibling(node_22, 2), andOnValueChange = /* @__PURE__ */ derived(() => get(context).bastion.description ?? "");
  RerenderAfterFormSubmission(node_25, {
    get andOnValueChange() {
      return get(andOnValueChange);
    },
    children: /* @__PURE__ */ __name(($$anchor2, $$slotProps) => {
      var section_7 = root_32$2(), node_26 = sibling(child(section_7), 2);
      SheetEditor(node_26, {
        get content() {
          return get(context).bastion.description;
        },
        target: "system.bastion.description",
        get editable() {
          return get(context).editable;
        }
      }), action(section_7, ($$node) => get(context).activateEditors?.($$node)), append($$anchor2, section_7);
    }, "children"),
    $$slots: { default: !0 }
  }), template_effect(() => {
    set_text(text_2, get(context).facilities.special.value), set_text(text_3, get(context).facilities.special.max);
  }), append($$anchor, div), pop();
}
__name(CharacterBastionTab, "CharacterBastionTab");
delegate(["mousedown", "click"]);
var root$2K = /* @__PURE__ */ template('<i class="fas fa-bookmark icon-fav no-pointer-events svelte-1dblvwn"></i>');
function GridPaneFavoriteIcon($$anchor, $$props) {
  push($$props, !1);
  const localize = FoundryAdapter.localize;
  init();
  var i2 = root$2K();
  template_effect(() => set_attribute(i2, "title", localize("TIDY5E.Favorite"))), append($$anchor, i2), pop();
}
__name(GridPaneFavoriteIcon, "GridPaneFavoriteIcon");
var root_3$G = /* @__PURE__ */ template('<span class="inventory-primary-column-label svelte-7m90sc"> </span>'), on_click$15 = /* @__PURE__ */ __name((event2, context, item) => get(context).editable && FoundryAdapter.actorTryUseItem(item(), event2), "on_click$15"), on_contextmenu$2 = /* @__PURE__ */ __name((event2, item) => FoundryAdapter.onActorItemButtonContextMenu(item(), { event: event2 }), "on_contextmenu$2"), on_mousedown$2 = /* @__PURE__ */ __name((event2, item) => FoundryAdapter.editOnMiddleClick(event2, item()), "on_mousedown$2"), root_6$m = /* @__PURE__ */ template("<i></i>"), root_8$m = /* @__PURE__ */ template('<button type="button" class="item-control item-edit" style="display:none" data-action="itemEdit"><i class="fas fa-edit fa-fw svelte-7m90sc"></i></button>'), root_9$m = /* @__PURE__ */ template('<i class="fas fa-bolt svelte-7m90sc"></i> <!>', 1), root_5$y = /* @__PURE__ */ template('<a data-tidy-grid-item=""><div class="item-name svelte-7m90sc"><div class="item-image svelte-7m90sc"><i class="fa fa-dice-d20 svelte-7m90sc"></i></div> <div role="presentation" aria-hidden="true" class="unidentified-glyph no-transition svelte-7m90sc"><i class="fas fa-question svelte-7m90sc"></i></div></div> <!> <!> <!> <div class="item-stats svelte-7m90sc"><div class="item-detail item-uses svelte-7m90sc"><!></div> <span class="item-quantity svelte-7m90sc"><!></span></div></a>'), on_click_1$u = /* @__PURE__ */ __name((event2, $$props, context) => {
  event2.preventDefault(), event2.stopPropagation(), FoundryAdapter.createItem(
    {
      ...$$props.section.dataset,
      action: "itemCreate",
      tooltip: "DND5E.ItemCreate"
    },
    get(context).actor
  );
}, "on_click_1$u"), on_click_2$h = /* @__PURE__ */ __name((ev, command, $$props, context) => get(command).execute?.({
  section: $$props.section,
  event: ev,
  actor: get(context).actor
}), "on_click_2$h"), root_12$8 = /* @__PURE__ */ template("<i></i>"), root_11$9 = /* @__PURE__ */ template('<button type="button" class="footer-command icon-button svelte-7m90sc"><!> </button>'), root_10$j = /* @__PURE__ */ template('<div class="items-footer svelte-7m90sc"><button type="button" class="footer-command icon-button svelte-7m90sc"><i class="fas fa-plus-circle svelte-7m90sc"></i></button> <!></div>'), root_4$u = /* @__PURE__ */ template('<div class="items svelte-7m90sc"><!> <!></div>');
function InventoryGrid($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getSheetContext), itemEntries = /* @__PURE__ */ derived(() => $$props.section.items.map((item) => ({
    item,
    ctx: get(context).itemContext[item.id]
  }))), customCommands = /* @__PURE__ */ derived(() => ActorItemRuntime.getActorItemSectionCommands({
    actor: get(context).actor,
    section: $$props.section
  }));
  const searchResults = getSearchResultsContext(), localize = FoundryAdapter.localize;
  function getInventoryRowClasses(item) {
    const extras = [];
    return FoundryAdapter.getInventoryRowClasses(item, get(context).itemContext[item.id], extras);
  }
  __name(getInventoryRowClasses, "getInventoryRowClasses");
  function preventUseItemEvent(ev) {
    ev.stopPropagation();
  }
  __name(preventUseItemEvent, "preventUseItemEvent");
  async function onMouseEnter(event2, item) {
    TidyHooks.tidy5eSheetsItemHoverOn(event2, item);
  }
  __name(onMouseEnter, "onMouseEnter");
  async function onMouseLeave(event2, item) {
    TidyHooks.tidy5eSheetsItemHoverOff(event2, item);
  }
  __name(onMouseLeave, "onMouseLeave");
  function handleDragStart(event2, item) {
    if (!item)
      return;
    onMouseLeave(event2, item);
    const dragData = item.toDragData();
    event2.dataTransfer?.setData("text/plain", JSON.stringify(dragData));
  }
  __name(handleDragStart, "handleDragStart"), declareLocation("inventory-grid");
  var data_custom_section = /* @__PURE__ */ derived(() => $$props.section.custom ? !0 : null);
  ItemTable($$anchor, {
    get key() {
      return $$props.section.key;
    },
    get "data-custom-section"() {
      return get(data_custom_section);
    },
    header: /* @__PURE__ */ __name(($$anchor2) => {
      ItemTableHeaderRow($$anchor2, {
        children: /* @__PURE__ */ __name(($$anchor3, $$slotProps) => {
          ItemTableColumn($$anchor3, {
            primary: !0,
            children: /* @__PURE__ */ __name(($$anchor4, $$slotProps2) => {
              var span = root_3$G();
              const stringified_text = /* @__PURE__ */ derived(() => localize($$props.section.label) ?? ""), stringified_text_1 = /* @__PURE__ */ derived(() => ItemVisibility.countVisibleItems($$props.section.items, searchResults.uuids) ?? "");
              var text2 = child(span);
              template_effect(() => set_text(text2, `${get(stringified_text)} (${get(stringified_text_1)})`)), append($$anchor4, span);
            }, "children"),
            $$slots: { default: !0 }
          });
        }, "children"),
        $$slots: { default: !0 }
      });
    }, "header"),
    body: /* @__PURE__ */ __name(($$anchor2) => {
      var div = root_4$u(), node = child(div);
      each(node, 17, () => get(itemEntries), ({ item, ctx }) => item.id, ($$anchor3, $$item) => {
        let item = /* @__PURE__ */ __name(() => get($$item).item, "item"), ctx = /* @__PURE__ */ __name(() => get($$item).ctx, "ctx");
        var a2 = root_5$y();
        const hidden = /* @__PURE__ */ derived(() => !searchResults.show(item().uuid)), class_derived = /* @__PURE__ */ derived(() => `item ${getInventoryRowClasses(item()) ?? ""} svelte-7m90sc`);
        a2.__click = [on_click$15, context, item], a2.__contextmenu = [on_contextmenu$2, item], a2.__mousedown = [on_mousedown$2, item], set_attribute(a2, "draggable", !0);
        var div_1 = child(a2), div_2 = child(div_1), div_3 = sibling(div_2, 2), node_1 = sibling(div_1, 2);
        {
          var consequent = /* @__PURE__ */ __name(($$anchor4) => {
            var i2 = root_6$m();
            template_effect(() => set_attribute(i2, "title", localize(ctx().attunement?.title ?? ""))), template_effect(() => set_class(i2, `fas fa-sun icon-attuned ${ctx().attunement?.cls ?? "" ?? ""} no-pointer-events svelte-7m90sc`)), append($$anchor4, i2);
          }, "consequent");
          if_block(node_1, ($$render) => {
            ctx().attunement && !FoundryAdapter.concealDetails(item()) && $$render(consequent);
          });
        }
        var node_2 = sibling(node_1, 2);
        {
          var consequent_1 = /* @__PURE__ */ __name(($$anchor4) => {
            GridPaneFavoriteIcon($$anchor4, {});
          }, "consequent_1");
          if_block(node_2, ($$render) => {
            "favoriteId" in ctx() && ctx().favoriteId && $$render(consequent_1);
          });
        }
        var node_3 = sibling(node_2, 2);
        {
          var consequent_2 = /* @__PURE__ */ __name(($$anchor4) => {
            var button = root_8$m();
            template_effect(() => set_attribute(button, "title", localize("DND5E.ItemEdit"))), template_effect(() => set_attribute(button, "tabindex", settings.value.useAccessibleKeyboardSupport ? 0 : -1)), append($$anchor4, button);
          }, "consequent_2");
          if_block(node_3, ($$render) => {
            get(context).editable && $$render(consequent_2);
          });
        }
        var div_4 = sibling(node_3, 2), div_5 = child(div_4);
        template_effect(() => set_attribute(div_5, "title", `${localize("DND5E.Uses") ?? ""}: ${item().system.uses?.value ?? ""}/${item().system.uses?.max ?? ""} `));
        var node_4 = child(div_5);
        {
          var consequent_3 = /* @__PURE__ */ __name(($$anchor4) => {
            var fragment_4 = root_9$m(), node_5 = sibling(first_child(fragment_4), 2), value = /* @__PURE__ */ derived(() => item().system.uses?.value), disabled = /* @__PURE__ */ derived(() => !get(context).editable);
            TextInput(node_5, {
              get document() {
                return item();
              },
              field: "system.uses.value",
              get value() {
                return get(value);
              },
              placeholder: "0",
              maxlength: 2,
              allowDeltaChanges: !0,
              selectOnFocus: !0,
              onclick: preventUseItemEvent,
              get disabled() {
                return get(disabled);
              },
              onSaveChange: /* @__PURE__ */ __name((ev) => FoundryAdapter.handleItemUsesChanged(ev, item()) && !1, "onSaveChange")
            }), append($$anchor4, fragment_4);
          }, "consequent_3");
          if_block(node_4, ($$render) => {
            ctx()?.hasUses && $$render(consequent_3);
          });
        }
        var span_1 = sibling(div_5, 2);
        template_effect(() => set_attribute(span_1, "title", localize("DND5E.Quantity")));
        var node_6 = child(span_1), disabled_1 = /* @__PURE__ */ derived(() => !get(context).editable || get(context).lockItemQuantity);
        TextInput(node_6, {
          get document() {
            return item();
          },
          field: "system.quantity",
          class: "item-count",
          get value() {
            return item().system.quantity;
          },
          maxlength: 2,
          get disabled() {
            return get(disabled_1);
          },
          allowDeltaChanges: !0,
          selectOnFocus: !0,
          onclick: preventUseItemEvent
        }), template_effect(() => {
          set_class(a2, get(class_derived)), set_attribute(a2, "aria-hidden", get(hidden)), set_attribute(a2, "data-context-menu", CONSTANTS.CONTEXT_MENU_TYPE_ITEMS), set_attribute(a2, "data-tidy-sheet-part", CONSTANTS.SHEET_PARTS.ITEM_USE_COMMAND), set_attribute(a2, "data-item-id", item().id), set_attribute(a2, "tabindex", settings.value.useAccessibleKeyboardSupport ? 0 : -1), set_attribute(a2, "data-info-card", item() ? "item" : null), set_attribute(a2, "data-info-card-entity-uuid", item()?.uuid ?? null), toggle_class(a2, "hidden", get(hidden)), set_attribute(div_2, "style", `background-image: url('${item().img ?? ""}');`), toggle_class(div_2, "conceal", item().system.identified === !1), toggle_class(div_3, "conceal", item().system.identified === !1), toggle_class(span_1, "isStack", item().isStack);
        }), event("mouseenter", a2, (ev) => onMouseEnter(ev, item())), event("mouseleave", a2, (ev) => onMouseLeave(ev, item())), event("dragstart", a2, (ev) => handleDragStart(ev, item())), append($$anchor3, a2);
      });
      var node_7 = sibling(node, 2);
      {
        var consequent_5 = /* @__PURE__ */ __name(($$anchor3) => {
          var div_6 = root_10$j(), button_1 = child(div_6);
          template_effect(() => set_attribute(button_1, "title", localize("DND5E.ItemCreate"))), button_1.__click = [on_click_1$u, $$props, context];
          var node_8 = sibling(button_1, 2);
          each(node_8, 17, () => get(customCommands), index, ($$anchor4, command) => {
            var button_2 = root_11$9();
            button_2.__click = [on_click_2$h, command, $$props, context], template_effect(() => set_attribute(button_2, "title", localize(get(command).tooltip ?? "")));
            var node_9 = child(button_2);
            {
              var consequent_4 = /* @__PURE__ */ __name(($$anchor5) => {
                var i_1 = root_12$8();
                template_effect(() => set_class(i_1, clsx(get(command).iconClass), "svelte-7m90sc")), append($$anchor5, i_1);
              }, "consequent_4");
              if_block(node_9, ($$render) => {
                (get(command).iconClass ?? "") !== "" && $$render(consequent_4);
              });
            }
            var text_1 = sibling(node_9);
            template_effect(() => set_text(text_1, ` ${localize(get(command).label ?? "") ?? ""}`)), template_effect(() => set_attribute(button_2, "tabindex", settings.value.useAccessibleKeyboardSupport ? 0 : -1)), append($$anchor4, button_2);
          }), template_effect(() => {
            set_attribute(button_1, "data-tidy-sheet-part", CONSTANTS.SHEET_PARTS.ITEM_CREATE_COMMAND), set_attribute(button_1, "tabindex", settings.value.useAccessibleKeyboardSupport ? 0 : -1);
          }), append($$anchor3, div_6);
        }, "consequent_5");
        if_block(node_7, ($$render) => {
          get(context).unlocked && $$render(consequent_5);
        });
      }
      append($$anchor2, div);
    }, "body"),
    $$slots: { header: !0, body: !0 }
  }), pop();
}
__name(InventoryGrid, "InventoryGrid");
delegate(["click", "contextmenu", "mousedown"]);
var root_1$1C = /* @__PURE__ */ template("<li><!> <label> </label></li>"), on_click$14 = /* @__PURE__ */ __name((event2, confirmConvertCurrency) => {
  event2.preventDefault(), event2.stopPropagation(), confirmConvertCurrency();
}, "on_click$14"), root$2J = /* @__PURE__ */ template('<div class="inventory-currency"><ol class="currency"><!> <li class="currency-item convert"><button type="button" class="currency-convert"><i class="fas fa-coins"></i></button></li></ol></div>');
function Currency($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getSheetContext), currencies = /* @__PURE__ */ derived(() => Object.keys(CONFIG.DND5E.currencies).map((key) => ({
    key,
    value: $$props.document.system.currency[key] ?? 0
  })));
  function confirmConvertCurrency() {
    new dnd5e.applications.CurrencyManager($$props.document).render(!0);
  }
  __name(confirmConvertCurrency, "confirmConvertCurrency");
  function abbreviateCurrency(currencyKey) {
    return CONFIG.DND5E.currencies[currencyKey]?.abbreviation ?? currencyKey;
  }
  __name(abbreviateCurrency, "abbreviateCurrency");
  const localize = FoundryAdapter.localize;
  var div = root$2J(), ol = child(div), node = child(ol);
  each(node, 17, () => get(currencies), index, ($$anchor2, currency) => {
    var li = root_1$1C(), node_1 = child(li), disabled = /* @__PURE__ */ derived(() => !get(context).editable || get(context).lockMoneyChanges);
    TextInput(node_1, {
      get document() {
        return $$props.document;
      },
      get field() {
        return `system.currency.${get(currency).key ?? ""}`;
      },
      get id() {
        return `${$$props.document.id ?? ""}-system.currency.${get(currency).key ?? ""}`;
      },
      get value() {
        return get(currency).value;
      },
      allowDeltaChanges: !0,
      selectOnFocus: !0,
      get disabled() {
        return get(disabled);
      }
    });
    var label = sibling(node_1, 2), text2 = child(label);
    template_effect(() => set_text(text2, abbreviateCurrency(get(currency).key))), template_effect(() => {
      set_class(li, `currency-item ${get(currency).key ?? ""}`), set_attribute(li, "title", get(context).config.currencies[get(currency).key]?.label), set_attribute(label, "for", `${$$props.document.id ?? ""}-system.currency.${get(currency).key ?? ""}`), set_class(label, `denomination ${get(currency).key ?? ""}`), set_attribute(label, "data-denom", get(currency).key);
    }), append($$anchor2, li);
  });
  var li_1 = sibling(node, 2), button = child(li_1);
  template_effect(() => set_attribute(button, "title", localize("DND5E.CurrencyManager.Title"))), button.__click = [on_click$14, confirmConvertCurrency], template_effect(() => {
    button.disabled = !get(context).editable, set_attribute(button, "tabindex", settings.value.useAccessibleKeyboardSupport ? 0 : -1);
  }), append($$anchor, div), pop();
}
__name(Currency, "Currency");
delegate(["click"]);
var root$2I = /* @__PURE__ */ template("<div><!></div>");
function Notice($$anchor, $$props) {
  push($$props, !0);
  let cssClass = prop($$props, "cssClass", 3, null);
  var div = root$2I(), node = child(div);
  snippet(node, () => $$props.children ?? noop), template_effect(() => set_class(div, `notice ${cssClass() ?? ""} svelte-p0r7e5`)), append($$anchor, div), pop();
}
__name(Notice, "Notice");
var root$2H = /* @__PURE__ */ template('<div class="encumbrance svelte-1pe5ffx"><span class="encumbrance-bar svelte-1pe5ffx"></span> <span class="encumbrance-label svelte-1pe5ffx"> </span> <i class="encumbrance-breakpoint encumbrance-low arrow-up svelte-1pe5ffx"></i> <i class="encumbrance-breakpoint encumbrance-low arrow-down svelte-1pe5ffx"></i> <i class="encumbrance-breakpoint encumbrance-high arrow-up svelte-1pe5ffx"></i> <i class="encumbrance-breakpoint encumbrance-high arrow-down svelte-1pe5ffx"></i></div>');
function EncumbranceBar($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getSheetContext);
  const localize = FoundryAdapter.localize;
  var div = root$2H();
  template_effect(() => set_attribute(div, "title", localize("TIDY5E.Encumbrance")));
  var span = child(div), span_1 = sibling(span, 2), text2 = child(span_1);
  template_effect(() => {
    set_attribute(div, "style", `
    --encumbrance-low: ${get(context).encumbrance.stops?.encumbered ?? 1 / 3 * 100 ?? ""}%; 
    --encumbrance-high: ${get(context).encumbrance.stops?.heavilyEncumbered ?? 2 / 3 * 100 ?? ""}%
  `), toggle_class(div, "encumbered", get(context).encumbrance.encumbered), set_attribute(span, "style", `width:${get(context).encumbrance.pct ?? ""}%`), set_text(text2, `${get(context).encumbrance.value ?? ""} / ${get(context).encumbrance.max ?? ""}`);
  }), append($$anchor, div), pop();
}
__name(EncumbranceBar, "EncumbranceBar");
var root$2G = /* @__PURE__ */ template("<footer><!></footer>");
function TabFooter($$anchor, $$props) {
  push($$props, !0);
  let cssClass = prop($$props, "cssClass", 3, null), appV2 = prop($$props, "appV2", 3, !1);
  var footer = root$2G(), node = child(footer);
  snippet(node, () => $$props.children ?? noop), template_effect(() => {
    set_class(footer, `tab-footer ${cssClass() ?? ""} ${$$props.mode ?? ""} svelte-149xt9g`), toggle_class(footer, "app-v2", appV2());
  }), append($$anchor, footer), pop();
}
__name(TabFooter, "TabFooter");
var on_click$13 = /* @__PURE__ */ __name((_, container) => (FoundryAdapter.userIsGm() || container().isOwner) && container().sheet.render(!0), "on_click$13"), root_1$1B = /* @__PURE__ */ template('<li draggable="true" class="container svelte-1p03vum"><a type="button" class="container-image-button svelte-1p03vum"><div class="container-image svelte-1p03vum"><div role="presentation" aria-hidden="true" class="unidentified-glyph svelte-1p03vum"><i class="fas fa-question"></i></div></div></a> <svelte-css-wrapper style="display: contents"><!></svelte-css-wrapper></li>'), root$2F = /* @__PURE__ */ template('<ul class="containers svelte-1p03vum"></ul>');
function ContainerPanel($$anchor, $$props) {
  push($$props, !0);
  let containerPanelItems = prop($$props, "containerPanelItems", 19, () => []), searchResults = getSearchResultsContext();
  async function onMouseEnter(event2, item) {
    TidyHooks.tidy5eSheetsItemHoverOn(event2, item);
  }
  __name(onMouseEnter, "onMouseEnter");
  async function onMouseLeave(event2, item) {
    TidyHooks.tidy5eSheetsItemHoverOff(event2, item);
  }
  __name(onMouseLeave, "onMouseLeave");
  function handleDragStart(event2, item) {
    onMouseLeave(event2, item);
    const dragData = item.toDragData();
    event2.dataTransfer?.setData("text/plain", JSON.stringify(dragData));
  }
  __name(handleDragStart, "handleDragStart");
  var ul = root$2F();
  each(ul, 21, containerPanelItems, ({ container, ...capacity }) => container.id, ($$anchor2, $$item) => {
    let container = /* @__PURE__ */ __name(() => get($$item).container, "container"), capacity = /* @__PURE__ */ __name(() => exclude_from_object(get($$item), ["container"]), "capacity");
    var li = root_1$1B();
    template_effect(() => set_attribute(li, "title", container().system.identified === !1 ? coalesce(container().system.unidentified.name, FoundryAdapter.localize("DND5E.Unidentified.Title")) : container().name)), template_effect(() => set_attribute(li, "aria-hidden", !searchResults.show(container().uuid))), set_attribute(li, "data-info-card", "item");
    const class_directive = /* @__PURE__ */ derived(() => !searchResults.show(container().uuid));
    var a2 = child(li);
    a2.__click = [on_click$13, container];
    var div = child(a2), div_1 = child(div), node = sibling(a2, 2);
    css_props(node, () => ({
      "--capacity-bar-height": "0.5rem",
      "--capacity-bar-container-border-radius": "0 0 0.1875rem 0.1875rem"
    })), CapacityBar$1(node.lastChild, {
      showLabel: !1,
      get container() {
        return container();
      },
      get capacity() {
        return capacity();
      }
    }), template_effect(() => {
      set_attribute(li, "data-item-id", container().id), set_attribute(li, "data-info-card-entity-uuid", container().uuid), toggle_class(li, "hidden", get(class_directive)), set_attribute(a2, "data-context-menu", CONSTANTS.CONTEXT_MENU_TYPE_ITEMS), set_attribute(div, "style", `background-image: url('${container().img ?? ""}')`), toggle_class(div, "conceal", container().system.identified === !1), toggle_class(div_1, "conceal", container().system.identified === !1);
    }), event("dragstart", li, (ev) => handleDragStart(ev, container())), event("mouseenter", li, (ev) => onMouseEnter(ev, container())), event("mouseleave", li, (ev) => onMouseLeave(ev, container())), append($$anchor2, li);
  }), append($$anchor, ul), pop();
}
__name(ContainerPanel, "ContainerPanel");
delegate(["click"]);
var root$2E = /* @__PURE__ */ template("<input>");
function NumberInput($$anchor, $$props) {
  push($$props, !0);
  let value = prop($$props, "value", 3, null), step = prop($$props, "step", 3, "any"), placeholder = prop($$props, "placeholder", 3, null), tooltip = prop($$props, "tooltip", 3, null), min = prop($$props, "min", 3, null), max = prop($$props, "max", 3, null), id = prop($$props, "id", 3, null), disabled = prop($$props, "disabled", 3, null), dataset = prop($$props, "dataset", 3, null), readonly = prop($$props, "readonly", 3, null), cssClass = prop($$props, "cssClass", 3, null), maxlength = prop($$props, "maxlength", 3, null), selectOnFocus = prop($$props, "selectOnFocus", 3, !1), title = prop($$props, "title", 3, null), stopClickPropagation = prop($$props, "stopClickPropagation", 3, !1), theInput = state(void 0);
  async function saveChange(event2) {
    const proposedValueToSave = parseFloat(event2.currentTarget.value), parsedValueToSave = isNaN(proposedValueToSave) ? null : proposedValueToSave;
    await $$props.document.update({ [$$props.field]: parsedValueToSave }), selectOnFocus() && get(theInput) === window.document.activeElement && get(theInput).select();
  }
  __name(saveChange, "saveChange");
  const context = /* @__PURE__ */ derived(getSheetContext), localize = FoundryAdapter.localize;
  let datasetAttributes = /* @__PURE__ */ derived(() => buildDataset(dataset())), activeEffectApplied = /* @__PURE__ */ derived(() => ActiveEffectsHelper.isActiveEffectAppliedToField($$props.document, $$props.field)), isEnchanted = /* @__PURE__ */ derived(() => get(context).itemOverrides instanceof Set && get(context).itemOverrides.has($$props.field)), overrideTooltip = /* @__PURE__ */ derived(() => get(isEnchanted) ? localize("DND5E.ENCHANTMENT.Warning.Override") : localize("DND5E.ActiveEffectOverrideWarning"));
  var input = root$2E(), event_handler = /* @__PURE__ */ __name((ev) => selectOnFocus() && ev.currentTarget.select(), "event_handler"), event_handler_1 = /* @__PURE__ */ __name((ev) => stopClickPropagation() && ev.stopPropagation(), "event_handler_1");
  let attributes;
  bind_this(input, ($$value) => set(theInput, $$value), () => get(theInput)), template_effect(() => attributes = set_attributes(input, attributes, {
    type: "number",
    id: id(),
    step: step(),
    value: value(),
    min: min(),
    max: max(),
    placeholder: placeholder(),
    onchange: saveChange,
    "data-tooltip": get(activeEffectApplied) ? get(overrideTooltip) : tooltip(),
    disabled: disabled() || get(activeEffectApplied),
    readonly: readonly(),
    class: cssClass(),
    maxlength: maxlength(),
    ...get(datasetAttributes),
    onfocus: event_handler,
    onclick: event_handler_1,
    title: title(),
    "data-tidy-field": $$props.field
  })), append($$anchor, input), pop();
}
__name(NumberInput, "NumberInput");
var root_1$1A = /* @__PURE__ */ template('<li class="flex-row extra-small-gap align-items-center"><img class="item-image"> <div class="item-name truncate"> </div></li>'), root$2D = /* @__PURE__ */ template('<div class="document-list-summary-tooltip"><h3> </h3> <hr> <ul></ul></div>');
function AttunementSummaryTooltip($$anchor, $$props) {
  push($$props, !0);
  let attunedItems = prop($$props, "attunedItems", 19, () => []), tooltip;
  function getMarkup() {
    return tooltip.outerHTML;
  }
  __name(getMarkup, "getMarkup");
  const localize = FoundryAdapter.localize;
  var div = root$2D(), h3 = child(div), text2 = child(h3);
  template_effect(() => set_text(text2, localize("TIDY5E.AttunementItems")));
  var ul = sibling(h3, 4);
  return each(ul, 21, attunedItems, index, ($$anchor2, item) => {
    var li = root_1$1A(), img = child(li), div_1 = sibling(img, 2), text_1 = child(div_1);
    template_effect(() => {
      set_attribute(img, "src", get(item).img), set_text(text_1, get(item).name);
    }), append($$anchor2, li);
  }), bind_this(div, ($$value) => tooltip = $$value, () => tooltip), append($$anchor, div), pop({ getMarkup });
}
__name(AttunementSummaryTooltip, "AttunementSummaryTooltip");
var on_mouseover$2 = /* @__PURE__ */ __name((ev, showAttunementSummaryTooltip) => showAttunementSummaryTooltip(ev), "on_mouseover$2"), root_2$N = /* @__PURE__ */ template('<span class="attuned-items-max"> </span>'), root$2C = /* @__PURE__ */ template('<div class="hidden"><!></div> <div data-tooltip-direction="UP"><i class="attunement-icon fas fa-sun"></i> <span class="attuned-items-current"> </span> / <!></div>', 1);
function AttunementTracker($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getSheetContext);
  const localize = FoundryAdapter.localize;
  let attunedItems = /* @__PURE__ */ derived(() => get(context).actor.items.filter((i2) => i2.system.attuned).sort((a2, b2) => a2.name.localeCompare(b2.name, game.i18n.lang))), attunementSummaryTooltip;
  function showAttunementSummaryTooltip(event2) {
    get(attunedItems).length && Tooltip.show(event2?.currentTarget, attunementSummaryTooltip.getMarkup());
  }
  __name(showAttunementSummaryTooltip, "showAttunementSummaryTooltip");
  var fragment = root$2C(), div = first_child(fragment), node = child(div);
  bind_this(
    AttunementSummaryTooltip(node, {
      get attunedItems() {
        return get(attunedItems);
      }
    }),
    ($$value) => attunementSummaryTooltip = $$value,
    () => attunementSummaryTooltip
  );
  var div_1 = sibling(div, 2);
  div_1.__mouseover = [on_mouseover$2, showAttunementSummaryTooltip];
  var span = sibling(child(div_1), 2);
  template_effect(() => set_attribute(span, "title", localize("TIDY5E.AttunementItems")));
  var text2 = child(span), node_1 = sibling(span, 2);
  {
    var consequent = /* @__PURE__ */ __name(($$anchor2) => {
      var title = /* @__PURE__ */ derived(() => localize("TIDY5E.AttunementMax")), disabled = /* @__PURE__ */ derived(() => !get(context).editable || get(context).lockSensitiveFields);
      NumberInput($$anchor2, {
        selectOnFocus: !0,
        get document() {
          return get(context).actor;
        },
        field: "system.attributes.attunement.max",
        cssClass: "attuned-items-max",
        get value() {
          return get(context).system.attributes.attunement.max;
        },
        placeholder: "0",
        get title() {
          return get(title);
        },
        get disabled() {
          return get(disabled);
        }
      });
    }, "consequent"), alternate = /* @__PURE__ */ __name(($$anchor2) => {
      var span_1 = root_2$N();
      template_effect(() => set_attribute(span_1, "title", localize("TIDY5E.AttunementMax")));
      var text_1 = child(span_1);
      template_effect(() => set_text(text_1, get(context).system.attributes.attunement.max)), append($$anchor2, span_1);
    }, "alternate");
    if_block(node_1, ($$render) => {
      get(context).editable && FoundryAdapter.userIsGm() ? $$render(consequent) : $$render(alternate, !1);
    });
  }
  template_effect(() => {
    set_class(div_1, `attunement-tracker ${$$props.class ?? "" ?? ""}`), toggle_class(div_1, "overattuned", get(context).actor.system.attributes.attunement.value > get(context).actor.system.attributes.attunement.max), set_text(text2, get(context).system.attributes.attunement.value);
  }), append($$anchor, fragment), pop();
}
__name(AttunementTracker, "AttunementTracker");
delegate(["mouseover"]);
var root_1$1z = /* @__PURE__ */ template("<!> <!> <!> <!>", 1), root_5$x = /* @__PURE__ */ template("<!> <!>", 1), root_12$7 = /* @__PURE__ */ template('<div class="attunement-and-currency svelte-1h75ks9"><!> <!></div> <!>', 1), root$2B = /* @__PURE__ */ template('<!> <div class="tidy-inventory-container scroll-container flex-column small-gap svelte-1h75ks9"><!></div> <!>', 1);
function ActorInventoryTab($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getSheetContext), inventory = /* @__PURE__ */ derived(() => SheetSections.configureInventory(get(context).inventory, $$props.tabId, SheetPreferencesService.getByType(get(context).actor.type), TidyFlags.sectionConfig.get(get(context).actor)?.[$$props.tabId])), searchCriteria = state("");
  const searchResults = createSearchResultsState();
  setSearchResultsContext(searchResults), user_effect(() => {
    searchResults.uuids = ItemVisibility.getItemsToShowAtDepth({
      criteria: get(searchCriteria),
      itemContext: get(context).itemContext,
      sections: get(inventory),
      tabId: $$props.tabId
    });
  });
  const localize = FoundryAdapter.localize;
  let layoutMode = /* @__PURE__ */ derived(() => TidyFlags.inventoryGrid.get(get(context).actor) ? "grid" : "list"), noItems = /* @__PURE__ */ derived(() => get(inventory).some((section) => section.items.length > 0) === !1), utilityBarCommands = /* @__PURE__ */ derived(() => get(context).utilities[$$props.tabId]?.utilityToolbarCommands ?? []);
  var fragment = root$2B(), node = first_child(fragment);
  UtilityToolbar(node, {
    children: /* @__PURE__ */ __name(($$anchor2, $$slotProps) => {
      var fragment_1 = root_1$1z(), node_1 = first_child(fragment_1);
      Search$1(node_1, {
        get value() {
          return get(searchCriteria);
        },
        set value($$value) {
          set(searchCriteria, proxy($$value));
        }
      });
      var node_2 = sibling(node_1, 2), filters = /* @__PURE__ */ derived(() => ItemFilterRuntime.getPinnedFiltersForTab(get(context).filterPins, get(context).filterData, $$props.tabId));
      PinnedFilterToggles(node_2, {
        get filterGroupName() {
          return $$props.tabId;
        },
        get filters() {
          return get(filters);
        }
      });
      var node_3 = sibling(node_2, 2);
      FilterMenu(node_3, {
        get tabId() {
          return $$props.tabId;
        }
      });
      var node_4 = sibling(node_3, 2);
      each(node_4, 17, () => get(utilityBarCommands), (command) => command.title, ($$anchor3, command) => {
        var visible = /* @__PURE__ */ derived(() => get(command).visible ?? !0);
        UtilityToolbarCommand($$anchor3, {
          get title() {
            return get(command).title;
          },
          get iconClass() {
            return get(command).iconClass;
          },
          get text() {
            return get(command).text;
          },
          get visible() {
            return get(visible);
          },
          onExecute: /* @__PURE__ */ __name((ev) => get(command).execute?.(ev), "onExecute"),
          get sections() {
            return get(inventory);
          }
        });
      }), append($$anchor2, fragment_1);
    }, "children"),
    $$slots: { default: !0 }
  });
  var div = sibling(node, 2), node_5 = child(div);
  {
    var consequent = /* @__PURE__ */ __name(($$anchor2) => {
      Notice($$anchor2, {
        children: /* @__PURE__ */ __name(($$anchor3, $$slotProps) => {
          var text$1 = text();
          template_effect(() => set_text(text$1, localize("TIDY5E.EmptySection"))), append($$anchor3, text$1);
        }, "children"),
        $$slots: { default: !0 }
      });
    }, "consequent"), alternate_1 = /* @__PURE__ */ __name(($$anchor2) => {
      var fragment_5 = root_5$x();
      const containerPanelExpanded = /* @__PURE__ */ derived(() => get(context).showContainerPanel && !!get(context).containerPanelItems.length);
      var node_6 = first_child(fragment_5), class_1 = /* @__PURE__ */ derived(() => `container-panel-wrapper ${(get(containerPanelExpanded) ? "container-panel-expanded" : "") ?? ""}`);
      ExpandableContainer(node_6, {
        get expanded() {
          return get(containerPanelExpanded);
        },
        get class() {
          return get(class_1);
        },
        children: /* @__PURE__ */ __name(($$anchor3, $$slotProps) => {
          ContainerPanel($$anchor3, {
            get containerPanelItems() {
              return get(context).containerPanelItems;
            }
          });
        }, "children"),
        $$slots: { default: !0 }
      });
      var node_7 = sibling(node_6, 2);
      each(node_7, 17, () => get(inventory), (section) => section.key, ($$anchor3, section) => {
        var fragment_7 = comment();
        const visibleItemCount = /* @__PURE__ */ derived(() => ItemVisibility.countVisibleItems(get(section).items, searchResults.uuids));
        var node_8 = first_child(fragment_7);
        {
          var consequent_3 = /* @__PURE__ */ __name(($$anchor4) => {
            var fragment_8 = comment(), node_9 = first_child(fragment_8);
            {
              var consequent_2 = /* @__PURE__ */ __name(($$anchor5) => {
                var fragment_9 = comment(), node_10 = first_child(fragment_9);
                {
                  var consequent_1 = /* @__PURE__ */ __name(($$anchor6) => {
                    var primaryColumnName = /* @__PURE__ */ derived(() => `${localize(get(section).label) ?? ""} (${get(visibleItemCount) ?? ""})`);
                    InventoryList($$anchor6, {
                      get primaryColumnName() {
                        return get(primaryColumnName);
                      },
                      get section() {
                        return get(section);
                      }
                    });
                  }, "consequent_1"), alternate = /* @__PURE__ */ __name(($$anchor6) => {
                    InventoryGrid($$anchor6, {
                      get section() {
                        return get(section);
                      }
                    });
                  }, "alternate");
                  if_block(node_10, ($$render) => {
                    get(layoutMode) === "list" ? $$render(consequent_1) : $$render(alternate, !1);
                  });
                }
                append($$anchor5, fragment_9);
              }, "consequent_2");
              if_block(node_9, ($$render) => {
                (get(searchCriteria).trim() === "" && get(context).unlocked || get(visibleItemCount) > 0) && $$render(consequent_2);
              });
            }
            append($$anchor4, fragment_8);
          }, "consequent_3");
          if_block(node_8, ($$render) => {
            get(section).show && $$render(consequent_3);
          });
        }
        append($$anchor3, fragment_7);
      }), append($$anchor2, fragment_5);
    }, "alternate_1");
    if_block(node_5, ($$render) => {
      get(noItems) && !get(context).unlocked ? $$render(consequent) : $$render(alternate_1, !1);
    });
  }
  var node_11 = sibling(div, 2);
  TabFooter(node_11, {
    mode: "vertical",
    children: /* @__PURE__ */ __name(($$anchor2, $$slotProps) => {
      var fragment_12 = root_12$7(), div_1 = first_child(fragment_12), node_12 = child(div_1);
      AttunementTracker(node_12, { class: "align-self-center" });
      var node_13 = sibling(node_12, 2);
      Currency(node_13, {
        get document() {
          return get(context).actor;
        }
      });
      var node_14 = sibling(div_1, 2);
      {
        var consequent_4 = /* @__PURE__ */ __name(($$anchor3) => {
          EncumbranceBar($$anchor3, {});
        }, "consequent_4");
        if_block(node_14, ($$render) => {
          settings.value.useCharacterEncumbranceBar && $$render(consequent_4);
        });
      }
      append($$anchor2, fragment_12);
    }, "children"),
    $$slots: { default: !0 }
  }), template_effect(() => set_attribute(div, "data-tidy-sheet-part", CONSTANTS.SHEET_PARTS.ITEMS_CONTAINER)), append($$anchor, fragment), pop();
}
__name(ActorInventoryTab, "ActorInventoryTab");
function SpellPrepareControl($$anchor, $$props) {
  push($$props, !0);
  function toggleSpellPreparation() {
    const value = FoundryAdapter.getProperty($$props.spell, "system.preparation.prepared");
    $$props.spell.update({ "system.preparation.prepared": !value });
  }
  __name(toggleSpellPreparation, "toggleSpellPreparation");
  var title = /* @__PURE__ */ derived(() => $$props.ctx?.toggleTitle);
  ItemControl($$anchor, {
    get title() {
      return get(title);
    },
    iconCssClass: "fas fa-book",
    get active() {
      return $$props.spell.system.preparation.prepared;
    },
    onclick: toggleSpellPreparation
  }), pop();
}
__name(SpellPrepareControl, "SpellPrepareControl");
class SpellSchool {
  static {
    __name(this, "SpellSchool");
  }
  static _iconsMap = {
    abj: "ra ra-shield",
    con: "ra ra-tentacle",
    div: "ra ra-crystal-ball",
    enc: "ra ra-aware",
    evo: "ra ra-burning-meteor",
    ill: "ra ra-bleeding-eye",
    nec: "ra ra-skull",
    trs: "ra ra-cycle"
  };
  static fallbackIcon = "fas fa-hat-wizard";
  static getIcon(schoolKey) {
    if (settings.value.useTidySpellSchoolIcons)
      return SpellSchool._iconsMap[schoolKey] ?? SpellSchool.fallbackIcon;
    const dnd5eConfigIcon = CONFIG.DND5E.spellSchools[schoolKey]?.icon;
    return dnd5eConfigIcon ? {
      iconSrc: dnd5eConfigIcon
    } : SpellSchool.fallbackIcon;
  }
  static setIcon(schoolKey, iconClass) {
    SpellSchool._iconsMap[schoolKey] = iconClass;
  }
}
function SpellOpenCastActivityControl($$anchor, $$props) {
  push($$props, !0);
  const localize = FoundryAdapter.localize;
  var class_1 = /* @__PURE__ */ derived(() => $$props.class ?? ""), title = /* @__PURE__ */ derived(() => localize("DOCUMENT.DND5E.Activity"));
  ItemControl($$anchor, {
    iconCssClass: "fas fa-gear",
    get class() {
      return get(class_1);
    },
    onclick: /* @__PURE__ */ __name(() => $$props.item.system.linkedActivity.sheet.render(!0), "onclick"),
    get title() {
      return get(title);
    }
  }), pop();
}
__name(SpellOpenCastActivityControl, "SpellOpenCastActivityControl");
function DeleteOrOpenActivity($$anchor, $$props) {
  push($$props, !0);
  var fragment = comment(), node = first_child(fragment);
  {
    var consequent = /* @__PURE__ */ __name(($$anchor2) => {
      ItemDeleteControl($$anchor2, {
        get item() {
          return $$props.item;
        }
      });
    }, "consequent"), alternate = /* @__PURE__ */ __name(($$anchor2) => {
      SpellOpenCastActivityControl($$anchor2, {
        get item() {
          return $$props.item;
        }
      });
    }, "alternate");
    if_block(node, ($$render) => {
      $$props.item.canDelete || !$$props.item.system.linkedActivity ? $$render(consequent) : $$render(alternate, !1);
    });
  }
  append($$anchor, fragment), pop();
}
__name(DeleteOrOpenActivity, "DeleteOrOpenActivity");
var root_3$F = /* @__PURE__ */ template('<span class="spell-primary-column-label svelte-1utj4h0"> </span> <!>', 1), root_5$w = /* @__PURE__ */ template('<i class="fas fa-mortar-pestle"></i>'), root_7$r = /* @__PURE__ */ template('<i class="fas fa-hat-wizard"></i>'), root_2$M = /* @__PURE__ */ template("<!> <!> <!> <!> <!> <!> <!>", 1), root_19$4 = /* @__PURE__ */ template('<i class="linked-source-tooltip-icon fa-solid fa-circle-info fa-fw"></i>'), root_18$7 = /* @__PURE__ */ template('<span class="truncate flex-1"> <!></span>'), root_20$8 = /* @__PURE__ */ template('<span class="primary-cell-uses"><!></span>'), root_22$3 = /* @__PURE__ */ template('<span class="primary-cell-uses"><!></span>'), root_16$6 = /* @__PURE__ */ template('<!> <!> <div class="primary-cell-extras"><!> <!></div>', 1), root_27$4 = /* @__PURE__ */ template("<i></i>"), root_28$2 = /* @__PURE__ */ template('<svelte-css-wrapper style="display: contents"><!></svelte-css-wrapper>', 1), root_15$8 = /* @__PURE__ */ template("<!> <!> <!> <!> <!> <!> <!>", 1), root_13$6 = /* @__PURE__ */ template("<!> <!>", 1), root$2A = /* @__PURE__ */ template("<section><!></section>");
function SpellbookList($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getSheetContext), allowFavorites = prop($$props, "allowFavorites", 3, !0), cssClass = prop($$props, "cssClass", 3, null), includeSchool = prop($$props, "includeSchool", 3, !0), includeRange = prop($$props, "includeRange", 3, !0), spellComponentsBaseWidth = prop($$props, "spellComponentsBaseWidth", 3, "3.75rem"), targetBaseWidth = prop($$props, "targetBaseWidth", 3, "7.5rem"), usageBaseWidth = prop($$props, "usageBaseWidth", 3, "7.5rem");
  getContext(CONSTANTS.SVELTE_CONTEXT.INLINE_TOGGLE_SERVICE);
  let spellEntries = /* @__PURE__ */ derived(() => $$props.section.spells.map((s2) => ({
    spell: s2,
    spellImgUrl: FoundryAdapter.getSpellImageUrl(get(context), s2),
    ctx: get(context).itemContext[s2.id]
  })));
  const searchResults = getSearchResultsContext();
  var spellSchoolBaseWidth = "2rem";
  let controls = /* @__PURE__ */ derived(() => {
    let result = [
      {
        component: SpellPrepareControl,
        props: /* @__PURE__ */ __name(({ item, ctx }) => ({ spell: item, ctx }), "props"),
        visible: /* @__PURE__ */ __name(({ item }) => FoundryAdapter.canPrepareSpell(item), "visible")
      }
    ];
    return allowFavorites() && result.push({
      component: ItemFavoriteControl,
      props: /* @__PURE__ */ __name(({ item }) => ({ item }), "props")
    }), result.push({
      component: ItemEditControl,
      props: /* @__PURE__ */ __name(({ item }) => ({ item }), "props")
    }), get(context).unlocked && result.push({
      component: DeleteOrOpenActivity,
      props: /* @__PURE__ */ __name(({ item }) => ({ item }), "props")
    }), get(context).useActionsFeature && result.push({
      component: ActionFilterOverrideControl,
      props: /* @__PURE__ */ __name(({ item }) => ({ item }), "props")
    }), result;
  });
  const localize = FoundryAdapter.localize;
  let classicControlsColumnWidth = /* @__PURE__ */ derived(() => `${get(controls).length * 1.25}rem`);
  declareLocation("spellbook-list-view");
  var section_1 = root$2A(), node = child(section_1), data_custom_section = /* @__PURE__ */ derived(() => $$props.section.custom ? !0 : null);
  ItemTable(node, {
    get key() {
      return $$props.section.key;
    },
    get "data-custom-section"() {
      return get(data_custom_section);
    },
    header: /* @__PURE__ */ __name(($$anchor2) => {
      ItemTableHeaderRow($$anchor2, {
        children: /* @__PURE__ */ __name(($$anchor3, $$slotProps) => {
          var fragment_1 = root_2$M(), node_1 = first_child(fragment_1);
          ItemTableColumn(node_1, {
            primary: !0,
            children: /* @__PURE__ */ __name(($$anchor4, $$slotProps2) => {
              var fragment_2 = root_3$F(), span = first_child(fragment_2), text2 = child(span);
              template_effect(() => set_text(text2, localize($$props.section.label)));
              var node_2 = sibling(span, 2);
              {
                var consequent = /* @__PURE__ */ __name(($$anchor5) => {
                  SpellSlotManagement($$anchor5, {
                    get section() {
                      return $$props.section;
                    }
                  });
                }, "consequent");
                if_block(node_2, ($$render) => {
                  $$props.section.usesSlots && $$render(consequent);
                });
              }
              append($$anchor4, fragment_2);
            }, "children"),
            $$slots: { default: !0 }
          });
          var node_3 = sibling(node_1, 2), title = /* @__PURE__ */ derived(() => localize("DND5E.SpellComponents"));
          ItemTableColumn(node_3, {
            get baseWidth() {
              return spellComponentsBaseWidth();
            },
            get title() {
              return get(title);
            },
            children: /* @__PURE__ */ __name(($$anchor4, $$slotProps2) => {
              var i2 = root_5$w();
              append($$anchor4, i2);
            }, "children"),
            $$slots: { default: !0 }
          });
          var node_4 = sibling(node_3, 2);
          {
            var consequent_1 = /* @__PURE__ */ __name(($$anchor4) => {
              var title_1 = /* @__PURE__ */ derived(() => localize("DND5E.SpellSchool"));
              ItemTableColumn($$anchor4, {
                baseWidth: spellSchoolBaseWidth,
                get title() {
                  return get(title_1);
                },
                children: /* @__PURE__ */ __name(($$anchor5, $$slotProps2) => {
                  var i_1 = root_7$r();
                  append($$anchor5, i_1);
                }, "children"),
                $$slots: { default: !0 }
              });
            }, "consequent_1");
            if_block(node_4, ($$render) => {
              includeSchool() && $$render(consequent_1);
            });
          }
          var node_5 = sibling(node_4, 2), title_2 = /* @__PURE__ */ derived(() => localize("DND5E.SpellTarget"));
          ItemTableColumn(node_5, {
            get baseWidth() {
              return targetBaseWidth();
            },
            get title() {
              return get(title_2);
            },
            children: /* @__PURE__ */ __name(($$anchor4, $$slotProps2) => {
              var text_1 = text();
              template_effect(() => set_text(text_1, localize("DND5E.Target"))), append($$anchor4, text_1);
            }, "children"),
            $$slots: { default: !0 }
          });
          var node_6 = sibling(node_5, 2);
          {
            var consequent_2 = /* @__PURE__ */ __name(($$anchor4) => {
              var title_3 = /* @__PURE__ */ derived(() => localize("DND5E.Range"));
              ItemTableColumn($$anchor4, {
                baseWidth: "4.375rem",
                get title() {
                  return get(title_3);
                },
                children: /* @__PURE__ */ __name(($$anchor5, $$slotProps2) => {
                  var text_2 = text();
                  template_effect(() => set_text(text_2, localize("DND5E.Range"))), append($$anchor5, text_2);
                }, "children"),
                $$slots: { default: !0 }
              });
            }, "consequent_2");
            if_block(node_6, ($$render) => {
              includeRange() && $$render(consequent_2);
            });
          }
          var node_7 = sibling(node_6, 2), title_4 = /* @__PURE__ */ derived(() => localize("DND5E.SpellUsage"));
          ItemTableColumn(node_7, {
            get title() {
              return get(title_4);
            },
            get baseWidth() {
              return usageBaseWidth();
            },
            children: /* @__PURE__ */ __name(($$anchor4, $$slotProps2) => {
              var text_3 = text();
              template_effect(() => set_text(text_3, localize("DND5E.Usage"))), append($$anchor4, text_3);
            }, "children"),
            $$slots: { default: !0 }
          });
          var node_8 = sibling(node_7, 2);
          {
            var consequent_3 = /* @__PURE__ */ __name(($$anchor4) => {
              ItemTableColumn($$anchor4, {
                get baseWidth() {
                  return get(classicControlsColumnWidth);
                }
              });
            }, "consequent_3");
            if_block(node_8, ($$render) => {
              get(context).editable && get(context).useClassicControls && $$render(consequent_3);
            });
          }
          append($$anchor3, fragment_1);
        }, "children"),
        $$slots: { default: !0 }
      });
    }, "header"),
    body: /* @__PURE__ */ __name(($$anchor2) => {
      var fragment_10 = root_13$6(), node_9 = first_child(fragment_10);
      each(node_9, 17, () => get(spellEntries), ({ spell, spellImgUrl, ctx }) => spell.id, ($$anchor3, $$item) => {
        let spell = /* @__PURE__ */ __name(() => get($$item).spell, "spell"), spellImgUrl = /* @__PURE__ */ __name(() => get($$item).spellImgUrl, "spellImgUrl"), ctx = /* @__PURE__ */ __name(() => get($$item).ctx, "ctx");
        var contextMenu = /* @__PURE__ */ derived(() => ({
          type: CONSTANTS.CONTEXT_MENU_TYPE_ITEMS,
          uuid: spell().uuid
        })), cssClass_1 = /* @__PURE__ */ derived(() => FoundryAdapter.getSpellRowClasses(spell())), hidden = /* @__PURE__ */ derived(() => !searchResults.show(spell().uuid));
        ItemTableRow($$anchor3, {
          get item() {
            return spell();
          },
          onMouseDown: /* @__PURE__ */ __name((event2) => FoundryAdapter.editOnMiddleClick(event2, spell()), "onMouseDown"),
          get contextMenu() {
            return get(contextMenu);
          },
          get cssClass() {
            return get(cssClass_1);
          },
          get hidden() {
            return get(hidden);
          },
          children: /* @__PURE__ */ __name(($$anchor4, $$arg0) => {
            let toggleSummary = /* @__PURE__ */ __name(() => $$arg0?.().toggleSummary, "toggleSummary");
            var fragment_12 = root_15$8(), node_10 = first_child(fragment_12);
            ItemTableCell(node_10, {
              primary: !0,
              children: /* @__PURE__ */ __name(($$anchor5, $$slotProps) => {
                var fragment_13 = root_16$6(), node_11 = first_child(fragment_13), disabled = /* @__PURE__ */ derived(() => !get(context).editable), showDiceIconOnHover = /* @__PURE__ */ derived(() => !ctx().concentration);
                ItemUseButton(node_11, {
                  get disabled() {
                    return get(disabled);
                  },
                  get item() {
                    return spell();
                  },
                  get imgUrlOverride() {
                    return spellImgUrl();
                  },
                  get showDiceIconOnHover() {
                    return get(showDiceIconOnHover);
                  },
                  afterRollButton: /* @__PURE__ */ __name(($$anchor6) => {
                    ConcentrationOverlayIcon($$anchor6, {
                      get ctx() {
                        return ctx();
                      }
                    });
                  }, "afterRollButton"),
                  $$slots: { afterRollButton: !0 }
                });
                var node_12 = sibling(node_11, 2);
                ItemName(node_12, {
                  onToggle: /* @__PURE__ */ __name(() => toggleSummary()(get(context).actor), "onToggle"),
                  get item() {
                    return spell();
                  },
                  children: /* @__PURE__ */ __name(($$anchor6, $$slotProps2) => {
                    var span_1 = root_18$7(), text_4 = child(span_1), node_13 = sibling(text_4);
                    {
                      var consequent_4 = /* @__PURE__ */ __name(($$anchor7) => {
                        var i_2 = root_19$4();
                        template_effect(() => set_attribute(i_2, "title", localize("TIDY5E.Activities.Cast.SourceHintText", {
                          itemName: spell().system.linkedActivity.item.name
                        }))), append($$anchor7, i_2);
                      }, "consequent_4");
                      if_block(node_13, ($$render) => {
                        spell().system.linkedActivity?.item && $$render(consequent_4);
                      });
                    }
                    template_effect(() => {
                      set_attribute(span_1, "data-tidy-item-name", spell().name), set_attribute(span_1, "data-tidy-sheet-part", CONSTANTS.SHEET_PARTS.ITEM_NAME), set_text(text_4, `${spell().name ?? ""} `);
                    }), append($$anchor6, span_1);
                  }, "children"),
                  $$slots: { default: !0 }
                });
                var div = sibling(node_12, 2), node_14 = child(div);
                {
                  var consequent_5 = /* @__PURE__ */ __name(($$anchor6) => {
                    var span_2 = root_20$8(), node_15 = child(span_2);
                    ItemUses(node_15, {
                      get item() {
                        return spell();
                      }
                    }), append($$anchor6, span_2);
                  }, "consequent_5"), alternate = /* @__PURE__ */ __name(($$anchor6) => {
                    var fragment_15 = comment(), node_16 = first_child(fragment_15);
                    {
                      var consequent_6 = /* @__PURE__ */ __name(($$anchor7) => {
                        var span_3 = root_22$3(), node_17 = child(span_3);
                        ActivityUses(node_17, {
                          get activity() {
                            return spell().system.linkedActivity;
                          }
                        }), append($$anchor7, span_3);
                      }, "consequent_6");
                      if_block(
                        node_16,
                        ($$render) => {
                          (spell().system.linkedActivity?.uses?.max ?? 0) > 0 && $$render(consequent_6);
                        },
                        !0
                      );
                    }
                    append($$anchor6, fragment_15);
                  }, "alternate");
                  if_block(node_14, ($$render) => {
                    spell().hasLimitedUses ? $$render(consequent_5) : $$render(alternate, !1);
                  });
                }
                var node_18 = sibling(node_14, 2);
                {
                  var consequent_7 = /* @__PURE__ */ __name(($$anchor6) => {
                    InlineFavoriteIcon($$anchor6, {});
                  }, "consequent_7");
                  if_block(node_18, ($$render) => {
                    allowFavorites() && !get(context).useClassicControls && "favoriteId" in ctx() && ctx().favoriteId && $$render(consequent_7);
                  });
                }
                append($$anchor5, fragment_13);
              }, "children"),
              $$slots: { default: !0 }
            });
            var node_19 = sibling(node_10, 2);
            ItemTableCell(node_19, {
              get baseWidth() {
                return spellComponentsBaseWidth();
              },
              cssClass: "no-gap",
              children: /* @__PURE__ */ __name(($$anchor5, $$slotProps) => {
                SpellComponents($$anchor5, {
                  get spell() {
                    return spell();
                  },
                  get spellComponentLabels() {
                    return get(context).spellComponentLabels;
                  }
                });
              }, "children"),
              $$slots: { default: !0 }
            });
            var node_20 = sibling(node_19, 2);
            {
              var consequent_9 = /* @__PURE__ */ __name(($$anchor5) => {
                const icon = /* @__PURE__ */ derived(() => SpellSchool.getIcon(spell().system.school));
                var title_5 = /* @__PURE__ */ derived(() => spell().labels.school ?? "");
                ItemTableCell($$anchor5, {
                  baseWidth: spellSchoolBaseWidth,
                  get title() {
                    return get(title_5);
                  },
                  children: /* @__PURE__ */ __name(($$anchor6, $$slotProps) => {
                    var fragment_19 = comment(), node_21 = first_child(fragment_19);
                    {
                      var consequent_8 = /* @__PURE__ */ __name(($$anchor7) => {
                        var i_3 = root_27$4();
                        template_effect(() => set_class(i_3, `spell-school-icon ${get(icon) ?? ""} svelte-1utj4h0`)), append($$anchor7, i_3);
                      }, "consequent_8"), alternate_1 = /* @__PURE__ */ __name(($$anchor7) => {
                        var fragment_20 = root_28$2(), node_22 = first_child(fragment_20);
                        css_props(node_22, () => ({
                          "--icon-fill": "var(--t5e-secondary-color)",
                          "--icon-width": "1rem",
                          "--icon-height": "1rem"
                        })), Dnd5eIcon(node_22.lastChild, {
                          get src() {
                            return get(icon).iconSrc;
                          }
                        }), append($$anchor7, fragment_20);
                      }, "alternate_1");
                      if_block(node_21, ($$render) => {
                        typeof get(icon) == "string" ? $$render(consequent_8) : $$render(alternate_1, !1);
                      });
                    }
                    append($$anchor6, fragment_19);
                  }, "children"),
                  $$slots: { default: !0 }
                });
              }, "consequent_9");
              if_block(node_20, ($$render) => {
                includeSchool() && $$render(consequent_9);
              });
            }
            var node_23 = sibling(node_20, 2), title_6 = /* @__PURE__ */ derived(() => `${localize("DND5E.Target") ?? ""}: ${spell().labels.target ?? ""}`);
            ItemTableCell(node_23, {
              get baseWidth() {
                return targetBaseWidth();
              },
              get title() {
                return get(title_6);
              },
              children: /* @__PURE__ */ __name(($$anchor5, $$slotProps) => {
                var fragment_21 = comment(), node_24 = first_child(fragment_21);
                {
                  var consequent_10 = /* @__PURE__ */ __name(($$anchor6) => {
                    var text_5 = text();
                    template_effect(() => set_text(text_5, spell().labels.target)), append($$anchor6, text_5);
                  }, "consequent_10"), alternate_2 = /* @__PURE__ */ __name(($$anchor6) => {
                    var text_6 = text();
                    template_effect(() => set_text(text_6, localize("DND5E.None"))), append($$anchor6, text_6);
                  }, "alternate_2");
                  if_block(node_24, ($$render) => {
                    spell().labels.target ? $$render(consequent_10) : $$render(alternate_2, !1);
                  });
                }
                append($$anchor5, fragment_21);
              }, "children"),
              $$slots: { default: !0 }
            });
            var node_25 = sibling(node_23, 2);
            {
              var consequent_11 = /* @__PURE__ */ __name(($$anchor5) => {
                var title_7 = /* @__PURE__ */ derived(() => `${localize("DND5E.Range") ?? ""}: ${spell().labels.range ?? ""}`);
                ItemTableCell($$anchor5, {
                  baseWidth: "4.375rem",
                  get title() {
                    return get(title_7);
                  },
                  children: /* @__PURE__ */ __name(($$anchor6, $$slotProps) => {
                    var text_7 = text();
                    template_effect(() => set_text(text_7, spell().labels.range)), append($$anchor6, text_7);
                  }, "children"),
                  $$slots: { default: !0 }
                });
              }, "consequent_11");
              if_block(node_25, ($$render) => {
                includeRange() && $$render(consequent_11);
              });
            }
            var node_26 = sibling(node_25, 2), title_8 = /* @__PURE__ */ derived(() => localize("DND5E.SpellUsage"));
            ItemTableCell(node_26, {
              get baseWidth() {
                return usageBaseWidth();
              },
              get title() {
                return get(title_8);
              },
              children: /* @__PURE__ */ __name(($$anchor5, $$slotProps) => {
                var text_8 = text();
                template_effect(() => set_text(text_8, spell().labels.activation)), append($$anchor5, text_8);
              }, "children"),
              $$slots: { default: !0 }
            });
            var node_27 = sibling(node_26, 2);
            {
              var consequent_12 = /* @__PURE__ */ __name(($$anchor5) => {
                ItemTableCell($$anchor5, {
                  get baseWidth() {
                    return get(classicControlsColumnWidth);
                  },
                  children: /* @__PURE__ */ __name(($$anchor6, $$slotProps) => {
                    var params = /* @__PURE__ */ derived(() => ({ item: spell(), ctx: ctx() }));
                    ClassicControls($$anchor6, {
                      get controls() {
                        return get(controls);
                      },
                      get params() {
                        return get(params);
                      }
                    });
                  }, "children"),
                  $$slots: { default: !0 }
                });
              }, "consequent_12");
              if_block(node_27, ($$render) => {
                get(context).editable && get(context).useClassicControls && $$render(consequent_12);
              });
            }
            append($$anchor4, fragment_12);
          }, "children"),
          $$slots: { default: !0 }
        });
      });
      var node_28 = sibling(node_9, 2);
      {
        var consequent_13 = /* @__PURE__ */ __name(($$anchor3) => {
          ItemTableFooter($$anchor3, {
            get actor() {
              return get(context).actor;
            },
            get section() {
              return $$props.section;
            },
            get canCreate() {
              return $$props.section.canCreate;
            },
            isItem: !0
          });
        }, "consequent_13");
        if_block(node_28, ($$render) => {
          get(context).unlocked && $$render(consequent_13);
        });
      }
      append($$anchor2, fragment_10);
    }, "body"),
    $$slots: { header: !0, body: !0 }
  }), template_effect(() => set_class(section_1, `spellbook-list-section ${cssClass() ?? ""} svelte-1utj4h0`)), append($$anchor, section_1), pop();
}
__name(SpellbookList, "SpellbookList");
var root$2z = /* @__PURE__ */ template("<select><!></select>");
function Select($$anchor, $$props) {
  push($$props, !0);
  let tooltip = prop($$props, "tooltip", 3, null), id = prop($$props, "id", 3, null), dataset = prop($$props, "dataset", 3, null), title = prop($$props, "title", 3, null), disabled = prop($$props, "disabled", 3, !1), blankValue = prop($$props, "blankValue", 3, null), draftValue = state("");
  user_effect(() => {
    set(draftValue, proxy($$props.value?.toString() ?? ""));
  });
  async function saveChange(event2) {
    const targetValue = event2.currentTarget.value;
    await $$props.document.update({
      [$$props.field]: targetValue !== "" ? targetValue : blankValue()
    });
  }
  __name(saveChange, "saveChange");
  const context = /* @__PURE__ */ derived(getSheetContext), localize = FoundryAdapter.localize;
  let datasetAttributes = /* @__PURE__ */ derived(() => buildDataset(dataset())), activeEffectApplied = /* @__PURE__ */ derived(() => ActiveEffectsHelper.isActiveEffectAppliedToField($$props.document, $$props.field)), isEnchanted = /* @__PURE__ */ derived(() => get(context).itemOverrides instanceof Set && get(context).itemOverrides.has($$props.field)), overrideTooltip = /* @__PURE__ */ derived(() => get(isEnchanted) ? localize("DND5E.ENCHANTMENT.Warning.Override") : localize("DND5E.ActiveEffectOverrideWarning"));
  var select = root$2z();
  let attributes;
  var node = child(select);
  snippet(node, () => $$props.children ?? noop), template_effect(() => attributes = set_attributes(select, attributes, {
    id: id(),
    "data-tooltip": get(activeEffectApplied) ? get(overrideTooltip) : tooltip(),
    onchange: $$props.document && saveChange,
    title: title(),
    ...get(datasetAttributes),
    disabled: disabled() || get(activeEffectApplied),
    "data-tidy-field": $$props.field,
    class: $$props.class ?? ""
  })), bind_select_value(select, () => get(draftValue), ($$value) => set(draftValue, $$value)), append($$anchor, select), pop();
}
__name(Select, "Select");
var on_click$12 = /* @__PURE__ */ __name((_, context, formula) => {
  mutate(context, get(context).maxPreparedSpells = get(formula).value);
}, "on_click$12"), root_1$1y = /* @__PURE__ */ template('<button type="button" class="highlight-on-hover svelte-1prypru"> </button>'), root$2y = /* @__PURE__ */ template('<section class="flex-column"><div class="form-field"><label> </label> <input type="text" placeholder="0"></div> <div role="presentation"><h3> </h3> <p class="flex-row flex-wrap sample-formulas svelte-1prypru"></p> <p><a target="_blank" href="https://github.com/kgar/foundry-vtt-tidy-5e-sheets/wiki/Max-Prepared-Spells-Formulas"> </a></p></div> <button type="submit"><i class="far fa-save"></i> </button></section>');
function MaxPreparedSpellsConfig($$anchor, $$props) {
  push($$props, !1);
  const appId = getContext(CONSTANTS.SVELTE_CONTEXT.APP_ID), context = mutable_state(getContext(CONSTANTS.SVELTE_CONTEXT.CONTEXT)), localize = FoundryAdapter.localize;
  init();
  var section = root$2y(), div = child(section), label = child(div);
  set_attribute(label, "for", `max-prepared-spells-edit-${appId ?? ""}`);
  var text2 = child(label);
  template_effect(() => set_text(text2, localize("DND5E.Formula")));
  var input = sibling(label, 2);
  set_attribute(input, "id", `max-prepared-spells-edit-${appId ?? ""}`);
  var div_1 = sibling(div, 2), h3 = child(div_1), text_1 = child(h3);
  template_effect(() => set_text(text_1, localize("TIDY5E.MaxPreparedSpellsConfig.ExamplesHeader")));
  var p2 = sibling(h3, 2);
  each(p2, 5, () => get(context).formulas, index, ($$anchor2, formula) => {
    var button = root_1$1y();
    button.__click = [on_click$12, context, formula];
    var text_2 = child(button);
    template_effect(() => set_text(text_2, localize(get(formula).label))), append($$anchor2, button);
  });
  var p_1 = sibling(p2, 2), a2 = child(p_1), text_3 = child(a2);
  template_effect(() => set_text(text_3, localize("TIDY5E.MaxPreparedSpellsConfig.MoreFormulas")));
  var button_1 = sibling(div_1, 2), text_4 = sibling(child(button_1));
  template_effect(() => set_text(text_4, ` ${localize("Save") ?? ""}`)), bind_value(input, () => get(context).maxPreparedSpells, ($$value) => mutate(context, get(context).maxPreparedSpells = $$value)), append($$anchor, section), pop();
}
__name(MaxPreparedSpellsConfig, "MaxPreparedSpellsConfig");
delegate(["click"]);
class MaxPreparedSpellsConfigFormApplication extends SvelteFormApplicationBase {
  static {
    __name(this, "MaxPreparedSpellsConfigFormApplication");
  }
  #context = state();
  get context() {
    return get(this.#context);
  }
  set context(value) {
    set(this.#context, proxy(value));
  }
  actor;
  classToUpdate;
  constructor(documentName, classToUpdate, ...args) {
    super(...args), this.documentName = documentName, this.classToUpdate = classToUpdate, this.context = {
      maxPreparedSpells: "",
      formulas: getMaxPreparedSpellsSampleFormulas()
    };
  }
  createComponent(node) {
    return this.context = this.getData(), mount(MaxPreparedSpellsConfig, {
      target: node,
      context: /* @__PURE__ */ new Map([
        ["context", this.context],
        ["appId", this.appId]
      ])
    });
  }
  getData() {
    return {
      maxPreparedSpells: this.classToUpdate?.system?.spellcasting?.preparation?.formula ?? "",
      formulas: getMaxPreparedSpellsSampleFormulas()
    };
  }
  static get defaultOptions() {
    return FoundryAdapter.mergeObject(super.defaultOptions, {
      width: 500,
      height: "auto",
      sheetConfig: !1,
      resizable: !1
    });
  }
  get title() {
    return FoundryAdapter.localize("TIDY5E.MaxPreparedSpellsConfig.Title", { documentName: this.documentName });
  }
  async _updateObject() {
    await this.classToUpdate.update({
      "system.spellcasting.preparation.formula": this.context?.maxPreparedSpells ?? ""
    }), this.close();
  }
}
var on_click$11 = /* @__PURE__ */ __name(async (ev, context) => await rollRawSpellAttack(ev, get(context).actor, "rsak", get(context).spellcastingInfo.currentFilteredClass?.system?.spellcasting?.ability), "on_click$11"), on_click_1$t = /* @__PURE__ */ __name(async (ev, context) => await rollRawSpellAttack(ev, get(context).actor, "msak", get(context).spellcastingInfo.currentFilteredClass?.system?.spellcasting?.ability), "on_click_1$t"), root_3$E = /* @__PURE__ */ template('<button type="button" class="inline-transparent-button spell-attack-mod-button rollable svelte-1h43w08"><i class="fa-solid fa-wand-magic-sparkles svelte-1h43w08"></i> <span class="spell-attack-mod"> </span></button> <button type="button" class="inline-transparent-button spell-attack-mod-button rollable svelte-1h43w08"><i class="fa-solid fa-hand-sparkles svelte-1h43w08"></i> <span class="spell-attack-mod"> </span></button>', 1), on_click_2$g = /* @__PURE__ */ __name(async (ev, context) => await rollRawSpellAttack(ev, get(context).actor, void 0, get(context).spellcastingInfo.currentFilteredClass?.system?.spellcasting?.ability), "on_click_2$g"), root_4$t = /* @__PURE__ */ template('<button type="button" class="inline-transparent-button spell-attack-mod-button rollable svelte-1h43w08"><span class="spell-attack-mod"> </span></button>'), root_2$L = /* @__PURE__ */ template("<span>|</span> <span> </span> <!>", 1), on_click_3$7 = /* @__PURE__ */ __name((_, context) => new MaxPreparedSpellsConfigFormApplication(get(context).spellcastingInfo.currentFilteredClass.name, get(context).spellcastingInfo.currentFilteredClass).render(!0), "on_click_3$7"), root_5$v = /* @__PURE__ */ template('<button type="button" class="transparent-button secondary-footer-field highlight-on-hover svelte-1h43w08"><p class="svelte-1h43w08"> </p> <span class="spells-prepared"> </span> / <span class="spells-max-prepared"> </span></button>'), root_7$q = /* @__PURE__ */ template("<option> </option>"), root_6$l = /* @__PURE__ */ template("<option> </option> <!>", 1), root_8$l = /* @__PURE__ */ template('<div class="spellcasting-level-container secondary-footer-field svelte-1h43w08"><p class="truncate svelte-1h43w08"> </p> <!></div>'), root_1$1x = /* @__PURE__ */ template('<h3 class="spell-dc spell-mod flex-row extra-small-gap svelte-1h43w08"><div class="flex-row extra-small-gap" style="align-items: baseline;"><div> </div> <div class="dc-container svelte-1h43w08"> </div> <!></div></h3> <!> <div class="spellcasting-attribute secondary-footer-field svelte-1h43w08"><p class="svelte-1h43w08"> </p> <!></div> <!>', 1);
function SpellbookFooter($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getSheetContext), cssClass = prop($$props, "cssClass", 3, null), includeAttackMod = prop($$props, "includeAttackMod", 3, !0), includePreparedSpells = prop($$props, "includePreparedSpells", 3, !0);
  const localize = FoundryAdapter.localize;
  let abilities = /* @__PURE__ */ derived(() => FoundryAdapter.getAbilitiesAsDropdownOptions(get(context).abilities));
  TabFooter($$anchor, {
    get cssClass() {
      return `${cssClass() ?? ""} spellbook-footer`;
    },
    mode: "horizontal",
    children: /* @__PURE__ */ __name(($$anchor2, $$slotProps) => {
      var fragment_1 = root_1$1x(), h3 = first_child(fragment_1), div = child(h3), div_1 = child(div), text2 = child(div_1);
      template_effect(() => set_text(text2, `${FoundryAdapter.localize("DND5E.AbbreviationDC") ?? ""}:`));
      var div_2 = sibling(div_1, 2);
      template_effect(() => set_attribute(div_2, "data-tooltip", `${FoundryAdapter.localize("DND5E.SpellDC") ?? ""}: ${get(context).spellcastingInfo.calculations.dcTooltip ?? ""}`));
      var text_1 = child(div_2), node = sibling(div_2, 2);
      {
        var consequent_1 = /* @__PURE__ */ __name(($$anchor3) => {
          var fragment_2 = root_2$L(), span = sibling(first_child(fragment_2), 2), text_2 = child(span);
          template_effect(() => set_text(text_2, `${FoundryAdapter.localize("TIDY5E.AttackMod") ?? ""}:`));
          var node_1 = sibling(span, 2);
          {
            var consequent = /* @__PURE__ */ __name(($$anchor4) => {
              var fragment_3 = root_3$E(), button = first_child(fragment_3);
              button.__click = [on_click$11, context], template_effect(() => set_attribute(button, "data-tooltip", `${FoundryAdapter.localize("TIDY5E.RangedSpellAttackMod") ?? ""}: ${get(context).spellcastingInfo.calculations.rangedTooltip ?? ""}`));
              var span_1 = sibling(child(button), 2), text_3 = child(span_1), button_1 = sibling(button, 2);
              button_1.__click = [on_click_1$t, context], template_effect(() => set_attribute(button_1, "data-tooltip", `${FoundryAdapter.localize("TIDY5E.MeleeSpellAttackMod") ?? ""}: ${get(context).spellcastingInfo.calculations.meleeTooltip ?? ""}`));
              var span_2 = sibling(child(button_1), 2), text_4 = child(span_2);
              template_effect(() => {
                set_attribute(button, "tabindex", settings.value.useAccessibleKeyboardSupport ? 0 : -1), set_attribute(span_1, "data-tidy-mod-has-bonus", get(context).spellcastingInfo.calculations.rangedHasBonus), set_attribute(span_1, "data-tidy-sheet-part", CONSTANTS.SHEET_PARTS.RANGED_SPELL_ATTACK_MOD), set_text(text_3, get(context).spellcastingInfo.calculations.rangedMod), set_attribute(button_1, "tabindex", settings.value.useAccessibleKeyboardSupport ? 0 : -1), set_attribute(span_2, "data-tidy-mod-has-bonus", get(context).spellcastingInfo.calculations.meleeHasBonus), set_attribute(span_2, "data-tidy-sheet-part", CONSTANTS.SHEET_PARTS.MELEE_SPELL_ATTACK_MOD), set_text(text_4, get(context).spellcastingInfo.calculations.meleeMod);
              }), append($$anchor4, fragment_3);
            }, "consequent"), alternate = /* @__PURE__ */ __name(($$anchor4) => {
              var button_2 = root_4$t();
              button_2.__click = [on_click_2$g, context], template_effect(() => set_attribute(button_2, "data-tooltip", `${FoundryAdapter.localize("TIDY5E.SpellAttackMod") ?? ""}: ${get(context).spellcastingInfo.calculations.rangedTooltip ?? ""}`));
              var span_3 = child(button_2), text_5 = child(span_3);
              template_effect(() => {
                set_attribute(button_2, "tabindex", settings.value.useAccessibleKeyboardSupport ? 0 : -1), set_attribute(span_3, "data-tidy-mod-has-bonus", get(context).spellcastingInfo.calculations.rangedHasBonus), set_attribute(span_3, "data-tidy-sheet-part", CONSTANTS.SHEET_PARTS.SPELL_ATTACK_MOD), set_text(text_5, get(context).spellcastingInfo.calculations.rangedMod);
              }), append($$anchor4, button_2);
            }, "alternate");
            if_block(node_1, ($$render) => {
              get(context).spellcastingInfo.calculations.rangedMod !== get(context).spellcastingInfo.calculations.meleeMod ? $$render(consequent) : $$render(alternate, !1);
            });
          }
          append($$anchor3, fragment_2);
        }, "consequent_1");
        if_block(node, ($$render) => {
          includeAttackMod() && $$render(consequent_1);
        });
      }
      var node_2 = sibling(h3, 2);
      {
        var consequent_2 = /* @__PURE__ */ __name(($$anchor3) => {
          var button_3 = root_5$v();
          button_3.__click = [on_click_3$7, context], template_effect(() => set_attribute(button_3, "title", localize("TIDY5E.MaxPreparedSpellsConfig.ButtonTooltip")));
          var p2 = child(button_3), text_6 = child(p2);
          template_effect(() => set_text(text_6, localize("TIDY5E.PreparedSpells")));
          var span_4 = sibling(p2, 2), text_7 = child(span_4), span_5 = sibling(span_4, 2), text_8 = child(span_5);
          template_effect(() => {
            button_3.disabled = !get(context).editable || get(context).lockSensitiveFields, set_attribute(button_3, "tabindex", settings.value.useAccessibleKeyboardSupport ? 0 : -1), set_text(text_7, get(context).spellcastingInfo.prepared?.value ?? 0), set_text(text_8, get(context).spellcastingInfo.prepared?.max ?? 0);
          }), append($$anchor3, button_3);
        }, "consequent_2");
        if_block(node_2, ($$render) => {
          includePreparedSpells() && get(context).spellcastingInfo.currentFilteredClass && (get(context).spellcastingInfo.prepared?.value || get(context).spellcastingInfo.prepared?.max) && $$render(consequent_2);
        });
      }
      var div_3 = sibling(node_2, 2), p_1 = child(div_3), text_9 = child(p_1);
      template_effect(() => set_text(text_9, localize("DND5E.SpellAbility")));
      var node_3 = sibling(p_1, 2), disabled = /* @__PURE__ */ derived(() => !get(context).editable || get(context).lockSensitiveFields);
      Select(node_3, {
        get document() {
          return get(context).actor;
        },
        field: "system.attributes.spellcasting",
        get value() {
          return get(context).system.attributes.spellcasting;
        },
        get disabled() {
          return get(disabled);
        },
        blankValue: "",
        children: /* @__PURE__ */ __name(($$anchor3, $$slotProps2) => {
          var fragment_4 = root_6$l(), option = first_child(fragment_4);
          option.value = ((option.__value = "") == null, "");
          var text_10 = child(option);
          template_effect(() => set_text(text_10, localize("DND5E.None")));
          var node_4 = sibling(option, 2);
          each(node_4, 17, () => get(abilities), index, ($$anchor4, ability) => {
            var option_1 = root_7$q(), option_1_value = {}, text_11 = child(option_1);
            template_effect(() => {
              option_1_value !== (option_1_value = get(ability).value) && (option_1.value = (option_1.__value = get(ability).value) == null ? "" : get(ability).value), set_text(text_11, get(ability).text);
            }), append($$anchor4, option_1);
          }), template_effect(() => set_selected(option, !get(context).system.attributes.spellcasting)), append($$anchor3, fragment_4);
        }, "children"),
        $$slots: { default: !0 }
      });
      var node_5 = sibling(div_3, 2);
      {
        var consequent_3 = /* @__PURE__ */ __name(($$anchor3) => {
          var div_4 = root_8$l(), p_2 = child(div_4), text_12 = child(p_2);
          template_effect(() => set_text(text_12, localize("DND5E.SpellcasterLevel")));
          var node_6 = sibling(p_2, 2), disabled_1 = /* @__PURE__ */ derived(() => !get(context).editable || get(context).lockSensitiveFields);
          NumberInput(node_6, {
            cssClass: "spellcasting-level",
            get document() {
              return get(context).actor;
            },
            field: "system.details.spellLevel",
            get value() {
              return get(context).system.details.spellLevel;
            },
            placeholder: "0",
            min: "0",
            step: "1",
            selectOnFocus: !0,
            get disabled() {
              return get(disabled_1);
            }
          }), append($$anchor3, div_4);
        }, "consequent_3");
        if_block(node_5, ($$render) => {
          get(context).isNPC && $$render(consequent_3);
        });
      }
      template_effect(() => {
        set_attribute(div_2, "data-tidy-sheet-part", CONSTANTS.SHEET_PARTS.SPELL_DC), set_text(text_1, get(context).spellcastingInfo.calculations.dc);
      }), append($$anchor2, fragment_1);
    }, "children"),
    $$slots: { default: !0 }
  }), pop();
}
__name(SpellbookFooter, "SpellbookFooter");
delegate(["click"]);
var root_3$D = /* @__PURE__ */ template('<span class="spell-primary-column-label svelte-179zdaq"> </span> <!>', 1), on_click$10 = /* @__PURE__ */ __name((event2, spell) => FoundryAdapter.actorTryUseItem(spell(), event2), "on_click$10"), on_contextmenu$1 = /* @__PURE__ */ __name((event2, spell) => FoundryAdapter.onActorItemButtonContextMenu(spell(), { event: event2 }), "on_contextmenu$1"), on_mousedown$1 = /* @__PURE__ */ __name((event2, spell) => FoundryAdapter.editOnMiddleClick(event2, spell()), "on_mousedown$1"), root_8$k = /* @__PURE__ */ template('<i class="fa fa-dice-d20 svelte-179zdaq"></i>'), root_6$k = /* @__PURE__ */ template('<a data-tidy-grid-item=""><!> <div class="spell-name svelte-179zdaq"><div class="spell-image svelte-179zdaq"><!> <svelte-css-wrapper style="display: contents"><!></svelte-css-wrapper></div></div></a>'), on_click_1$s = /* @__PURE__ */ __name((event2, $$props, context) => {
  event2.preventDefault(), event2.stopPropagation(), FoundryAdapter.createItem($$props.section.dataset, get(context).actor);
}, "on_click_1$s"), root_10$i = /* @__PURE__ */ template('<button type="button" class="footer-command icon-button svelte-179zdaq"><i class="fas fa-plus-circle svelte-179zdaq"></i></button>'), on_click_2$f = /* @__PURE__ */ __name((ev, command, $$props, context) => get(command).execute?.({
  section: $$props.section,
  event: ev,
  actor: get(context).actor
}), "on_click_2$f"), root_12$6 = /* @__PURE__ */ template("<i></i>"), root_11$8 = /* @__PURE__ */ template('<button type="button" class="footer-command icon-button svelte-179zdaq"><!> </button>'), root_9$l = /* @__PURE__ */ template('<div class="spells-footer svelte-179zdaq"><!> <!></div>'), root_5$u = /* @__PURE__ */ template('<div class="spells svelte-179zdaq"><!> <!></div>'), root$2x = /* @__PURE__ */ template("<section><!></section>");
function SpellbookGrid($$anchor, $$props) {
  push($$props, !0);
  let cssClass = prop($$props, "cssClass", 3, null), context = /* @__PURE__ */ derived(getSheetContext), searchResultContext = getSearchResultsContext(), spellEntries = /* @__PURE__ */ derived(() => $$props.section.spells.map((s2) => ({
    spell: s2,
    ctx: get(context).itemContext[s2.id],
    spellImgUrl: FoundryAdapter.getSpellImageUrl(get(context), s2)
  }))), customCommands = /* @__PURE__ */ derived(() => ActorItemRuntime.getActorItemSectionCommands({
    actor: get(context).actor,
    section: $$props.section
  }));
  const localize = FoundryAdapter.localize;
  async function onMouseEnter(event2, item) {
    TidyHooks.tidy5eSheetsItemHoverOn(event2, item);
  }
  __name(onMouseEnter, "onMouseEnter");
  async function onMouseLeave(event2, item) {
    TidyHooks.tidy5eSheetsItemHoverOff(event2, item);
  }
  __name(onMouseLeave, "onMouseLeave");
  function handleDragStart(event2, item) {
    if (!item)
      return;
    onMouseLeave(event2, item);
    const dragData = item.toDragData();
    event2.dataTransfer?.setData("text/plain", JSON.stringify(dragData));
  }
  __name(handleDragStart, "handleDragStart"), declareLocation("spellbook-grid-view");
  var section_1 = root$2x(), node = child(section_1), data_custom_section = /* @__PURE__ */ derived(() => $$props.section.custom ? !0 : null);
  ItemTable(node, {
    get key() {
      return $$props.section.key;
    },
    get "data-custom-section"() {
      return get(data_custom_section);
    },
    header: /* @__PURE__ */ __name(($$anchor2) => {
      ItemTableHeaderRow($$anchor2, {
        children: /* @__PURE__ */ __name(($$anchor3, $$slotProps) => {
          ItemTableColumn($$anchor3, {
            primary: !0,
            children: /* @__PURE__ */ __name(($$anchor4, $$slotProps2) => {
              var fragment_2 = root_3$D(), span = first_child(fragment_2), text2 = child(span);
              template_effect(() => set_text(text2, localize($$props.section.label)));
              var node_1 = sibling(span, 2);
              {
                var consequent = /* @__PURE__ */ __name(($$anchor5) => {
                  SpellSlotManagement($$anchor5, {
                    get section() {
                      return $$props.section;
                    }
                  });
                }, "consequent");
                if_block(node_1, ($$render) => {
                  $$props.section.usesSlots && $$render(consequent);
                });
              }
              append($$anchor4, fragment_2);
            }, "children"),
            $$slots: { default: !0 }
          });
        }, "children"),
        $$slots: { default: !0 }
      });
    }, "header"),
    body: /* @__PURE__ */ __name(($$anchor2) => {
      var div = root_5$u(), node_2 = child(div);
      each(node_2, 17, () => get(spellEntries), ({ spell, ctx, spellImgUrl }) => spell.id, ($$anchor3, $$item) => {
        let spell = /* @__PURE__ */ __name(() => get($$item).spell, "spell"), ctx = /* @__PURE__ */ __name(() => get($$item).ctx, "ctx"), spellImgUrl = /* @__PURE__ */ __name(() => get($$item).spellImgUrl, "spellImgUrl");
        var a2 = root_6$k();
        const hidden = /* @__PURE__ */ derived(() => !searchResultContext.show(spell().uuid)), class_derived = /* @__PURE__ */ derived(() => `spell ${FoundryAdapter.getSpellRowClasses(spell()) ?? ""} svelte-179zdaq`);
        a2.__click = [on_click$10, spell], a2.__contextmenu = [on_contextmenu$1, spell], a2.__mousedown = [on_mousedown$1, spell], set_attribute(a2, "draggable", !0);
        var node_3 = child(a2);
        {
          var consequent_1 = /* @__PURE__ */ __name(($$anchor4) => {
            GridPaneFavoriteIcon($$anchor4, {});
          }, "consequent_1");
          if_block(node_3, ($$render) => {
            "favoriteId" in ctx() && ctx().favoriteId && $$render(consequent_1);
          });
        }
        var div_1 = sibling(node_3, 2), div_2 = child(div_1), node_4 = child(div_2);
        {
          var consequent_2 = /* @__PURE__ */ __name(($$anchor4) => {
            var i2 = root_8$k();
            append($$anchor4, i2);
          }, "consequent_2");
          if_block(node_4, ($$render) => {
            ctx().concentration || $$render(consequent_2);
          });
        }
        var node_5 = sibling(node_4, 2);
        css_props(node_5, () => ({ "--tidy-icon-font-size": "1.25rem" })), ConcentrationOverlayIcon(node_5.lastChild, {
          get ctx() {
            return ctx();
          }
        }), template_effect(() => {
          set_class(a2, get(class_derived)), set_attribute(a2, "aria-hidden", get(hidden)), set_attribute(a2, "data-context-menu", CONSTANTS.CONTEXT_MENU_TYPE_ITEMS), set_attribute(a2, "data-tidy-sheet-part", CONSTANTS.SHEET_PARTS.ITEM_USE_COMMAND), set_attribute(a2, "data-item-id", spell().id), set_attribute(a2, "tabindex", settings.value.useAccessibleKeyboardSupport ? 0 : -1), set_attribute(a2, "data-info-card", spell() ? "item" : null), set_attribute(a2, "data-info-card-entity-uuid", spell()?.uuid ?? null), toggle_class(a2, "hidden", get(hidden)), set_attribute(div_2, "style", `background-image: url('${spellImgUrl() ?? ""}');`);
        }), event("mouseenter", a2, (ev) => onMouseEnter(ev, spell())), event("mouseleave", a2, (ev) => onMouseLeave(ev, spell())), event("dragstart", a2, (ev) => handleDragStart(ev, spell())), append($$anchor3, a2);
      });
      var node_6 = sibling(node_2, 2);
      {
        var consequent_5 = /* @__PURE__ */ __name(($$anchor3) => {
          var div_3 = root_9$l(), node_7 = child(div_3);
          {
            var consequent_3 = /* @__PURE__ */ __name(($$anchor4) => {
              var button = root_10$i();
              template_effect(() => set_attribute(button, "title", localize("DND5E.SpellCreate"))), button.__click = [on_click_1$s, $$props, context], template_effect(() => {
                set_attribute(button, "data-tidy-sheet-part", CONSTANTS.SHEET_PARTS.ITEM_CREATE_COMMAND), set_attribute(button, "tabindex", settings.value.useAccessibleKeyboardSupport ? 0 : -1);
              }), append($$anchor4, button);
            }, "consequent_3");
            if_block(node_7, ($$render) => {
              $$props.section.canCreate && $$render(consequent_3);
            });
          }
          var node_8 = sibling(node_7, 2);
          each(node_8, 17, () => get(customCommands), index, ($$anchor4, command) => {
            var button_1 = root_11$8();
            button_1.__click = [on_click_2$f, command, $$props, context], template_effect(() => set_attribute(button_1, "title", localize(get(command).tooltip ?? "")));
            var node_9 = child(button_1);
            {
              var consequent_4 = /* @__PURE__ */ __name(($$anchor5) => {
                var i_1 = root_12$6();
                template_effect(() => set_class(i_1, clsx(get(command).iconClass), "svelte-179zdaq")), append($$anchor5, i_1);
              }, "consequent_4");
              if_block(node_9, ($$render) => {
                (get(command).iconClass ?? "") !== "" && $$render(consequent_4);
              });
            }
            var text_1 = sibling(node_9);
            template_effect(() => set_text(text_1, ` ${localize(get(command).label ?? "") ?? ""}`)), template_effect(() => set_attribute(button_1, "tabindex", settings.value.useAccessibleKeyboardSupport ? 0 : -1)), append($$anchor4, button_1);
          }), append($$anchor3, div_3);
        }, "consequent_5");
        if_block(node_6, ($$render) => {
          get(context).unlocked && $$render(consequent_5);
        });
      }
      append($$anchor2, div);
    }, "body"),
    $$slots: { header: !0, body: !0 }
  }), template_effect(() => set_class(section_1, `spellbook-grid ${cssClass() ?? ""} svelte-179zdaq`)), append($$anchor, section_1), pop();
}
__name(SpellbookGrid, "SpellbookGrid");
delegate(["click", "contextmenu", "mousedown"]);
var on_change$5 = /* @__PURE__ */ __name((event2, context) => {
  event2.preventDefault(), event2.stopPropagation(), get(context).actor.update({
    [TidyFlags.classFilter.prop]: event2.currentTarget.value
  });
}, "on_change$5"), root_1$1w = /* @__PURE__ */ template("<option> </option>"), root$2w = /* @__PURE__ */ template('<select class="class-filter svelte-ssxj4u"></select>');
function SpellbookClassFilter($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getCharacterSheetContext), allClasses = /* @__PURE__ */ derived(() => [
    { text: "DND5E.Spellbook", value: "" },
    ...Object.entries(get(context).actor.spellcastingClasses).map(([key, value]) => ({ text: value.name, value: key }))
  ]);
  const localize = FoundryAdapter.localize;
  let selectedClassFilter = /* @__PURE__ */ derived(() => TidyFlags.classFilter.get(get(context).actor) ?? "");
  var select = root$2w();
  select.__change = [on_change$5, context], each(select, 21, () => get(allClasses), index, ($$anchor2, option) => {
    var option_1 = root_1$1w(), option_1_value = {}, text2 = child(option_1);
    template_effect(() => set_text(text2, localize(get(option).text))), template_effect(() => {
      option_1_value !== (option_1_value = get(option).value) && (option_1.value = (option_1.__value = get(option).value) == null ? "" : get(option).value), set_selected(option_1, get(option).value === (get(selectedClassFilter) ?? void 0));
    }), append($$anchor2, option_1);
  }), template_effect(() => {
    select.disabled = !get(context).editable, set_attribute(select, "data-tidy-field", TidyFlags.classFilter.prop);
  }), append($$anchor, select), pop();
}
__name(SpellbookClassFilter, "SpellbookClassFilter");
delegate(["change"]);
var on_click$$ = /* @__PURE__ */ __name((_, context) => FoundryAdapter.createItem({ type: "spell", level: "" }, get(context).actor), "on_click$$"), root_2$K = /* @__PURE__ */ template('<button type="button" class="create-spell-btn flex-row align-items-center extra-small-gap svelte-1i4uex"><i class="fas fa-plus-circle"></i> </button>'), root$2v = /* @__PURE__ */ template("<div><!> <!></div>");
function NoSpells($$anchor, $$props) {
  push($$props, !0);
  let cssClass = prop($$props, "cssClass", 3, null), context = /* @__PURE__ */ derived(getSheetContext);
  const localize = FoundryAdapter.localize;
  var div = root$2v(), node = child(div);
  Notice(node, {
    children: /* @__PURE__ */ __name(($$anchor2, $$slotProps) => {
      var text$1 = text();
      template_effect(() => set_text(text$1, localize("DND5E.NoSpellLevels"))), append($$anchor2, text$1);
    }, "children"),
    $$slots: { default: !0 }
  });
  var node_1 = sibling(node, 2);
  {
    var consequent = /* @__PURE__ */ __name(($$anchor2) => {
      var button = root_2$K();
      button.__click = [on_click$$, context];
      var text_1 = sibling(child(button));
      template_effect(() => set_text(text_1, ` ${localize("DND5E.SpellCreate") ?? ""}`)), template_effect(() => set_attribute(button, "tabindex", settings.value.useAccessibleKeyboardSupport ? 0 : -1)), append($$anchor2, button);
    }, "consequent");
    if_block(node_1, ($$render) => {
      get(context).editable && $$props.editable && $$render(consequent);
    });
  }
  template_effect(() => set_class(div, `no-spells-container ${cssClass() ?? ""} svelte-1i4uex`)), append($$anchor, div), pop();
}
__name(NoSpells, "NoSpells");
delegate(["click"]);
var root_6$j = /* @__PURE__ */ template('<span> </span> <i class="fas fa-question-circle"></i>', 1), root_2$J = /* @__PURE__ */ template("<!> <!> <!>", 1), on_click$_ = /* @__PURE__ */ __name(async (_, assignment) => FoundryAdapter.renderSheetFromUuid(get(assignment).item.uuid), "on_click$_"), root_10$h = /* @__PURE__ */ template('<button type="button" class="inline-transparent-button highlight-on-hover"> </button>'), root_9$k = /* @__PURE__ */ template("<!> <!> <!>", 1), root$2u = /* @__PURE__ */ template('<section class="flex-column small-gap full-height"><div role="presentation" class="flex-row small-gap"><!> <label class="flex-row extra-small-gap align-items-center"><input type="checkbox"> </label></div> <div role="presentation" class="scroll-container flex-1"><!></div></section>');
function SpellSourceClassAssignments($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(() => getContext(CONSTANTS.SVELTE_CONTEXT.CONTEXT).data), searchCriteria = state(""), visibleSelectablesIdSubset = /* @__PURE__ */ derived(() => new Set(get(context).assignments.filter((s2) => get(searchCriteria).trim() === "" || s2.item.name?.toLowerCase().includes(get(searchCriteria).toLowerCase())).map((d2) => d2.item.id))), classColumns = /* @__PURE__ */ derived(() => Object.entries(get(context).actor.spellcastingClasses).map(([key, value]) => ({ key, item: value }))), gridTemplateColumns = /* @__PURE__ */ derived(() => {
    let standardClassColumnWidth = "10rem", columns = "/* Spell Name */ minmax(200px, 1fr)";
    return get(classColumns).forEach((column) => {
      columns += ` /* ${column.item.name} */ ${standardClassColumnWidth}`;
    }), columns += " /* Identifier */ 200px", columns;
  });
  async function setItemSourceClass(item, sourceClass) {
    await item.update({ "system.sourceClass": sourceClass });
  }
  __name(setItemSourceClass, "setItemSourceClass");
  const localize = FoundryAdapter.localize;
  var showUnassignedOnly = state(!1), section = root$2u(), div = child(section), node = child(div);
  Search$1(node, {
    get value() {
      return get(searchCriteria);
    },
    set value($$value) {
      set(searchCriteria, proxy($$value));
    }
  });
  var label = sibling(node, 2), input = child(label), text$1 = sibling(input);
  template_effect(() => set_text(text$1, ` ${localize("TIDY5E.SpellSourceClassAssignments.ShowUnassignedOnly.Text") ?? ""}`));
  var div_1 = sibling(div, 2), node_1 = child(div_1);
  TidyTable(node_1, {
    key: "spell-source-class-assignments-matrix",
    toggleable: !1,
    get gridTemplateColumns() {
      return get(gridTemplateColumns);
    },
    header: /* @__PURE__ */ __name(($$anchor2) => {
      TidyTableHeaderRow($$anchor2, {
        children: /* @__PURE__ */ __name(($$anchor3, $$slotProps) => {
          var fragment_1 = root_2$J(), node_2 = first_child(fragment_1);
          TidyTableHeaderCell(node_2, {
            primary: !0,
            class: "p-1 capitalize",
            children: /* @__PURE__ */ __name(($$anchor4, $$slotProps2) => {
              var text_1 = text();
              template_effect(() => set_text(text_1, localize("DND5E.spell"))), append($$anchor4, text_1);
            }, "children"),
            $$slots: { default: !0 }
          });
          var node_3 = sibling(node_2, 2);
          each(node_3, 17, () => get(classColumns), index, ($$anchor4, classColumn) => {
            TidyTableHeaderCell($$anchor4, {
              children: /* @__PURE__ */ __name(($$anchor5, $$slotProps2) => {
                var text_2 = text();
                template_effect(() => set_text(text_2, get(classColumn).item.name)), append($$anchor5, text_2);
              }, "children"),
              $$slots: { default: !0 }
            });
          });
          var node_4 = sibling(node_3, 2);
          TidyTableHeaderCell(node_4, {
            class: "flex-row small-gap",
            children: /* @__PURE__ */ __name(($$anchor4, $$slotProps2) => {
              var fragment_5 = root_6$j(), span = first_child(fragment_5), text_3 = child(span);
              template_effect(() => set_text(text_3, localize("TIDY5E.SpellSourceClassAssignments.Identifier")));
              var i2 = sibling(span, 2);
              template_effect(() => set_attribute(i2, "title", localize("TIDY5E.SpellSourceClassAssignments.IdentifierHint"))), append($$anchor4, fragment_5);
            }, "children"),
            $$slots: { default: !0 }
          }), append($$anchor3, fragment_1);
        }, "children"),
        $$slots: { default: !0 }
      });
    }, "header"),
    body: /* @__PURE__ */ __name(($$anchor2) => {
      var fragment_6 = comment(), node_5 = first_child(fragment_6);
      each(node_5, 17, () => get(context).assignments, (assignment) => assignment.item.id, ($$anchor3, assignment) => {
        const sourceClassIsUnassigned = /* @__PURE__ */ derived(() => (get(assignment).item.system.sourceClass?.trim() ?? "") === ""), hideRow = /* @__PURE__ */ derived(() => !get(visibleSelectablesIdSubset).has(get(assignment).item.id) || safe_get(showUnassignedOnly) && !get(sourceClassIsUnassigned));
        TidyTableRow($$anchor3, {
          get hidden() {
            return get(hideRow);
          },
          children: /* @__PURE__ */ __name(($$anchor4, $$slotProps) => {
            var fragment_8 = root_9$k(), node_6 = first_child(fragment_8);
            TidyTableCell(node_6, {
              primary: !0,
              class: "p-1 semibold",
              children: /* @__PURE__ */ __name(($$anchor5, $$slotProps2) => {
                var button = root_10$h();
                button.__click = [on_click$_, assignment];
                var text_4 = child(button);
                template_effect(() => set_text(text_4, get(assignment).item.name)), append($$anchor5, button);
              }, "children"),
              $$slots: { default: !0 }
            });
            var node_7 = sibling(node_6, 2);
            each(node_7, 17, () => get(classColumns), index, ($$anchor5, classColumn) => {
              const selected = /* @__PURE__ */ derived(() => get(assignment).item.system.sourceClass === get(classColumn).key);
              TidyTableHeaderCell($$anchor5, {
                children: /* @__PURE__ */ __name(($$anchor6, $$slotProps2) => {
                  TidySwitch($$anchor6, {
                    get checked() {
                      return get(selected);
                    },
                    onChange: /* @__PURE__ */ __name((ev) => setItemSourceClass(get(assignment).item, ev.currentTarget.checked ? get(classColumn).key : ""), "onChange")
                  });
                }, "children"),
                $$slots: { default: !0 }
              });
            });
            var node_8 = sibling(node_7, 2);
            TidyTableCell(node_8, {
              children: /* @__PURE__ */ __name(($$anchor5, $$slotProps2) => {
                var disabled = /* @__PURE__ */ derived(() => !get(assignment).item.isOwner);
                TextInput($$anchor5, {
                  get document() {
                    return get(assignment).item;
                  },
                  get disabled() {
                    return get(disabled);
                  },
                  field: "system.sourceClass",
                  selectOnFocus: !0,
                  get value() {
                    return get(assignment).item.system.sourceClass;
                  }
                });
              }, "children"),
              $$slots: { default: !0 }
            }), append($$anchor4, fragment_8);
          }, "children"),
          $$slots: { default: !0 }
        });
      }), append($$anchor2, fragment_6);
    }, "body"),
    $$slots: { header: !0, body: !0 }
  }), bind_checked(input, () => safe_get(showUnassignedOnly), ($$value) => set(showUnassignedOnly, $$value)), append($$anchor, section), pop();
}
__name(SpellSourceClassAssignments, "SpellSourceClassAssignments");
delegate(["click"]);
class CoarseReactivityProvider {
  static {
    __name(this, "CoarseReactivityProvider");
  }
  #data;
  #version = state(0);
  constructor(data) {
    this.#data = data;
  }
  get data() {
    return get(this.#version), this.#data;
  }
  set data(_data) {
    update(this.#version), this.#data = _data;
  }
  invalidate() {
    update(this.#version);
  }
}
class SpellSourceClassAssignmentsFormApplication extends SvelteFormApplicationBase {
  static {
    __name(this, "SpellSourceClassAssignmentsFormApplication");
  }
  context = new CoarseReactivityProvider(void 0);
  actor;
  updateHook;
  constructor(actor, ...args) {
    super(...args), this.actor = actor;
  }
  createComponent(node) {
    return this.context.data = this.getData(), mount(SpellSourceClassAssignments, {
      target: node,
      context: /* @__PURE__ */ new Map([
        ["appId", this.appId],
        ["context", this.context]
      ])
    });
  }
  getData() {
    return {
      actor: this.actor,
      assignments: this.actor.items.filter((item) => item.type === CONSTANTS.ITEM_TYPE_SPELL).map((item) => ({ item, sourceClass: "test" }))
    };
  }
  activateListeners(html2) {
    this.updateHook !== void 0 && Hooks.off("updateItem", this.updateHook), this.trackActorChanges(), super.activateListeners(html2);
  }
  trackActorChanges() {
    this.updateHook = Hooks.on("updateItem", (item) => {
      item.actor?.id === this.actor.id && (this.context.data = this.getData());
    });
  }
  get title() {
    return FoundryAdapter.localize("TIDY5E.Utilities.AssignSpellsToClasses");
  }
  close(options = {}) {
    return Hooks.off("updateItem", this.updateHook), super.close(options);
  }
}
var root_2$I = /* @__PURE__ */ template('<div class="spellbook-class-filter svelte-j5isl1"><!></div>'), root_1$1v = /* @__PURE__ */ template("<!> <!> <!> <!> <!> <!>", 1), root$2t = /* @__PURE__ */ template('<!> <div class="scroll-container flex-column small-gap"><!> <!></div> <!>', 1);
function CharacterSpellbookTab($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getCharacterSheetContext), tabId = getContext(CONSTANTS.SVELTE_CONTEXT.TAB_ID);
  const searchResults = createSearchResultsState();
  setSearchResultsContext(searchResults);
  const localize = FoundryAdapter.localize;
  let searchCriteria = state(""), layoutMode = /* @__PURE__ */ derived(() => TidyFlags.spellbookGrid.get(get(context).actor) ? "grid" : "list"), spellbook = /* @__PURE__ */ derived(() => SheetSections.configureSpellbook(get(context).actor, tabId, get(context).spellbook, TidyFlags.classFilter.get(get(context).actor) ?? ""));
  user_effect(() => {
    searchResults.uuids = ItemVisibility.getItemsToShowAtDepth({
      criteria: get(searchCriteria),
      itemContext: get(context).itemContext,
      sections: get(spellbook),
      tabId
    });
  });
  let noSpellLevels = /* @__PURE__ */ derived(() => !get(context).spellbook.length), noSpells = /* @__PURE__ */ derived(() => get(spellbook).reduce((count, section) => count + section.spells.length, 0) === 0), utilityBarCommands = /* @__PURE__ */ derived(() => get(context).utilities[tabId]?.utilityToolbarCommands ?? []);
  var fragment = root$2t(), node = first_child(fragment);
  UtilityToolbar(node, {
    children: /* @__PURE__ */ __name(($$anchor2, $$slotProps) => {
      var fragment_1 = root_1$1v(), node_1 = first_child(fragment_1);
      Search$1(node_1, {
        get value() {
          return get(searchCriteria);
        },
        set value($$value) {
          set(searchCriteria, proxy($$value));
        }
      });
      var node_2 = sibling(node_1, 2);
      {
        var consequent = /* @__PURE__ */ __name(($$anchor3) => {
          var div = root_2$I(), node_3 = child(div);
          SpellbookClassFilter(node_3, {}), append($$anchor3, div);
        }, "consequent");
        if_block(node_2, ($$render) => {
          settings.value.useMulticlassSpellbookFilter && $$render(consequent);
        });
      }
      var node_4 = sibling(node_2, 2), filters = /* @__PURE__ */ derived(() => ItemFilterRuntime.getPinnedFiltersForTab(get(context).filterPins, get(context).filterData, tabId));
      PinnedFilterToggles(node_4, {
        filterGroupName: tabId,
        get filters() {
          return get(filters);
        }
      });
      var node_5 = sibling(node_4, 2);
      FilterMenu(node_5, { tabId });
      var node_6 = sibling(node_5, 2), title = /* @__PURE__ */ derived(() => localize("TIDY5E.Utilities.Tools"));
      ButtonMenu(node_6, {
        iconClass: "ra ra-fairy-wand",
        buttonStyle: "transparent-inline-icon",
        position: "bottom",
        anchor: "right",
        get title() {
          return get(title);
        },
        menuElement: "div",
        children: /* @__PURE__ */ __name(($$anchor3, $$slotProps2) => {
          var disabled = /* @__PURE__ */ derived(() => !get(context).editable);
          ButtonMenuCommand($$anchor3, {
            onMenuClick: /* @__PURE__ */ __name(() => {
              new SpellSourceClassAssignmentsFormApplication(get(context).actor).render(!0);
            }, "onMenuClick"),
            iconClass: "fas fa-list-check",
            get disabled() {
              return get(disabled);
            },
            children: /* @__PURE__ */ __name(($$anchor4, $$slotProps3) => {
              var text$1 = text();
              template_effect(() => set_text(text$1, localize("TIDY5E.Utilities.AssignSpellsToClasses"))), append($$anchor4, text$1);
            }, "children"),
            $$slots: { default: !0 }
          });
        }, "children"),
        $$slots: { default: !0 }
      });
      var node_7 = sibling(node_6, 2);
      each(node_7, 17, () => get(utilityBarCommands), (command) => command.title, ($$anchor3, command) => {
        var visible = /* @__PURE__ */ derived(() => get(command).visible ?? !0);
        UtilityToolbarCommand($$anchor3, {
          get title() {
            return get(command).title;
          },
          get iconClass() {
            return get(command).iconClass;
          },
          get text() {
            return get(command).text;
          },
          get visible() {
            return get(visible);
          },
          onExecute: /* @__PURE__ */ __name((ev) => get(command).execute?.(ev), "onExecute"),
          get sections() {
            return get(spellbook);
          }
        });
      }), append($$anchor2, fragment_1);
    }, "children"),
    $$slots: { default: !0 }
  });
  var div_1 = sibling(node, 2), node_8 = child(div_1);
  {
    var consequent_1 = /* @__PURE__ */ __name(($$anchor2) => {
      NoSpells($$anchor2, {
        get editable() {
          return get(context).unlocked;
        }
      });
    }, "consequent_1"), alternate_1 = /* @__PURE__ */ __name(($$anchor2) => {
      var fragment_6 = comment(), node_9 = first_child(fragment_6);
      each(node_9, 17, () => get(spellbook), (section) => section.key, ($$anchor3, section) => {
        var fragment_7 = comment(), node_10 = first_child(fragment_7);
        {
          var consequent_4 = /* @__PURE__ */ __name(($$anchor4) => {
            var fragment_8 = comment();
            const visibleItemCount = /* @__PURE__ */ derived(() => ItemVisibility.countVisibleItems(get(section).spells, searchResults.uuids));
            var node_11 = first_child(fragment_8);
            {
              var consequent_3 = /* @__PURE__ */ __name(($$anchor5) => {
                var fragment_9 = comment(), node_12 = first_child(fragment_9);
                {
                  var consequent_2 = /* @__PURE__ */ __name(($$anchor6) => {
                    SpellbookList($$anchor6, {
                      get section() {
                        return get(section);
                      }
                    });
                  }, "consequent_2"), alternate = /* @__PURE__ */ __name(($$anchor6) => {
                    SpellbookGrid($$anchor6, {
                      get section() {
                        return get(section);
                      }
                    });
                  }, "alternate");
                  if_block(node_12, ($$render) => {
                    get(layoutMode) === "list" ? $$render(consequent_2) : $$render(alternate, !1);
                  });
                }
                append($$anchor5, fragment_9);
              }, "consequent_3");
              if_block(node_11, ($$render) => {
                (get(searchCriteria).trim() === "" && get(context).unlocked || get(visibleItemCount) > 0 || get(section).slots) && $$render(consequent_3);
              });
            }
            append($$anchor4, fragment_8);
          }, "consequent_4");
          if_block(node_10, ($$render) => {
            get(section).show && $$render(consequent_4);
          });
        }
        append($$anchor3, fragment_7);
      }), append($$anchor2, fragment_6);
    }, "alternate_1");
    if_block(node_8, ($$render) => {
      get(noSpellLevels) ? $$render(consequent_1) : $$render(alternate_1, !1);
    });
  }
  var node_13 = sibling(node_8, 2);
  {
    var consequent_5 = /* @__PURE__ */ __name(($$anchor2) => {
      Notice($$anchor2, {
        children: /* @__PURE__ */ __name(($$anchor3, $$slotProps) => {
          var text_1 = text();
          template_effect(() => set_text(text_1, localize("TIDY5E.EmptySection"))), append($$anchor3, text_1);
        }, "children"),
        $$slots: { default: !0 }
      });
    }, "consequent_5");
    if_block(node_13, ($$render) => {
      get(noSpells) && !get(context).unlocked && $$render(consequent_5);
    });
  }
  var node_14 = sibling(div_1, 2);
  SpellbookFooter(node_14, {}), template_effect(() => set_attribute(div_1, "data-tidy-sheet-part", CONSTANTS.SHEET_PARTS.ITEMS_CONTAINER)), append($$anchor, fragment), pop();
}
__name(CharacterSpellbookTab, "CharacterSpellbookTab");
var on_change$4 = /* @__PURE__ */ __name((event2, $$props) => FoundryAdapter.onLevelChange(event2, $$props.item, $$props.item.actor), "on_change$4"), root_1$1u = /* @__PURE__ */ template("<option> <!></option>"), root$2s = /* @__PURE__ */ template("<select></select>");
function LevelUpDropdown($$anchor, $$props) {
  push($$props, !0);
  let availableLevels = prop($$props, "availableLevels", 19, () => []), disabled = prop($$props, "disabled", 3, !1);
  const localize = FoundryAdapter.localize;
  var select = root$2s();
  select.__change = [on_change$4, $$props], each(select, 21, availableLevels, index, ($$anchor2, availableLevel) => {
    var option = root_1$1u(), option_value = {}, text$1 = child(option);
    template_effect(() => set_text(text$1, `${localize("DND5E.LevelNumber", { level: get(availableLevel).level }) ?? ""} `));
    var node = sibling(text$1);
    {
      var consequent = /* @__PURE__ */ __name(($$anchor3) => {
        var text_1 = text();
        template_effect(() => set_text(text_1, `(${formatAsModifier(get(availableLevel).delta) ?? ""})`)), append($$anchor3, text_1);
      }, "consequent");
      if_block(node, ($$render) => {
        get(availableLevel).delta && $$render(consequent);
      });
    }
    template_effect(() => {
      option_value !== (option_value = get(availableLevel).delta) && (option.value = (option.__value = get(availableLevel).delta) == null ? "" : get(availableLevel).delta), option.disabled = get(availableLevel).disabled || void 0, set_selected(option, get(availableLevel).delta === 0);
    }), append($$anchor2, option);
  }), template_effect(() => select.disabled = disabled()), append($$anchor, select), pop();
}
__name(LevelUpDropdown, "LevelUpDropdown");
delegate(["change"]);
var root_1$1t = /* @__PURE__ */ template("<!> <!> <!> <!>", 1), root_10$g = /* @__PURE__ */ template("<!> <!> <!> <!> <!> <!>", 1), root_27$3 = /* @__PURE__ */ template('<i class="fa-solid fa-link-slash align-self-center"></i>'), root_28$1 = /* @__PURE__ */ template('<i class="fas fa-crown primary-accent-color"></i>'), root_25$3 = /* @__PURE__ */ template('<!> <!> <span class="truncate flex-1"> </span> <!>', 1), root_24$3 = /* @__PURE__ */ template('<!> <!> <div class="primary-cell-extras"><!></div>', 1), root_35$2 = /* @__PURE__ */ template("<span> </span>"), root_34$1 = /* @__PURE__ */ template('<!> <i class="fas fa-bolt"></i>', 1), root_38 = /* @__PURE__ */ template('<span class="text-body-tertiary">&mdash;</span>'), root_46$2 = /* @__PURE__ */ template('<span class="truncate"> </span>'), root_23$4 = /* @__PURE__ */ template("<!> <!> <!> <!> <!> <!>", 1), root_21$4 = /* @__PURE__ */ template("<!> <!>", 1), root$2r = /* @__PURE__ */ template('<!> <div class="scroll-container flex-column small-gap"><!></div>', 1);
function CharacterFeaturesTab($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getCharacterSheetContext), tabId = getContext(CONSTANTS.SVELTE_CONTEXT.TAB_ID);
  getContext(CONSTANTS.SVELTE_CONTEXT.INLINE_TOGGLE_SERVICE);
  const localize = FoundryAdapter.localize, searchResults = createSearchResultsState();
  setSearchResultsContext(searchResults);
  let searchCriteria = state("");
  declareLocation("features");
  let controls = /* @__PURE__ */ derived(() => {
    let result = [
      {
        component: ItemFavoriteControl,
        props: /* @__PURE__ */ __name(({ item }) => ({ item }), "props")
      },
      {
        component: ItemEditControl,
        props: /* @__PURE__ */ __name(({ item }) => ({ item }), "props")
      }
    ];
    return get(context).unlocked && result.push({
      component: ItemDeleteControl,
      props: /* @__PURE__ */ __name(({ item }) => ({ item }), "props")
    }), get(context).useActionsFeature && result.push({
      component: ActionFilterOverrideControl,
      props: /* @__PURE__ */ __name(({ item }) => ({ item }), "props")
    }), result;
  }), classicControlsIconWidth = 1.25, features = /* @__PURE__ */ derived(() => SheetSections.configureFeatures(get(context).features, get(context), tabId, SheetPreferencesService.getByType(get(context).actor.type), TidyFlags.sectionConfig.get(get(context).actor)?.[tabId])), noFeatures = /* @__PURE__ */ derived(() => get(features).some((section) => section.items.length > 0) === !1);
  user_effect(() => {
    searchResults.uuids = ItemVisibility.getItemsToShowAtDepth({
      criteria: get(searchCriteria),
      itemContext: get(context).itemContext,
      sections: get(features),
      tabId
    });
  });
  let utilityBarCommands = /* @__PURE__ */ derived(() => get(context).utilities[tabId]?.utilityToolbarCommands ?? []), classicControlsColumnWidth = /* @__PURE__ */ derived(() => `${classicControlsIconWidth * get(controls).length}rem`);
  var fragment = root$2r(), node = first_child(fragment);
  UtilityToolbar(node, {
    children: /* @__PURE__ */ __name(($$anchor2, $$slotProps) => {
      var fragment_1 = root_1$1t(), node_1 = first_child(fragment_1);
      Search$1(node_1, {
        get value() {
          return get(searchCriteria);
        },
        set value($$value) {
          set(searchCriteria, proxy($$value));
        }
      });
      var node_2 = sibling(node_1, 2), filters = /* @__PURE__ */ derived(() => ItemFilterRuntime.getPinnedFiltersForTab(get(context).filterPins, get(context).filterData, tabId));
      PinnedFilterToggles(node_2, {
        filterGroupName: tabId,
        get filters() {
          return get(filters);
        }
      });
      var node_3 = sibling(node_2, 2);
      FilterMenu(node_3, { tabId });
      var node_4 = sibling(node_3, 2);
      each(node_4, 17, () => get(utilityBarCommands), (command) => command.title, ($$anchor3, command) => {
        var visible = /* @__PURE__ */ derived(() => get(command).visible ?? !0);
        UtilityToolbarCommand($$anchor3, {
          get title() {
            return get(command).title;
          },
          get iconClass() {
            return get(command).iconClass;
          },
          get text() {
            return get(command).text;
          },
          get visible() {
            return get(visible);
          },
          onExecute: /* @__PURE__ */ __name((ev) => get(command).execute?.(ev), "onExecute"),
          get sections() {
            return get(features);
          }
        });
      }), append($$anchor2, fragment_1);
    }, "children"),
    $$slots: { default: !0 }
  });
  var div = sibling(node, 2), node_5 = child(div);
  {
    var consequent = /* @__PURE__ */ __name(($$anchor2) => {
      Notice($$anchor2, {
        children: /* @__PURE__ */ __name(($$anchor3, $$slotProps) => {
          var text$1 = text();
          template_effect(() => set_text(text$1, localize("TIDY5E.EmptySection"))), append($$anchor3, text$1);
        }, "children"),
        $$slots: { default: !0 }
      });
    }, "consequent"), alternate_3 = /* @__PURE__ */ __name(($$anchor2) => {
      var fragment_5 = comment(), node_6 = first_child(fragment_5);
      each(node_6, 17, () => get(features), (section) => section.key, ($$anchor3, section) => {
        var fragment_6 = comment(), node_7 = first_child(fragment_6);
        {
          var consequent_23 = /* @__PURE__ */ __name(($$anchor4) => {
            var fragment_7 = comment();
            const itemEntries = /* @__PURE__ */ derived(() => get(section).items.map((item) => ({
              item,
              ctx: get(context).itemContext[item.id]
            }))), visibleItemCount = /* @__PURE__ */ derived(() => ItemVisibility.countVisibleItems(get(section).items, searchResults.uuids));
            var node_8 = first_child(fragment_7);
            {
              var consequent_22 = /* @__PURE__ */ __name(($$anchor5) => {
                var data_custom_section = /* @__PURE__ */ derived(() => get(section).custom ? !0 : null);
                ItemTable($$anchor5, {
                  get key() {
                    return get(section).key;
                  },
                  get "data-custom-section"() {
                    return get(data_custom_section);
                  },
                  header: /* @__PURE__ */ __name(($$anchor6) => {
                    ItemTableHeaderRow($$anchor6, {
                      children: /* @__PURE__ */ __name(($$anchor7, $$slotProps) => {
                        var fragment_10 = root_10$g(), node_9 = first_child(fragment_10);
                        ItemTableColumn(node_9, {
                          primary: !0,
                          children: /* @__PURE__ */ __name(($$anchor8, $$slotProps2) => {
                            var text_1 = text();
                            template_effect(() => set_text(text_1, localize(get(section).label))), append($$anchor8, text_1);
                          }, "children"),
                          $$slots: { default: !0 }
                        });
                        var node_10 = sibling(node_9, 2);
                        {
                          var consequent_1 = /* @__PURE__ */ __name(($$anchor8) => {
                            ItemTableColumn($$anchor8, {
                              baseWidth: "3.125rem",
                              children: /* @__PURE__ */ __name(($$anchor9, $$slotProps2) => {
                                var text_2 = text();
                                template_effect(() => set_text(text_2, localize("DND5E.Uses"))), append($$anchor9, text_2);
                              }, "children"),
                              $$slots: { default: !0 }
                            });
                          }, "consequent_1");
                          if_block(node_10, ($$render) => {
                            get(section).showUsesColumn && $$render(consequent_1);
                          });
                        }
                        var node_11 = sibling(node_10, 2);
                        {
                          var consequent_2 = /* @__PURE__ */ __name(($$anchor8) => {
                            ItemTableColumn($$anchor8, {
                              baseWidth: "7.5rem",
                              children: /* @__PURE__ */ __name(($$anchor9, $$slotProps2) => {
                                var text_3 = text();
                                template_effect(() => set_text(text_3, localize("DND5E.Usage"))), append($$anchor9, text_3);
                              }, "children"),
                              $$slots: { default: !0 }
                            });
                          }, "consequent_2");
                          if_block(node_11, ($$render) => {
                            get(section).showUsagesColumn && $$render(consequent_2);
                          });
                        }
                        var node_12 = sibling(node_11, 2);
                        {
                          var consequent_3 = /* @__PURE__ */ __name(($$anchor8) => {
                            ItemTableColumn($$anchor8, {
                              baseWidth: "7.5rem",
                              children: /* @__PURE__ */ __name(($$anchor9, $$slotProps2) => {
                                var text_4 = text();
                                template_effect(() => set_text(text_4, localize("DND5E.Level"))), append($$anchor9, text_4);
                              }, "children"),
                              $$slots: { default: !0 }
                            });
                          }, "consequent_3");
                          if_block(node_12, ($$render) => {
                            get(section).showLevelColumn && $$render(consequent_3);
                          });
                        }
                        var node_13 = sibling(node_12, 2);
                        {
                          var consequent_4 = /* @__PURE__ */ __name(($$anchor8) => {
                            ItemTableColumn($$anchor8, {
                              baseWidth: "7.5rem",
                              children: /* @__PURE__ */ __name(($$anchor9, $$slotProps2) => {
                                var text_5 = text();
                                template_effect(() => set_text(text_5, localize("DND5E.Requirements"))), append($$anchor9, text_5);
                              }, "children"),
                              $$slots: { default: !0 }
                            });
                          }, "consequent_4");
                          if_block(node_13, ($$render) => {
                            get(section).showRequirementsColumn && $$render(consequent_4);
                          });
                        }
                        var node_14 = sibling(node_13, 2);
                        {
                          var consequent_5 = /* @__PURE__ */ __name(($$anchor8) => {
                            ItemTableColumn($$anchor8, {
                              get baseWidth() {
                                return get(classicControlsColumnWidth);
                              }
                            });
                          }, "consequent_5");
                          if_block(node_14, ($$render) => {
                            get(context).editable && get(context).useClassicControls && $$render(consequent_5);
                          });
                        }
                        append($$anchor7, fragment_10);
                      }, "children"),
                      $$slots: { default: !0 }
                    });
                  }, "header"),
                  body: /* @__PURE__ */ __name(($$anchor6) => {
                    var fragment_21 = root_21$4(), node_15 = first_child(fragment_21);
                    each(node_15, 17, () => get(itemEntries), ({ item, ctx }) => item.id, ($$anchor7, $$item) => {
                      let item = /* @__PURE__ */ __name(() => get($$item).item, "item"), ctx = /* @__PURE__ */ __name(() => get($$item).ctx, "ctx");
                      var contextMenu = /* @__PURE__ */ derived(() => ({
                        type: CONSTANTS.CONTEXT_MENU_TYPE_ITEMS,
                        uuid: item().uuid
                      })), hidden = /* @__PURE__ */ derived(() => !searchResults.show(item().uuid));
                      ItemTableRow($$anchor7, {
                        get item() {
                          return item();
                        },
                        onMouseDown: /* @__PURE__ */ __name((event2) => FoundryAdapter.editOnMiddleClick(event2, item()), "onMouseDown"),
                        get contextMenu() {
                          return get(contextMenu);
                        },
                        get hidden() {
                          return get(hidden);
                        },
                        children: /* @__PURE__ */ __name(($$anchor8, $$arg0) => {
                          let toggleSummary = /* @__PURE__ */ __name(() => $$arg0?.().toggleSummary, "toggleSummary");
                          var fragment_23 = root_23$4(), node_16 = first_child(fragment_23);
                          ItemTableCell(node_16, {
                            primary: !0,
                            children: /* @__PURE__ */ __name(($$anchor9, $$slotProps) => {
                              var fragment_24 = root_24$3(), node_17 = first_child(fragment_24), disabled = /* @__PURE__ */ derived(() => !get(context).editable);
                              ItemUseButton(node_17, {
                                get disabled() {
                                  return get(disabled);
                                },
                                get item() {
                                  return item();
                                }
                              });
                              var node_18 = sibling(node_17, 2);
                              ItemName(node_18, {
                                onToggle: /* @__PURE__ */ __name(() => toggleSummary()(get(context).actor), "onToggle"),
                                hasChildren: !1,
                                get item() {
                                  return item();
                                },
                                children: /* @__PURE__ */ __name(($$anchor10, $$slotProps2) => {
                                  var fragment_25 = root_25$3(), node_19 = first_child(fragment_25);
                                  {
                                    var consequent_6 = /* @__PURE__ */ __name(($$anchor11) => {
                                      var text_6 = text("↳");
                                      append($$anchor11, text_6);
                                    }, "consequent_6");
                                    if_block(node_19, ($$render) => {
                                      ctx().parent && $$render(consequent_6);
                                    });
                                  }
                                  var node_20 = sibling(node_19, 2);
                                  {
                                    var consequent_7 = /* @__PURE__ */ __name(($$anchor11) => {
                                      var i2 = root_27$3();
                                      append($$anchor11, i2);
                                    }, "consequent_7");
                                    if_block(node_20, ($$render) => {
                                      !get(section).isClass && item().type === "subclass" && $$render(consequent_7);
                                    });
                                  }
                                  var span = sibling(node_20, 2), text_7 = child(span), node_21 = sibling(span, 2);
                                  {
                                    var consequent_8 = /* @__PURE__ */ __name(($$anchor11) => {
                                      var i_1 = root_28$1();
                                      template_effect(() => set_attribute(i_1, "title", localize("DND5E.ClassOriginal"))), append($$anchor11, i_1);
                                    }, "consequent_8");
                                    if_block(node_21, ($$render) => {
                                      item().isOriginalClass && $$render(consequent_8);
                                    });
                                  }
                                  template_effect(() => {
                                    set_attribute(span, "data-tidy-item-name", item().name), set_attribute(span, "data-tidy-sheet-part", CONSTANTS.SHEET_PARTS.ITEM_NAME), set_text(text_7, item().name);
                                  }), append($$anchor10, fragment_25);
                                }, "children"),
                                $$slots: { default: !0 }
                              });
                              var div_1 = sibling(node_18, 2), node_22 = child(div_1);
                              {
                                var consequent_9 = /* @__PURE__ */ __name(($$anchor10) => {
                                  InlineFavoriteIcon($$anchor10, {});
                                }, "consequent_9");
                                if_block(node_22, ($$render) => {
                                  !get(context).useClassicControls && "favoriteId" in ctx() && ctx().favoriteId && $$render(consequent_9);
                                });
                              }
                              append($$anchor9, fragment_24);
                            }, "children"),
                            $$slots: { default: !0 }
                          });
                          var node_23 = sibling(node_16, 2);
                          {
                            var consequent_14 = /* @__PURE__ */ __name(($$anchor9) => {
                              ItemTableCell($$anchor9, {
                                baseWidth: "3.125rem",
                                children: /* @__PURE__ */ __name(($$anchor10, $$slotProps) => {
                                  var fragment_28 = comment(), node_24 = first_child(fragment_28);
                                  {
                                    var consequent_10 = /* @__PURE__ */ __name(($$anchor11) => {
                                      RechargeControl($$anchor11, {
                                        get document() {
                                          return item();
                                        },
                                        field: "system.uses.spent",
                                        get uses() {
                                          return item().system.uses;
                                        }
                                      });
                                    }, "consequent_10"), alternate_2 = /* @__PURE__ */ __name(($$anchor11) => {
                                      var fragment_30 = comment(), node_25 = first_child(fragment_30);
                                      {
                                        var consequent_12 = /* @__PURE__ */ __name(($$anchor12) => {
                                          var fragment_31 = root_34$1();
                                          const remaining = /* @__PURE__ */ derived(() => item().system.uses.max - item().system.uses.spent);
                                          var node_26 = first_child(fragment_31);
                                          {
                                            var consequent_11 = /* @__PURE__ */ __name(($$anchor13) => {
                                              var span_1 = root_35$2(), text_8 = child(span_1);
                                              template_effect(() => set_text(text_8, get(remaining))), append($$anchor13, span_1);
                                            }, "consequent_11");
                                            if_block(node_26, ($$render) => {
                                              get(remaining) > 1 && $$render(consequent_11);
                                            });
                                          }
                                          var i_2 = sibling(node_26, 2);
                                          template_effect(() => set_attribute(i_2, "title", localize("DND5E.Charged"))), append($$anchor12, fragment_31);
                                        }, "consequent_12"), alternate_1 = /* @__PURE__ */ __name(($$anchor12) => {
                                          var fragment_32 = comment(), node_27 = first_child(fragment_32);
                                          {
                                            var consequent_13 = /* @__PURE__ */ __name(($$anchor13) => {
                                              ItemUses($$anchor13, {
                                                get item() {
                                                  return item();
                                                }
                                              });
                                            }, "consequent_13"), alternate = /* @__PURE__ */ __name(($$anchor13) => {
                                              var span_2 = root_38();
                                              append($$anchor13, span_2);
                                            }, "alternate");
                                            if_block(
                                              node_27,
                                              ($$render) => {
                                                ctx()?.hasUses ? $$render(consequent_13) : $$render(alternate, !1);
                                              },
                                              !0
                                            );
                                          }
                                          append($$anchor12, fragment_32);
                                        }, "alternate_1");
                                        if_block(
                                          node_25,
                                          ($$render) => {
                                            item().hasRecharge ? $$render(consequent_12) : $$render(alternate_1, !1);
                                          },
                                          !0
                                        );
                                      }
                                      append($$anchor11, fragment_30);
                                    }, "alternate_2");
                                    if_block(node_24, ($$render) => {
                                      item().isOnCooldown ? $$render(consequent_10) : $$render(alternate_2, !1);
                                    });
                                  }
                                  append($$anchor10, fragment_28);
                                }, "children"),
                                $$slots: { default: !0 }
                              });
                            }, "consequent_14");
                            if_block(node_23, ($$render) => {
                              get(section).showUsesColumn && $$render(consequent_14);
                            });
                          }
                          var node_28 = sibling(node_23, 2);
                          {
                            var consequent_16 = /* @__PURE__ */ __name(($$anchor9) => {
                              ItemTableCell($$anchor9, {
                                baseWidth: "7.5rem",
                                children: /* @__PURE__ */ __name(($$anchor10, $$slotProps) => {
                                  var fragment_35 = comment(), node_29 = first_child(fragment_35);
                                  {
                                    var consequent_15 = /* @__PURE__ */ __name(($$anchor11) => {
                                      var text_9 = text();
                                      template_effect(() => set_text(text_9, item().labels?.activation ?? "")), append($$anchor11, text_9);
                                    }, "consequent_15");
                                    if_block(node_29, ($$render) => {
                                      ItemUtils.hasActivationType(item()) && $$render(consequent_15);
                                    });
                                  }
                                  append($$anchor10, fragment_35);
                                }, "children"),
                                $$slots: { default: !0 }
                              });
                            }, "consequent_16");
                            if_block(node_28, ($$render) => {
                              get(section).showUsagesColumn && $$render(consequent_16);
                            });
                          }
                          var node_30 = sibling(node_28, 2);
                          {
                            var consequent_18 = /* @__PURE__ */ __name(($$anchor9) => {
                              ItemTableCell($$anchor9, {
                                baseWidth: "7.5rem",
                                children: /* @__PURE__ */ __name(($$anchor10, $$slotProps) => {
                                  var fragment_38 = comment(), node_31 = first_child(fragment_38);
                                  {
                                    var consequent_17 = /* @__PURE__ */ __name(($$anchor11) => {
                                      var availableLevels = /* @__PURE__ */ derived(() => ctx()?.availableLevels), disabled_1 = /* @__PURE__ */ derived(() => !get(context).editable || get(context).lockLevelSelector);
                                      LevelUpDropdown($$anchor11, {
                                        get availableLevels() {
                                          return get(availableLevels);
                                        },
                                        get item() {
                                          return item();
                                        },
                                        get disabled() {
                                          return get(disabled_1);
                                        }
                                      });
                                    }, "consequent_17");
                                    if_block(node_31, ($$render) => {
                                      item().type === "class" && $$render(consequent_17);
                                    });
                                  }
                                  append($$anchor10, fragment_38);
                                }, "children"),
                                $$slots: { default: !0 }
                              });
                            }, "consequent_18");
                            if_block(node_30, ($$render) => {
                              get(section).showLevelColumn && $$render(consequent_18);
                            });
                          }
                          var node_32 = sibling(node_30, 2);
                          {
                            var consequent_19 = /* @__PURE__ */ __name(($$anchor9) => {
                              ItemTableCell($$anchor9, {
                                baseWidth: "7.5rem",
                                children: /* @__PURE__ */ __name(($$anchor10, $$slotProps) => {
                                  var span_3 = root_46$2(), text_10 = child(span_3);
                                  template_effect(() => {
                                    set_attribute(span_3, "title", item().system.requirements ?? ""), set_text(text_10, item().system.requirements ?? "");
                                  }), append($$anchor10, span_3);
                                }, "children"),
                                $$slots: { default: !0 }
                              });
                            }, "consequent_19");
                            if_block(node_32, ($$render) => {
                              get(section).showRequirementsColumn && $$render(consequent_19);
                            });
                          }
                          var node_33 = sibling(node_32, 2);
                          {
                            var consequent_20 = /* @__PURE__ */ __name(($$anchor9) => {
                              ItemTableCell($$anchor9, {
                                get baseWidth() {
                                  return get(classicControlsColumnWidth);
                                },
                                children: /* @__PURE__ */ __name(($$anchor10, $$slotProps) => {
                                  var params = /* @__PURE__ */ derived(() => ({ item: item() }));
                                  ClassicControls($$anchor10, {
                                    get controls() {
                                      return get(controls);
                                    },
                                    get params() {
                                      return get(params);
                                    }
                                  });
                                }, "children"),
                                $$slots: { default: !0 }
                              });
                            }, "consequent_20");
                            if_block(node_33, ($$render) => {
                              get(context).editable && get(context).useClassicControls && $$render(consequent_20);
                            });
                          }
                          append($$anchor8, fragment_23);
                        }, "children"),
                        $$slots: { default: !0 }
                      });
                    });
                    var node_34 = sibling(node_15, 2);
                    {
                      var consequent_21 = /* @__PURE__ */ __name(($$anchor7) => {
                        ItemTableFooter($$anchor7, {
                          get section() {
                            return get(section);
                          },
                          get actor() {
                            return get(context).actor;
                          },
                          isItem: !0
                        });
                      }, "consequent_21");
                      if_block(node_34, ($$render) => {
                        get(context).unlocked && $$render(consequent_21);
                      });
                    }
                    append($$anchor6, fragment_21);
                  }, "body"),
                  $$slots: { header: !0, body: !0 }
                });
              }, "consequent_22");
              if_block(node_8, ($$render) => {
                (get(searchCriteria).trim() === "" && get(context).unlocked || get(visibleItemCount) > 0) && $$render(consequent_22);
              });
            }
            append($$anchor4, fragment_7);
          }, "consequent_23");
          if_block(node_7, ($$render) => {
            get(section).show && $$render(consequent_23);
          });
        }
        append($$anchor3, fragment_6);
      }), append($$anchor2, fragment_5);
    }, "alternate_3");
    if_block(node_5, ($$render) => {
      get(noFeatures) && !get(context).unlocked ? $$render(consequent) : $$render(alternate_3, !1);
    });
  }
  template_effect(() => set_attribute(div, "data-tidy-sheet-part", CONSTANTS.SHEET_PARTS.ITEMS_CONTAINER)), append($$anchor, fragment), pop();
}
__name(CharacterFeaturesTab, "CharacterFeaturesTab");
var root_1$1s = /* @__PURE__ */ template('<!> <span class="flex-1 truncate"> </span>', 1);
function ConditionToggle($$anchor, $$props) {
  push($$props, !0);
  const context = /* @__PURE__ */ derived(getSheetContext);
  async function handleChange(newValue) {
    try {
      await FoundryAdapter.toggleCondition(get(context).actor, $$props.condition);
    } catch (e2) {
      error("An error occurred while toggling a condition", !1, e2), debug("Condition toggle error troubleshooting info", { condition: $$props.condition }), get(context).actor.sheet.render();
    }
  }
  __name(handleChange, "handleChange");
  var class_1 = /* @__PURE__ */ derived(() => `flex-row small-gap tidy-condition-toggle ${($$props.condition.disabled ? "inactive" : "active") ?? ""}`), checked = /* @__PURE__ */ derived(() => !$$props.condition.disabled), disabled = /* @__PURE__ */ derived(() => !get(context).editable);
  TidySwitch($$anchor, {
    get class() {
      return get(class_1);
    },
    get checked() {
      return get(checked);
    },
    onChange: /* @__PURE__ */ __name((ev) => handleChange(ev.currentTarget.checked), "onChange"),
    get title() {
      return $$props.condition.name;
    },
    get disabled() {
      return get(disabled);
    },
    get "data-uuid"() {
      return $$props.condition.reference;
    },
    get "data-condition-id"() {
      return $$props.condition.id;
    },
    get "data-tidy-sheet-part"() {
      return CONSTANTS.SHEET_PARTS.CONDITION_TOGGLE;
    },
    children: /* @__PURE__ */ __name(($$anchor2, $$slotProps) => {
      var fragment_1 = root_1$1s(), node = first_child(fragment_1);
      Dnd5eIcon(node, {
        get src() {
          return $$props.condition.icon;
        }
      });
      var span = sibling(node, 2), text2 = child(span);
      template_effect(() => set_text(text2, $$props.condition.name)), append($$anchor2, fragment_1);
    }, "children"),
    $$slots: { default: !0 }
  }), pop();
}
__name(ConditionToggle, "ConditionToggle");
var root_5$t = /* @__PURE__ */ template('<li class="condition"><!></li>'), root_4$s = /* @__PURE__ */ template('<ul class="conditions-list svelte-1i7xe53"></ul>');
function ActorConditions($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getSheetContext);
  const localize = FoundryAdapter.localize;
  ItemTable($$anchor, {
    key: "conditions",
    header: /* @__PURE__ */ __name(($$anchor2) => {
      ItemTableHeaderRow($$anchor2, {
        children: /* @__PURE__ */ __name(($$anchor3, $$slotProps) => {
          ItemTableColumn($$anchor3, {
            primary: !0,
            children: /* @__PURE__ */ __name(($$anchor4, $$slotProps2) => {
              var text$1 = text();
              template_effect(() => set_text(text$1, localize("DND5E.Conditions"))), append($$anchor4, text$1);
            }, "children"),
            $$slots: { default: !0 }
          });
        }, "children"),
        $$slots: { default: !0 }
      });
    }, "header"),
    body: /* @__PURE__ */ __name(($$anchor2) => {
      var ul = root_4$s();
      each(ul, 21, () => get(context).conditions, (condition) => condition.id, ($$anchor3, condition) => {
        var li = root_5$t(), node = child(li);
        ConditionToggle(node, {
          get condition() {
            return get(condition);
          }
        }), template_effect(() => {
          set_attribute(li, "data-uuid", get(condition).reference), set_attribute(li, "data-condition-id", get(condition).id), toggle_class(li, "active", !get(condition).disabled);
        }), append($$anchor3, li);
      }), append($$anchor2, ul);
    }, "body"),
    $$slots: { header: !0, body: !0 }
  }), pop();
}
__name(ActorConditions, "ActorConditions");
var root_4$r = /* @__PURE__ */ template("<span>&nbsp;</span>");
function ActorEffectToggleControl($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getSheetContext), actualEffect = /* @__PURE__ */ derived(() => $$props.effect instanceof dnd5e.documents.ActiveEffect5e ? $$props.effect : $$props.effect ? FoundryAdapter.getEffect({
    document: get(context).actor,
    effectId: $$props.effect.id,
    parentId: $$props.effect.parentId
  }) : void 0);
  const localize = FoundryAdapter.localize;
  let isConcentration = /* @__PURE__ */ derived(() => FoundryAdapter.isConcentrationEffect(get(actualEffect), get(context).actor.sheet));
  var fragment = comment(), node = first_child(fragment);
  {
    var consequent_1 = /* @__PURE__ */ __name(($$anchor2) => {
      var fragment_1 = comment(), node_1 = first_child(fragment_1);
      {
        var consequent = /* @__PURE__ */ __name(($$anchor3) => {
          var title = /* @__PURE__ */ derived(() => localize("DND5E.ConcentrationBreak"));
          ItemControl($$anchor3, {
            iconSrc: "systems/dnd5e/icons/svg/break-concentration.svg",
            onclick: /* @__PURE__ */ __name(() => get(context).actor.endConcentration(get(actualEffect)), "onclick"),
            get title() {
              return get(title);
            }
          });
        }, "consequent"), alternate = /* @__PURE__ */ __name(($$anchor3) => {
          var iconCssClass = /* @__PURE__ */ derived(() => `fas ${get(actualEffect).disabled ? "fa-check" : "fa-times"}`), title_1 = /* @__PURE__ */ derived(() => get(actualEffect).disabled ? localize("DND5E.EffectEnable") : localize("DND5E.EffectDisable"));
          ItemControl($$anchor3, {
            get iconCssClass() {
              return get(iconCssClass);
            },
            onclick: /* @__PURE__ */ __name(() => get(actualEffect).update({ disabled: !get(actualEffect).disabled }), "onclick"),
            get title() {
              return get(title_1);
            }
          });
        }, "alternate");
        if_block(node_1, ($$render) => {
          get(isConcentration) ? $$render(consequent) : $$render(alternate, !1);
        });
      }
      append($$anchor2, fragment_1);
    }, "consequent_1"), alternate_1 = /* @__PURE__ */ __name(($$anchor2) => {
      var span = root_4$r();
      append($$anchor2, span);
    }, "alternate_1");
    if_block(node, ($$render) => {
      get(actualEffect) ? $$render(consequent_1) : $$render(alternate_1, !1);
    });
  }
  append($$anchor, fragment), pop();
}
__name(ActorEffectToggleControl, "ActorEffectToggleControl");
function EffectFavoriteControl($$anchor, $$props) {
  push($$props, !0);
  let active = /* @__PURE__ */ derived(() => FoundryAdapter.isActiveEffectContextFavorited($$props.effect, $$props.actor)), title = /* @__PURE__ */ derived(() => FoundryAdapter.localize(get(active) ? "TIDY5E.RemoveFavorite" : "TIDY5E.AddFavorite"));
  ItemControl($$anchor, {
    iconCssClass: "fas fa-bookmark",
    get active() {
      return get(active);
    },
    get title() {
      return get(title);
    },
    onclick: /* @__PURE__ */ __name(() => {
      const actor = $$props.effect.source.actor ?? $$props.effect.source, document2 = FoundryAdapter.getEffect({
        document: actor,
        effectId: $$props.effect.id,
        parentId: $$props.effect.parentId
      });
      FoundryAdapter.toggleFavoriteEffect(document2);
    }, "onclick")
  }), pop();
}
__name(EffectFavoriteControl, "EffectFavoriteControl");
var root_3$C = /* @__PURE__ */ template('<tr><td class="truncate svelte-151pudj" style="word-wrap: break-all"> </td><td class="svelte-151pudj"> </td><td class="break-word svelte-151pudj"> </td></tr>'), root_2$H = /* @__PURE__ */ template('<table class="effect-summary-changes-table svelte-151pudj"><colgroup><col width="50%"><col width="25%"><col width="25%"></colgroup><thead><tr><th class="svelte-151pudj"> </th><th class="svelte-151pudj"> </th><th class="svelte-151pudj"> </th></tr></thead><tbody></tbody></table>'), root_5$s = /* @__PURE__ */ template('<span class="tag"> </span>'), root_4$q = /* @__PURE__ */ template('<!> <div class="inline-wrapped-elements"></div>', 1), root_1$1r = /* @__PURE__ */ template("<!> <!> <!> <!>", 1), root$2q = /* @__PURE__ */ template('<div class="item-summary"><!></div>');
function EffectSummary($$anchor, $$props) {
  push($$props, !0);
  let descriptionPromise = /* @__PURE__ */ derived(() => FoundryAdapter.enrichHtml($$props.activeEffect.description ?? "")), pills = /* @__PURE__ */ derived(() => ActiveEffectsHelper.getActiveEffectPills($$props.activeEffect));
  const localize = FoundryAdapter.localize;
  var div = root$2q(), node = child(div);
  await_block(node, () => get(descriptionPromise), null, ($$anchor2, description) => {
    var fragment = root_1$1r(), node_1 = first_child(fragment);
    html(node_1, () => get(description), !1, !1);
    var node_2 = sibling(node_1, 2);
    HorizontalLineSeparator(node_2, {});
    var node_3 = sibling(node_2, 2);
    {
      var consequent = /* @__PURE__ */ __name(($$anchor3) => {
        var table = root_2$H(), thead = sibling(child(table)), tr = child(thead), th = child(tr), text2 = child(th, !0);
        template_effect(() => set_text(text2, localize("EFFECT.ChangeKey")));
        var th_1 = sibling(th), text_1 = child(th_1, !0);
        template_effect(() => set_text(text_1, localize("EFFECT.ChangeMode")));
        var th_2 = sibling(th_1), text_2 = child(th_2, !0);
        template_effect(() => set_text(text_2, localize("EFFECT.ChangeValue")));
        var tbody = sibling(thead);
        each(tbody, 21, () => $$props.activeEffect.changes, index, ($$anchor4, change) => {
          var tr_1 = root_3$C();
          const modeLabel = /* @__PURE__ */ derived(() => ActiveEffectsHelper.findMode(get(change).mode));
          var td = child(tr_1), text_3 = child(td, !0);
          var td_1 = sibling(td), text_4 = child(td_1, !0);
          var td_2 = sibling(td_1), text_5 = child(td_2, !0);
          template_effect(() => {
            set_attribute(td, "title", get(change).key), set_text(text_3, get(change).key), set_text(text_4, get(modeLabel)), set_attribute(td_2, "title", get(change).value), set_text(text_5, get(change).value);
          }), append($$anchor4, tr_1);
        }), append($$anchor3, table);
      }, "consequent");
      if_block(node_3, ($$render) => {
        $$props.activeEffect.changes.length && $$render(consequent);
      });
    }
    var node_4 = sibling(node_3, 2);
    {
      var consequent_1 = /* @__PURE__ */ __name(($$anchor3) => {
        var fragment_1 = root_4$q(), node_5 = first_child(fragment_1);
        HorizontalLineSeparator(node_5, {});
        var div_1 = sibling(node_5, 2);
        each(div_1, 21, () => get(pills), index, ($$anchor4, pill) => {
          var span = root_5$s(), text_6 = child(span, !0);
          template_effect(() => set_text(text_6, localize(get(pill)))), append($$anchor4, span);
        }), template_effect(() => set_attribute(div_1, "data-tidy-sheet-part", CONSTANTS.SHEET_PARTS.ITEM_PROPERTY_LIST)), append($$anchor3, fragment_1);
      }, "consequent_1");
      if_block(node_4, ($$render) => {
        get(pills).length && $$render(consequent_1);
      });
    }
    append($$anchor2, fragment);
  }), template_effect(() => set_attribute(div, "data-tidy-sheet-part", CONSTANTS.SHEET_PARTS.ITEM_SUMMARY)), append($$anchor, div), pop();
}
__name(EffectSummary, "EffectSummary");
var root$2p = /* @__PURE__ */ template("<div><div><!></div> <!></div>");
function EffectTableRow($$anchor, $$props) {
  push($$props, !0);
  let activeEffect = prop($$props, "activeEffect", 3, null), cssClass = prop($$props, "cssClass", 3, ""), hidden = prop($$props, "hidden", 3, !1), effectDocument = /* @__PURE__ */ derived(() => activeEffect()?.effect ?? activeEffect());
  const onEffectToggled = getContext(CONSTANTS.SVELTE_CONTEXT.ON_ITEM_TOGGLED), location = getContext(CONSTANTS.SVELTE_CONTEXT.LOCATION);
  let showSummary = state(!1);
  async function toggleSummary() {
    set(showSummary, !get(showSummary)), onEffectToggled?.(get(effectDocument).id, get(showSummary), location);
  }
  __name(toggleSummary, "toggleSummary");
  function handleDragStart(event2) {
    const dragData = get(effectDocument).toDragData?.();
    dragData && event2.dataTransfer?.setData("text/plain", JSON.stringify(dragData));
  }
  __name(handleDragStart, "handleDragStart");
  var div = root$2p(), event_handler = /* @__PURE__ */ __name((event2) => FoundryAdapter.editOnMiddleClick(event2, get(effectDocument)), "event_handler");
  let attributes_1;
  var div_1 = child(div), node = child(div_1);
  snippet(node, () => $$props.children ?? noop, () => ({ toggleSummary }));
  var node_1 = sibling(div_1, 2);
  ExpandableContainer(node_1, {
    get expanded() {
      return get(showSummary);
    },
    children: /* @__PURE__ */ __name(($$anchor2, $$slotProps) => {
      EffectSummary($$anchor2, {
        get activeEffect() {
          return get(effectDocument);
        }
      });
    }, "children"),
    $$slots: { default: !0 }
  }), template_effect(() => {
    attributes_1 = set_attributes(
      div,
      attributes_1,
      {
        class: "effect-table-row-container",
        "aria-hidden": hidden(),
        "data-context-menu": CONSTANTS.CONTEXT_MENU_TYPE_EFFECTS,
        "data-effect-id": activeEffect()?.id,
        "data-parent-id": activeEffect()?.parentId ?? activeEffect()?.parent?.id,
        onmousedown: event_handler,
        ondragstart: handleDragStart,
        draggable: !0,
        "data-tidy-table-row": !0,
        "data-tidy-sheet-part": CONSTANTS.SHEET_PARTS.EFFECT_TABLE_ROW,
        "data-info-card": "effect",
        "data-info-card-entity-uuid": activeEffect().uuid,
        ...$$props.attributes
      },
      "svelte-wrlg6z"
    ), toggle_class(div, "hidden", hidden()), set_class(div_1, `effect-table-row ${cssClass() ?? "" ?? ""} svelte-wrlg6z`);
  }), append($$anchor, div), pop();
}
__name(EffectTableRow, "EffectTableRow");
var root_10$f = /* @__PURE__ */ template("<!> <!> <!> <!>", 1), on_click$Z = /* @__PURE__ */ __name((ev, toggleSummary) => toggleSummary()(), "on_click$Z"), root_18$6 = /* @__PURE__ */ template('<!> <a class="truncate flex-row align-items-center flex-1"><span class="align-self-center truncate flex-1"> </span></a> <div class="primary-cell-extras"><!></div>', 1), root_20$7 = /* @__PURE__ */ template('<span class="truncate"> </span>'), root_21$3 = /* @__PURE__ */ template('<span class="truncate"> </span>'), root_17$5 = /* @__PURE__ */ template("<!> <!> <!> <!>", 1), root_15$7 = /* @__PURE__ */ template("<!> <!>", 1), root$2o = /* @__PURE__ */ template('<div class="scroll-container flex-column small-gap"><!> <!> <!></div>');
function CharacterEffectsTab($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getSheetContext);
  const localize = FoundryAdapter.localize;
  let effectSections = /* @__PURE__ */ derived(() => Object.values(get(context).effects)), noEffects = /* @__PURE__ */ derived(() => get(effectSections).some((section) => section.effects.length > 0) === !1);
  declareLocation("effects");
  let controls = /* @__PURE__ */ derived(() => {
    let result = [];
    return result.push(
      {
        component: ActorEffectToggleControl,
        props: /* @__PURE__ */ __name(({ effect: effect2 }) => ({ effect: effect2 }), "props")
      },
      {
        component: EffectFavoriteControl,
        props: /* @__PURE__ */ __name(({ effect: effect2 }) => ({ effect: effect2, actor: get(context).actor }), "props")
      },
      {
        component: ItemControl,
        props: /* @__PURE__ */ __name(({ effect: effect2 }) => ({
          onclick: /* @__PURE__ */ __name(() => FoundryAdapter.getEffect({
            document: get(context).actor,
            effectId: effect2.id,
            parentId: effect2.parentId
          }).sheet.render(!0), "onclick"),
          title: localize("DND5E.EffectEdit"),
          iconCssClass: "fas fa-edit"
        }), "props")
      }
    ), get(context).unlocked && result.push({
      component: ItemControl,
      props: /* @__PURE__ */ __name(({ effect: effect2 }) => ({
        onclick: /* @__PURE__ */ __name(() => FoundryAdapter.getEffect({
          document: get(context).actor,
          effectId: effect2.id,
          parentId: effect2.parentId
        }).deleteDialog(), "onclick"),
        title: localize("DND5E.EffectDelete"),
        iconCssClass: "fas fa-trash"
      }), "props")
    }), result;
  }), classicControlsIconWidth = 1.25, classicControlsColumnWidth = /* @__PURE__ */ derived(() => `${classicControlsIconWidth * get(controls).length}rem`);
  var div = root$2o(), node = child(div);
  {
    var consequent = /* @__PURE__ */ __name(($$anchor2) => {
      Notice($$anchor2, {
        children: /* @__PURE__ */ __name(($$anchor3, $$slotProps) => {
          var text$1 = text();
          template_effect(() => set_text(text$1, localize("TIDY5E.GMOnlyEdit"))), append($$anchor3, text$1);
        }, "children"),
        $$slots: { default: !0 }
      });
    }, "consequent");
    if_block(node, ($$render) => {
      !get(context).allowEffectsManagement && get(context).unlocked && $$render(consequent);
    });
  }
  var node_1 = sibling(node, 2);
  {
    var consequent_1 = /* @__PURE__ */ __name(($$anchor2) => {
      Notice($$anchor2, {
        children: /* @__PURE__ */ __name(($$anchor3, $$slotProps) => {
          var text_1 = text();
          template_effect(() => set_text(text_1, localize("TIDY5E.EmptySection"))), append($$anchor3, text_1);
        }, "children"),
        $$slots: { default: !0 }
      });
    }, "consequent_1"), alternate = /* @__PURE__ */ __name(($$anchor2) => {
      var fragment_4 = comment(), node_2 = first_child(fragment_4);
      each(node_2, 17, () => get(effectSections), index, ($$anchor3, section) => {
        var fragment_5 = comment(), node_3 = first_child(fragment_5);
        {
          var consequent_7 = /* @__PURE__ */ __name(($$anchor4) => {
            var fragment_6 = comment(), node_4 = first_child(fragment_6);
            {
              var consequent_6 = /* @__PURE__ */ __name(($$anchor5) => {
                ItemTable($$anchor5, {
                  get key() {
                    return get(section).label;
                  },
                  header: /* @__PURE__ */ __name(($$anchor6) => {
                    ItemTableHeaderRow($$anchor6, {
                      children: /* @__PURE__ */ __name(($$anchor7, $$slotProps) => {
                        var fragment_9 = root_10$f(), node_5 = first_child(fragment_9);
                        ItemTableColumn(node_5, {
                          primary: !0,
                          children: /* @__PURE__ */ __name(($$anchor8, $$slotProps2) => {
                            var text_2 = text();
                            template_effect(() => set_text(text_2, localize(get(section).label))), append($$anchor8, text_2);
                          }, "children"),
                          $$slots: { default: !0 }
                        });
                        var node_6 = sibling(node_5, 2);
                        ItemTableColumn(node_6, {
                          baseWidth: "12.5rem",
                          children: /* @__PURE__ */ __name(($$anchor8, $$slotProps2) => {
                            var text_3 = text();
                            template_effect(() => set_text(text_3, localize("DND5E.SOURCE.FIELDS.source.label"))), append($$anchor8, text_3);
                          }, "children"),
                          $$slots: { default: !0 }
                        });
                        var node_7 = sibling(node_6, 2);
                        ItemTableColumn(node_7, {
                          baseWidth: "7.5rem",
                          children: /* @__PURE__ */ __name(($$anchor8, $$slotProps2) => {
                            var text_4 = text();
                            template_effect(() => set_text(text_4, localize("DND5E.Duration"))), append($$anchor8, text_4);
                          }, "children"),
                          $$slots: { default: !0 }
                        });
                        var node_8 = sibling(node_7, 2);
                        {
                          var consequent_2 = /* @__PURE__ */ __name(($$anchor8) => {
                            ItemTableColumn($$anchor8, {
                              get baseWidth() {
                                return get(classicControlsColumnWidth);
                              }
                            });
                          }, "consequent_2");
                          if_block(node_8, ($$render) => {
                            get(context).editable && get(context).useClassicControls && get(context).allowEffectsManagement && $$render(consequent_2);
                          });
                        }
                        append($$anchor7, fragment_9);
                      }, "children"),
                      $$slots: { default: !0 }
                    });
                  }, "header"),
                  body: /* @__PURE__ */ __name(($$anchor6) => {
                    var fragment_14 = root_15$7(), node_9 = first_child(fragment_14);
                    each(node_9, 17, () => get(section).effects, index, ($$anchor7, effectContext) => {
                      var attributes = /* @__PURE__ */ derived(() => ({
                        "data-info-card": "effect",
                        "data-info-card-entity-uuid": get(effectContext).uuid
                      }));
                      EffectTableRow($$anchor7, {
                        get activeEffect() {
                          return get(effectContext);
                        },
                        get attributes() {
                          return get(attributes);
                        },
                        children: /* @__PURE__ */ __name(($$anchor8, $$arg0) => {
                          let toggleSummary = /* @__PURE__ */ __name(() => $$arg0?.().toggleSummary, "toggleSummary");
                          var fragment_16 = root_17$5(), node_10 = first_child(fragment_16), attributes_1 = /* @__PURE__ */ derived(() => ({
                            "data-tidy-effect-name-container": !0,
                            "data-effect-id": get(effectContext).id
                          }));
                          ItemTableCell(node_10, {
                            primary: !0,
                            get attributes() {
                              return get(attributes_1);
                            },
                            children: /* @__PURE__ */ __name(($$anchor9, $$slotProps) => {
                              var fragment_17 = root_18$6(), node_11 = first_child(fragment_17);
                              ItemImage(node_11, {
                                get src() {
                                  return get(effectContext).img;
                                }
                              });
                              var a2 = sibling(node_11, 2);
                              a2.__click = [on_click$Z, toggleSummary];
                              var span = child(a2), text_5 = child(span), div_1 = sibling(a2, 2), node_12 = child(div_1);
                              {
                                var consequent_3 = /* @__PURE__ */ __name(($$anchor10) => {
                                  InlineFavoriteIcon($$anchor10, {});
                                }, "consequent_3");
                                if_block(node_12, ($$render) => {
                                  FoundryAdapter.isActiveEffectContextFavorited(get(effectContext), get(context).actor) && !get(context).useClassicControls && $$render(consequent_3);
                                });
                              }
                              template_effect(() => {
                                set_attribute(span, "data-tidy-effect-name", get(effectContext).name), set_attribute(span, "title", get(effectContext).name), set_text(text_5, get(effectContext).name);
                              }), append($$anchor9, fragment_17);
                            }, "children"),
                            $$slots: { default: !0 }
                          });
                          var node_13 = sibling(node_10, 2);
                          ItemTableCell(node_13, {
                            baseWidth: "12.5rem",
                            children: /* @__PURE__ */ __name(($$anchor9, $$slotProps) => {
                              var span_1 = root_20$7(), text_6 = child(span_1);
                              template_effect(() => {
                                set_attribute(span_1, "title", get(effectContext).source?.name ?? ""), set_text(text_6, get(effectContext).source?.name ?? "");
                              }), append($$anchor9, span_1);
                            }, "children"),
                            $$slots: { default: !0 }
                          });
                          var node_14 = sibling(node_13, 2);
                          ItemTableCell(node_14, {
                            baseWidth: "7.5rem",
                            children: /* @__PURE__ */ __name(($$anchor9, $$slotProps) => {
                              var span_2 = root_21$3(), text_7 = child(span_2);
                              template_effect(() => {
                                set_attribute(span_2, "title", get(effectContext).duration?.label ?? ""), set_text(text_7, get(effectContext).duration?.label ?? "");
                              }), append($$anchor9, span_2);
                            }, "children"),
                            $$slots: { default: !0 }
                          });
                          var node_15 = sibling(node_14, 2);
                          {
                            var consequent_4 = /* @__PURE__ */ __name(($$anchor9) => {
                              ItemTableCell($$anchor9, {
                                get baseWidth() {
                                  return get(classicControlsColumnWidth);
                                },
                                children: /* @__PURE__ */ __name(($$anchor10, $$slotProps) => {
                                  var params = /* @__PURE__ */ derived(() => ({ effect: get(effectContext) }));
                                  ClassicControls($$anchor10, {
                                    get controls() {
                                      return get(controls);
                                    },
                                    get params() {
                                      return get(params);
                                    }
                                  });
                                }, "children"),
                                $$slots: { default: !0 }
                              });
                            }, "consequent_4");
                            if_block(node_15, ($$render) => {
                              get(context).editable && get(context).useClassicControls && get(context).allowEffectsManagement && $$render(consequent_4);
                            });
                          }
                          append($$anchor8, fragment_16);
                        }, "children"),
                        $$slots: { default: !0 }
                      });
                    });
                    var node_16 = sibling(node_9, 2);
                    {
                      var consequent_5 = /* @__PURE__ */ __name(($$anchor7) => {
                        ItemTableFooter($$anchor7, {
                          get actor() {
                            return get(context).actor;
                          },
                          get section() {
                            return get(section);
                          },
                          create: /* @__PURE__ */ __name(() => FoundryAdapter.addEffect(get(section).type, get(context).actor), "create"),
                          isItem: !1
                        });
                      }, "consequent_5");
                      if_block(node_16, ($$render) => {
                        get(context).unlocked && get(context).allowEffectsManagement && $$render(consequent_5);
                      });
                    }
                    append($$anchor6, fragment_14);
                  }, "body"),
                  $$slots: { header: !0, body: !0 }
                });
              }, "consequent_6");
              if_block(node_4, ($$render) => {
                (get(context).unlocked && get(context).allowEffectsManagement || get(section).effects.length > 0) && $$render(consequent_6);
              });
            }
            append($$anchor4, fragment_6);
          }, "consequent_7");
          if_block(node_3, ($$render) => {
            get(section).hidden || $$render(consequent_7);
          });
        }
        append($$anchor3, fragment_5);
      }), append($$anchor2, fragment_4);
    }, "alternate");
    if_block(node_1, ($$render) => {
      get(noEffects) && !get(context).unlocked && get(context).allowEffectsManagement ? $$render(consequent_1) : $$render(alternate, !1);
    });
  }
  var node_17 = sibling(node_1, 2);
  {
    var consequent_8 = /* @__PURE__ */ __name(($$anchor2) => {
      ActorConditions($$anchor2, {});
    }, "consequent_8");
    if_block(node_17, ($$render) => {
      get(context).conditions && $$render(consequent_8);
    });
  }
  append($$anchor, div), pop();
}
__name(CharacterEffectsTab, "CharacterEffectsTab");
delegate(["click"]);
function clamp(num, min, max) {
  return Math.min(Math.max(num, min), max);
}
__name(clamp, "clamp");
function getPercentage(value, max) {
  if (max ??= 0, value ??= 0, max <= 0)
    return 0;
  const percentage = Math.ceil(value / max * 100);
  return clamp(percentage, 0, 100);
}
__name(getPercentage, "getPercentage");
function toNumber(str) {
  if (str.includes("/")) {
    const pieces = str.split("/");
    return parseInt(pieces[0]) / parseInt(pieces[1]);
  }
  return +str;
}
__name(toNumber, "toNumber");
function ContentEditableFormField($$anchor, $$props) {
  push($$props, !0);
  let value = prop($$props, "value", 7), cssClass = prop($$props, "cssClass", 3, ""), spellcheck = prop($$props, "spellcheck", 3, !1), dataMaxLength = prop($$props, "dataMaxLength", 3, 40), placeholder = prop($$props, "placeholder", 3, null), saveAs = prop($$props, "saveAs", 3, "string"), title = prop($$props, "title", 3, null), selectOnFocus = prop($$props, "selectOnFocus", 3, !1), draftValue = state("");
  user_effect(() => {
    set(draftValue, proxy(value()));
  });
  async function update2() {
    set(draftValue, proxy(new DOMParser().parseFromString(get(draftValue), "text/html").body.textContent ?? "")), get(draftValue).length > dataMaxLength() && set(draftValue, proxy(get(draftValue).substring(0, dataMaxLength())?.replaceAll(`
`, "")));
    const valueToSave = saveAs() === "number" ? toNumber(get(draftValue)) : get(draftValue);
    await $$props.document.update({ [$$props.field]: valueToSave });
  }
  __name(update2, "update");
  function submitWhenEnterKey(e2) {
    e2.key == "Enter" && (e2.preventDefault(), update2());
  }
  __name(submitWhenEnterKey, "submitWhenEnterKey");
  let _el;
  function handlePaste(ev) {
    setTimeout(
      () => {
        value(_el.textContent?.replaceAll(`
`, "") ?? "");
      },
      0
    );
  }
  __name(handlePaste, "handlePaste");
  function onFocus(ev) {
    if (selectOnFocus() && window.getSelection) {
      const selection = window.getSelection(), range = window.document.createRange();
      range.selectNodeContents(ev.currentTarget), selection?.removeAllRanges(), selection?.addRange(range);
    }
  }
  __name(onFocus, "onFocus");
  const context = /* @__PURE__ */ derived(getSheetContext), localize = FoundryAdapter.localize;
  let activeEffectApplied = /* @__PURE__ */ derived(() => ActiveEffectsHelper.isActiveEffectAppliedToField($$props.document, $$props.field)), isEnchanted = /* @__PURE__ */ derived(() => get(context).itemOverrides instanceof Set && get(context).itemOverrides.has($$props.field)), overrideTooltip = /* @__PURE__ */ derived(() => get(isEnchanted) ? localize("DND5E.ENCHANTMENT.Warning.Override") : localize("DND5E.ActiveEffectOverrideWarning"));
  var fragment = comment(), node = first_child(fragment);
  {
    var consequent = /* @__PURE__ */ __name(($$anchor2) => {
      var fragment_1 = comment(), node_1 = first_child(fragment_1);
      element(node_1, () => $$props.element, !1, ($$element, $$anchor3) => {
        bind_this($$element, ($$value) => _el = $$value, () => _el);
        let attributes;
        template_effect(() => attributes = set_attributes(
          $$element,
          attributes,
          {
            contenteditable: "true",
            class: cssClass(),
            onblur: update2,
            onkeypress: submitWhenEnterKey,
            onpaste: handlePaste,
            onfocus: onFocus,
            role: "textbox",
            tabindex: "0",
            spellcheck: spellcheck(),
            "data-max-length": dataMaxLength(),
            "data-placeholder": placeholder(),
            title: title(),
            "data-tidy-field": $$props.field
          },
          "svelte-1u33atu",
          $$element.namespaceURI === NAMESPACE_SVG,
          $$element.nodeName.includes("-")
        )), bind_content_editable("innerHTML", $$element, () => get(draftValue), ($$value) => set(draftValue, proxy($$value)));
      }), append($$anchor2, fragment_1);
    }, "consequent"), alternate = /* @__PURE__ */ __name(($$anchor2) => {
      var fragment_2 = comment(), node_2 = first_child(fragment_2);
      element(node_2, () => $$props.element, !1, ($$element_1, $$anchor3) => {
        let attributes_1;
        template_effect(() => attributes_1 = set_attributes(
          $$element_1,
          attributes_1,
          {
            class: cssClass(),
            title: title(),
            "data-tidy-field": $$props.field,
            "data-tooltip": get(activeEffectApplied) ? get(overrideTooltip) : null
          },
          "svelte-1u33atu",
          $$element_1.namespaceURI === NAMESPACE_SVG,
          $$element_1.nodeName.includes("-")
        ));
        var text$1 = text();
        template_effect(() => set_text(text$1, value())), append($$anchor3, text$1);
      }), append($$anchor2, fragment_2);
    }, "alternate");
    if_block(node, ($$render) => {
      $$props.editable && !get(activeEffectApplied) ? $$render(consequent) : $$render(alternate, !1);
    });
  }
  append($$anchor, fragment), pop();
}
__name(ContentEditableFormField, "ContentEditableFormField");
var root$2n = /* @__PURE__ */ template('<div style="display: contents;"></div>');
function SheetEditorV2($$anchor, $$props) {
  push($$props, !0);
  let enriched = prop($$props, "enriched", 3, null), editorOptions = prop($$props, "editorOptions", 19, () => ({})), manageSecrets = prop($$props, "manageSecrets", 3, !1), proseMirrorContainerEl, actualEditorOptions = /* @__PURE__ */ derived(() => foundry.utils.mergeObject(
    {
      name: $$props.field,
      collaborate: !1,
      compact: !1,
      documentUUID: $$props.documentUuid,
      editable: !0,
      height: 200,
      toggled: !0,
      value: $$props.content,
      enriched: enriched() ?? $$props.content
    },
    editorOptions()
  ));
  function onEditorActivation(node) {
    node.addEventListener("click", (ev) => {
      ev.target instanceof HTMLElement && ev.target.closest('[data-action="save"]') && handleSave();
    }), node.addEventListener("keydown", (event2) => {
      game.keyboard.isModifierActive(KeyboardManager.MODIFIER_KEYS.CONTROL) && event2.key === "s" && handleSave();
    });
  }
  __name(onEditorActivation, "onEditorActivation");
  function handleSave() {
    $$props.onSave?.(), bindSecretUi();
  }
  __name(handleSave, "handleSave");
  function bindSecretUi() {
    if (!manageSecrets() || !get(actualEditorOptions).toggled)
      return;
    const secret = new HTMLSecret({
      parentSelector: "prose-mirror",
      callbacks: {
        content: /* @__PURE__ */ __name((_secret) => $$props.content, "content"),
        update: /* @__PURE__ */ __name((secret2, content) => {
          secret2.closest("prose-mirror").value = content;
        }, "update")
      }
    });
    queueMicrotask(() => {
      secret.bind(proseMirrorContainerEl);
    });
  }
  __name(bindSecretUi, "bindSecretUi"), onMount(() => {
    const element2 = foundry.applications.elements.HTMLProseMirrorElement.create(get(actualEditorOptions));
    proseMirrorContainerEl.innerHTML = element2.outerHTML, bindSecretUi();
  });
  var div = root$2n();
  bind_this(div, ($$value) => proseMirrorContainerEl = $$value, () => proseMirrorContainerEl), action(div, ($$node) => onEditorActivation?.($$node)), template_effect(() => set_class(div, clsx($$props.class ?? ""))), append($$anchor, div), pop();
}
__name(SheetEditorV2, "SheetEditorV2");
var on_click$Y = /* @__PURE__ */ __name((ev, context, edit, value, content, target) => get(context).editable && edit(value(), content(), target()), "on_click$Y"), root_2$G = /* @__PURE__ */ template('<article class="svelte-1dknfkm"><div class="section-titles biopage flex-row justify-content-space-between"><span> </span> <a class="icon-button"><i class="fa-solid fa-feather"></i></a></div> <!></article>'), root_4$p = /* @__PURE__ */ template('<article class="editor-container flex-column full-height singleton svelte-1dknfkm"><!></article>'), root_5$r = /* @__PURE__ */ template('<li class="svelte-1dknfkm"><span> </span> <!></li>'), on_click_1$r = /* @__PURE__ */ __name((ev, context, edit) => get(context).editable && edit(get(context).system.details.appearance, get(context).appearanceEnrichedHtml, "system.details.appearance"), "on_click_1$r"), root_6$i = /* @__PURE__ */ template('<article class="appearance-notes svelte-1dknfkm"><div class="section-titles biopage flex-row justify-content-space-between"><span> </span> <a class="icon-button"><i class="fa-solid fa-feather"></i></a></div> <!></article>'), on_click_2$e = /* @__PURE__ */ __name((ev, context, edit) => get(context).editable && edit(get(context).system.details.biography.value, get(context).biographyEnrichedHtml, "system.details.biography.value"), "on_click_2$e"), root_7$p = /* @__PURE__ */ template('<article class="biography-notes svelte-1dknfkm"><div class="section-titles flex-row justify-content-space-between"><span> </span> <a class="icon-button"><i class="fa-solid fa-feather"></i></a></div> <!></article>'), root$2m = /* @__PURE__ */ template('<div class="scroll-container"><!> <div class="notes-container svelte-1dknfkm"><div class="top-notes note-entries svelte-1dknfkm"><article><ul class="character-details svelte-1dknfkm"></ul></article></div> <div class="left-notes note-entries hide-editor-edit svelte-1dknfkm"><!> <!> <!> <!></div> <div class="right-notes note-entries hide-editor-edit svelte-1dknfkm"><!> <!></div></div></div>');
function CharacterBiographyTab($$anchor, $$props) {
  push($$props, !0);
  const biopage = /* @__PURE__ */ __name(($$anchor2, label = noop, value = noop, content = noop, target = noop) => {
    var andOnValueChange = /* @__PURE__ */ derived(() => value() ?? "");
    RerenderAfterFormSubmission($$anchor2, {
      get andOnValueChange() {
        return get(andOnValueChange);
      },
      children: /* @__PURE__ */ __name(($$anchor3, $$slotProps) => {
        var article = root_2$G(), div = child(article), span = child(div), text2 = child(span);
        template_effect(() => set_text(text2, localize(label())));
        var a2 = sibling(span, 2);
        a2.__click = [
          on_click$Y,
          context,
          edit,
          value,
          content,
          target
        ];
        var node = sibling(div, 2);
        SheetEditor(node, {
          get content() {
            return content();
          },
          get target() {
            return target();
          },
          get editable() {
            return get(context).editable;
          }
        }), action(article, ($$node) => get(context).activateEditors?.($$node)), append($$anchor3, article);
      }, "children"),
      $$slots: { default: !0 }
    });
  }, "biopage");
  let context = /* @__PURE__ */ derived(getCharacterSheetContext);
  const localize = FoundryAdapter.localize;
  let bioFields = /* @__PURE__ */ derived(() => [
    {
      field: "system.details.gender",
      value: get(context).system.details.gender,
      text: "DND5E.Gender"
    },
    {
      field: "system.details.age",
      value: get(context).system.details.age,
      text: "DND5E.Age"
    },
    {
      field: "system.details.height",
      value: get(context).system.details.height,
      text: "DND5E.Height"
    },
    {
      field: "system.details.weight",
      value: get(context).system.details.weight,
      text: "DND5E.Weight"
    },
    {
      field: "system.details.eyes",
      value: get(context).system.details.eyes,
      text: "DND5E.Eyes"
    },
    {
      field: "system.details.skin",
      value: get(context).system.details.skin,
      text: "DND5E.Skin"
    },
    {
      field: "system.details.hair",
      value: get(context).system.details.hair,
      text: "DND5E.Hair"
    },
    {
      field: "system.details.faith",
      value: get(context).system.details.faith,
      text: "DND5E.Faith"
    }
  ]), editing = state(!1), contentToEdit = state(""), enrichedText = state(""), fieldToEdit = state("");
  async function stopEditing() {
    await get(context).actor.sheet.submit(), set(editing, !1);
  }
  __name(stopEditing, "stopEditing");
  function edit(value, enriched, field) {
    set(contentToEdit, proxy(value)), set(fieldToEdit, proxy(field)), set(enrichedText, proxy(enriched)), set(editing, !0);
  }
  __name(edit, "edit");
  var div_1 = root$2m(), node_1 = child(div_1);
  {
    var consequent = /* @__PURE__ */ __name(($$anchor2) => {
      var fragment_1 = comment(), node_2 = first_child(fragment_1);
      key_block(node_2, () => get(contentToEdit), ($$anchor3) => {
        var article_1 = root_4$p(), node_3 = child(article_1), editorOptions = /* @__PURE__ */ derived(() => ({
          editable: get(context).editable,
          toggled: !1
        }));
        SheetEditorV2(node_3, {
          get enriched() {
            return get(enrichedText);
          },
          get content() {
            return get(contentToEdit);
          },
          get field() {
            return get(fieldToEdit);
          },
          get editorOptions() {
            return get(editorOptions);
          },
          get documentUuid() {
            return get(context).actor.uuid;
          },
          onSave: /* @__PURE__ */ __name(() => stopEditing(), "onSave"),
          get manageSecrets() {
            return get(context).actor.isOwner;
          }
        }), append($$anchor3, article_1);
      }), append($$anchor2, fragment_1);
    }, "consequent");
    if_block(node_1, ($$render) => {
      get(editing) && $$render(consequent);
    });
  }
  var div_2 = sibling(node_1, 2), div_3 = child(div_2), article_2 = child(div_3), ul = child(article_2);
  each(ul, 21, () => get(bioFields), (bioField) => bioField.field, ($$anchor2, bioField) => {
    var li = root_5$r(), span_1 = child(li), text_1 = child(span_1);
    template_effect(() => set_text(text_1, `${localize(get(bioField).text) ?? ""}:`));
    var node_4 = sibling(span_1, 2), editable = /* @__PURE__ */ derived(() => get(context).editable && !get(context).lockSensitiveFields), value_1 = /* @__PURE__ */ derived(() => get(bioField).value ?? "");
    ContentEditableFormField(node_4, {
      selectOnFocus: !0,
      element: "span",
      get editable() {
        return get(editable);
      },
      get document() {
        return get(context).actor;
      },
      get field() {
        return get(bioField).field;
      },
      get value() {
        return get(value_1);
      },
      cssClass: "detail-input"
    }), append($$anchor2, li);
  });
  var div_4 = sibling(div_3, 2), node_5 = child(div_4);
  biopage(node_5, () => "DND5E.PersonalityTraits", () => get(context).system.details.trait, () => get(context).traitEnrichedHtml, () => "system.details.trait");
  var node_6 = sibling(node_5, 2);
  biopage(node_6, () => "DND5E.Ideals", () => get(context).system.details.ideal, () => get(context).idealEnrichedHtml, () => "system.details.ideal");
  var node_7 = sibling(node_6, 2);
  biopage(node_7, () => "DND5E.Bonds", () => get(context).system.details.bond, () => get(context).bondEnrichedHtml, () => "system.details.bond");
  var node_8 = sibling(node_7, 2);
  biopage(node_8, () => "DND5E.Flaws", () => get(context).system.details.flaw, () => get(context).flawEnrichedHtml, () => "system.details.flaw");
  var div_5 = sibling(div_4, 2), node_9 = child(div_5);
  RerenderAfterFormSubmission(node_9, {
    get andOnValueChange() {
      return get(context).system.details.appearance;
    },
    children: /* @__PURE__ */ __name(($$anchor2, $$slotProps) => {
      var article_3 = root_6$i(), div_6 = child(article_3), span_2 = child(div_6), text_2 = child(span_2);
      template_effect(() => set_text(text_2, localize("DND5E.Appearance")));
      var a_1 = sibling(span_2, 2);
      a_1.__click = [on_click_1$r, context, edit];
      var node_10 = sibling(div_6, 2);
      SheetEditor(node_10, {
        get content() {
          return get(context).appearanceEnrichedHtml;
        },
        target: "system.details.appearance",
        get editable() {
          return get(context).editable;
        }
      }), action(article_3, ($$node) => get(context).activateEditors?.($$node)), append($$anchor2, article_3);
    }, "children"),
    $$slots: { default: !0 }
  });
  var node_11 = sibling(node_9, 2);
  RerenderAfterFormSubmission(node_11, {
    get andOnValueChange() {
      return get(context).system.details.biography.value;
    },
    children: /* @__PURE__ */ __name(($$anchor2, $$slotProps) => {
      var article_4 = root_7$p(), div_7 = child(article_4), span_3 = child(div_7);
      const stringified_text = /* @__PURE__ */ derived(() => localize("DND5E.Background") ?? ""), stringified_text_1 = /* @__PURE__ */ derived(() => localize("DND5E.Biography") ?? "");
      var text_3 = child(span_3);
      template_effect(() => set_text(text_3, `${get(stringified_text)}/${get(stringified_text_1)}`));
      var a_2 = sibling(span_3, 2);
      a_2.__click = [on_click_2$e, context, edit];
      var node_12 = sibling(div_7, 2);
      SheetEditor(node_12, {
        get content() {
          return get(context).biographyEnrichedHtml;
        },
        target: "system.details.biography.value",
        get editable() {
          return get(context).editable;
        }
      }), action(article_4, ($$node) => get(context).activateEditors?.($$node)), append($$anchor2, article_4);
    }, "children"),
    $$slots: { default: !0 }
  }), template_effect(() => {
    toggle_class(div_2, "hidden", get(editing)), toggle_class(div_3, "limited", get(context).showLimitedSheet), toggle_class(div_4, "limited", get(context).showLimitedSheet), toggle_class(div_5, "limited", get(context).showLimitedSheet);
  }), append($$anchor, div_1), pop();
}
__name(CharacterBiographyTab, "CharacterBiographyTab");
delegate(["click"]);
var root_2$F = /* @__PURE__ */ template('<article class="editor-container flex-column full-height singleton svelte-umm1qt"><!></article>'), on_click$X = /* @__PURE__ */ __name((ev, context, edit) => get(context).editable && edit(TidyFlags.notes1.members.value.get(get(context).actor) ?? "", get(context).notes1EnrichedHtml, TidyFlags.notes1.members.value.prop), "on_click$X"), root_3$B = /* @__PURE__ */ template('<article class="svelte-umm1qt"><div class="section-titles flex-row"><!> <a class="icon-button"><i class="fa-solid fa-feather"></i></a></div> <!></article>'), on_click_1$q = /* @__PURE__ */ __name((ev, context, edit) => get(context).editable && edit(TidyFlags.notes2.members.value.get(get(context).actor) ?? "", get(context).notes2EnrichedHtml, TidyFlags.notes2.members.value.prop), "on_click_1$q"), root_4$o = /* @__PURE__ */ template('<article class="svelte-umm1qt"><div class="section-titles flex-row"><!> <a class="icon-button"><i class="fa-solid fa-feather"></i></a></div> <!></article>'), on_click_2$d = /* @__PURE__ */ __name((ev, context, edit) => get(context).editable && edit(TidyFlags.notes3.members.value.get(get(context).actor) ?? "", get(context).notes3EnrichedHtml, TidyFlags.notes3.members.value.prop), "on_click_2$d"), root_5$q = /* @__PURE__ */ template('<article class="svelte-umm1qt"><div class="section-titles flex-row"><!> <a class="icon-button"><i class="fa-solid fa-feather"></i></a></div> <!></article>'), on_click_3$6 = /* @__PURE__ */ __name((ev, context, edit) => get(context).editable && edit(TidyFlags.notes4.members.value.get(get(context).actor) ?? "", get(context).notes4EnrichedHtml, TidyFlags.notes4.members.value.prop), "on_click_3$6"), root_6$h = /* @__PURE__ */ template('<article class="svelte-umm1qt"><div class="section-titles flex-row"><!> <a class="icon-button"><i class="fa-solid fa-feather"></i></a></div> <!></article>'), on_click_4$2 = /* @__PURE__ */ __name((ev, context, edit) => get(context).editable && edit(TidyFlags.notes.members.value.get(get(context).actor) ?? "", get(context).notesEnrichedHtml, TidyFlags.notes.members.value.prop), "on_click_4$2"), root_7$o = /* @__PURE__ */ template('<article class="journal-notes svelte-umm1qt"><div class="section-titles flex-row justify-content-space-between"><span> </span> <a class="icon-button"><i class="fa-solid fa-feather"></i></a></div> <!></article>'), root$2l = /* @__PURE__ */ template('<div class="scroll-container journal-container svelte-umm1qt"><!> <div class="left-notes note-entries hide-editor-edit svelte-umm1qt"><!> <!> <!> <!></div> <div class="right-notes note-entries hide-editor-edit svelte-umm1qt"><!></div></div>');
function ActorJournalTab($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getCharacterSheetContext), editing = state(!1), contentToEdit = state(""), enrichedText = state(""), fieldToEdit = state("");
  async function stopEditing() {
    await get(context).actor.sheet.submit(), set(editing, !1);
  }
  __name(stopEditing, "stopEditing");
  function edit(value, enriched, field) {
    set(contentToEdit, proxy(value)), set(fieldToEdit, proxy(field)), set(enrichedText, proxy(enriched)), set(editing, !0);
  }
  __name(edit, "edit");
  const localize = FoundryAdapter.localize;
  var div = root$2l(), node = child(div);
  {
    var consequent = /* @__PURE__ */ __name(($$anchor2) => {
      var fragment = comment(), node_1 = first_child(fragment);
      key_block(node_1, () => get(contentToEdit), ($$anchor3) => {
        var article = root_2$F(), node_2 = child(article), editorOptions = /* @__PURE__ */ derived(() => ({
          editable: get(context).editable,
          toggled: !1
        }));
        SheetEditorV2(node_2, {
          get enriched() {
            return get(enrichedText);
          },
          get content() {
            return get(contentToEdit);
          },
          get field() {
            return get(fieldToEdit);
          },
          get editorOptions() {
            return get(editorOptions);
          },
          get documentUuid() {
            return get(context).actor.uuid;
          },
          onSave: /* @__PURE__ */ __name(() => stopEditing(), "onSave"),
          get manageSecrets() {
            return get(context).actor.isOwner;
          }
        }), append($$anchor3, article);
      }), append($$anchor2, fragment);
    }, "consequent");
    if_block(node, ($$render) => {
      get(editing) && $$render(consequent);
    });
  }
  var div_1 = sibling(node, 2), node_3 = child(div_1), andOnValueChange = /* @__PURE__ */ derived(() => TidyFlags.notes1.members.value.get(get(context).actor) ?? "");
  RerenderAfterFormSubmission(node_3, {
    get andOnValueChange() {
      return get(andOnValueChange);
    },
    children: /* @__PURE__ */ __name(($$anchor2, $$slotProps) => {
      var article_1 = root_3$B(), div_2 = child(article_1), node_4 = child(div_2), value_1 = /* @__PURE__ */ derived(() => TidyFlags.notes1.members.name.get(get(context).actor) ?? ""), placeholder = /* @__PURE__ */ derived(() => localize("TIDY5E.JournalPersonsOfInterest")), disabled = /* @__PURE__ */ derived(() => !get(context).editable);
      TextInput(node_4, {
        get document() {
          return get(context).actor;
        },
        get field() {
          return TidyFlags.notes1.members.name.prop;
        },
        get value() {
          return get(value_1);
        },
        get placeholder() {
          return get(placeholder);
        },
        selectOnFocus: !0,
        stopChangePropagation: !0,
        get disabled() {
          return get(disabled);
        }
      });
      var a2 = sibling(node_4, 2);
      a2.__click = [on_click$X, context, edit];
      var node_5 = sibling(div_2, 2);
      SheetEditor(node_5, {
        get content() {
          return get(context).notes1EnrichedHtml;
        },
        get target() {
          return TidyFlags.notes1.members.value.prop;
        },
        get editable() {
          return get(context).editable;
        }
      }), action(article_1, ($$node) => get(context).activateEditors?.($$node)), append($$anchor2, article_1);
    }, "children"),
    $$slots: { default: !0 }
  });
  var node_6 = sibling(node_3, 2), andOnValueChange_1 = /* @__PURE__ */ derived(() => TidyFlags.notes2.members.value.get(get(context).actor) ?? "");
  RerenderAfterFormSubmission(node_6, {
    get andOnValueChange() {
      return get(andOnValueChange_1);
    },
    children: /* @__PURE__ */ __name(($$anchor2, $$slotProps) => {
      var article_2 = root_4$o(), div_3 = child(article_2), node_7 = child(div_3), value_2 = /* @__PURE__ */ derived(() => TidyFlags.notes2.members.name.get(get(context).actor) ?? ""), placeholder_1 = /* @__PURE__ */ derived(() => localize("TIDY5E.JournalLocationsOfInterest")), disabled_1 = /* @__PURE__ */ derived(() => !get(context).editable);
      TextInput(node_7, {
        get document() {
          return get(context).actor;
        },
        get field() {
          return TidyFlags.notes2.members.name.prop;
        },
        get value() {
          return get(value_2);
        },
        get placeholder() {
          return get(placeholder_1);
        },
        selectOnFocus: !0,
        stopChangePropagation: !0,
        get disabled() {
          return get(disabled_1);
        }
      });
      var a_1 = sibling(node_7, 2);
      a_1.__click = [on_click_1$q, context, edit];
      var node_8 = sibling(div_3, 2);
      SheetEditor(node_8, {
        get content() {
          return get(context).notes2EnrichedHtml;
        },
        get target() {
          return TidyFlags.notes2.members.value.prop;
        },
        get editable() {
          return get(context).editable;
        }
      }), action(article_2, ($$node) => get(context).activateEditors?.($$node)), append($$anchor2, article_2);
    }, "children"),
    $$slots: { default: !0 }
  });
  var node_9 = sibling(node_6, 2), andOnValueChange_2 = /* @__PURE__ */ derived(() => TidyFlags.notes3.members.value.get(get(context).actor) ?? "");
  RerenderAfterFormSubmission(node_9, {
    get andOnValueChange() {
      return get(andOnValueChange_2);
    },
    children: /* @__PURE__ */ __name(($$anchor2, $$slotProps) => {
      var article_3 = root_5$q(), div_4 = child(article_3), node_10 = child(div_4), value_3 = /* @__PURE__ */ derived(() => TidyFlags.notes3.members.name.get(get(context).actor) ?? ""), placeholder_2 = /* @__PURE__ */ derived(() => localize("TIDY5E.JournalQuests")), disabled_2 = /* @__PURE__ */ derived(() => !get(context).editable);
      TextInput(node_10, {
        get document() {
          return get(context).actor;
        },
        get field() {
          return TidyFlags.notes3.members.name.prop;
        },
        get value() {
          return get(value_3);
        },
        get placeholder() {
          return get(placeholder_2);
        },
        selectOnFocus: !0,
        stopChangePropagation: !0,
        get disabled() {
          return get(disabled_2);
        }
      });
      var a_2 = sibling(node_10, 2);
      a_2.__click = [on_click_2$d, context, edit];
      var node_11 = sibling(div_4, 2);
      SheetEditor(node_11, {
        get content() {
          return get(context).notes3EnrichedHtml;
        },
        get target() {
          return TidyFlags.notes3.members.value.prop;
        },
        get editable() {
          return get(context).editable;
        }
      }), action(article_3, ($$node) => get(context).activateEditors?.($$node)), append($$anchor2, article_3);
    }, "children"),
    $$slots: { default: !0 }
  });
  var node_12 = sibling(node_9, 2), andOnValueChange_3 = /* @__PURE__ */ derived(() => TidyFlags.notes4.members.value.get(get(context).actor) ?? "");
  RerenderAfterFormSubmission(node_12, {
    get andOnValueChange() {
      return get(andOnValueChange_3);
    },
    children: /* @__PURE__ */ __name(($$anchor2, $$slotProps) => {
      var article_4 = root_6$h(), div_5 = child(article_4), node_13 = child(div_5), value_4 = /* @__PURE__ */ derived(() => TidyFlags.notes4.members.name.get(get(context).actor) ?? ""), placeholder_3 = /* @__PURE__ */ derived(() => localize("TIDY5E.JournalMisc")), disabled_3 = /* @__PURE__ */ derived(() => !get(context).editable);
      TextInput(node_13, {
        get document() {
          return get(context).actor;
        },
        get field() {
          return TidyFlags.notes4.members.name.prop;
        },
        get value() {
          return get(value_4);
        },
        get placeholder() {
          return get(placeholder_3);
        },
        selectOnFocus: !0,
        stopChangePropagation: !0,
        get disabled() {
          return get(disabled_3);
        }
      });
      var a_3 = sibling(node_13, 2);
      a_3.__click = [on_click_3$6, context, edit];
      var node_14 = sibling(div_5, 2);
      SheetEditor(node_14, {
        get content() {
          return get(context).notes4EnrichedHtml;
        },
        get target() {
          return TidyFlags.notes4.members.value.prop;
        },
        get editable() {
          return get(context).editable;
        }
      }), action(article_4, ($$node) => get(context).activateEditors?.($$node)), append($$anchor2, article_4);
    }, "children"),
    $$slots: { default: !0 }
  });
  var div_6 = sibling(div_1, 2), node_15 = child(div_6), andOnValueChange_4 = /* @__PURE__ */ derived(() => TidyFlags.notes.members.value.get(get(context).actor) ?? "");
  RerenderAfterFormSubmission(node_15, {
    get andOnValueChange() {
      return get(andOnValueChange_4);
    },
    children: /* @__PURE__ */ __name(($$anchor2, $$slotProps) => {
      var article_5 = root_7$o(), div_7 = child(article_5), span = child(div_7), text2 = child(span);
      template_effect(() => set_text(text2, localize("TIDY5E.JournalEntries")));
      var a_4 = sibling(span, 2);
      a_4.__click = [on_click_4$2, context, edit];
      var node_16 = sibling(div_7, 2);
      SheetEditor(node_16, {
        get content() {
          return get(context).notesEnrichedHtml;
        },
        get target() {
          return TidyFlags.notes.members.value.prop;
        },
        get editable() {
          return get(context).editable;
        }
      }), action(article_5, ($$node) => get(context).activateEditors?.($$node)), append($$anchor2, article_5);
    }, "children"),
    $$slots: { default: !0 }
  }), template_effect(() => {
    toggle_class(div_1, "hidden", get(editing)), toggle_class(div_1, "limited", get(context).showLimitedSheet), toggle_class(div_6, "hidden", get(editing)), toggle_class(div_6, "limited", get(context).showLimitedSheet);
  }), append($$anchor, div), pop();
}
__name(ActorJournalTab, "ActorJournalTab");
delegate(["click"]);
var root_1$1q = /* @__PURE__ */ template("<!> <!> <!> <!>", 1), root_6$g = /* @__PURE__ */ template("<!> <!> <!> <!> <!>", 1), root_20$6 = /* @__PURE__ */ template(" <!>", 1), root_22$2 = /* @__PURE__ */ template(" <!>", 1), root_17$4 = /* @__PURE__ */ template('<div class="flex-1 min-width-0"><div class="truncate flex-1"> </div> <small class="svelte-1nldtre"><!></small></div>'), root_26$1 = /* @__PURE__ */ template("<span> </span>"), root_25$2 = /* @__PURE__ */ template('<!> <i class="fas fa-bolt"></i>', 1), root_31$2 = /* @__PURE__ */ template('<div> </div> <small class="svelte-1nldtre"> </small>', 1), root_32$1 = /* @__PURE__ */ template('<div> </div> <small class="svelte-1nldtre"> </small>', 1), root_24$2 = /* @__PURE__ */ template('<div class="item-uses svelte-1nldtre"><!> <!></div>'), root_15$6 = /* @__PURE__ */ template("<!> <!> <!> <!>", 1), root_35$1 = /* @__PURE__ */ template('<div class="flex-column-truncate svelte-1nldtre"> </div>'), root_36 = /* @__PURE__ */ template('<small class="flex-column-truncate svelte-1nldtre"> </small>'), root_34 = /* @__PURE__ */ template("<!> <!>", 1), root_39 = /* @__PURE__ */ template('<span class="flex-column-truncate svelte-1nldtre"> </span> <small class="flex-column-truncate svelte-1nldtre"> </small>', 1), root_40 = /* @__PURE__ */ template("<span> </span>"), root_42 = /* @__PURE__ */ template('<div class="truncate flex-row align-items-flex-end extra-small-gap"><span> </span> <!></div>'), root_14$3 = /* @__PURE__ */ template("<!> <!> <!> <!> <!>", 1), root_46$1 = /* @__PURE__ */ template('<svelte-css-wrapper style="display: contents"><!></svelte-css-wrapper>', 1), root_13$5 = /* @__PURE__ */ template("<!> <!>", 1), root$2k = /* @__PURE__ */ template('<!> <div class="actions-tab-container scroll-container flex-column small-gap svelte-1nldtre"></div>', 1);
function ActorActionsTab($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getSheetContext), tabId = getContext(CONSTANTS.SVELTE_CONTEXT.TAB_ID), inlineToggleService = getContext(CONSTANTS.SVELTE_CONTEXT.INLINE_TOGGLE_SERVICE), actions = /* @__PURE__ */ derived(() => SheetSections.configureActions(get(context).actions, tabId, SheetPreferencesService.getByType(get(context).actor.type), TidyFlags.sectionConfig.get(get(context).actor)?.[tabId])), searchCriteria = state("");
  const searchResults = createSearchResultsState();
  setSearchResultsContext(searchResults), user_effect(() => {
    searchResults.uuids = ItemVisibility.getItemsToShowAtDepth({
      criteria: get(searchCriteria),
      itemContext: get(context).itemContext,
      sections: get(actions),
      tabId
    });
  });
  let utilityBarCommands = /* @__PURE__ */ derived(() => get(context).utilities[tabId]?.utilityToolbarCommands ?? []);
  const localize = FoundryAdapter.localize;
  declareLocation("actions");
  const damageHealingTypeIconMap = Actions.damageAndHealingTypesIconSrcMap;
  var fragment = root$2k(), node = first_child(fragment);
  UtilityToolbar(node, {
    class: "abilities-toolbar",
    children: /* @__PURE__ */ __name(($$anchor2, $$slotProps) => {
      var fragment_1 = root_1$1q(), node_1 = first_child(fragment_1);
      Search$1(node_1, {
        get value() {
          return get(searchCriteria);
        },
        set value($$value) {
          set(searchCriteria, proxy($$value));
        }
      });
      var node_2 = sibling(node_1, 2), filters = /* @__PURE__ */ derived(() => ItemFilterRuntime.getPinnedFiltersForTab(get(context).filterPins, get(context).filterData, tabId));
      PinnedFilterToggles(node_2, {
        filterGroupName: tabId,
        get filters() {
          return get(filters);
        }
      });
      var node_3 = sibling(node_2, 2);
      FilterMenu(node_3, { tabId });
      var node_4 = sibling(node_3, 2);
      each(node_4, 17, () => get(utilityBarCommands), (command) => command.title, ($$anchor3, command) => {
        var visible = /* @__PURE__ */ derived(() => get(command).visible ?? !0);
        UtilityToolbarCommand($$anchor3, {
          get title() {
            return get(command).title;
          },
          get iconClass() {
            return get(command).iconClass;
          },
          get text() {
            return get(command).text;
          },
          get visible() {
            return get(visible);
          },
          onExecute: /* @__PURE__ */ __name((ev) => get(command).execute?.(ev), "onExecute"),
          get sections() {
            return get(actions);
          }
        });
      }), append($$anchor2, fragment_1);
    }, "children"),
    $$slots: { default: !0 }
  });
  var div = sibling(node, 2);
  each(div, 21, () => get(actions), (section) => section.key, ($$anchor2, section) => {
    var fragment_3 = comment();
    const visibleItemCount = /* @__PURE__ */ derived(() => ItemVisibility.countVisibleItems(get(section).actions.map((a2) => a2.item), searchResults.uuids));
    var node_5 = first_child(fragment_3);
    {
      var consequent_20 = /* @__PURE__ */ __name(($$anchor3) => {
        ItemTable($$anchor3, {
          get key() {
            return get(section).key;
          },
          header: /* @__PURE__ */ __name(($$anchor4) => {
            ItemTableHeaderRow($$anchor4, {
              children: /* @__PURE__ */ __name(($$anchor5, $$slotProps) => {
                var fragment_6 = root_6$g(), node_6 = first_child(fragment_6);
                ItemTableColumn(node_6, {
                  primary: !0,
                  children: /* @__PURE__ */ __name(($$anchor6, $$slotProps2) => {
                    var text$1 = text();
                    template_effect(() => set_text(text$1, get(section).label)), append($$anchor6, text$1);
                  }, "children"),
                  $$slots: { default: !0 }
                });
                var node_7 = sibling(node_6, 2);
                ItemTableColumn(node_7, {
                  baseWidth: "6.25rem",
                  children: /* @__PURE__ */ __name(($$anchor6, $$slotProps2) => {
                    var text_1 = text();
                    template_effect(() => set_text(text_1, localize("DND5E.Range"))), append($$anchor6, text_1);
                  }, "children"),
                  $$slots: { default: !0 }
                });
                var node_8 = sibling(node_7, 2);
                ItemTableColumn(node_8, {
                  baseWidth: "5rem",
                  children: /* @__PURE__ */ __name(($$anchor6, $$slotProps2) => {
                    var text_2 = text();
                    template_effect(() => set_text(text_2, localize("TIDY5E.HitDC"))), append($$anchor6, text_2);
                  }, "children"),
                  $$slots: { default: !0 }
                });
                var node_9 = sibling(node_8, 2);
                ItemTableColumn(node_9, {
                  baseWidth: "7.5rem",
                  children: /* @__PURE__ */ __name(($$anchor6, $$slotProps2) => {
                    var text_3 = text();
                    template_effect(() => set_text(text_3, localize("DND5E.Damage"))), append($$anchor6, text_3);
                  }, "children"),
                  $$slots: { default: !0 }
                });
                var node_10 = sibling(node_9, 2);
                {
                  var consequent = /* @__PURE__ */ __name(($$anchor6) => {
                    ItemTableColumn($$anchor6, { baseWidth: "1.5rem" });
                  }, "consequent");
                  if_block(node_10, ($$render) => {
                    get(context).editable && get(context).useClassicControls && $$render(consequent);
                  });
                }
                append($$anchor5, fragment_6);
              }, "children"),
              $$slots: { default: !0 }
            });
          }, "header"),
          body: /* @__PURE__ */ __name(($$anchor4) => {
            var fragment_12 = comment(), node_11 = first_child(fragment_12);
            each(node_11, 17, () => get(section).actions, (actionItem) => actionItem.item.id, ($$anchor5, actionItem) => {
              var fragment_13 = root_13$5(), node_12 = first_child(fragment_13), contextMenu = /* @__PURE__ */ derived(() => ({
                type: CONSTANTS.CONTEXT_MENU_TYPE_ITEMS,
                uuid: get(actionItem).item.uuid
              })), hidden = /* @__PURE__ */ derived(() => !searchResults.show(get(actionItem).item.uuid));
              ItemTableRow(node_12, {
                get item() {
                  return get(actionItem).item;
                },
                onMouseDown: /* @__PURE__ */ __name((event2) => FoundryAdapter.editOnMiddleClick(event2, get(actionItem).item), "onMouseDown"),
                get contextMenu() {
                  return get(contextMenu);
                },
                get hidden() {
                  return get(hidden);
                },
                children: /* @__PURE__ */ __name(($$anchor6, $$arg0) => {
                  let toggleSummary = /* @__PURE__ */ __name(() => $$arg0?.().toggleSummary, "toggleSummary");
                  var fragment_14 = root_14$3(), node_13 = first_child(fragment_14);
                  ItemTableCell(node_13, {
                    primary: !0,
                    children: /* @__PURE__ */ __name(($$anchor7, $$slotProps) => {
                      var fragment_15 = root_15$6(), node_14 = first_child(fragment_15), disabled = /* @__PURE__ */ derived(() => !get(context).editable);
                      ItemUseButton(node_14, {
                        get disabled() {
                          return get(disabled);
                        },
                        get item() {
                          return get(actionItem).item;
                        }
                      });
                      var node_15 = sibling(node_14, 2);
                      {
                        var consequent_1 = /* @__PURE__ */ __name(($$anchor8) => {
                          InlineToggleControl($$anchor8, {
                            iconClass: "fa-lg",
                            get entityId() {
                              return get(actionItem).item.id;
                            },
                            inlineToggleService
                          });
                        }, "consequent_1");
                        if_block(node_15, ($$render) => {
                          "containerContents" in get(actionItem) && get(actionItem).containerContents && $$render(consequent_1);
                        });
                      }
                      var node_16 = sibling(node_15, 2);
                      ItemName(node_16, {
                        get item() {
                          return get(actionItem).item;
                        },
                        onToggle: /* @__PURE__ */ __name(() => toggleSummary()(get(context).actor), "onToggle"),
                        useActiveEffectsMarker: !1,
                        children: /* @__PURE__ */ __name(($$anchor8, $$slotProps2) => {
                          var div_1 = root_17$4();
                          const sourceClassText = /* @__PURE__ */ derived(() => get(context).actor.spellcastingClasses?.[get(actionItem).item.system.sourceClass]?.name ?? "");
                          var div_2 = child(div_1), text_4 = child(div_2), small = sibling(div_2, 2), node_17 = child(small);
                          {
                            var consequent_2 = /* @__PURE__ */ __name(($$anchor9) => {
                              var text_5 = text();
                              template_effect(() => set_text(text_5, get(actionItem).typeLabel)), append($$anchor9, text_5);
                            }, "consequent_2"), alternate_1 = /* @__PURE__ */ __name(($$anchor9) => {
                              var fragment_18 = comment(), node_18 = first_child(fragment_18);
                              {
                                var consequent_4 = /* @__PURE__ */ __name(($$anchor10) => {
                                  var fragment_19 = root_20$6(), text_6 = first_child(fragment_19), node_19 = sibling(text_6);
                                  {
                                    var consequent_3 = /* @__PURE__ */ __name(($$anchor11) => {
                                      var text_7 = text();
                                      template_effect(() => set_text(text_7, `• ${localize(get(sourceClassText)) ?? ""}`)), append($$anchor11, text_7);
                                    }, "consequent_3");
                                    if_block(node_19, ($$render) => {
                                      get(sourceClassText) && $$render(consequent_3);
                                    });
                                  }
                                  template_effect(() => set_text(text_6, `${get(actionItem).item.labels?.level ?? "" ?? ""}
                          ${get(actionItem).item.labels?.school ?? "" ?? ""} `)), append($$anchor10, fragment_19);
                                }, "consequent_4"), alternate = /* @__PURE__ */ __name(($$anchor10) => {
                                  var fragment_21 = root_22$2(), text_8 = first_child(fragment_21), node_20 = sibling(text_8);
                                  {
                                    var consequent_5 = /* @__PURE__ */ __name(($$anchor11) => {
                                      var text_9 = text();
                                      template_effect(() => set_text(text_9, `• ${localize(get(sourceClassText)) ?? ""}`)), append($$anchor11, text_9);
                                    }, "consequent_5");
                                    if_block(node_20, ($$render) => {
                                      get(sourceClassText) && $$render(consequent_5);
                                    });
                                  }
                                  template_effect(() => set_text(text_8, `${get(actionItem).item.labels?.school ?? "" ?? ""}
                          ${get(actionItem).item.labels?.level ?? "" ?? ""} `)), append($$anchor10, fragment_21);
                                }, "alternate");
                                if_block(
                                  node_18,
                                  ($$render) => {
                                    get(actionItem).item.system.level !== 0 ? $$render(consequent_4) : $$render(alternate, !1);
                                  },
                                  !0
                                );
                              }
                              append($$anchor9, fragment_18);
                            }, "alternate_1");
                            if_block(node_17, ($$render) => {
                              get(actionItem).item.type !== CONSTANTS.ITEM_TYPE_SPELL ? $$render(consequent_2) : $$render(alternate_1, !1);
                            });
                          }
                          template_effect(() => {
                            set_attribute(div_2, "data-tidy-item-name", get(actionItem).item.name), set_attribute(div_2, "data-tidy-sheet-part", CONSTANTS.SHEET_PARTS.ITEM_NAME), set_attribute(div_2, "title", get(actionItem).item.name), set_text(text_4, get(actionItem).item.name);
                          }), append($$anchor8, div_1);
                        }, "children"),
                        $$slots: { default: !0 }
                      });
                      var node_21 = sibling(node_16, 2);
                      {
                        var consequent_12 = /* @__PURE__ */ __name(($$anchor8) => {
                          var div_3 = root_24$2();
                          template_effect(() => set_attribute(div_3, "title", localize("DND5E.Uses")));
                          var node_22 = child(div_3);
                          {
                            var consequent_7 = /* @__PURE__ */ __name(($$anchor9) => {
                              var fragment_23 = root_25$2();
                              const remaining = /* @__PURE__ */ derived(() => get(actionItem).item.system.uses.max - get(actionItem).item.system.uses.spent);
                              var node_23 = first_child(fragment_23);
                              {
                                var consequent_6 = /* @__PURE__ */ __name(($$anchor10) => {
                                  var span = root_26$1(), text_10 = child(span);
                                  template_effect(() => set_text(text_10, get(remaining))), append($$anchor10, span);
                                }, "consequent_6");
                                if_block(node_23, ($$render) => {
                                  get(remaining) > 1 && $$render(consequent_6);
                                });
                              }
                              var i_1 = sibling(node_23, 2);
                              template_effect(() => set_attribute(i_1, "title", localize("DND5E.Charged"))), append($$anchor9, fragment_23);
                            }, "consequent_7"), alternate_4 = /* @__PURE__ */ __name(($$anchor9) => {
                              var fragment_24 = comment(), node_24 = first_child(fragment_24);
                              {
                                var consequent_8 = /* @__PURE__ */ __name(($$anchor10) => {
                                  RechargeControl($$anchor10, {
                                    get document() {
                                      return get(actionItem).item;
                                    },
                                    field: "system.uses.spent",
                                    get uses() {
                                      return get(actionItem).item.system.uses;
                                    }
                                  });
                                }, "consequent_8"), alternate_3 = /* @__PURE__ */ __name(($$anchor10) => {
                                  var fragment_26 = comment(), node_25 = first_child(fragment_26);
                                  {
                                    var consequent_10 = /* @__PURE__ */ __name(($$anchor11) => {
                                      var fragment_27 = comment(), node_26 = first_child(fragment_27);
                                      {
                                        var consequent_9 = /* @__PURE__ */ __name(($$anchor12) => {
                                          var fragment_28 = root_31$2(), div_4 = first_child(fragment_28), text_11 = child(div_4), small_1 = sibling(div_4, 2), text_12 = child(small_1);
                                          template_effect(() => set_text(text_12, localize("DND5E.Quantity"))), template_effect(() => {
                                            set_attribute(div_4, "title", get(actionItem).item.system.quantity), set_text(text_11, get(actionItem).item.system.quantity ?? 0);
                                          }), append($$anchor12, fragment_28);
                                        }, "consequent_9"), alternate_2 = /* @__PURE__ */ __name(($$anchor12) => {
                                          var fragment_29 = root_32$1(), div_5 = first_child(fragment_29), text_13 = child(div_5), small_2 = sibling(div_5, 2), text_14 = child(small_2);
                                          template_effect(() => set_text(text_14, localize("DND5E.Uses"))), template_effect(() => set_text(text_13, `${get(actionItem).item.system.uses.value ?? 0 ?? ""} / ${get(actionItem).item.system.uses.max ?? 0 ?? ""}`)), append($$anchor12, fragment_29);
                                        }, "alternate_2");
                                        if_block(node_26, ($$render) => {
                                          get(actionItem).item.system.uses?.value === get(actionItem).item.system.uses?.max && get(actionItem).item.system.uses?.autoDestroy ? $$render(consequent_9) : $$render(alternate_2, !1);
                                        });
                                      }
                                      append($$anchor11, fragment_27);
                                    }, "consequent_10");
                                    if_block(
                                      node_25,
                                      ($$render) => {
                                        get(actionItem).item.hasLimitedUses && $$render(consequent_10);
                                      },
                                      !0
                                    );
                                  }
                                  append($$anchor10, fragment_26);
                                }, "alternate_3");
                                if_block(
                                  node_24,
                                  ($$render) => {
                                    get(actionItem).item.isOnCooldown ? $$render(consequent_8) : $$render(alternate_3, !1);
                                  },
                                  !0
                                );
                              }
                              append($$anchor9, fragment_24);
                            }, "alternate_4");
                            if_block(node_22, ($$render) => {
                              get(actionItem).item.hasRecharge && !get(actionItem).item.isOnCooldown ? $$render(consequent_7) : $$render(alternate_4, !1);
                            });
                          }
                          var node_27 = sibling(node_22, 2);
                          {
                            var consequent_11 = /* @__PURE__ */ __name(($$anchor9) => {
                              var text_15 = text();
                              template_effect(() => set_text(text_15, get(actionItem).item.system.activation.cost)), append($$anchor9, text_15);
                            }, "consequent_11");
                            if_block(node_27, ($$render) => {
                              ItemUtils.hasSpecificActivationType(get(actionItem).item, CONSTANTS.ACTIVATION_COST_LEGENDARY) && $$render(consequent_11);
                            });
                          }
                          append($$anchor8, div_3);
                        }, "consequent_12");
                        if_block(node_21, ($$render) => {
                          (get(actionItem).item.hasRecharge || get(actionItem).item.hasLimitedUses || ItemUtils.hasSpecificActivationType(get(actionItem).item, CONSTANTS.ACTIVATION_COST_LEGENDARY)) && $$render(consequent_12);
                        });
                      }
                      append($$anchor7, fragment_15);
                    }, "children"),
                    $$slots: { default: !0 }
                  });
                  var node_28 = sibling(node_13, 2);
                  ItemTableCell(node_28, {
                    baseWidth: "6.25rem",
                    cssClass: "truncate flex-column no-gap",
                    children: /* @__PURE__ */ __name(($$anchor7, $$slotProps) => {
                      var fragment_31 = root_34(), node_29 = first_child(fragment_31);
                      {
                        var consequent_13 = /* @__PURE__ */ __name(($$anchor8) => {
                          var div_6 = root_35$1(), text_16 = child(div_6);
                          template_effect(() => {
                            set_attribute(div_6, "title", get(actionItem).rangeTitle), set_text(text_16, get(actionItem).rangeTitle ?? "");
                          }), append($$anchor8, div_6);
                        }, "consequent_13");
                        if_block(node_29, ($$render) => {
                          get(actionItem).rangeTitle !== null && $$render(consequent_13);
                        });
                      }
                      var node_30 = sibling(node_29, 2);
                      {
                        var consequent_14 = /* @__PURE__ */ __name(($$anchor8) => {
                          var small_3 = root_36(), text_17 = child(small_3);
                          template_effect(() => {
                            set_attribute(small_3, "title", get(actionItem).rangeSubtitle), set_text(text_17, get(actionItem).rangeSubtitle ?? "");
                          }), append($$anchor8, small_3);
                        }, "consequent_14");
                        if_block(node_30, ($$render) => {
                          get(actionItem).rangeSubtitle !== null && $$render(consequent_14);
                        });
                      }
                      append($$anchor7, fragment_31);
                    }, "children"),
                    $$slots: { default: !0 }
                  });
                  var node_31 = sibling(node_28, 2);
                  ItemTableCell(node_31, {
                    baseWidth: "5rem",
                    cssClass: "flex-column no-gap",
                    children: /* @__PURE__ */ __name(($$anchor7, $$slotProps) => {
                      var fragment_32 = comment(), node_32 = first_child(fragment_32);
                      {
                        var consequent_16 = /* @__PURE__ */ __name(($$anchor8) => {
                          var fragment_33 = comment(), node_33 = first_child(fragment_33);
                          {
                            var consequent_15 = /* @__PURE__ */ __name(($$anchor9) => {
                              var fragment_34 = root_39();
                              const saveAbilityLabel = /* @__PURE__ */ derived(() => FoundryAdapter.lookupAbility(get(actionItem).item.system.save.ability)?.label ?? "");
                              var span_1 = first_child(fragment_34), text_18 = child(span_1);
                              template_effect(() => set_text(text_18, `${localize("DND5E.AbbreviationDC") ?? ""}
                        ${get(actionItem).item.system.save.dc ?? "" ?? ""}`));
                              var small_4 = sibling(span_1, 2), text_19 = child(small_4);
                              template_effect(() => {
                                set_attribute(span_1, "title", get(actionItem).item.labels?.save ?? ""), set_attribute(small_4, "title", get(saveAbilityLabel)), set_text(text_19, get(saveAbilityLabel));
                              }), append($$anchor9, fragment_34);
                            }, "consequent_15"), alternate_5 = /* @__PURE__ */ __name(($$anchor9) => {
                              var span_2 = root_40(), text_20 = child(span_2);
                              template_effect(() => {
                                set_attribute(span_2, "title", get(actionItem).item.labels?.toHit ?? ""), set_text(text_20, get(actionItem).item.labels?.toHit ?? "");
                              }), append($$anchor9, span_2);
                            }, "alternate_5");
                            if_block(node_33, ($$render) => {
                              get(actionItem).item.labels?.save !== "" && get(actionItem).item.labels?.save !== void 0 ? $$render(consequent_15) : $$render(alternate_5, !1);
                            });
                          }
                          append($$anchor8, fragment_33);
                        }, "consequent_16");
                        if_block(node_32, ($$render) => {
                          (get(actionItem).item.labels?.save || get(actionItem).item.labels?.toHit) && $$render(consequent_16);
                        });
                      }
                      append($$anchor7, fragment_32);
                    }, "children"),
                    $$slots: { default: !0 }
                  });
                  var node_34 = sibling(node_31, 2);
                  ItemTableCell(node_34, {
                    baseWidth: "7.5rem",
                    cssClass: "flex-wrap flex-row small-gap extra-small-row-gap",
                    children: /* @__PURE__ */ __name(($$anchor7, $$slotProps) => {
                      var fragment_35 = comment(), node_35 = first_child(fragment_35);
                      each(node_35, 17, () => get(actionItem).calculatedDerivedDamage ?? [], index, ($$anchor8, entry) => {
                        var div_7 = root_42();
                        const iconSrc = /* @__PURE__ */ derived(() => damageHealingTypeIconMap[get(entry).damageType]);
                        var span_3 = child(div_7), text_21 = child(span_3), node_36 = sibling(span_3, 2);
                        {
                          var consequent_17 = /* @__PURE__ */ __name(($$anchor9) => {
                            Dnd5eIcon($$anchor9, {
                              get src() {
                                return get(iconSrc);
                              }
                            });
                          }, "consequent_17");
                          if_block(node_36, ($$render) => {
                            get(iconSrc) && $$render(consequent_17);
                          });
                        }
                        template_effect(() => {
                          set_attribute(div_7, "title", get(entry).label ?? get(entry).formula + get(entry).damageHealingTypeLabel), set_text(text_21, get(entry).formula);
                        }), append($$anchor8, div_7);
                      }), append($$anchor7, fragment_35);
                    }, "children"),
                    $$slots: { default: !0 }
                  });
                  var node_37 = sibling(node_34, 2);
                  {
                    var consequent_18 = /* @__PURE__ */ __name(($$anchor7) => {
                      ItemTableCell($$anchor7, {
                        baseWidth: "1.5rem",
                        children: /* @__PURE__ */ __name(($$anchor8, $$slotProps) => {
                          ActionFilterOverrideControl($$anchor8, {
                            get item() {
                              return get(actionItem).item;
                            }
                          });
                        }, "children"),
                        $$slots: { default: !0 }
                      });
                    }, "consequent_18");
                    if_block(node_37, ($$render) => {
                      get(context).editable && get(context).useClassicControls && $$render(consequent_18);
                    });
                  }
                  append($$anchor6, fragment_14);
                }, "children"),
                $$slots: { default: !0 }
              });
              var node_38 = sibling(node_12, 2);
              {
                var consequent_19 = /* @__PURE__ */ __name(($$anchor6) => {
                  var fragment_39 = root_46$1(), node_39 = first_child(fragment_39);
                  css_props(node_39, () => ({ "--t5e-image-size-override": "1.5rem" })), InlineContainerView$1(node_39.lastChild, {
                    get container() {
                      return get(actionItem).item;
                    },
                    get containerContents() {
                      return get(actionItem).containerContents;
                    },
                    get editable() {
                      return get(context).editable;
                    },
                    inlineToggleService,
                    get lockItemQuantity() {
                      return get(context).lockItemQuantity;
                    },
                    get sheetDocument() {
                      return get(context).actor;
                    },
                    get unlocked() {
                      return get(context).unlocked;
                    }
                  }), append($$anchor6, fragment_39);
                }, "consequent_19");
                if_block(node_38, ($$render) => {
                  "containerContents" in get(actionItem) && get(actionItem).containerContents && $$render(consequent_19);
                });
              }
              append($$anchor5, fragment_13);
            }), append($$anchor4, fragment_12);
          }, "body"),
          $$slots: { header: !0, body: !0 }
        });
      }, "consequent_20");
      if_block(node_5, ($$render) => {
        get(visibleItemCount) > 0 && get(section).show && $$render(consequent_20);
      });
    }
    append($$anchor2, fragment_3);
  }), append($$anchor, fragment), pop();
}
__name(ActorActionsTab, "ActorActionsTab");
class HandlebarsTemplateRenderer {
  static {
    __name(this, "HandlebarsTemplateRenderer");
  }
  path;
  constructor(props) {
    this.path = props?.path ?? "";
  }
  async render(data) {
    try {
      return await renderTemplate(this.path, data);
    } catch (e2) {
      return error("Failed to render handlebars template", !1, e2), "";
    }
  }
}
class CustomTabBase {
  static {
    __name(this, "CustomTabBase");
  }
}
class HandlebarsTab extends CustomTabBase {
  static {
    __name(this, "HandlebarsTab");
  }
  title = "";
  tabId = "";
  /**
   * The path to the handlebars template. Use a leading slash to look in the UserData directory.
   * @example A template in a module's templates directory
   * ```"/modules/my-module-id/templates/my-module-template.hbs"```
   */
  path = "";
  renderScheme = "handlebars";
  tabContentsClasses = [];
  _activateDefaultSheetListeners = !1;
  get activateDefaultSheetListeners() {
    return this._activateDefaultSheetListeners;
  }
  set activateDefaultSheetListeners(value) {
    warn(
      "Tidy is moving to Application V2, and there will no longer be any default sheet listeners. Be sure to provide your own event handling for the content that is injected."
    ), this._activateDefaultSheetListeners = value;
  }
  constructor(props) {
    super();
    const merged = foundry.utils.mergeObject(this, props);
    Object.assign(this, merged);
  }
  /**
   * An optional function that provides the relevant application context
   * (item sheet context, character sheet context, NPC sheet context, etc.)
   * and expects the same data or a replacement object in return.
   * The return value is passed to the Handlebars template.
   */
  getData;
  /**
   * Optional function to determine whether the tab should be visible when viewing the sheet. When excluded, it defaults to `true`.
   * The `context` field is the relevant application context (item sheet, character sheet, etc.).
   */
  enabled;
  /**
   * Optional function which is called each time a change detection cycle occurs on the sheet.
   * It is called after this tab's content is optionally re-rendered to the DOM.
   */
  onRender;
}
class HtmlTab extends CustomTabBase {
  static {
    __name(this, "HtmlTab");
  }
  title = "";
  tabId = "";
  html = "";
  renderScheme = "handlebars";
  tabContentsClasses = [];
  _activateDefaultSheetListeners = !1;
  get activateDefaultSheetListeners() {
    return this._activateDefaultSheetListeners;
  }
  set activateDefaultSheetListeners(value) {
    warn(
      "Tidy is moving to Application V2, and there will no longer be any default sheet listeners. Be sure to provide your own event handling for the content that is injected."
    ), this._activateDefaultSheetListeners = value;
  }
  constructor(props) {
    super();
    const merged = foundry.utils.mergeObject(this, props);
    Object.assign(this, merged);
  }
  enabled;
  onRender;
}
class SvelteTab extends CustomTabBase {
  static {
    __name(this, "SvelteTab");
  }
  /**
   * A reference to the `.svelte` component.
   */
  component = void 0;
  title = "";
  tabId = "";
  /**
   * For svelte-based tabs, the render scheme is set to 'force' and generally ignored.
   */
  renderScheme = "force";
  tabContentsClasses = [];
  _activateDefaultSheetListeners = !1;
  get activateDefaultSheetListeners() {
    return this._activateDefaultSheetListeners;
  }
  set activateDefaultSheetListeners(value) {
    warn(
      "Tidy is moving to Application V2, and there will no longer be any default sheet listeners. Be sure to provide your own event handling for the content that is injected."
    ), this._activateDefaultSheetListeners = value;
  }
  constructor(props) {
    super();
    const merged = foundry.utils.mergeObject(this, props);
    Object.assign(this, merged);
  }
  /**
   * An optional function that provides the relevant application context
   * (item sheet context, character sheet context, NPC sheet context, etc.)
   * and expects an object in return.
   * The return value is passed to the svelte component as its props.
   */
  getProps;
  /**
   * An optional function that provides the relevant svelte context map and
   * expects the component's ideal context map in return.
   *
   * @remarks
   * For most sheets, a guaranteed entry in the context map is a readable store
   * of the sheet's application context
   * (item sheet context, character sheet context, NPC sheet context, etc.).
   */
  getContext;
  enabled;
  onRender;
}
class TabManager {
  static {
    __name(this, "TabManager");
  }
  static async prepareTabsForRender(context, registeredTabs) {
    let enabledTabs = getOrderedEnabledSheetTabs(context, registeredTabs), tabs = [];
    for (let sheetTab of enabledTabs)
      try {
        let tab = {
          id: sheetTab.id,
          title: TabManager.getTabTitle(sheetTab),
          onRender: sheetTab.onRender,
          content: await getTabContent(context, sheetTab),
          activateDefaultSheetListeners: sheetTab.activateDefaultSheetListeners,
          autoHeight: sheetTab.autoHeight
        };
        tabs.push(tab);
      } catch (e2) {
        error("Unable to prepare tab for rendering", !1, {
          error: e2,
          tab: sheetTab
        });
      }
    return tabs;
  }
  static getTabsAsConfigOptions(tabs) {
    return tabs.reduce((prev, curr) => (prev[curr.id] = TabManager.getTabTitle(curr), prev), {});
  }
  static validateTab(tab) {
    return isNil(tab.tabId?.trim(), "") ? (error("A tab ID is required for registered tabs.", !0), !1) : !0;
  }
  static mapCustomTabToRegisteredTab(tab, layout) {
    let registeredTab;
    return layout ??= CONSTANTS.SHEET_LAYOUT_ALL, tab instanceof HandlebarsTab ? registeredTab = {
      content: new HandlebarsTemplateRenderer({ path: tab.path }),
      id: tab.tabId,
      title: tab.title,
      enabled: tab.enabled,
      layout,
      onRender: tab.onRender,
      renderScheme: tab.renderScheme,
      tabContentsClasses: tab.tabContentsClasses,
      getData: tab.getData,
      activateDefaultSheetListeners: tab.activateDefaultSheetListeners
    } : tab instanceof HtmlTab ? registeredTab = {
      content: {
        html: tab.html,
        type: "html",
        renderScheme: tab.renderScheme,
        cssClass: tab.tabContentsClasses.join(" ")
      },
      id: tab.tabId,
      title: tab.title,
      enabled: tab.enabled,
      layout,
      onRender: tab.onRender,
      renderScheme: tab.renderScheme,
      tabContentsClasses: tab.tabContentsClasses,
      activateDefaultSheetListeners: tab.activateDefaultSheetListeners
    } : tab instanceof SvelteTab && tab.component && (registeredTab = {
      content: {
        type: "svelte",
        component: tab.component,
        cssClass: tab.tabContentsClasses?.join(" ") ?? "",
        getProps: tab.getProps,
        getContext: tab.getContext
      },
      id: tab.tabId,
      title: tab.title,
      enabled: tab.enabled,
      layout,
      onRender: tab.onRender,
      renderScheme: "force",
      tabContentsClasses: tab.tabContentsClasses,
      activateDefaultSheetListeners: tab.activateDefaultSheetListeners
    }), registeredTab;
  }
  static getTabTitle(tab) {
    try {
      return typeof tab.title == "function" ? tab.title() : tab.title;
    } catch (e2) {
      return error("An error occurred while getting the tab title", !1, e2), debug("Tab title error troubleshooting info", { tab }), "";
    }
  }
}
function getOrderedEnabledSheetTabs(context, registeredTabs) {
  return [...registeredTabs].filter((t2) => {
    try {
      return isNil(t2.enabled) || typeof t2.enabled == "function" && t2.enabled(context);
    } catch (e2) {
      return error(
        "An error occurred while determining if a tab should be enabled.",
        !1,
        e2
      ), debug("Tab-enabled error troubleshooting info", { tab: t2 }), !1;
    }
  });
}
__name(getOrderedEnabledSheetTabs, "getOrderedEnabledSheetTabs");
async function getTabContent(data, tab) {
  if ("type" in tab.content && tab.content.type === "svelte" || "type" in tab.content && tab.content.type === "html")
    return tab.content;
  if (tab.content instanceof HandlebarsTemplateRenderer) {
    const handlebarsData = typeof tab.getData == "function" ? await tab.getData(data) : data;
    return {
      html: await tab.content.render(handlebarsData),
      renderScheme: tab.renderScheme ?? "handlebars",
      type: "html",
      cssClass: tab.tabContentsClasses?.join(" ")
    };
  }
  return error(
    "Unble to get tab content. The provided tab information is unable to be rendered.",
    !1,
    tab
  ), {
    html: "",
    renderScheme: "force",
    type: "html"
  };
}
__name(getTabContent, "getTabContent");
class CustomContentBase {
  static {
    __name(this, "CustomContentBase");
  }
}
class HandlebarsContent extends CustomContentBase {
  static {
    __name(this, "HandlebarsContent");
  }
  injectParams;
  /**
   * The path to the handlebars template. Use a leading slash to look in the UserData directory.
   * @example A template in a module's templates directory
   * ```"/modules/my-module-id/templates/my-module-template.hbs"```
   */
  path = "";
  renderScheme = "handlebars";
  _activateDefaultSheetListeners = !1;
  get activateDefaultSheetListeners() {
    return this._activateDefaultSheetListeners;
  }
  set activateDefaultSheetListeners(value) {
    warn(
      "Tidy is moving to Application V2, and there will no longer be any default sheet listeners. Be sure to provide your own event handling for the content that is injected."
    ), this._activateDefaultSheetListeners = value;
  }
  constructor(props) {
    super();
    const merged = foundry.utils.mergeObject(this, props);
    Object.assign(this, merged);
  }
  onContentReady;
  /**
   * An optional function that provides the relevant application context
   * (item sheet context, character sheet context, NPC sheet context, etc.)
   * and expects the same data or a replacement object in return.
   * The return value is passed to the Handlebars template.
   */
  getData;
  enabled;
  onRender;
}
class CustomContentManager {
  static {
    __name(this, "CustomContentManager");
  }
  static async prepareContentForRender(context, registeredContent) {
    let enabledContent = getEnabledContent(context, registeredContent), customContent = [];
    for (let content of enabledContent) {
      let c2 = {
        content: await mapRenderableContent(context, content),
        position: content.injectParams?.position,
        selector: content.injectParams?.selector,
        activateDefaultSheetListeners: content.activateDefaultSheetListeners,
        onContentReady: content.onContentReady,
        onRender: content.onRender
      };
      customContent.push(c2);
    }
    return customContent;
  }
  static mapToRegisteredContent(content, layout) {
    return {
      content: content instanceof HandlebarsContent ? new HandlebarsTemplateRenderer({
        path: content.path
      }) : {
        html: content.html,
        renderScheme: content.renderScheme,
        type: "html"
      },
      activateDefaultSheetListeners: content.activateDefaultSheetListeners,
      enabled: content.enabled,
      injectParams: content.injectParams,
      layout: layout ?? "all",
      renderScheme: content.renderScheme,
      getData: content instanceof HandlebarsContent ? content.getData : void 0,
      onContentReady: content.onContentReady,
      onRender: content.onRender
    };
  }
}
function getEnabledContent(context, registeredContent) {
  return [...registeredContent].filter((c2) => {
    try {
      return c2.enabled?.(context) ?? !0;
    } catch (e2) {
      return error(
        "Unable to check custom content to determine if it is enabled because of an error",
        !1,
        e2
      ), !1;
    }
  });
}
__name(getEnabledContent, "getEnabledContent");
async function mapRenderableContent(data, registeredContent) {
  if ("type" in registeredContent.content && registeredContent.content.type === "html")
    return registeredContent.content;
  if (registeredContent.content instanceof HandlebarsTemplateRenderer) {
    const handlebarsData = typeof registeredContent.getData == "function" ? await registeredContent.getData(data) : data;
    return {
      html: await registeredContent.content.render(handlebarsData),
      renderScheme: registeredContent.renderScheme ?? "handlebars",
      type: "html"
    };
  }
  return error(
    "Unble to get custom content. The provided custom content information is unable to be rendered.",
    !1,
    registeredContent
  ), {
    html: "",
    renderScheme: "force",
    type: "html"
  };
}
__name(mapRenderableContent, "mapRenderableContent");
class CharacterSheetRuntime {
  static {
    __name(this, "CharacterSheetRuntime");
  }
  static _content = [];
  static _tabs = [
    {
      title: "TIDY5E.Actions.TabName",
      content: {
        component: ActorActionsTab,
        type: "svelte"
      },
      id: CONSTANTS.TAB_ACTOR_ACTIONS,
      layout: "classic"
    },
    {
      id: CONSTANTS.TAB_CHARACTER_ATTRIBUTES,
      title: "DND5E.Attributes",
      content: {
        component: CharacterAttributesTab,
        type: "svelte"
      },
      layout: "classic"
    },
    {
      id: CONSTANTS.TAB_ACTOR_INVENTORY,
      title: "DND5E.Inventory",
      content: {
        component: ActorInventoryTab,
        type: "svelte",
        getProps() {
          return {
            tabId: CONSTANTS.TAB_ACTOR_INVENTORY
          };
        }
      },
      layout: "classic"
    },
    {
      id: CONSTANTS.TAB_CHARACTER_SPELLBOOK,
      title: "DND5E.Spellbook",
      content: {
        component: CharacterSpellbookTab,
        type: "svelte"
      },
      layout: "classic"
    },
    {
      id: CONSTANTS.TAB_CHARACTER_FEATURES,
      title: "DND5E.Features",
      content: {
        component: CharacterFeaturesTab,
        type: "svelte"
      },
      layout: "classic"
    },
    {
      id: CONSTANTS.TAB_CHARACTER_EFFECTS,
      title: "DND5E.Effects",
      content: {
        component: CharacterEffectsTab,
        type: "svelte"
      },
      layout: "classic"
    },
    {
      id: CONSTANTS.TAB_CHARACTER_BIOGRAPHY,
      title: "DND5E.Biography",
      content: {
        component: CharacterBiographyTab,
        type: "svelte"
      },
      layout: "classic"
    },
    {
      id: CONSTANTS.TAB_CHARACTER_JOURNAL,
      title: "TIDY5E.JournalTabName",
      content: {
        component: ActorJournalTab,
        type: "svelte"
      },
      enabled: /* @__PURE__ */ __name((context) => context.owner, "enabled"),
      layout: "classic"
    },
    {
      id: CONSTANTS.TAB_CHARACTER_BASTION,
      title: "DND5E.Bastion.Label",
      content: {
        component: CharacterBastionTab,
        type: "svelte"
      },
      enabled: /* @__PURE__ */ __name((context) => {
        const { enabled } = FoundryAdapter.getSystemSetting(CONSTANTS.SYSTEM_SETTING_BASTION_CONFIGURATION), { basic, special } = CONFIG.DND5E.facilities.advancement, threshold = Math.min(
          ...Object.keys(basic).map(Number),
          ...Object.keys(special).map(Number)
        );
        return context.actor.system.details.level >= threshold && enabled;
      }, "enabled"),
      layout: "classic"
    }
  ];
  static async getContent(context) {
    return await CustomContentManager.prepareContentForRender(
      context,
      CharacterSheetRuntime._content
    );
  }
  static async getTabs(context) {
    return await TabManager.prepareTabsForRender(
      context,
      CharacterSheetRuntime._tabs
    );
  }
  static getAllRegisteredTabs() {
    return [...CharacterSheetRuntime._tabs];
  }
  static registerContent(registeredContent) {
    this._content.push(registeredContent);
  }
  static registerTab(tab, options) {
    const tabExists = CharacterSheetRuntime._tabs.some((t2) => t2.id === tab.id);
    if (tabExists && !options?.overrideExisting) {
      warn(`Tab with id ${tab.id} already exists.`);
      return;
    }
    if (tabExists && options?.overrideExisting) {
      const index2 = CharacterSheetRuntime._tabs.findIndex(
        (t2) => t2.id === tab.id
      );
      index2 >= 0 && CharacterSheetRuntime._tabs.splice(index2, 1);
    }
    CharacterSheetRuntime._tabs.push(tab);
  }
  static getTabTitle(tabId) {
    try {
      let tabTitle = this._tabs.find((t2) => t2.id === tabId)?.title;
      return typeof tabTitle == "function" && (tabTitle = tabTitle()), tabTitle ? FoundryAdapter.localize(tabTitle) : tabId;
    } catch (e2) {
      error("An error occurred while searching for a tab title.", !1, e2), debug("Tab title error troubleshooting information", { tabId });
    }
  }
}
var root_1$1p = /* @__PURE__ */ template("<input>"), root_2$E = /* @__PURE__ */ template("<label><!> <!></label>");
function Checkbox($$anchor, $$props) {
  push($$props, !0);
  const checkboxInput = /* @__PURE__ */ __name(($$anchor2) => {
    var input = root_1$1p();
    let attributes;
    template_effect(() => attributes = set_attributes(
      input,
      attributes,
      {
        type: "checkbox",
        id: id(),
        value: value(),
        checked: checked(),
        title: title(),
        onchange: saveChange,
        disabled: disabled() || get(activeEffectApplied),
        ...get(datasetAttributes),
        class: checkboxCssClass(),
        "data-tidy-field": $$props.field,
        ...$$props.attributes,
        "data-tooltip": get(activeEffectApplied) ? get(overrideTooltip) : tooltip()
      },
      "svelte-1i0rlif"
    )), append($$anchor2, input);
  }, "checkboxInput");
  let value = prop($$props, "value", 3, null), checked = prop($$props, "checked", 3, !1), title = prop($$props, "title", 3, null), tooltip = prop($$props, "tooltip", 3, null), id = prop($$props, "id", 3, null), disabled = prop($$props, "disabled", 3, null), dataset = prop($$props, "dataset", 3, null), labelCssClass = prop($$props, "labelCssClass", 3, null), checkboxCssClass = prop($$props, "checkboxCssClass", 3, null), onDataPreparing = prop($$props, "onDataPreparing", 3, null), greenCheckboxWidthOverride = prop($$props, "greenCheckboxWidthOverride", 3, null);
  async function saveChange(event2) {
    let data = onDataPreparing()?.(event2) ?? {
      [$$props.field]: value() ?? event2.currentTarget.checked
    };
    await $$props.document.update(data);
  }
  __name(saveChange, "saveChange");
  const context = /* @__PURE__ */ derived(getSheetContext), localize = FoundryAdapter.localize;
  let greenCheckboxStyle = /* @__PURE__ */ derived(() => greenCheckboxWidthOverride() !== null ? `width: ${greenCheckboxWidthOverride()}` : ""), datasetAttributes = /* @__PURE__ */ derived(() => buildDataset(dataset())), activeEffectApplied = /* @__PURE__ */ derived(() => ActiveEffectsHelper.isActiveEffectAppliedToField($$props.document, $$props.field)), isEnchanted = /* @__PURE__ */ derived(() => get(context).itemOverrides instanceof Set && get(context).itemOverrides.has($$props.field)), overrideTooltip = /* @__PURE__ */ derived(() => get(isEnchanted) ? localize("DND5E.ENCHANTMENT.Warning.Override") : localize("DND5E.ActiveEffectOverrideWarning"));
  var fragment = comment(), node = first_child(fragment);
  {
    var consequent = /* @__PURE__ */ __name(($$anchor2) => {
      var label = root_2$E(), node_1 = child(label);
      checkboxInput(node_1);
      var node_2 = sibling(node_1, 2);
      snippet(node_2, () => $$props.children ?? noop), template_effect(() => {
        set_class(label, clsx(labelCssClass()), "svelte-1i0rlif"), set_attribute(label, "title", title()), set_attribute(label, "style", get(greenCheckboxStyle)), set_attribute(label, "data-tooltip", get(activeEffectApplied) ? get(overrideTooltip) : tooltip());
      }), append($$anchor2, label);
    }, "consequent"), alternate = /* @__PURE__ */ __name(($$anchor2) => {
      checkboxInput($$anchor2);
    }, "alternate");
    if_block(node, ($$render) => {
      $$props.children ? $$render(consequent) : $$render(alternate, !1);
    });
  }
  append($$anchor, fragment), pop();
}
__name(Checkbox, "Checkbox");
var root$2j = /* @__PURE__ */ template('<div class="counters svelte-8y8xv0"><div class="counter legendary svelte-8y8xv0"><h4 class="svelte-8y8xv0"> </h4> <div class="counter-value svelte-8y8xv0"><!> <span class="sep">/</span> <!></div></div> <div class="counter legendary svelte-8y8xv0"><h4 class="svelte-8y8xv0"> </h4> <div class="counter-value svelte-8y8xv0"><!> <span class="sep">/</span> <!></div></div> <div class="counter lair svelte-8y8xv0"><h4 class="svelte-8y8xv0"> </h4> <div class="counter-value svelte-8y8xv0"><!> <!></div></div></div>');
function NpcLegendaryActions($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getNpcSheetContext);
  const localize = FoundryAdapter.localize;
  var div = root$2j(), div_1 = child(div), h4 = child(div_1), text2 = child(h4);
  template_effect(() => set_text(text2, localize("DND5E.LegAct")));
  var div_2 = sibling(h4, 2), node = child(div_2), title = /* @__PURE__ */ derived(() => localize("DND5E.LegActRemaining")), disabled = /* @__PURE__ */ derived(() => !get(context).editable);
  NumberInput(node, {
    get document() {
      return get(context).actor;
    },
    field: "system.resources.legact.value",
    get value() {
      return get(context).system.resources.legact.value;
    },
    step: "any",
    placeholder: "0",
    get title() {
      return get(title);
    },
    selectOnFocus: !0,
    get disabled() {
      return get(disabled);
    }
  });
  var node_1 = sibling(node, 4), disabled_1 = /* @__PURE__ */ derived(() => !get(context).editable || get(context).lockSensitiveFields);
  NumberInput(node_1, {
    get document() {
      return get(context).actor;
    },
    field: "system.resources.legact.max",
    get value() {
      return get(context).system.resources.legact.max;
    },
    min: 0,
    step: "1",
    placeholder: "0",
    selectOnFocus: !0,
    get disabled() {
      return get(disabled_1);
    }
  });
  var div_3 = sibling(div_1, 2), h4_1 = child(div_3), text_1 = child(h4_1);
  template_effect(() => set_text(text_1, localize("DND5E.LegRes")));
  var div_4 = sibling(h4_1, 2), node_2 = child(div_4), title_1 = /* @__PURE__ */ derived(() => localize("DND5E.LegResRemaining"));
  NumberInput(node_2, {
    get document() {
      return get(context).actor;
    },
    field: "system.resources.legres.value",
    get value() {
      return get(context).system.resources.legres.value;
    },
    step: "any",
    placeholder: "0",
    get title() {
      return get(title_1);
    },
    selectOnFocus: !0
  });
  var node_3 = sibling(node_2, 4), disabled_2 = /* @__PURE__ */ derived(() => !get(context).editable || get(context).lockSensitiveFields);
  NumberInput(node_3, {
    get document() {
      return get(context).actor;
    },
    field: "system.resources.legres.max",
    get value() {
      return get(context).system.resources.legres.max;
    },
    min: "0",
    step: "1",
    placeholder: "0",
    selectOnFocus: !0,
    get disabled() {
      return get(disabled_2);
    }
  });
  var div_5 = sibling(div_3, 2), h4_2 = child(div_5), text_2 = child(h4_2);
  template_effect(() => set_text(text_2, localize("DND5E.LairAct")));
  var div_6 = sibling(h4_2, 2), node_4 = child(div_6), disabled_3 = /* @__PURE__ */ derived(() => !get(context).editable || get(context).lockSensitiveFields);
  Checkbox(node_4, {
    get document() {
      return get(context).actor;
    },
    field: "system.resources.lair.value",
    get checked() {
      return get(context).system.resources.lair.value;
    },
    get disabled() {
      return get(disabled_3);
    }
  });
  var node_5 = sibling(node_4, 2), disabled_4 = /* @__PURE__ */ derived(() => !get(context).editable || get(context).lockSensitiveFields);
  TextInput(node_5, {
    get document() {
      return get(context).actor;
    },
    field: "system.resources.lair.initiative",
    get value() {
      return get(context).system.resources.lair.initiative;
    },
    placeholder: "Init.",
    allowDeltaChanges: !0,
    selectOnFocus: !0,
    saveEmptyAsNull: !0,
    get disabled() {
      return get(disabled_4);
    }
  }), append($$anchor, div), pop();
}
__name(NpcLegendaryActions, "NpcLegendaryActions");
var on_click$W = /* @__PURE__ */ __name((_, $$props) => $$props.onToggle?.(), "on_click$W"), root_2$D = /* @__PURE__ */ template('<button type="button" class="icon-button"><i></i></button>'), root_3$A = /* @__PURE__ */ template("<span>😞</span>");
function ItemFilterLayoutToggle($$anchor, $$props) {
  push($$props, !0);
  let element$1 = prop($$props, "element", 3, "li");
  const localize = FoundryAdapter.localize;
  let toggleButtonPresentation = /* @__PURE__ */ derived(() => $$props.mode === "grid" ? {
    title: localize("TIDY5E.ListLayout"),
    iconClass: "fas fa-th-list fa-fw toggle-list"
  } : $$props.mode === "list" ? {
    title: localize("TIDY5E.GridLayout"),
    iconClass: "fas fa-th-large fa-fw toggle-grid"
  } : null);
  var fragment = comment(), node = first_child(fragment);
  element(node, element$1, !1, ($$element, $$anchor2) => {
    set_attributes($$element, null, { class: "toggle-layout" }, "svelte-11xs01w", $$element.namespaceURI === NAMESPACE_SVG, $$element.nodeName.includes("-"));
    var fragment_1 = comment(), node_1 = first_child(fragment_1);
    {
      var consequent = /* @__PURE__ */ __name(($$anchor3) => {
        var button = root_2$D();
        button.__click = [on_click$W, $$props];
        var i2 = child(button);
        template_effect(() => {
          set_attribute(button, "title", get(toggleButtonPresentation)?.title), set_attribute(button, "tabindex", settings.value.useAccessibleKeyboardSupport ? 0 : -1), set_class(i2, clsx(get(toggleButtonPresentation)?.iconClass), "svelte-11xs01w");
        }), append($$anchor3, button);
      }, "consequent"), alternate = /* @__PURE__ */ __name(($$anchor3) => {
        var span = root_3$A();
        template_effect(() => set_attribute(span, "title", localize("TIDY5E.LayoutNotSupported"))), append($$anchor3, span);
      }, "alternate");
      if_block(node_1, ($$render) => {
        $$props.mode === "grid" || $$props.mode === "list" ? $$render(consequent) : $$render(alternate, !1);
      });
    }
    append($$anchor2, fragment_1);
  }), append($$anchor, fragment), pop();
}
__name(ItemFilterLayoutToggle, "ItemFilterLayoutToggle");
delegate(["click"]);
function arrayMove(arr, fromIndex, toIndex) {
  var element2 = arr[fromIndex];
  arr.splice(fromIndex, 1), arr.splice(toIndex, 0, element2);
}
__name(arrayMove, "arrayMove");
var on_click$V = /* @__PURE__ */ __name((_, moveUp) => moveUp(), "on_click$V"), on_click_1$p = /* @__PURE__ */ __name((__1, moveDown) => moveDown(), "on_click_1$p"), root$2i = /* @__PURE__ */ template('<div><div class="controls"><button type="button" aria-keyshortcuts="Alt+ArrowUp" data-testid="sorting-listbox-move-up"><i class="fas fa-angle-up"></i></button> <button type="button" aria-keyshortcuts="Alt+ArrowDown" data-testid="sorting-listbox-move-down"><i class="fas fa-angle-down"></i></button></div> <!></div>');
function SortingListbox($$anchor, $$props) {
  push($$props, !0);
  let items = prop($$props, "items", 15), selectedItemIndex = prop($$props, "selectedItemIndex", 15, null), listboxCssClass = prop($$props, "listboxCssClass", 3, null);
  function handleListboxKeydown(e2) {
    e2.key === "ArrowUp" && e2.altKey ? moveUp() : e2.key === "ArrowDown" && e2.altKey && moveDown();
  }
  __name(handleListboxKeydown, "handleListboxKeydown");
  function moveUp() {
    if (selectedItemIndex() === null || selectedItemIndex() === 0 || items() === null)
      return;
    const topValue = items()[selectedItemIndex() - 1], bottomValue = items()[selectedItemIndex()];
    items(items()[selectedItemIndex() - 1] = bottomValue, !0), items(items()[selectedItemIndex()] = topValue, !0), selectedItemIndex() && (selectedItemIndex(selectedItemIndex() - 1), items(items())), itemsMoved();
  }
  __name(moveUp, "moveUp");
  function moveDown() {
    if (items() === null || selectedItemIndex() === null || selectedItemIndex() >= items().length - 1)
      return;
    const topValue = items()[selectedItemIndex()], bottomValue = items()[selectedItemIndex() + 1];
    items(items()[selectedItemIndex()] = bottomValue, !0), items(items()[selectedItemIndex() + 1] = topValue, !0), selectedItemIndex() !== null && (selectedItemIndex(selectedItemIndex() + 1), items(items())), itemsMoved();
  }
  __name(moveDown, "moveDown");
  function itemsMoved() {
    selectedItemIndex() !== null && items().at(selectedItemIndex()) === void 0 && selectedItemIndex(items().length ? items().length - 1 : null);
  }
  __name(itemsMoved, "itemsMoved");
  function onDragStart(ev) {
    selectedItemIndex(ev.index), ev.event.dataTransfer?.setData("text/plain", ev.index.toString());
  }
  __name(onDragStart, "onDragStart");
  function onDrop(ev) {
    ev.event.stopPropagation(), ev.event.preventDefault();
    const draggedIndex = parseInt(ev.event.dataTransfer?.getData("text/plain") ?? "");
    if (isNaN(draggedIndex))
      return;
    const theDragged = items().at(draggedIndex);
    if (!theDragged)
      return;
    const dropTargetIndex = ev.index;
    arrayMove(items(), draggedIndex, dropTargetIndex), selectedItemIndex(items().indexOf(theDragged));
  }
  __name(onDrop, "onDrop");
  function onListboxDrop(ev) {
    const draggedIndex = parseInt(ev.dataTransfer?.getData("text/plain") ?? "");
    if (isNaN(draggedIndex))
      return;
    const theDragged = items().splice(draggedIndex, 1);
    items().push(...theDragged), items(items());
  }
  __name(onListboxDrop, "onListboxDrop");
  const localize = FoundryAdapter.localize, itemTemplate_render = /* @__PURE__ */ derived(() => $$props.itemTemplate);
  var div = root$2i(), div_1 = child(div), button = child(div_1);
  template_effect(() => set_attribute(button, "title", localize("TIDY5E.Listbox.MoveUp"))), button.__click = [on_click$V, moveUp];
  var button_1 = sibling(button, 2);
  template_effect(() => set_attribute(button_1, "title", localize("TIDY5E.Listbox.MoveDown"))), button_1.__click = [on_click_1$p, moveDown];
  var node = sibling(div_1, 2), class_1 = /* @__PURE__ */ derived(() => `flex-1 ${listboxCssClass() ?? "" ?? ""}`);
  Listbox(node, {
    get labelProp() {
      return $$props.labelProp;
    },
    get valueProp() {
      return $$props.valueProp;
    },
    onkeydown: handleListboxKeydown,
    get class() {
      return get(class_1);
    },
    draggable: !0,
    ondragstart: /* @__PURE__ */ __name((ev) => onDragStart(ev), "ondragstart"),
    ondrop: /* @__PURE__ */ __name((ev) => onDrop(ev), "ondrop"),
    onlistboxDrop: /* @__PURE__ */ __name((ev) => onListboxDrop(ev), "onlistboxDrop"),
    get items() {
      return items();
    },
    set items($$value) {
      items($$value);
    },
    get selectedItemIndex() {
      return selectedItemIndex();
    },
    set selectedItemIndex($$value) {
      selectedItemIndex($$value);
    },
    itemTemplate: /* @__PURE__ */ __name(($$anchor2, $$arg0) => {
      let item = /* @__PURE__ */ __name(() => $$arg0?.().item, "item");
      var fragment = comment(), node_1 = first_child(fragment);
      {
        var consequent = /* @__PURE__ */ __name(($$anchor3) => {
          var fragment_1 = comment(), node_2 = first_child(fragment_1);
          snippet(node_2, () => get(itemTemplate_render), () => ({ item: item() })), append($$anchor3, fragment_1);
        }, "consequent"), alternate = /* @__PURE__ */ __name(($$anchor3) => {
          var text$1 = text();
          template_effect(() => set_text(text$1, item()[$$props.labelProp])), append($$anchor3, text$1);
        }, "alternate");
        if_block(node_1, ($$render) => {
          get(itemTemplate_render) ? $$render(consequent) : $$render(alternate, !1);
        });
      }
      append($$anchor2, fragment);
    }, "itemTemplate"),
    $$slots: { itemTemplate: !0 }
  }), template_effect(() => {
    set_class(div, `sorting-listbox flex-row small-gap ${$$props.class ?? "" ?? ""}`), button.disabled = selectedItemIndex() === null || selectedItemIndex() === 0, button_1.disabled = selectedItemIndex() === null || items() === null || selectedItemIndex() >= items().length - 1;
  }), append($$anchor, div), pop();
}
__name(SortingListbox, "SortingListbox");
delegate(["click"]);
var on_click$U = /* @__PURE__ */ __name((_, item, sections) => {
  item().show = !1, sections(sections());
}, "on_click$U"), root_2$C = /* @__PURE__ */ template('<button type="button" class="inline-icon-button" data-testid="section-config-hide"><i class="far fa-eye fa-fw"></i></button>'), on_click_1$o = /* @__PURE__ */ __name((__1, item, sections) => {
  item().show = !0, sections(sections());
}, "on_click_1$o"), root_3$z = /* @__PURE__ */ template('<button type="button" class="inline-icon-button" data-testid="section-config-show"><i class="far fa-eye-slash fa-fw"></i></button>'), root_1$1o = /* @__PURE__ */ template('<span data-testid="section-config-item-label" class="flex-1"> </span> <!>', 1), on_click_2$c = /* @__PURE__ */ __name((ev, $$props) => $$props.useDefault(), "on_click_2$c"), on_click_3$5 = /* @__PURE__ */ __name((ev, $$props, sections) => $$props.onSaveChanges(sections()), "on_click_3$5"), on_click_4$1 = /* @__PURE__ */ __name((__2, $$props, sections) => $$props.onApply(sections()), "on_click_4$1"), root$2h = /* @__PURE__ */ template('<section class="document-tab-section-config flex-column small-gap full-height"><!> <div class="flex-row small-gap"><button type="button" class="use-default-btn" data-testid="section-config-use-default"><i class="fas fa-rotate-right"></i> </button> <button type="button" data-testid="section-config-save-changes" class="save-changes-btn"><i class="fas fa-save"></i> </button> <button type="button" class="apply-changes-btn" data-testid="section-config-apply-changes"><i class="fas fa-check"></i> </button></div></section>');
function DocumentTabSectionConfig($$anchor, $$props) {
  push($$props, !0);
  let sections = prop($$props, "sections", 15);
  const localize = FoundryAdapter.localize;
  var section = root$2h(), node = child(section);
  SortingListbox(node, {
    labelProp: "label",
    valueProp: "key",
    listboxCssClass: "scroll-container",
    class: "flex-1 overflow-y-hidden",
    get items() {
      return sections();
    },
    set items($$value) {
      sections($$value);
    },
    itemTemplate: /* @__PURE__ */ __name(($$anchor2, $$arg0) => {
      let item = /* @__PURE__ */ __name(() => $$arg0?.().item, "item");
      var fragment = root_1$1o(), span = first_child(fragment), text2 = child(span), node_1 = sibling(span, 2);
      {
        var consequent = /* @__PURE__ */ __name(($$anchor3) => {
          var button = root_2$C();
          template_effect(() => set_attribute(button, "title", localize("TIDY5E.Section.ConfigDialog.hideTooltip"))), button.__click = [on_click$U, item, sections], append($$anchor3, button);
        }, "consequent"), alternate = /* @__PURE__ */ __name(($$anchor3) => {
          var button_1 = root_3$z();
          template_effect(() => set_attribute(button_1, "title", localize("TIDY5E.Section.ConfigDialog.showTooltip"))), button_1.__click = [on_click_1$o, item, sections], append($$anchor3, button_1);
        }, "alternate");
        if_block(node_1, ($$render) => {
          item().show !== !1 ? $$render(consequent) : $$render(alternate, !1);
        });
      }
      template_effect(() => {
        set_attribute(span, "data-section-key", item().key), toggle_class(span, "marked-as-hidden", item().show === !1), set_text(text2, item().label);
      }), append($$anchor2, fragment);
    }, "itemTemplate"),
    $$slots: { itemTemplate: !0 }
  });
  var div = sibling(node, 2), button_2 = child(div);
  button_2.__click = [on_click_2$c, $$props];
  var text_1 = sibling(child(button_2));
  template_effect(() => set_text(text_1, ` ${localize("TIDY5E.UseDefault") ?? ""}`));
  var button_3 = sibling(button_2, 2);
  button_3.__click = [on_click_3$5, $$props, sections];
  var text_2 = sibling(child(button_3));
  template_effect(() => set_text(text_2, ` ${localize("TIDY5E.SaveChanges") ?? ""}`));
  var button_4 = sibling(button_3, 2);
  button_4.__click = [on_click_4$1, $$props, sections];
  var text_3 = sibling(child(button_4));
  template_effect(() => set_text(text_3, ` ${localize("TIDY5E.ApplyChanges") ?? ""}`)), append($$anchor, section), pop();
}
__name(DocumentTabSectionConfig, "DocumentTabSectionConfig");
delegate(["click"]);
class DocumentTabSectionConfigApplication extends SvelteFormApplicationBase {
  static {
    __name(this, "DocumentTabSectionConfigApplication");
  }
  document;
  #sections = state();
  get sections() {
    return get(this.#sections);
  }
  set sections(value) {
    set(this.#sections, proxy(value));
  }
  tabId;
  tabTitle;
  constructor({ document: document2, sections, tabId, tabTitle }) {
    super(), this.document = document2, this.sections = sections.map((section) => ({
      key: section.key,
      label: FoundryAdapter.localize(section.label),
      show: section.show !== !1
    })), this.tabId = tabId, this.tabTitle = tabTitle;
  }
  static get defaultOptions() {
    return FoundryAdapter.mergeObject(super.defaultOptions, {
      width: 650,
      height: 500,
      id: "tidy-5e-sheets-section-configuration",
      popOut: !0
    });
  }
  get title() {
    return FoundryAdapter.localize("TIDY5E.Section.ConfigDialog.title", { tabTitle: this.tabTitle });
  }
  createComponent(node) {
    return mount(DocumentTabSectionConfig, {
      target: node,
      props: {
        sections: this.sections,
        onSaveChanges: this._onSaveChanges.bind(this),
        onApply: this._onApply.bind(this),
        useDefault: this._useDefault.bind(this)
      }
    });
  }
  async _onSaveChanges(sections) {
    await this._onApply(sections), this.close();
  }
  async _onApply(sections) {
    const sectionConfig = TidyFlags.sectionConfig.get(this.document) ?? {};
    sectionConfig[this.tabId] = sections.reduce(
      (result, curr, i2) => (result[curr.key] = {
        key: curr.key,
        order: i2,
        show: curr.show !== !1
      }, result),
      {}
    ), await TidyFlags.sectionConfig.set(this.document, sectionConfig);
  }
  _useDefault() {
    Dialog.confirm({
      title: FoundryAdapter.localize("TIDY5E.UseDefaultDialog.title"),
      content: `<p>${FoundryAdapter.localize("TIDY5E.UseDefaultDialog.text")}</p>`,
      yes: /* @__PURE__ */ __name(() => {
        const sectionConfig = TidyFlags.sectionConfig.get(this.document) ?? {};
        delete sectionConfig[this.tabId], sectionConfig[`-=${this.tabId}`] = {}, TidyFlags.sectionConfig.set(this.document, sectionConfig), this.close();
      }, "yes"),
      no: /* @__PURE__ */ __name(() => {
      }, "no"),
      defaultYes: !1
    });
  }
}
var root_1$1n = /* @__PURE__ */ template("<!> <!> <!> <!>", 1), root_12$5 = /* @__PURE__ */ template("<!> <!>", 1), root_10$e = /* @__PURE__ */ template("<!> <!> <!> <!>", 1), root_25$1 = /* @__PURE__ */ template('<i class="fa-solid fa-link-slash align-self-center"></i>'), root_23$3 = /* @__PURE__ */ template('<!> <!> <span class="truncate flex-1"> </span>', 1), root_21$2 = /* @__PURE__ */ template("<!> <!> <!> <!>", 1), root_32 = /* @__PURE__ */ template("<span> </span>"), root_31$1 = /* @__PURE__ */ template('<!> <i class="fas fa-bolt"></i>', 1), root_35 = /* @__PURE__ */ template('<span class="text-body-tertiary">&mdash;</span>'), root_27$2 = /* @__PURE__ */ template("<!> <!>", 1), root_20$5 = /* @__PURE__ */ template("<!> <!> <!> <!>", 1), root_19$3 = /* @__PURE__ */ template("<!> <!>", 1), root_18$5 = /* @__PURE__ */ template("<!> <!>", 1), on_click$T = /* @__PURE__ */ __name((_, showNoSpellsView) => set(showNoSpellsView, !get(showNoSpellsView)), "on_click$T"), root_46 = /* @__PURE__ */ template('<i class="fas fa-caret-up"></i>'), root_47 = /* @__PURE__ */ template('<i class="fas fa-caret-down"></i>'), root_45 = /* @__PURE__ */ template('<h2><button type="button" class="transparent-button spellbook-title toggle-spellbook svelte-m1az87"> <!></button></h2>'), root_48 = /* @__PURE__ */ template('<h2 class="spellbook-title svelte-m1az87"><span> </span> <span class="flex-row extra-small-gap"><!> <!></span></h2>'), root_50 = /* @__PURE__ */ template('<div class="flex-1 small-padding-bottom flex-column small-gap"></div>'), root_44 = /* @__PURE__ */ template('<!> <div class="flex-1 flex-column small-padding-bottom no-gap"><!> <!></div>', 1), root_55 = /* @__PURE__ */ template("<!> <!>", 1), root$2g = /* @__PURE__ */ template('<!> <section class="npc-abilities-content svelte-m1az87" data-tidy-track-scroll-y=""><div class="side-panel svelte-m1az87"><!> <!></div> <div class="main-panel svelte-m1az87"><!> <!> <!> <!></div></section> <!>', 1);
function NpcAbilitiesTab($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getNpcSheetContext), tabId = getContext(CONSTANTS.SVELTE_CONTEXT.TAB_ID), inlineToggleService = getContext(CONSTANTS.SVELTE_CONTEXT.INLINE_TOGGLE_SERVICE), noSpellLevels = /* @__PURE__ */ derived(() => !get(context).spellbook.length), utilityBarCommands = /* @__PURE__ */ derived(() => get(context).utilities[tabId]?.utilityToolbarCommands ?? []), features = /* @__PURE__ */ derived(() => SheetSections.configureFeatures(get(context).features, get(context), tabId, SheetPreferencesService.getByType(get(context).actor.type), TidyFlags.sectionConfig.get(get(context).actor)?.[tabId])), searchCriteria = state("");
  const searchResults = createSearchResultsState();
  setSearchResultsContext(searchResults);
  let spellbook = /* @__PURE__ */ derived(() => settings.value.showSpellbookTabNpc ? [] : SheetSections.configureSpellbook(get(context).actor, tabId, get(context).spellbook));
  user_effect(() => {
    searchResults.uuids = ItemVisibility.getItemsToShowAtDepth({
      criteria: get(searchCriteria),
      itemContext: get(context).itemContext,
      sections: [
        ...get(features),
        ...get(spellbook)
      ],
      tabId
    });
  });
  function toggleLayout() {
    if (get(layoutMode) === "grid") {
      TidyFlags.spellbookGrid.unset(get(context).actor);
      return;
    }
    TidyFlags.spellbookGrid.set(get(context).actor);
  }
  __name(toggleLayout, "toggleLayout");
  let layoutMode = /* @__PURE__ */ derived(() => TidyFlags.spellbookGrid.get(get(context).actor) ? "grid" : "list"), showNoSpellsView = state(!1);
  const localize = FoundryAdapter.localize;
  declareLocation("abilities");
  let controls = /* @__PURE__ */ derived(() => {
    let result = [
      {
        component: ItemEditControl,
        props: /* @__PURE__ */ __name(({ item }) => ({ item }), "props")
      }
    ];
    return get(context).unlocked && result.push({
      component: ItemDeleteControl,
      props: /* @__PURE__ */ __name(({ item }) => ({ item }), "props"),
      visible: /* @__PURE__ */ __name(({ item }) => item.canDelete, "visible")
    }), get(context).useActionsFeature && result.push({
      component: ActionFilterOverrideControl,
      props: /* @__PURE__ */ __name(({ item }) => ({ item }), "props")
    }), result;
  }), classicControlsIconWidth = 1.25, classicControlsColumnWidth = /* @__PURE__ */ derived(() => `${classicControlsIconWidth * get(controls).length}rem`);
  var fragment = root$2g(), node = first_child(fragment);
  UtilityToolbar(node, {
    class: "abilities-toolbar",
    children: /* @__PURE__ */ __name(($$anchor2, $$slotProps) => {
      var fragment_1 = root_1$1n(), node_1 = first_child(fragment_1);
      Search$1(node_1, {
        get value() {
          return get(searchCriteria);
        },
        set value($$value) {
          set(searchCriteria, proxy($$value));
        }
      });
      var node_2 = sibling(node_1, 2), filters = /* @__PURE__ */ derived(() => ItemFilterRuntime.getPinnedFiltersForTab(get(context).filterPins, get(context).filterData, tabId));
      PinnedFilterToggles(node_2, {
        filterGroupName: tabId,
        get filters() {
          return get(filters);
        }
      });
      var node_3 = sibling(node_2, 2);
      FilterMenu(node_3, { tabId });
      var node_4 = sibling(node_3, 2);
      each(node_4, 17, () => get(utilityBarCommands), (command) => command.title, ($$anchor3, command) => {
        var visible = /* @__PURE__ */ derived(() => get(command).visible ?? !0);
        UtilityToolbarCommand($$anchor3, {
          get title() {
            return get(command).title;
          },
          get iconClass() {
            return get(command).iconClass;
          },
          get text() {
            return get(command).text;
          },
          get visible() {
            return get(visible);
          },
          onExecute: /* @__PURE__ */ __name((ev) => get(command).execute?.(ev), "onExecute"),
          get sections() {
            return get(features);
          }
        });
      }), append($$anchor2, fragment_1);
    }, "children"),
    $$slots: { default: !0 }
  });
  var section_1 = sibling(node, 2), div = child(section_1), node_5 = child(div), toggleable = /* @__PURE__ */ derived(() => !settings.value.alwaysShowNpcSkills), expanded = /* @__PURE__ */ derived(() => !!TidyFlags.skillsExpanded.get(get(context).actor));
  SkillsList(node_5, {
    get actor() {
      return get(context).actor;
    },
    get toggleable() {
      return get(toggleable);
    },
    get expanded() {
      return get(expanded);
    },
    get toggleField() {
      return TidyFlags.skillsExpanded.prop;
    }
  });
  var node_6 = sibling(node_5, 2);
  {
    var consequent = /* @__PURE__ */ __name(($$anchor2) => {
      var toggleable_1 = /* @__PURE__ */ derived(() => !settings.value.alwaysShowNpcTraits);
      Traits($$anchor2, {
        get toggleable() {
          return get(toggleable_1);
        }
      });
    }, "consequent");
    if_block(node_6, ($$render) => {
      settings.value.moveTraitsBelowNpcResources || $$render(consequent);
    });
  }
  var div_1 = sibling(div, 2), node_7 = child(div_1), class_1 = /* @__PURE__ */ derived(() => `legendary-wrapper ${(get(context).showLegendaryToolbar ? "legendary-expanded" : "") ?? ""}`);
  ExpandableContainer(node_7, {
    get expanded() {
      return get(context).showLegendaryToolbar;
    },
    get class() {
      return get(class_1);
    },
    children: /* @__PURE__ */ __name(($$anchor2, $$slotProps) => {
      NpcLegendaryActions($$anchor2, {});
    }, "children"),
    $$slots: { default: !0 }
  });
  var node_8 = sibling(node_7, 2);
  {
    var consequent_1 = /* @__PURE__ */ __name(($$anchor2) => {
      var toggleable_2 = /* @__PURE__ */ derived(() => !settings.value.alwaysShowNpcTraits);
      Traits($$anchor2, {
        get toggleable() {
          return get(toggleable_2);
        }
      });
    }, "consequent_1");
    if_block(node_8, ($$render) => {
      settings.value.moveTraitsBelowNpcResources && $$render(consequent_1);
    });
  }
  var node_9 = sibling(node_8, 2);
  each(node_9, 17, () => get(features), (section) => section.key, ($$anchor2, section) => {
    var fragment_6 = comment(), node_10 = first_child(fragment_6);
    {
      var consequent_20 = /* @__PURE__ */ __name(($$anchor3) => {
        var fragment_7 = comment();
        const featureEntries = /* @__PURE__ */ derived(() => get(section).items.map((item) => ({
          item,
          ctx: get(context).itemContext[item.id]
        }))), visibleItemCount = /* @__PURE__ */ derived(() => ItemVisibility.countVisibleItems(get(section).items, searchResults.uuids));
        var node_11 = first_child(fragment_7);
        {
          var consequent_19 = /* @__PURE__ */ __name(($$anchor4) => {
            var data_custom_section = /* @__PURE__ */ derived(() => get(section).custom ? !0 : null);
            ItemTable($$anchor4, {
              get key() {
                return get(section).key;
              },
              get "data-custom-section"() {
                return get(data_custom_section);
              },
              header: /* @__PURE__ */ __name(($$anchor5) => {
                ItemTableHeaderRow($$anchor5, {
                  children: /* @__PURE__ */ __name(($$anchor6, $$slotProps) => {
                    var fragment_10 = root_10$e(), node_12 = first_child(fragment_10);
                    ItemTableColumn(node_12, {
                      primary: !0,
                      children: /* @__PURE__ */ __name(($$anchor7, $$slotProps2) => {
                        var text$1 = text();
                        template_effect(() => set_text(text$1, localize(get(section).label))), append($$anchor7, text$1);
                      }, "children"),
                      $$slots: { default: !0 }
                    });
                    var node_13 = sibling(node_12, 2);
                    {
                      var consequent_2 = /* @__PURE__ */ __name(($$anchor7) => {
                        var fragment_12 = root_12$5(), node_14 = first_child(fragment_12);
                        ItemTableColumn(node_14, {
                          baseWidth: "3.125rem",
                          children: /* @__PURE__ */ __name(($$anchor8, $$slotProps2) => {
                            var text_1 = text();
                            template_effect(() => set_text(text_1, localize("DND5E.Uses"))), append($$anchor8, text_1);
                          }, "children"),
                          $$slots: { default: !0 }
                        });
                        var node_15 = sibling(node_14, 2);
                        ItemTableColumn(node_15, {
                          baseWidth: "7.5rem",
                          children: /* @__PURE__ */ __name(($$anchor8, $$slotProps2) => {
                            var text_2 = text();
                            template_effect(() => set_text(text_2, localize("DND5E.Usage"))), append($$anchor8, text_2);
                          }, "children"),
                          $$slots: { default: !0 }
                        }), append($$anchor7, fragment_12);
                      }, "consequent_2");
                      if_block(node_13, ($$render) => {
                        get(section).hasActions && $$render(consequent_2);
                      });
                    }
                    var node_16 = sibling(node_13, 2);
                    {
                      var consequent_3 = /* @__PURE__ */ __name(($$anchor7) => {
                        ItemTableColumn($$anchor7, {
                          baseWidth: "3rem",
                          children: /* @__PURE__ */ __name(($$anchor8, $$slotProps2) => {
                            var text_3 = text();
                            template_effect(() => set_text(text_3, localize("DND5E.QuantityAbbr"))), append($$anchor8, text_3);
                          }, "children"),
                          $$slots: { default: !0 }
                        });
                      }, "consequent_3");
                      if_block(node_16, ($$render) => {
                        get(section).dataset.type === "loot" && $$render(consequent_3);
                      });
                    }
                    var node_17 = sibling(node_16, 2);
                    {
                      var consequent_4 = /* @__PURE__ */ __name(($$anchor7) => {
                        ItemTableColumn($$anchor7, {
                          get baseWidth() {
                            return get(classicControlsColumnWidth);
                          }
                        });
                      }, "consequent_4");
                      if_block(node_17, ($$render) => {
                        get(context).editable && get(context).useClassicControls && $$render(consequent_4);
                      });
                    }
                    append($$anchor6, fragment_10);
                  }, "children"),
                  $$slots: { default: !0 }
                });
              }, "header"),
              body: /* @__PURE__ */ __name(($$anchor5) => {
                var fragment_18 = root_18$5(), node_18 = first_child(fragment_18);
                each(node_18, 17, () => get(featureEntries), ({ item, ctx }) => item.id, ($$anchor6, $$item) => {
                  let item = /* @__PURE__ */ __name(() => get($$item).item, "item"), ctx = /* @__PURE__ */ __name(() => get($$item).ctx, "ctx");
                  var fragment_19 = root_19$3(), node_19 = first_child(fragment_19), contextMenu = /* @__PURE__ */ derived(() => ({
                    type: CONSTANTS.CONTEXT_MENU_TYPE_ITEMS,
                    uuid: item().uuid
                  })), cssClass = /* @__PURE__ */ derived(() => FoundryAdapter.getInventoryRowClasses(item(), ctx())), hidden = /* @__PURE__ */ derived(() => !searchResults.show(item().uuid));
                  ItemTableRow(node_19, {
                    onMouseDown: /* @__PURE__ */ __name((event2) => FoundryAdapter.editOnMiddleClick(event2, item()), "onMouseDown"),
                    get contextMenu() {
                      return get(contextMenu);
                    },
                    get item() {
                      return item();
                    },
                    get cssClass() {
                      return get(cssClass);
                    },
                    get hidden() {
                      return get(hidden);
                    },
                    children: /* @__PURE__ */ __name(($$anchor7, $$arg0) => {
                      let toggleSummary = /* @__PURE__ */ __name(() => $$arg0?.().toggleSummary, "toggleSummary");
                      var fragment_20 = root_20$5(), node_20 = first_child(fragment_20);
                      ItemTableCell(node_20, {
                        primary: !0,
                        children: /* @__PURE__ */ __name(($$anchor8, $$slotProps) => {
                          var fragment_21 = root_21$2(), node_21 = first_child(fragment_21), disabled = /* @__PURE__ */ derived(() => !get(context).editable);
                          ItemUseButton(node_21, {
                            get disabled() {
                              return get(disabled);
                            },
                            get item() {
                              return item();
                            }
                          });
                          var node_22 = sibling(node_21, 2);
                          {
                            var consequent_5 = /* @__PURE__ */ __name(($$anchor9) => {
                              InlineToggleControl($$anchor9, {
                                get entityId() {
                                  return item().id;
                                },
                                inlineToggleService
                              });
                            }, "consequent_5");
                            if_block(node_22, ($$render) => {
                              "containerContents" in ctx() && ctx().containerContents && $$render(consequent_5);
                            });
                          }
                          var node_23 = sibling(node_22, 2);
                          ItemName(node_23, {
                            onToggle: /* @__PURE__ */ __name(() => toggleSummary()(get(context).actor), "onToggle"),
                            cssClass: "extra-small-gap",
                            get item() {
                              return item();
                            },
                            children: /* @__PURE__ */ __name(($$anchor9, $$slotProps2) => {
                              var fragment_23 = root_23$3(), node_24 = first_child(fragment_23);
                              {
                                var consequent_6 = /* @__PURE__ */ __name(($$anchor10) => {
                                  var text_4 = text("↳");
                                  append($$anchor10, text_4);
                                }, "consequent_6");
                                if_block(node_24, ($$render) => {
                                  ctx().parent && $$render(consequent_6);
                                });
                              }
                              var node_25 = sibling(node_24, 2);
                              {
                                var consequent_7 = /* @__PURE__ */ __name(($$anchor10) => {
                                  var i2 = root_25$1();
                                  append($$anchor10, i2);
                                }, "consequent_7");
                                if_block(node_25, ($$render) => {
                                  !get(section).isClass && item().type === "subclass" && $$render(consequent_7);
                                });
                              }
                              var span = sibling(node_25, 2), text_5 = child(span);
                              template_effect(() => {
                                set_attribute(span, "data-tidy-item-name", item().name), set_attribute(span, "data-tidy-sheet-part", CONSTANTS.SHEET_PARTS.ITEM_NAME), set_text(text_5, item().name);
                              }), append($$anchor9, fragment_23);
                            }, "children"),
                            $$slots: { default: !0 }
                          });
                          var node_26 = sibling(node_23, 2);
                          {
                            var consequent_8 = /* @__PURE__ */ __name(($$anchor9) => {
                              var availableLevels = /* @__PURE__ */ derived(() => ctx()?.availableLevels), disabled_1 = /* @__PURE__ */ derived(() => !get(context).editable || get(context).lockLevelSelector);
                              LevelUpDropdown($$anchor9, {
                                get availableLevels() {
                                  return get(availableLevels);
                                },
                                get item() {
                                  return item();
                                },
                                get disabled() {
                                  return get(disabled_1);
                                }
                              });
                            }, "consequent_8");
                            if_block(node_26, ($$render) => {
                              item().type === "class" && $$render(consequent_8);
                            });
                          }
                          append($$anchor8, fragment_21);
                        }, "children"),
                        $$slots: { default: !0 }
                      });
                      var node_27 = sibling(node_20, 2);
                      {
                        var consequent_14 = /* @__PURE__ */ __name(($$anchor8) => {
                          var fragment_25 = root_27$2(), node_28 = first_child(fragment_25);
                          ItemTableCell(node_28, {
                            baseWidth: "3.125rem",
                            children: /* @__PURE__ */ __name(($$anchor9, $$slotProps) => {
                              var fragment_26 = comment(), node_29 = first_child(fragment_26);
                              {
                                var consequent_9 = /* @__PURE__ */ __name(($$anchor10) => {
                                  RechargeControl($$anchor10, {
                                    get document() {
                                      return item();
                                    },
                                    field: "system.uses.spent",
                                    get uses() {
                                      return item().system.uses;
                                    }
                                  });
                                }, "consequent_9"), alternate_2 = /* @__PURE__ */ __name(($$anchor10) => {
                                  var fragment_28 = comment(), node_30 = first_child(fragment_28);
                                  {
                                    var consequent_11 = /* @__PURE__ */ __name(($$anchor11) => {
                                      var fragment_29 = root_31$1();
                                      const remaining = /* @__PURE__ */ derived(() => item().system.uses.max - item().system.uses.spent);
                                      var node_31 = first_child(fragment_29);
                                      {
                                        var consequent_10 = /* @__PURE__ */ __name(($$anchor12) => {
                                          var span_1 = root_32(), text_6 = child(span_1);
                                          template_effect(() => set_text(text_6, get(remaining))), append($$anchor12, span_1);
                                        }, "consequent_10");
                                        if_block(node_31, ($$render) => {
                                          get(remaining) > 1 && $$render(consequent_10);
                                        });
                                      }
                                      var i_1 = sibling(node_31, 2);
                                      template_effect(() => set_attribute(i_1, "title", localize("DND5E.Charged"))), append($$anchor11, fragment_29);
                                    }, "consequent_11"), alternate_1 = /* @__PURE__ */ __name(($$anchor11) => {
                                      var fragment_30 = comment(), node_32 = first_child(fragment_30);
                                      {
                                        var consequent_12 = /* @__PURE__ */ __name(($$anchor12) => {
                                          ItemUses($$anchor12, {
                                            get item() {
                                              return item();
                                            }
                                          });
                                        }, "consequent_12"), alternate = /* @__PURE__ */ __name(($$anchor12) => {
                                          var span_2 = root_35();
                                          append($$anchor12, span_2);
                                        }, "alternate");
                                        if_block(
                                          node_32,
                                          ($$render) => {
                                            ctx()?.hasUses ? $$render(consequent_12) : $$render(alternate, !1);
                                          },
                                          !0
                                        );
                                      }
                                      append($$anchor11, fragment_30);
                                    }, "alternate_1");
                                    if_block(
                                      node_30,
                                      ($$render) => {
                                        item().hasRecharge ? $$render(consequent_11) : $$render(alternate_1, !1);
                                      },
                                      !0
                                    );
                                  }
                                  append($$anchor10, fragment_28);
                                }, "alternate_2");
                                if_block(node_29, ($$render) => {
                                  item().isOnCooldown ? $$render(consequent_9) : $$render(alternate_2, !1);
                                });
                              }
                              append($$anchor9, fragment_26);
                            }, "children"),
                            $$slots: { default: !0 }
                          });
                          var node_33 = sibling(node_28, 2);
                          ItemTableCell(node_33, {
                            baseWidth: "7.5rem",
                            children: /* @__PURE__ */ __name(($$anchor9, $$slotProps) => {
                              var fragment_32 = comment(), node_34 = first_child(fragment_32);
                              {
                                var consequent_13 = /* @__PURE__ */ __name(($$anchor10) => {
                                  var text_7 = text();
                                  template_effect(() => set_text(text_7, item().labels?.activation ?? "")), append($$anchor10, text_7);
                                }, "consequent_13");
                                if_block(node_34, ($$render) => {
                                  ItemUtils.hasActivationType(item()) && $$render(consequent_13);
                                });
                              }
                              append($$anchor9, fragment_32);
                            }, "children"),
                            $$slots: { default: !0 }
                          }), append($$anchor8, fragment_25);
                        }, "consequent_14");
                        if_block(node_27, ($$render) => {
                          get(section).hasActions && $$render(consequent_14);
                        });
                      }
                      var node_35 = sibling(node_27, 2);
                      {
                        var consequent_15 = /* @__PURE__ */ __name(($$anchor8) => {
                          ItemTableCell($$anchor8, {
                            baseWidth: "3rem",
                            children: /* @__PURE__ */ __name(($$anchor9, $$slotProps) => {
                              var disabled_2 = /* @__PURE__ */ derived(() => !get(context).editable || get(context).lockItemQuantity);
                              TextInput($$anchor9, {
                                get document() {
                                  return item();
                                },
                                field: "system.quantity",
                                get value() {
                                  return item().system.quantity;
                                },
                                selectOnFocus: !0,
                                get disabled() {
                                  return get(disabled_2);
                                },
                                placeholder: "0",
                                allowDeltaChanges: !0,
                                class: "text-align-center"
                              });
                            }, "children"),
                            $$slots: { default: !0 }
                          });
                        }, "consequent_15");
                        if_block(node_35, ($$render) => {
                          get(section).dataset.type === "loot" && $$render(consequent_15);
                        });
                      }
                      var node_36 = sibling(node_35, 2);
                      {
                        var consequent_16 = /* @__PURE__ */ __name(($$anchor8) => {
                          ItemTableCell($$anchor8, {
                            get baseWidth() {
                              return get(classicControlsColumnWidth);
                            },
                            children: /* @__PURE__ */ __name(($$anchor9, $$slotProps) => {
                              var params = /* @__PURE__ */ derived(() => ({ item: item() }));
                              ClassicControls($$anchor9, {
                                get controls() {
                                  return get(controls);
                                },
                                get params() {
                                  return get(params);
                                }
                              });
                            }, "children"),
                            $$slots: { default: !0 }
                          });
                        }, "consequent_16");
                        if_block(node_36, ($$render) => {
                          get(context).editable && get(context).useClassicControls && $$render(consequent_16);
                        });
                      }
                      append($$anchor7, fragment_20);
                    }, "children"),
                    $$slots: { default: !0 }
                  });
                  var node_37 = sibling(node_19, 2);
                  {
                    var consequent_17 = /* @__PURE__ */ __name(($$anchor7) => {
                      InlineContainerView$1($$anchor7, {
                        get container() {
                          return item();
                        },
                        get containerContents() {
                          return ctx().containerContents;
                        },
                        get editable() {
                          return get(context).editable;
                        },
                        inlineToggleService,
                        get lockItemQuantity() {
                          return get(context).lockItemQuantity;
                        },
                        get sheetDocument() {
                          return get(context).actor;
                        },
                        get unlocked() {
                          return get(context).unlocked;
                        }
                      });
                    }, "consequent_17");
                    if_block(node_37, ($$render) => {
                      "containerContents" in ctx() && ctx().containerContents && $$render(consequent_17);
                    });
                  }
                  append($$anchor6, fragment_19);
                });
                var node_38 = sibling(node_18, 2);
                {
                  var consequent_18 = /* @__PURE__ */ __name(($$anchor6) => {
                    ItemTableFooter($$anchor6, {
                      get actor() {
                        return get(context).actor;
                      },
                      get section() {
                        return get(section);
                      },
                      isItem: !0
                    });
                  }, "consequent_18");
                  if_block(node_38, ($$render) => {
                    get(context).unlocked && get(section).dataset && $$render(consequent_18);
                  });
                }
                append($$anchor5, fragment_18);
              }, "body"),
              $$slots: { header: !0, body: !0 }
            });
          }, "consequent_19");
          if_block(node_11, ($$render) => {
            (get(context).unlocked || get(visibleItemCount) > 0) && $$render(consequent_19);
          });
        }
        append($$anchor3, fragment_7);
      }, "consequent_20");
      if_block(node_10, ($$render) => {
        get(section).show && $$render(consequent_20);
      });
    }
    append($$anchor2, fragment_6);
  });
  var node_39 = sibling(node_9, 2);
  {
    var consequent_26 = /* @__PURE__ */ __name(($$anchor2) => {
      var fragment_40 = root_44(), node_40 = first_child(fragment_40);
      {
        var consequent_22 = /* @__PURE__ */ __name(($$anchor3) => {
          var h2 = root_45(), button = child(h2);
          button.__click = [on_click$T, showNoSpellsView];
          var text_8 = child(button);
          template_effect(() => set_text(text_8, `${localize("DND5E.Spellbook") ?? ""} `));
          var node_41 = sibling(text_8);
          {
            var consequent_21 = /* @__PURE__ */ __name(($$anchor4) => {
              var i_2 = root_46();
              append($$anchor4, i_2);
            }, "consequent_21"), alternate_3 = /* @__PURE__ */ __name(($$anchor4) => {
              var i_3 = root_47();
              append($$anchor4, i_3);
            }, "alternate_3");
            if_block(node_41, ($$render) => {
              get(showNoSpellsView) ? $$render(consequent_21) : $$render(alternate_3, !1);
            });
          }
          template_effect(() => set_attribute(button, "tabindex", settings.value.useAccessibleKeyboardSupport ? 0 : -1)), append($$anchor3, h2);
        }, "consequent_22"), alternate_4 = /* @__PURE__ */ __name(($$anchor3) => {
          var h2_1 = root_48(), span_3 = child(h2_1), text_9 = child(span_3);
          template_effect(() => set_text(text_9, localize("DND5E.Spellbook")));
          var span_4 = sibling(span_3, 2), node_42 = child(span_4);
          ItemFilterLayoutToggle(node_42, {
            get mode() {
              return get(layoutMode);
            },
            element: "span",
            onToggle: /* @__PURE__ */ __name(() => toggleLayout(), "onToggle")
          });
          var node_43 = sibling(node_42, 2);
          ItemControl(node_43, {
            iconCssClass: "fas fa-cog",
            title: "TIDY5E.Utilities.ConfigureSections",
            onclick: /* @__PURE__ */ __name(() => new DocumentTabSectionConfigApplication({
              document: get(context).actor,
              sections: get(context).spellbook,
              tabId: CONSTANTS.TAB_NPC_SPELLBOOK,
              tabTitle: NpcSheetRuntime.getTabTitle(CONSTANTS.TAB_NPC_SPELLBOOK)
            }).render(!0), "onclick")
          }), append($$anchor3, h2_1);
        }, "alternate_4");
        if_block(node_40, ($$render) => {
          get(noSpellLevels) ? $$render(consequent_22) : $$render(alternate_4, !1);
        });
      }
      var div_2 = sibling(node_40, 2), node_44 = child(div_2);
      {
        var consequent_23 = /* @__PURE__ */ __name(($$anchor3) => {
          NoSpells($$anchor3, {
            cssClass: "flex-1",
            get editable() {
              return get(context).unlocked;
            }
          });
        }, "consequent_23"), alternate_6 = /* @__PURE__ */ __name(($$anchor3) => {
          var div_3 = root_50();
          each(div_3, 21, () => get(spellbook), (section) => section.key, ($$anchor4, section) => {
            var fragment_42 = comment(), node_45 = first_child(fragment_42);
            {
              var consequent_25 = /* @__PURE__ */ __name(($$anchor5) => {
                var fragment_43 = comment(), node_46 = first_child(fragment_43);
                {
                  var consequent_24 = /* @__PURE__ */ __name(($$anchor6) => {
                    SpellbookList($$anchor6, {
                      get section() {
                        return get(section);
                      },
                      allowFavorites: !1,
                      includeRange: !1,
                      includeSchool: !1,
                      spellComponentsBaseWidth: "3.125rem",
                      targetBaseWidth: "5.625rem",
                      usageBaseWidth: "5.625rem"
                    });
                  }, "consequent_24"), alternate_5 = /* @__PURE__ */ __name(($$anchor6) => {
                    SpellbookGrid($$anchor6, {
                      get section() {
                        return get(section);
                      }
                    });
                  }, "alternate_5");
                  if_block(node_46, ($$render) => {
                    get(layoutMode) === "list" ? $$render(consequent_24) : $$render(alternate_5, !1);
                  });
                }
                append($$anchor5, fragment_43);
              }, "consequent_25");
              if_block(node_45, ($$render) => {
                get(section).show && $$render(consequent_25);
              });
            }
            append($$anchor4, fragment_42);
          }), append($$anchor3, div_3);
        }, "alternate_6");
        if_block(node_44, ($$render) => {
          get(noSpellLevels) ? $$render(consequent_23) : $$render(alternate_6, !1);
        });
      }
      var node_47 = sibling(node_44, 2);
      SpellbookFooter(node_47, {
        includeAttackMod: !1,
        includePreparedSpells: !1,
        cssClass: "npc-abilities-spellbook-footer"
      }), template_effect(() => toggle_class(div_2, "hidden", get(noSpellLevels) && !get(showNoSpellsView))), append($$anchor2, fragment_40);
    }, "consequent_26");
    if_block(node_39, ($$render) => {
      settings.value.showSpellbookTabNpc || $$render(consequent_26);
    });
  }
  var node_48 = sibling(section_1, 2);
  TabFooter(node_48, {
    mode: "vertical",
    cssClass: "abilities-footer",
    children: /* @__PURE__ */ __name(($$anchor2, $$slotProps) => {
      var fragment_46 = root_55(), node_49 = first_child(fragment_46);
      Currency(node_49, {
        get document() {
          return get(context).actor;
        }
      });
      var node_50 = sibling(node_49, 2);
      {
        var consequent_27 = /* @__PURE__ */ __name(($$anchor3) => {
          EncumbranceBar($$anchor3, {});
        }, "consequent_27");
        if_block(node_50, ($$render) => {
          settings.value.useNpcEncumbranceBar && $$render(consequent_27);
        });
      }
      append($$anchor2, fragment_46);
    }, "children"),
    $$slots: { default: !0 }
  }), template_effect(() => set_attribute(div_1, "data-tidy-sheet-part", CONSTANTS.SHEET_PARTS.NPC_ABILITIES_CONTAINER)), append($$anchor, fragment), pop();
}
__name(NpcAbilitiesTab, "NpcAbilitiesTab");
delegate(["click"]);
var root_1$1m = /* @__PURE__ */ template("<!> <!> <!> <!> <!>", 1), root$2f = /* @__PURE__ */ template('<!> <div class="scroll-container flex-column small-gap"><!></div> <!>', 1);
function NpcSpellbookTab($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getNpcSheetContext), tabId = getContext(CONSTANTS.SVELTE_CONTEXT.TAB_ID), searchCriteria = state(""), spellbook = /* @__PURE__ */ derived(() => SheetSections.configureSpellbook(get(context).actor, tabId, get(context).spellbook));
  const searchResults = createSearchResultsState();
  setSearchResultsContext(searchResults), user_effect(() => {
    searchResults.uuids = ItemVisibility.getItemsToShowAtDepth({
      criteria: get(searchCriteria),
      itemContext: get(context).itemContext,
      sections: get(spellbook),
      tabId
    });
  });
  let layoutMode = /* @__PURE__ */ derived(() => TidyFlags.spellbookGrid.get(get(context).actor) ? "grid" : "list"), noSpellLevels = /* @__PURE__ */ derived(() => !get(context).spellbook.length), utilityBarCommands = /* @__PURE__ */ derived(() => get(context).utilities[tabId]?.utilityToolbarCommands ?? []);
  const localize = FoundryAdapter.localize;
  var fragment = root$2f(), node = first_child(fragment);
  UtilityToolbar(node, {
    children: /* @__PURE__ */ __name(($$anchor2, $$slotProps) => {
      var fragment_1 = root_1$1m(), node_1 = first_child(fragment_1);
      Search$1(node_1, {
        get value() {
          return get(searchCriteria);
        },
        set value($$value) {
          set(searchCriteria, proxy($$value));
        }
      });
      var node_2 = sibling(node_1, 2), filters = /* @__PURE__ */ derived(() => ItemFilterRuntime.getPinnedFiltersForTab(get(context).filterPins, get(context).filterData, tabId));
      PinnedFilterToggles(node_2, {
        filterGroupName: tabId,
        get filters() {
          return get(filters);
        }
      });
      var node_3 = sibling(node_2, 2);
      FilterMenu(node_3, { tabId });
      var node_4 = sibling(node_3, 2), title = /* @__PURE__ */ derived(() => localize("TIDY5E.Utilities.Tools"));
      ButtonMenu(node_4, {
        iconClass: "ra ra-fairy-wand",
        buttonStyle: "transparent-inline-icon",
        position: "bottom",
        anchor: "right",
        get title() {
          return get(title);
        },
        menuElement: "div",
        children: /* @__PURE__ */ __name(($$anchor3, $$slotProps2) => {
          var disabled = /* @__PURE__ */ derived(() => !get(context).editable);
          ButtonMenuCommand($$anchor3, {
            onMenuClick: /* @__PURE__ */ __name(() => {
              new SpellSourceClassAssignmentsFormApplication(get(context).actor).render(!0);
            }, "onMenuClick"),
            iconClass: "fas fa-list-check",
            get disabled() {
              return get(disabled);
            },
            children: /* @__PURE__ */ __name(($$anchor4, $$slotProps3) => {
              var text$1 = text();
              template_effect(() => set_text(text$1, localize("TIDY5E.Utilities.AssignSpellsToClasses"))), append($$anchor4, text$1);
            }, "children"),
            $$slots: { default: !0 }
          });
        }, "children"),
        $$slots: { default: !0 }
      });
      var node_5 = sibling(node_4, 2);
      each(node_5, 17, () => get(utilityBarCommands), (command) => command.title, ($$anchor3, command) => {
        var visible = /* @__PURE__ */ derived(() => get(command).visible ?? !0);
        UtilityToolbarCommand($$anchor3, {
          get title() {
            return get(command).title;
          },
          get iconClass() {
            return get(command).iconClass;
          },
          get text() {
            return get(command).text;
          },
          get visible() {
            return get(visible);
          },
          onExecute: /* @__PURE__ */ __name((ev) => get(command).execute?.(ev), "onExecute"),
          get sections() {
            return get(spellbook);
          }
        });
      }), append($$anchor2, fragment_1);
    }, "children"),
    $$slots: { default: !0 }
  });
  var div = sibling(node, 2), node_6 = child(div);
  {
    var consequent = /* @__PURE__ */ __name(($$anchor2) => {
      NoSpells($$anchor2, {
        get editable() {
          return get(context).unlocked;
        }
      });
    }, "consequent"), alternate_1 = /* @__PURE__ */ __name(($$anchor2) => {
      var fragment_6 = comment(), node_7 = first_child(fragment_6);
      each(node_7, 17, () => get(spellbook), (section) => section.key, ($$anchor3, section) => {
        var fragment_7 = comment(), node_8 = first_child(fragment_7);
        {
          var consequent_3 = /* @__PURE__ */ __name(($$anchor4) => {
            var fragment_8 = comment();
            const visibleItemCount = /* @__PURE__ */ derived(() => ItemVisibility.countVisibleItems(get(section).spells, searchResults.uuids));
            var node_9 = first_child(fragment_8);
            {
              var consequent_2 = /* @__PURE__ */ __name(($$anchor5) => {
                var fragment_9 = comment(), node_10 = first_child(fragment_9);
                {
                  var consequent_1 = /* @__PURE__ */ __name(($$anchor6) => {
                    SpellbookList($$anchor6, {
                      allowFavorites: !1,
                      get section() {
                        return get(section);
                      }
                    });
                  }, "consequent_1"), alternate = /* @__PURE__ */ __name(($$anchor6) => {
                    SpellbookGrid($$anchor6, {
                      get section() {
                        return get(section);
                      }
                    });
                  }, "alternate");
                  if_block(node_10, ($$render) => {
                    get(layoutMode) === "list" ? $$render(consequent_1) : $$render(alternate, !1);
                  });
                }
                append($$anchor5, fragment_9);
              }, "consequent_2");
              if_block(node_9, ($$render) => {
                (get(searchCriteria).trim() === "" && get(context).unlocked || get(visibleItemCount) > 0 || get(section).slots) && $$render(consequent_2);
              });
            }
            append($$anchor4, fragment_8);
          }, "consequent_3");
          if_block(node_8, ($$render) => {
            get(section).show && $$render(consequent_3);
          });
        }
        append($$anchor3, fragment_7);
      }), append($$anchor2, fragment_6);
    }, "alternate_1");
    if_block(node_6, ($$render) => {
      get(noSpellLevels) ? $$render(consequent) : $$render(alternate_1, !1);
    });
  }
  var node_11 = sibling(div, 2);
  SpellbookFooter(node_11, {}), append($$anchor, fragment), pop();
}
__name(NpcSpellbookTab, "NpcSpellbookTab");
function togglePersonalityInfo(_, context, showNpcPersonalityInfo) {
  TidyFlags.setFlag(get(context).actor, "showNpcPersonalityInfo", !get(showNpcPersonalityInfo));
}
__name(togglePersonalityInfo, "togglePersonalityInfo");
var on_click$S = /* @__PURE__ */ __name((ev, context, edit, value, content, target) => get(context).editable && edit(value(), content(), target()), "on_click$S"), root_2$B = /* @__PURE__ */ template('<article class="svelte-pr8rak"><div class="section-titles biopage flex-row justify-content-space-between"><span> </span> <a class="icon-button"><i class="fa-solid fa-feather"></i></a></div> <!></article>'), root_4$n = /* @__PURE__ */ template('<article class="editor-container flex-column full-height singleton svelte-pr8rak"><!></article>'), root_5$p = /* @__PURE__ */ template('<li class="svelte-pr8rak"><span> </span> <!></li>'), root_6$f = /* @__PURE__ */ template('<i class="fas fa-angle-double-left"></i>'), root_7$n = /* @__PURE__ */ template('<i class="fas fa-angle-double-right"></i>'), root_8$j = /* @__PURE__ */ template('<div class="left-notes note-entries hide-editor-edit svelte-pr8rak"><!> <!> <!> <!></div>'), on_click_1$n = /* @__PURE__ */ __name((ev, context, edit) => get(context).editable && edit(TidyFlags.appearance.get(get(context).actor) ?? "", get(context).appearanceEnrichedHtml, TidyFlags.appearance.prop), "on_click_1$n"), root_9$j = /* @__PURE__ */ template('<article class="appearance-notes svelte-pr8rak"><div class="section-titles biopage flex-row justify-content-space-between"><span> </span> <a class="icon-button"><i class="fa-solid fa-feather"></i></a></div> <!></article>'), on_click_2$b = /* @__PURE__ */ __name((ev, context, edit) => get(context).editable && edit(get(context).system.details.biography.value, get(context).biographyEnrichedHtml, "system.details.biography.value"), "on_click_2$b"), root_10$d = /* @__PURE__ */ template('<article class="biography-notes svelte-pr8rak"><div class="section-titles flex-row justify-content-space-between"><span> </span> <a class="icon-button"><i class="fa-solid fa-feather"></i></a></div> <!></article>'), root$2e = /* @__PURE__ */ template('<div class="scroll-container"><!> <div class="notes-container svelte-pr8rak"><div class="top-notes note-entries svelte-pr8rak"><article><ul class="character-details svelte-pr8rak"></ul></article></div> <div class="bottom-notes svelte-pr8rak"><button type="button" class="toggle-personality-info svelte-pr8rak"><!></button> <div class="main-notes svelte-pr8rak"><!> <div class="right-notes note-entries hide-editor-edit svelte-pr8rak"><!> <!></div></div></div></div></div>');
function NpcBiographyTab($$anchor, $$props) {
  push($$props, !0);
  const biopage = /* @__PURE__ */ __name(($$anchor2, label = noop, value = noop, content = noop, target = noop) => {
    var andOnValueChange = /* @__PURE__ */ derived(() => value() ?? "");
    RerenderAfterFormSubmission($$anchor2, {
      get andOnValueChange() {
        return get(andOnValueChange);
      },
      children: /* @__PURE__ */ __name(($$anchor3, $$slotProps) => {
        var article = root_2$B(), div = child(article), span = child(div), text2 = child(span);
        template_effect(() => set_text(text2, localize(label())));
        var a2 = sibling(span, 2);
        a2.__click = [
          on_click$S,
          context,
          edit,
          value,
          content,
          target
        ];
        var node = sibling(div, 2);
        SheetEditor(node, {
          get content() {
            return content();
          },
          get target() {
            return target();
          },
          get editable() {
            return get(context).editable;
          }
        }), action(article, ($$node) => get(context).activateEditors?.($$node)), append($$anchor3, article);
      }, "children"),
      $$slots: { default: !0 }
    });
  }, "biopage");
  let context = /* @__PURE__ */ derived(getNpcSheetContext);
  const localize = FoundryAdapter.localize;
  let showNpcPersonalityInfo = /* @__PURE__ */ derived(() => TidyFlags.showNpcPersonalityInfo.get(get(context).actor) ?? !1), bioFields = /* @__PURE__ */ derived(() => [
    {
      prop: TidyFlags.gender.prop,
      value: TidyFlags.gender.get(get(context).actor),
      text: "DND5E.Gender"
    },
    {
      prop: TidyFlags.age.prop,
      value: TidyFlags.age.get(get(context).actor),
      text: "DND5E.Age"
    },
    {
      prop: TidyFlags.height.prop,
      value: TidyFlags.height.get(get(context).actor),
      text: "DND5E.Height"
    },
    {
      prop: TidyFlags.weight.prop,
      value: TidyFlags.weight.get(get(context).actor),
      text: "DND5E.Weight"
    },
    {
      prop: TidyFlags.eyes.prop,
      value: TidyFlags.eyes.get(get(context).actor),
      text: "DND5E.Eyes"
    },
    {
      prop: TidyFlags.skin.prop,
      value: TidyFlags.skin.get(get(context).actor),
      text: "DND5E.Skin"
    },
    {
      prop: TidyFlags.hair.prop,
      value: TidyFlags.hair.get(get(context).actor),
      text: "DND5E.Hair"
    },
    {
      prop: TidyFlags.faith.prop,
      value: TidyFlags.faith.get(get(context).actor),
      text: "DND5E.Faith"
    }
  ]), editing = state(!1), contentToEdit = state(""), enrichedText = state(""), fieldToEdit = state("");
  async function stopEditing() {
    await get(context).actor.sheet.submit(), set(editing, !1);
  }
  __name(stopEditing, "stopEditing");
  function edit(value, enriched, field) {
    set(contentToEdit, proxy(value)), set(fieldToEdit, proxy(field)), set(enrichedText, proxy(enriched)), set(editing, !0);
  }
  __name(edit, "edit");
  var div_1 = root$2e(), node_1 = child(div_1);
  {
    var consequent = /* @__PURE__ */ __name(($$anchor2) => {
      var fragment_1 = comment(), node_2 = first_child(fragment_1);
      key_block(node_2, () => get(contentToEdit), ($$anchor3) => {
        var article_1 = root_4$n(), node_3 = child(article_1), editorOptions = /* @__PURE__ */ derived(() => ({
          editable: get(context).editable,
          toggled: !1
        }));
        SheetEditorV2(node_3, {
          get enriched() {
            return get(enrichedText);
          },
          get content() {
            return get(contentToEdit);
          },
          get field() {
            return get(fieldToEdit);
          },
          get editorOptions() {
            return get(editorOptions);
          },
          get documentUuid() {
            return get(context).actor.uuid;
          },
          onSave: /* @__PURE__ */ __name(() => stopEditing(), "onSave"),
          get manageSecrets() {
            return get(context).actor.isOwner;
          }
        }), append($$anchor3, article_1);
      }), append($$anchor2, fragment_1);
    }, "consequent");
    if_block(node_1, ($$render) => {
      get(editing) && $$render(consequent);
    });
  }
  var div_2 = sibling(node_1, 2), div_3 = child(div_2), article_2 = child(div_3), ul = child(article_2);
  each(ul, 21, () => get(bioFields), (bioField) => bioField.prop, ($$anchor2, bioField) => {
    var li = root_5$p(), span_1 = child(li), text_1 = child(span_1);
    template_effect(() => set_text(text_1, `${localize(get(bioField).text) ?? ""}:`));
    var node_4 = sibling(span_1, 2), editable = /* @__PURE__ */ derived(() => get(context).editable && !get(context).lockSensitiveFields), value_1 = /* @__PURE__ */ derived(() => get(bioField).value ?? "");
    ContentEditableFormField(node_4, {
      selectOnFocus: !0,
      element: "span",
      get editable() {
        return get(editable);
      },
      get document() {
        return get(context).actor;
      },
      get field() {
        return get(bioField).prop;
      },
      get value() {
        return get(value_1);
      },
      cssClass: "detail-input"
    }), append($$anchor2, li);
  });
  var div_4 = sibling(div_3, 2), button = child(div_4);
  button.__click = [
    togglePersonalityInfo,
    context,
    showNpcPersonalityInfo
  ], template_effect(() => set_attribute(button, "title", localize("TIDY5E.TogglePersonalityInfo")));
  var node_5 = child(button);
  {
    var consequent_1 = /* @__PURE__ */ __name(($$anchor2) => {
      var i2 = root_6$f();
      append($$anchor2, i2);
    }, "consequent_1"), alternate = /* @__PURE__ */ __name(($$anchor2) => {
      var i_1 = root_7$n();
      append($$anchor2, i_1);
    }, "alternate");
    if_block(node_5, ($$render) => {
      get(showNpcPersonalityInfo) ? $$render(consequent_1) : $$render(alternate, !1);
    });
  }
  var div_5 = sibling(button, 2), node_6 = child(div_5);
  {
    var consequent_2 = /* @__PURE__ */ __name(($$anchor2) => {
      var div_6 = root_8$j(), node_7 = child(div_6), render_arg = /* @__PURE__ */ derived_safe_equal(() => TidyFlags.trait.get(get(context).actor) ?? "");
      biopage(node_7, () => "DND5E.PersonalityTraits", () => get(render_arg), () => get(context).traitEnrichedHtml, () => TidyFlags.trait.prop);
      var node_8 = sibling(node_7, 2);
      biopage(node_8, () => "DND5E.Ideals", () => get(context).system.details.ideal, () => get(context).idealEnrichedHtml, () => "system.details.ideal");
      var node_9 = sibling(node_8, 2);
      biopage(node_9, () => "DND5E.Bonds", () => get(context).system.details.bond, () => get(context).bondEnrichedHtml, () => "system.details.bond");
      var node_10 = sibling(node_9, 2);
      biopage(node_10, () => "DND5E.Flaws", () => get(context).system.details.flaw, () => get(context).flawEnrichedHtml, () => "system.details.flaw"), template_effect(() => toggle_class(div_6, "limited", get(context).showLimitedSheet)), append($$anchor2, div_6);
    }, "consequent_2");
    if_block(node_6, ($$render) => {
      get(showNpcPersonalityInfo) && $$render(consequent_2);
    });
  }
  var div_7 = sibling(node_6, 2), node_11 = child(div_7), andOnValueChange_1 = /* @__PURE__ */ derived(() => TidyFlags.appearance.get(get(context).actor) ?? "");
  RerenderAfterFormSubmission(node_11, {
    get andOnValueChange() {
      return get(andOnValueChange_1);
    },
    children: /* @__PURE__ */ __name(($$anchor2, $$slotProps) => {
      var article_3 = root_9$j(), div_8 = child(article_3), span_2 = child(div_8), text_2 = child(span_2);
      template_effect(() => set_text(text_2, localize("DND5E.Appearance")));
      var a_1 = sibling(span_2, 2);
      a_1.__click = [on_click_1$n, context, edit];
      var node_12 = sibling(div_8, 2);
      SheetEditor(node_12, {
        get content() {
          return get(context).appearanceEnrichedHtml;
        },
        get target() {
          return TidyFlags.appearance.prop;
        },
        get editable() {
          return get(context).editable;
        }
      }), action(article_3, ($$node) => get(context).activateEditors?.($$node)), append($$anchor2, article_3);
    }, "children"),
    $$slots: { default: !0 }
  });
  var node_13 = sibling(node_11, 2);
  RerenderAfterFormSubmission(node_13, {
    get andOnValueChange() {
      return get(context).system.details.biography.value;
    },
    children: /* @__PURE__ */ __name(($$anchor2, $$slotProps) => {
      var article_4 = root_10$d(), div_9 = child(article_4), span_3 = child(div_9);
      const stringified_text = /* @__PURE__ */ derived(() => localize("DND5E.Background") ?? ""), stringified_text_1 = /* @__PURE__ */ derived(() => localize("DND5E.Biography") ?? "");
      var text_3 = child(span_3);
      template_effect(() => set_text(text_3, `${get(stringified_text)}/${get(stringified_text_1)}`));
      var a_2 = sibling(span_3, 2);
      a_2.__click = [on_click_2$b, context, edit];
      var node_14 = sibling(div_9, 2);
      SheetEditor(node_14, {
        get content() {
          return get(context).biographyEnrichedHtml;
        },
        target: "system.details.biography.value",
        get editable() {
          return get(context).editable;
        }
      }), action(article_4, ($$node) => get(context).activateEditors?.($$node)), append($$anchor2, article_4);
    }, "children"),
    $$slots: { default: !0 }
  }), template_effect(() => {
    toggle_class(div_2, "hidden", get(editing)), toggle_class(div_3, "limited", get(context).showLimitedSheet), set_attribute(button, "tabindex", settings.value.useAccessibleKeyboardSupport ? 0 : -1), toggle_class(div_7, "limited", get(context).showLimitedSheet);
  }), append($$anchor, div_1), pop();
}
__name(NpcBiographyTab, "NpcBiographyTab");
delegate(["click"]);
var root_10$c = /* @__PURE__ */ template("<!> <!> <!> <!>", 1), on_click$R = /* @__PURE__ */ __name((ev, toggleSummary) => toggleSummary()(), "on_click$R"), root_18$4 = /* @__PURE__ */ template('<!> <a class="truncate flex-row align-items-center flex-1"><span class="align-self-center truncate flex-1"> </span></a>', 1), root_19$2 = /* @__PURE__ */ template('<span class="truncate"> </span>'), root_20$4 = /* @__PURE__ */ template('<span class="truncate"> </span>'), root_17$3 = /* @__PURE__ */ template("<!> <!> <!> <!>", 1), root_15$5 = /* @__PURE__ */ template("<!> <!>", 1), root$2d = /* @__PURE__ */ template('<div class="scroll-container flex-column small-gap"><!> <!> <!></div>');
function NpcEffectsTab($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getSheetContext);
  const localize = FoundryAdapter.localize;
  let effectSections = /* @__PURE__ */ derived(() => Object.values(get(context).effects)), noEffects = /* @__PURE__ */ derived(() => get(effectSections).some((section) => section.effects.length > 0) === !1);
  declareLocation("effects");
  let controls = /* @__PURE__ */ derived(() => {
    let result = [];
    return result.push(
      {
        component: ActorEffectToggleControl,
        props: /* @__PURE__ */ __name(({ effect: effect2 }) => ({ effect: effect2 }), "props")
      },
      {
        component: ItemControl,
        props: /* @__PURE__ */ __name(({ effect: effect2 }) => ({
          onclick: /* @__PURE__ */ __name(() => FoundryAdapter.getEffect({
            document: get(context).actor,
            effectId: effect2.id,
            parentId: effect2.parentId
          }).sheet.render(!0), "onclick"),
          title: localize("DND5E.EffectEdit"),
          iconCssClass: "fas fa-edit"
        }), "props")
      }
    ), get(context).unlocked && result.push({
      component: ItemControl,
      props: /* @__PURE__ */ __name(({ effect: effect2 }) => ({
        onclick: /* @__PURE__ */ __name(() => FoundryAdapter.getEffect({
          document: get(context).actor,
          effectId: effect2.id,
          parentId: effect2.parentId
        }).deleteDialog(), "onclick"),
        title: localize("DND5E.EffectDelete"),
        iconCssClass: "fas fa-trash"
      }), "props")
    }), result;
  }), classicControlsIconWidth = 1.25, classicControlsColumnWidth = /* @__PURE__ */ derived(() => `${classicControlsIconWidth * get(controls).length}rem`);
  var div = root$2d(), node = child(div);
  {
    var consequent = /* @__PURE__ */ __name(($$anchor2) => {
      Notice($$anchor2, {
        children: /* @__PURE__ */ __name(($$anchor3, $$slotProps) => {
          var text$1 = text();
          template_effect(() => set_text(text$1, localize("TIDY5E.GMOnlyEdit"))), append($$anchor3, text$1);
        }, "children"),
        $$slots: { default: !0 }
      });
    }, "consequent");
    if_block(node, ($$render) => {
      !get(context).allowEffectsManagement && get(context).unlocked && $$render(consequent);
    });
  }
  var node_1 = sibling(node, 2);
  {
    var consequent_1 = /* @__PURE__ */ __name(($$anchor2) => {
      Notice($$anchor2, {
        children: /* @__PURE__ */ __name(($$anchor3, $$slotProps) => {
          var text_1 = text();
          template_effect(() => set_text(text_1, localize("TIDY5E.EmptySection"))), append($$anchor3, text_1);
        }, "children"),
        $$slots: { default: !0 }
      });
    }, "consequent_1"), alternate = /* @__PURE__ */ __name(($$anchor2) => {
      var fragment_4 = comment(), node_2 = first_child(fragment_4);
      each(node_2, 17, () => get(effectSections), index, ($$anchor3, section) => {
        var fragment_5 = comment(), node_3 = first_child(fragment_5);
        {
          var consequent_6 = /* @__PURE__ */ __name(($$anchor4) => {
            var fragment_6 = comment(), node_4 = first_child(fragment_6);
            {
              var consequent_5 = /* @__PURE__ */ __name(($$anchor5) => {
                ItemTable($$anchor5, {
                  get key() {
                    return get(section).label;
                  },
                  header: /* @__PURE__ */ __name(($$anchor6) => {
                    ItemTableHeaderRow($$anchor6, {
                      children: /* @__PURE__ */ __name(($$anchor7, $$slotProps) => {
                        var fragment_9 = root_10$c(), node_5 = first_child(fragment_9);
                        ItemTableColumn(node_5, {
                          primary: !0,
                          children: /* @__PURE__ */ __name(($$anchor8, $$slotProps2) => {
                            var text_2 = text();
                            template_effect(() => set_text(text_2, localize(get(section).label))), append($$anchor8, text_2);
                          }, "children"),
                          $$slots: { default: !0 }
                        });
                        var node_6 = sibling(node_5, 2);
                        ItemTableColumn(node_6, {
                          baseWidth: "12.5rem",
                          children: /* @__PURE__ */ __name(($$anchor8, $$slotProps2) => {
                            var text_3 = text();
                            template_effect(() => set_text(text_3, localize("DND5E.SOURCE.FIELDS.source.label"))), append($$anchor8, text_3);
                          }, "children"),
                          $$slots: { default: !0 }
                        });
                        var node_7 = sibling(node_6, 2);
                        ItemTableColumn(node_7, {
                          baseWidth: "7.5rem",
                          children: /* @__PURE__ */ __name(($$anchor8, $$slotProps2) => {
                            var text_4 = text();
                            template_effect(() => set_text(text_4, localize("DND5E.Duration"))), append($$anchor8, text_4);
                          }, "children"),
                          $$slots: { default: !0 }
                        });
                        var node_8 = sibling(node_7, 2);
                        {
                          var consequent_2 = /* @__PURE__ */ __name(($$anchor8) => {
                            ItemTableColumn($$anchor8, {
                              get baseWidth() {
                                return get(classicControlsColumnWidth);
                              }
                            });
                          }, "consequent_2");
                          if_block(node_8, ($$render) => {
                            get(context).editable && get(context).useClassicControls && get(context).allowEffectsManagement && $$render(consequent_2);
                          });
                        }
                        append($$anchor7, fragment_9);
                      }, "children"),
                      $$slots: { default: !0 }
                    });
                  }, "header"),
                  body: /* @__PURE__ */ __name(($$anchor6) => {
                    var fragment_14 = root_15$5(), node_9 = first_child(fragment_14);
                    each(node_9, 17, () => get(section).effects, index, ($$anchor7, effectContext) => {
                      var attributes = /* @__PURE__ */ derived(() => ({
                        "data-info-card": "effect",
                        "data-info-card-entity-uuid": get(effectContext).uuid
                      }));
                      EffectTableRow($$anchor7, {
                        get activeEffect() {
                          return get(effectContext);
                        },
                        get attributes() {
                          return get(attributes);
                        },
                        children: /* @__PURE__ */ __name(($$anchor8, $$arg0) => {
                          let toggleSummary = /* @__PURE__ */ __name(() => $$arg0?.().toggleSummary, "toggleSummary");
                          var fragment_16 = root_17$3(), node_10 = first_child(fragment_16), attributes_1 = /* @__PURE__ */ derived(() => ({
                            "data-tidy-effect-name-container": !0,
                            "data-effect-id": get(effectContext).id
                          }));
                          ItemTableCell(node_10, {
                            primary: !0,
                            get attributes() {
                              return get(attributes_1);
                            },
                            children: /* @__PURE__ */ __name(($$anchor9, $$slotProps) => {
                              var fragment_17 = root_18$4(), node_11 = first_child(fragment_17);
                              ItemImage(node_11, {
                                get src() {
                                  return get(effectContext).img;
                                }
                              });
                              var a2 = sibling(node_11, 2);
                              a2.__click = [on_click$R, toggleSummary];
                              var span = child(a2), text_5 = child(span);
                              template_effect(() => {
                                set_attribute(span, "data-tidy-effect-name", get(effectContext).name), set_attribute(span, "title", get(effectContext).name), set_text(text_5, get(effectContext).name);
                              }), append($$anchor9, fragment_17);
                            }, "children"),
                            $$slots: { default: !0 }
                          });
                          var node_12 = sibling(node_10, 2);
                          ItemTableCell(node_12, {
                            baseWidth: "12.5rem",
                            children: /* @__PURE__ */ __name(($$anchor9, $$slotProps) => {
                              var span_1 = root_19$2(), text_6 = child(span_1);
                              template_effect(() => {
                                set_attribute(span_1, "title", get(effectContext).source?.name ?? ""), set_text(text_6, get(effectContext).source?.name ?? "");
                              }), append($$anchor9, span_1);
                            }, "children"),
                            $$slots: { default: !0 }
                          });
                          var node_13 = sibling(node_12, 2);
                          ItemTableCell(node_13, {
                            baseWidth: "7.5rem",
                            children: /* @__PURE__ */ __name(($$anchor9, $$slotProps) => {
                              var span_2 = root_20$4(), text_7 = child(span_2);
                              template_effect(() => {
                                set_attribute(span_2, "title", get(effectContext).duration?.label ?? ""), set_text(text_7, get(effectContext).duration?.label ?? "");
                              }), append($$anchor9, span_2);
                            }, "children"),
                            $$slots: { default: !0 }
                          });
                          var node_14 = sibling(node_13, 2);
                          {
                            var consequent_3 = /* @__PURE__ */ __name(($$anchor9) => {
                              ItemTableCell($$anchor9, {
                                get baseWidth() {
                                  return get(classicControlsColumnWidth);
                                },
                                children: /* @__PURE__ */ __name(($$anchor10, $$slotProps) => {
                                  var params = /* @__PURE__ */ derived(() => ({ effect: get(effectContext) }));
                                  ClassicControls($$anchor10, {
                                    get controls() {
                                      return get(controls);
                                    },
                                    get params() {
                                      return get(params);
                                    }
                                  });
                                }, "children"),
                                $$slots: { default: !0 }
                              });
                            }, "consequent_3");
                            if_block(node_14, ($$render) => {
                              get(context).editable && get(context).useClassicControls && get(context).allowEffectsManagement && $$render(consequent_3);
                            });
                          }
                          append($$anchor8, fragment_16);
                        }, "children"),
                        $$slots: { default: !0 }
                      });
                    });
                    var node_15 = sibling(node_9, 2);
                    {
                      var consequent_4 = /* @__PURE__ */ __name(($$anchor7) => {
                        ItemTableFooter($$anchor7, {
                          get actor() {
                            return get(context).actor;
                          },
                          get section() {
                            return get(section);
                          },
                          create: /* @__PURE__ */ __name(() => FoundryAdapter.addEffect(get(section).type, get(context).actor), "create"),
                          isItem: !1
                        });
                      }, "consequent_4");
                      if_block(node_15, ($$render) => {
                        get(context).unlocked && get(context).allowEffectsManagement && $$render(consequent_4);
                      });
                    }
                    append($$anchor6, fragment_14);
                  }, "body"),
                  $$slots: { header: !0, body: !0 }
                });
              }, "consequent_5");
              if_block(node_4, ($$render) => {
                (get(context).unlocked && get(context).allowEffectsManagement || get(section).effects.length > 0) && $$render(consequent_5);
              });
            }
            append($$anchor4, fragment_6);
          }, "consequent_6");
          if_block(node_3, ($$render) => {
            get(section).hidden || $$render(consequent_6);
          });
        }
        append($$anchor3, fragment_5);
      }), append($$anchor2, fragment_4);
    }, "alternate");
    if_block(node_1, ($$render) => {
      get(noEffects) && !get(context).unlocked && get(context).allowEffectsManagement ? $$render(consequent_1) : $$render(alternate, !1);
    });
  }
  var node_16 = sibling(node_1, 2);
  {
    var consequent_7 = /* @__PURE__ */ __name(($$anchor2) => {
      ActorConditions($$anchor2, {});
    }, "consequent_7");
    if_block(node_16, ($$render) => {
      get(context).conditions && $$render(consequent_7);
    });
  }
  append($$anchor, div), pop();
}
__name(NpcEffectsTab, "NpcEffectsTab");
delegate(["click"]);
class NpcSheetRuntime {
  static {
    __name(this, "NpcSheetRuntime");
  }
  static _content = [];
  static _tabs = [
    {
      title: "TIDY5E.Actions.TabName",
      content: {
        component: ActorActionsTab,
        type: "svelte"
      },
      id: CONSTANTS.TAB_ACTOR_ACTIONS,
      layout: "classic"
    },
    {
      id: CONSTANTS.TAB_NPC_ABILITIES,
      title: "TIDY5E.Abilities",
      content: {
        component: NpcAbilitiesTab,
        type: "svelte"
      },
      layout: "classic"
    },
    {
      id: CONSTANTS.TAB_NPC_SPELLBOOK,
      title: "DND5E.Spellbook",
      content: {
        component: NpcSpellbookTab,
        type: "svelte"
      },
      enabled: /* @__PURE__ */ __name((context) => !context.hideEmptySpellbook && context.showSpellbookTab, "enabled"),
      layout: "classic"
    },
    {
      id: "effects",
      title: "DND5E.Effects",
      content: {
        component: NpcEffectsTab,
        type: "svelte"
      },
      layout: "classic"
    },
    {
      id: "biography",
      title: "DND5E.Biography",
      content: {
        component: NpcBiographyTab,
        type: "svelte"
      },
      layout: "classic"
    },
    {
      id: "journal",
      title: "TIDY5E.JournalTabName",
      content: {
        component: ActorJournalTab,
        type: "svelte"
      },
      enabled: /* @__PURE__ */ __name((context) => context.owner, "enabled"),
      layout: "classic"
    },
    {
      id: "inventory",
      title: "DND5E.Inventory",
      content: {
        component: ActorInventoryTab,
        type: "svelte",
        getProps() {
          return {
            tabId: CONSTANTS.TAB_ACTOR_INVENTORY
          };
        }
      },
      enabled: /* @__PURE__ */ __name((context) => context.owner, "enabled"),
      layout: "classic"
    }
  ];
  static async getContent(context) {
    return await CustomContentManager.prepareContentForRender(
      context,
      NpcSheetRuntime._content
    );
  }
  static getTabs(context) {
    return TabManager.prepareTabsForRender(context, NpcSheetRuntime._tabs);
  }
  static getAllRegisteredTabs() {
    return [...NpcSheetRuntime._tabs];
  }
  static registerContent(registeredContent) {
    this._content.push(registeredContent);
  }
  static registerTab(tab, options) {
    const tabExists = NpcSheetRuntime._tabs.some((t2) => t2.id === tab.id);
    if (tabExists) {
      warn(`Tab with id ${tab.id} already exists.`);
      return;
    }
    if (tabExists && options?.overrideExisting) {
      const index2 = NpcSheetRuntime._tabs.findIndex((t2) => t2.id === tab.id);
      index2 >= 0 && NpcSheetRuntime._tabs.splice(index2, 1);
    }
    NpcSheetRuntime._tabs.push(tab);
  }
  static getTabTitle(tabId) {
    try {
      let tabTitle = this._tabs.find((t2) => t2.id === tabId)?.title;
      return typeof tabTitle == "function" && (tabTitle = tabTitle()), tabTitle ? FoundryAdapter.localize(tabTitle) : tabId;
    } catch (e2) {
      error("An error occurred while searching for a tab title.", !1, e2), debug("Tab title error troubleshooting information", { tabId });
    }
  }
}
var root_10$b = /* @__PURE__ */ template("<!> <!> <!> <!>", 1), on_click$Q = /* @__PURE__ */ __name((_, toggleSummary) => toggleSummary()(), "on_click$Q"), root_18$3 = /* @__PURE__ */ template('<!> <a class="truncate flex-row align-items-center flex-1"><span class="align-self-center truncate flex-1"> </span></a>', 1), root_19$1 = /* @__PURE__ */ template('<span class="truncate"> </span>'), root_20$3 = /* @__PURE__ */ template('<span class="truncate"> </span>'), root_17$2 = /* @__PURE__ */ template("<!> <!> <!> <!>", 1), root_15$4 = /* @__PURE__ */ template("<!> <!>", 1), root$2c = /* @__PURE__ */ template('<div class="scroll-container flex-column small-gap"><!> <!></div>');
function ActorEffectsTab($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getSheetContext);
  const localize = FoundryAdapter.localize;
  let effectSections = /* @__PURE__ */ derived(() => Object.values(get(context).effects)), noEffects = /* @__PURE__ */ derived(() => get(effectSections).some((section) => section.effects.length > 0) === !1);
  declareLocation("effects");
  let controls = /* @__PURE__ */ derived(() => {
    let result = [];
    return result.push(
      {
        component: ActorEffectToggleControl,
        props: /* @__PURE__ */ __name(({ effect: effect2 }) => ({ effect: effect2 }), "props")
      },
      {
        component: ItemControl,
        props: /* @__PURE__ */ __name(({ effect: effect2 }) => ({
          onclick: /* @__PURE__ */ __name(() => effect2.sheet.render(!0), "onclick"),
          title: localize("DND5E.EffectEdit"),
          iconCssClass: "fas fa-edit"
        }), "props")
      }
    ), get(context).unlocked && result.push({
      component: ItemControl,
      props: /* @__PURE__ */ __name(({ effect: effect2 }) => ({
        onclick: /* @__PURE__ */ __name(() => effect2.deleteDialog(), "onclick"),
        title: localize("DND5E.EffectDelete"),
        iconCssClass: "fas fa-trash"
      }), "props")
    }), result;
  }), classicControlsIconWidth = 1.25, classicControlsColumnWidth = /* @__PURE__ */ derived(() => `${classicControlsIconWidth * get(controls).length}rem`);
  var div = root$2c(), node = child(div);
  {
    var consequent = /* @__PURE__ */ __name(($$anchor2) => {
      Notice($$anchor2, {
        children: /* @__PURE__ */ __name(($$anchor3, $$slotProps) => {
          var text$1 = text();
          template_effect(() => set_text(text$1, localize("TIDY5E.GMOnlyEdit"))), append($$anchor3, text$1);
        }, "children"),
        $$slots: { default: !0 }
      });
    }, "consequent");
    if_block(node, ($$render) => {
      !get(context).allowEffectsManagement && get(context).unlocked && $$render(consequent);
    });
  }
  var node_1 = sibling(node, 2);
  {
    var consequent_1 = /* @__PURE__ */ __name(($$anchor2) => {
      Notice($$anchor2, {
        children: /* @__PURE__ */ __name(($$anchor3, $$slotProps) => {
          var text_1 = text();
          template_effect(() => set_text(text_1, localize("TIDY5E.EmptySection"))), append($$anchor3, text_1);
        }, "children"),
        $$slots: { default: !0 }
      });
    }, "consequent_1"), alternate = /* @__PURE__ */ __name(($$anchor2) => {
      var fragment_4 = comment(), node_2 = first_child(fragment_4);
      each(node_2, 17, () => get(effectSections), index, ($$anchor3, section) => {
        var fragment_5 = comment(), node_3 = first_child(fragment_5);
        {
          var consequent_6 = /* @__PURE__ */ __name(($$anchor4) => {
            var fragment_6 = comment(), node_4 = first_child(fragment_6);
            {
              var consequent_5 = /* @__PURE__ */ __name(($$anchor5) => {
                const effectEntries = /* @__PURE__ */ derived(() => get(section).effects.map((e2) => ({ effect: e2 })));
                ItemTable($$anchor5, {
                  get key() {
                    return get(section).label;
                  },
                  header: /* @__PURE__ */ __name(($$anchor6) => {
                    ItemTableHeaderRow($$anchor6, {
                      children: /* @__PURE__ */ __name(($$anchor7, $$slotProps) => {
                        var fragment_9 = root_10$b(), node_5 = first_child(fragment_9);
                        ItemTableColumn(node_5, {
                          primary: !0,
                          children: /* @__PURE__ */ __name(($$anchor8, $$slotProps2) => {
                            var text_2 = text();
                            template_effect(() => set_text(text_2, localize(get(section).label))), append($$anchor8, text_2);
                          }, "children"),
                          $$slots: { default: !0 }
                        });
                        var node_6 = sibling(node_5, 2);
                        ItemTableColumn(node_6, {
                          baseWidth: "12.5rem",
                          children: /* @__PURE__ */ __name(($$anchor8, $$slotProps2) => {
                            var text_3 = text();
                            template_effect(() => set_text(text_3, localize("DND5E.SOURCE.FIELDS.source.label"))), append($$anchor8, text_3);
                          }, "children"),
                          $$slots: { default: !0 }
                        });
                        var node_7 = sibling(node_6, 2);
                        ItemTableColumn(node_7, {
                          baseWidth: "7.5rem",
                          children: /* @__PURE__ */ __name(($$anchor8, $$slotProps2) => {
                            var text_4 = text();
                            template_effect(() => set_text(text_4, localize("DND5E.Duration"))), append($$anchor8, text_4);
                          }, "children"),
                          $$slots: { default: !0 }
                        });
                        var node_8 = sibling(node_7, 2);
                        {
                          var consequent_2 = /* @__PURE__ */ __name(($$anchor8) => {
                            ItemTableColumn($$anchor8, {
                              get baseWidth() {
                                return get(classicControlsColumnWidth);
                              }
                            });
                          }, "consequent_2");
                          if_block(node_8, ($$render) => {
                            get(context).editable && get(context).useClassicControls && get(context).allowEffectsManagement && $$render(consequent_2);
                          });
                        }
                        append($$anchor7, fragment_9);
                      }, "children"),
                      $$slots: { default: !0 }
                    });
                  }, "header"),
                  body: /* @__PURE__ */ __name(($$anchor6) => {
                    var fragment_14 = root_15$4(), node_9 = first_child(fragment_14);
                    each(node_9, 17, () => get(effectEntries), ({ effect: effect2 }) => effect2.id, ($$anchor7, $$item) => {
                      let effect2 = /* @__PURE__ */ __name(() => get($$item).effect, "effect");
                      var attributes = /* @__PURE__ */ derived(() => ({
                        "data-info-card": "effect",
                        "data-info-card-entity-uuid": effect2().uuid
                      }));
                      EffectTableRow($$anchor7, {
                        get activeEffect() {
                          return effect2();
                        },
                        get attributes() {
                          return get(attributes);
                        },
                        children: /* @__PURE__ */ __name(($$anchor8, $$arg0) => {
                          let toggleSummary = /* @__PURE__ */ __name(() => $$arg0?.().toggleSummary, "toggleSummary");
                          var fragment_16 = root_17$2(), node_10 = first_child(fragment_16), attributes_1 = /* @__PURE__ */ derived(() => ({
                            "data-tidy-effect-name-container": !0,
                            "data-effect-id": effect2().id
                          }));
                          ItemTableCell(node_10, {
                            primary: !0,
                            get attributes() {
                              return get(attributes_1);
                            },
                            children: /* @__PURE__ */ __name(($$anchor9, $$slotProps) => {
                              var fragment_17 = root_18$3(), node_11 = first_child(fragment_17), src = /* @__PURE__ */ derived(() => effect2().img ?? effect2().icon);
                              ItemImage(node_11, {
                                get src() {
                                  return get(src);
                                }
                              });
                              var a2 = sibling(node_11, 2);
                              a2.__click = [on_click$Q, toggleSummary];
                              var span = child(a2), text_5 = child(span);
                              template_effect(() => {
                                set_attribute(span, "title", effect2().name), set_attribute(span, "data-tidy-effect-name", effect2().name), set_text(text_5, effect2().name);
                              }), append($$anchor9, fragment_17);
                            }, "children"),
                            $$slots: { default: !0 }
                          });
                          var node_12 = sibling(node_10, 2);
                          ItemTableCell(node_12, {
                            baseWidth: "12.5rem",
                            children: /* @__PURE__ */ __name(($$anchor9, $$slotProps) => {
                              var span_1 = root_19$1(), text_6 = child(span_1);
                              template_effect(() => {
                                set_attribute(span_1, "title", effect2().sourceName ?? ""), set_text(text_6, effect2().sourceName ?? "");
                              }), append($$anchor9, span_1);
                            }, "children"),
                            $$slots: { default: !0 }
                          });
                          var node_13 = sibling(node_12, 2);
                          ItemTableCell(node_13, {
                            baseWidth: "7.5rem",
                            children: /* @__PURE__ */ __name(($$anchor9, $$slotProps) => {
                              var span_2 = root_20$3(), text_7 = child(span_2);
                              template_effect(() => {
                                set_attribute(span_2, "title", effect2().duration.label ?? ""), set_text(text_7, effect2().duration.label ?? "");
                              }), append($$anchor9, span_2);
                            }, "children"),
                            $$slots: { default: !0 }
                          });
                          var node_14 = sibling(node_13, 2);
                          {
                            var consequent_3 = /* @__PURE__ */ __name(($$anchor9) => {
                              ItemTableCell($$anchor9, {
                                get baseWidth() {
                                  return get(classicControlsColumnWidth);
                                },
                                children: /* @__PURE__ */ __name(($$anchor10, $$slotProps) => {
                                  var params = /* @__PURE__ */ derived(() => ({ effect: effect2() }));
                                  ClassicControls($$anchor10, {
                                    get controls() {
                                      return get(controls);
                                    },
                                    get params() {
                                      return get(params);
                                    }
                                  });
                                }, "children"),
                                $$slots: { default: !0 }
                              });
                            }, "consequent_3");
                            if_block(node_14, ($$render) => {
                              get(context).editable && get(context).useClassicControls && get(context).allowEffectsManagement && $$render(consequent_3);
                            });
                          }
                          append($$anchor8, fragment_16);
                        }, "children"),
                        $$slots: { default: !0 }
                      });
                    });
                    var node_15 = sibling(node_9, 2);
                    {
                      var consequent_4 = /* @__PURE__ */ __name(($$anchor7) => {
                        ItemTableFooter($$anchor7, {
                          get actor() {
                            return get(context).actor;
                          },
                          get section() {
                            return get(section);
                          },
                          create: /* @__PURE__ */ __name(() => FoundryAdapter.addEffect(get(section).type, get(context).actor), "create"),
                          isItem: !1
                        });
                      }, "consequent_4");
                      if_block(node_15, ($$render) => {
                        get(context).unlocked && get(context).allowEffectsManagement && $$render(consequent_4);
                      });
                    }
                    append($$anchor6, fragment_14);
                  }, "body"),
                  $$slots: { header: !0, body: !0 }
                });
              }, "consequent_5");
              if_block(node_4, ($$render) => {
                (get(context).unlocked && get(context).allowEffectsManagement || get(section).effects.length > 0) && $$render(consequent_5);
              });
            }
            append($$anchor4, fragment_6);
          }, "consequent_6");
          if_block(node_3, ($$render) => {
            get(section).hidden || $$render(consequent_6);
          });
        }
        append($$anchor3, fragment_5);
      }), append($$anchor2, fragment_4);
    }, "alternate");
    if_block(node_1, ($$render) => {
      get(noEffects) && !get(context).unlocked && get(context).allowEffectsManagement ? $$render(consequent_1) : $$render(alternate, !1);
    });
  }
  append($$anchor, div), pop();
}
__name(ActorEffectsTab, "ActorEffectsTab");
delegate(["click"]);
var root_1$1l = /* @__PURE__ */ template("<span> </span>"), root_2$A = /* @__PURE__ */ template('<div class="counter-flex svelte-1e2xbpr"><!> <div class="counter actions"><h4> </h4> <div class="counter-value svelte-1e2xbpr"><!></div></div> <!> <div class="counter action-thresholds svelte-1e2xbpr"><h4> </h4> <div class="counter-value svelte-1e2xbpr"><span class="sep">&lt;</span> <!> <span class="sep">&lt;</span> <!> <span class="sep">&lt;</span> <!></div></div> <!> <div class="counter action-summary"><h4> </h4> <div class="counter-value svelte-1e2xbpr"> </div></div> <!> <div class="counter action-summary"><h4> </h4> <div class="counter-value svelte-1e2xbpr"> </div></div></div>'), root$2b = /* @__PURE__ */ template('<div class="counters counter-flex svelte-1e2xbpr"><div class="counter creature-cap"><h4> </h4> <div class="counter-value svelte-1e2xbpr"><!></div></div> <!> <div class="counter cargo-cap"><h4 class="flex-1"> </h4> <div class="counter-value svelte-1e2xbpr"><!></div></div> <!> <div class="counter stations svelte-1e2xbpr"><div class="counter-value svelte-1e2xbpr"><!></div></div> <!></div>');
function VehicleAttributes($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getVehicleSheetContext);
  const localize = FoundryAdapter.localize;
  let totalCrew = /* @__PURE__ */ derived(() => get(context).system.cargo.crew.reduce((count, c2) => count + c2.quantity, 0)), totalActions = /* @__PURE__ */ derived(() => get(context).system.attributes.actions.value ?? 0), actionsPerTurn = /* @__PURE__ */ derived(() => get(totalCrew) >= get(context).system.attributes.actions.thresholds[2] ? get(totalActions) : get(totalCrew) >= get(context).system.attributes.actions.thresholds[1] ? Math.max(get(totalActions) - 1, 0) : get(totalCrew) >= get(context).system.attributes.actions.thresholds[0] ? Math.max(get(totalActions) - 2, 0) : 0), crewTallyDescription = /* @__PURE__ */ derived(() => get(actionsPerTurn) === get(totalActions) ? localize("DND5E.VehicleActionThresholdsFull") : get(actionsPerTurn) === get(totalActions) - 1 ? localize("DND5E.VehicleActionThresholdsMid") : get(actionsPerTurn) === get(totalActions) - 2 ? localize("DND5E.VehicleActionThresholdsMin") : null);
  var div = root$2b(), div_1 = child(div), h4 = child(div_1), text2 = child(h4);
  template_effect(() => set_text(text2, localize("DND5E.VehicleCreatureCapacity")));
  var div_2 = sibling(h4, 2), node = child(div_2), editable = /* @__PURE__ */ derived(() => get(context).editable && !get(context).lockSensitiveFields);
  ContentEditableFormField(node, {
    element: "div",
    get document() {
      return get(context).actor;
    },
    field: "system.attributes.capacity.creature",
    get editable() {
      return get(editable);
    },
    placeholder: "—",
    get value() {
      return get(context).system.attributes.capacity.creature;
    },
    dataMaxLength: 1e3
  });
  var node_1 = sibling(div_1, 2);
  HorizontalLineSeparator(node_1, {});
  var div_3 = sibling(node_1, 2), h4_1 = child(div_3), text_1 = child(h4_1);
  template_effect(() => set_text(text_1, localize("DND5E.VehicleCargoCapacity")));
  var div_4 = sibling(h4_1, 2), node_2 = child(div_4), disabled = /* @__PURE__ */ derived(() => !get(context).editable || get(context).lockSensitiveFields);
  NumberInput(node_2, {
    get document() {
      return get(context).actor;
    },
    field: "system.attributes.capacity.cargo",
    get value() {
      return get(context).system.attributes.capacity.cargo;
    },
    min: "0",
    placeholder: "0",
    selectOnFocus: !0,
    get disabled() {
      return get(disabled);
    }
  });
  var node_3 = sibling(div_3, 2);
  HorizontalLineSeparator(node_3, {});
  var div_5 = sibling(node_3, 2), div_6 = child(div_5), node_4 = child(div_6), disabled_1 = /* @__PURE__ */ derived(() => !get(context).editable || get(context).lockSensitiveFields);
  Checkbox(node_4, {
    get document() {
      return get(context).actor;
    },
    field: "system.attributes.actions.stations",
    get checked() {
      return get(context).system.attributes.actions.stations;
    },
    labelCssClass: "action-stations-label",
    get disabled() {
      return get(disabled_1);
    },
    children: /* @__PURE__ */ __name(($$anchor2, $$slotProps) => {
      var span = root_1$1l(), text_2 = child(span);
      template_effect(() => set_text(text_2, localize("DND5E.VehicleActionStations"))), append($$anchor2, span);
    }, "children"),
    $$slots: { default: !0 }
  });
  var node_5 = sibling(div_5, 2);
  {
    var consequent = /* @__PURE__ */ __name(($$anchor2) => {
      var div_7 = root_2$A(), node_6 = child(div_7);
      HorizontalLineSeparator(node_6, {});
      var div_8 = sibling(node_6, 2), h4_2 = child(div_8), text_3 = child(h4_2);
      template_effect(() => set_text(text_3, localize("DND5E.ActionPl")));
      var div_9 = sibling(h4_2, 2), node_7 = child(div_9), title = /* @__PURE__ */ derived(() => localize("DND5E.VehicleActionsHint")), disabled_2 = /* @__PURE__ */ derived(() => !get(context).editable || get(context).lockSensitiveFields);
      NumberInput(node_7, {
        get document() {
          return get(context).actor;
        },
        field: "system.attributes.actions.value",
        get value() {
          return get(context).system.attributes.actions.value;
        },
        step: "1",
        min: "0",
        placeholder: "0",
        get title() {
          return get(title);
        },
        selectOnFocus: !0,
        get disabled() {
          return get(disabled_2);
        }
      });
      var node_8 = sibling(div_8, 2);
      HorizontalLineSeparator(node_8, {});
      var div_10 = sibling(node_8, 2), h4_3 = child(div_10), text_4 = child(h4_3);
      template_effect(() => set_text(text_4, localize("DND5E.VehicleActionThresholds")));
      var div_11 = sibling(h4_3, 2), node_9 = sibling(child(div_11), 2), title_1 = /* @__PURE__ */ derived(() => localize("DND5E.VehicleActionThresholdsFull")), disabled_3 = /* @__PURE__ */ derived(() => !get(context).editable || get(context).lockSensitiveFields);
      NumberInput(node_9, {
        get document() {
          return get(context).actor;
        },
        field: "system.attributes.actions.thresholds.2",
        get value() {
          return get(context).system.attributes.actions.thresholds[2];
        },
        min: "0",
        step: "1",
        placeholder: "—",
        get title() {
          return get(title_1);
        },
        selectOnFocus: !0,
        get disabled() {
          return get(disabled_3);
        }
      });
      var node_10 = sibling(node_9, 4), title_2 = /* @__PURE__ */ derived(() => localize("DND5E.VehicleActionThresholdsMid")), disabled_4 = /* @__PURE__ */ derived(() => !get(context).editable || get(context).lockSensitiveFields);
      NumberInput(node_10, {
        get document() {
          return get(context).actor;
        },
        field: "system.attributes.actions.thresholds.1",
        get value() {
          return get(context).system.attributes.actions.thresholds[1];
        },
        min: "0",
        step: "1",
        placeholder: "—",
        get title() {
          return get(title_2);
        },
        selectOnFocus: !0,
        get disabled() {
          return get(disabled_4);
        }
      });
      var node_11 = sibling(node_10, 4), title_3 = /* @__PURE__ */ derived(() => localize("DND5E.VehicleActionThresholdsMin")), disabled_5 = /* @__PURE__ */ derived(() => !get(context).editable || get(context).lockSensitiveFields);
      NumberInput(node_11, {
        get document() {
          return get(context).actor;
        },
        field: "system.attributes.actions.thresholds.0",
        get value() {
          return get(context).system.attributes.actions.thresholds[0];
        },
        min: "0",
        step: "1",
        placeholder: "—",
        get title() {
          return get(title_3);
        },
        selectOnFocus: !0,
        get disabled() {
          return get(disabled_5);
        }
      });
      var node_12 = sibling(div_10, 2);
      HorizontalLineSeparator(node_12, {});
      var div_12 = sibling(node_12, 2), h4_4 = child(div_12), text_5 = child(h4_4);
      template_effect(() => set_text(text_5, localize("TIDY5E.TotalCrewCount")));
      var div_13 = sibling(h4_4, 2), text_6 = child(div_13), node_13 = sibling(div_12, 2);
      HorizontalLineSeparator(node_13, {});
      var div_14 = sibling(node_13, 2), h4_5 = child(div_14), text_7 = child(h4_5);
      template_effect(() => set_text(text_7, localize("TIDY5E.ActionsPerTurn")));
      var div_15 = sibling(h4_5, 2), text_8 = child(div_15);
      template_effect(() => {
        set_attribute(div_13, "title", get(crewTallyDescription)), set_text(text_6, get(totalCrew)), set_text(text_8, get(actionsPerTurn));
      }), transition(3, div_7, () => slide, () => ({ duration: 200, easing: quadInOut })), append($$anchor2, div_7);
    }, "consequent");
    if_block(node_5, ($$render) => {
      get(context).system.attributes.actions.stations || $$render(consequent);
    });
  }
  append($$anchor, div), pop();
}
__name(VehicleAttributes, "VehicleAttributes");
var root$2a = /* @__PURE__ */ template("<div></div>");
function Bar($$anchor, $$props) {
  push($$props, !0);
  let value = prop($$props, "value", 3, null), max = prop($$props, "max", 3, null), percentage = prop($$props, "percentage", 3, null), color = prop($$props, "color", 3, "var(--t5e-hp-bar-color)"), cssClass = prop($$props, "cssClass", 3, null), barPercentage = /* @__PURE__ */ derived(() => percentage() ?? getPercentage(value(), max()));
  var div = root$2a();
  template_effect(() => {
    set_class(div, `bar ${cssClass() ?? ""} svelte-qx955f`), set_attribute(div, "style", `width: ${get(barPercentage) ?? ""}%; --bar-color: ${color() ?? ""}`);
  }), append($$anchor, div), pop();
}
__name(Bar, "Bar");
function HpBar($$anchor, $$props) {
  let value = prop($$props, "value", 3, null), max = prop($$props, "max", 3, null), percentage = prop($$props, "percentage", 3, null);
  Bar($$anchor, {
    get value() {
      return value();
    },
    get max() {
      return max();
    },
    get percentage() {
      return percentage();
    },
    color: "var(--t5e-hp-bar-color)"
  });
}
__name(HpBar, "HpBar");
var root_3$y = /* @__PURE__ */ template('<span class="resource-value"> </span>'), root_5$o = /* @__PURE__ */ template('<span class="resource-max"> </span>'), root$29 = /* @__PURE__ */ template('<div class="resource-container svelte-129gcyy"><!> <!> <span class="resource-separator">/</span> <!></div>');
function ResourceWithBar($$anchor, $$props) {
  let valueTitle = prop($$props, "valueTitle", 3, null), valueDisabled = prop($$props, "valueDisabled", 3, !1), maxTitle = prop($$props, "maxTitle", 3, null), maxDisabled = prop($$props, "maxDisabled", 3, !1), percentage = prop($$props, "percentage", 3, null), Bar2 = prop($$props, "Bar", 3, null);
  var div = root$29(), node = child(div);
  {
    var consequent = /* @__PURE__ */ __name(($$anchor2) => {
      var fragment = comment(), node_1 = first_child(fragment);
      component(node_1, Bar2, ($$anchor3, $$component) => {
        $$component($$anchor3, {
          get percentage() {
            return percentage();
          },
          get value() {
            return $$props.value;
          },
          get max() {
            return $$props.max;
          }
        });
      }), append($$anchor2, fragment);
    }, "consequent");
    if_block(node, ($$render) => {
      Bar2() && $$render(consequent);
    });
  }
  var node_2 = sibling(node, 2);
  {
    var consequent_1 = /* @__PURE__ */ __name(($$anchor2) => {
      TextInput($$anchor2, {
        class: "resource-value",
        get document() {
          return $$props.document;
        },
        get field() {
          return $$props.valueField;
        },
        get value() {
          return $$props.value;
        },
        placeholder: "0",
        get title() {
          return valueTitle();
        },
        selectOnFocus: !0,
        allowDeltaChanges: !0,
        maxlength: 5,
        ariaDescribedBy: "tooltip"
      });
    }, "consequent_1"), alternate = /* @__PURE__ */ __name(($$anchor2) => {
      var span = root_3$y(), text2 = child(span);
      template_effect(() => {
        set_attribute(span, "title", valueTitle()), set_text(text2, $$props.value);
      }), append($$anchor2, span);
    }, "alternate");
    if_block(node_2, ($$render) => {
      valueDisabled() ? $$render(alternate, !1) : $$render(consequent_1);
    });
  }
  var node_3 = sibling(node_2, 4);
  {
    var consequent_2 = /* @__PURE__ */ __name(($$anchor2) => {
      TextInput($$anchor2, {
        class: "resource-max",
        get document() {
          return $$props.document;
        },
        get field() {
          return $$props.maxField;
        },
        get value() {
          return $$props.max;
        },
        placeholder: "0",
        get title() {
          return maxTitle();
        },
        selectOnFocus: !0,
        allowDeltaChanges: !0,
        maxlength: 5,
        ariaDescribedBy: "tooltip",
        get disabled() {
          return maxDisabled();
        }
      });
    }, "consequent_2"), alternate_1 = /* @__PURE__ */ __name(($$anchor2) => {
      var span_1 = root_5$o(), text_1 = child(span_1);
      template_effect(() => {
        set_attribute(span_1, "title", maxTitle()), set_text(text_1, $$props.max);
      }), append($$anchor2, span_1);
    }, "alternate_1");
    if_block(node_3, ($$render) => {
      maxDisabled() ? $$render(alternate_1, !1) : $$render(consequent_2);
    });
  }
  append($$anchor, div);
}
__name(ResourceWithBar, "ResourceWithBar");
function ItemCrewedControl($$anchor, $$props) {
  push($$props, !0);
  var iconCssClass = /* @__PURE__ */ derived(() => `fas fa-user-alt ${$$props.ctx?.toggleClass ?? ""}`), title = /* @__PURE__ */ derived(() => $$props.ctx?.toggleTitle), active = /* @__PURE__ */ derived(() => $$props.ctx?.toggleClass === "active");
  ItemControl($$anchor, {
    get iconCssClass() {
      return get(iconCssClass);
    },
    get title() {
      return get(title);
    },
    get active() {
      return get(active);
    },
    onclick: /* @__PURE__ */ __name(() => $$props.item.update({ "system.crewed": !$$props.item.system.crewed }), "onclick")
  }), pop();
}
__name(ItemCrewedControl, "ItemCrewedControl");
var root_9$i = /* @__PURE__ */ template("<!> <!>", 1), root_7$m = /* @__PURE__ */ template("<!> <!> <!> <!>", 1), root_22$1 = /* @__PURE__ */ template('<span class="truncate flex-1"> </span>'), root_21$1 = /* @__PURE__ */ template("<!> <!>", 1), root_28 = /* @__PURE__ */ template("<span> </span>"), root_27$1 = /* @__PURE__ */ template('<!> <i class="fas fa-bolt"></i>', 1), root_31 = /* @__PURE__ */ template('<span class="text-body-tertiary">&mdash;</span>'), root_33 = /* @__PURE__ */ template("<span> </span>"), root_23$2 = /* @__PURE__ */ template("<!> <!>", 1), root_37 = /* @__PURE__ */ template('<div class="item-hp svelte-1pf41lf"><!></div>'), root_20$2 = /* @__PURE__ */ template("<!> <!> <!> <!>", 1), root_18$2 = /* @__PURE__ */ template("<!> <!>", 1), root$28 = /* @__PURE__ */ template('<div class="attributes-tab-contents svelte-1pf41lf" data-tidy-track-scroll-y=""><div class="side-panel svelte-1pf41lf"><!> <!></div> <div class="main-panel flex-column small-gap svelte-1pf41lf"><!></div></div>');
function VehicleAttributesTab($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getVehicleSheetContext);
  getContext(CONSTANTS.SVELTE_CONTEXT.INLINE_TOGGLE_SERVICE);
  const localize = FoundryAdapter.localize;
  let baseWidths = {
    cover: "3.125rem",
    "system.quantity": "4.375rem",
    "system.armor.value": "2.5rem",
    "system.hp.value": "4.375rem",
    threshold: "2.5rem"
  }, alternateColumnHeaderContent = {
    threshold: `<i class="fas fa-heart-crack" title="${localize("DND5E.Threshold")}"></i>`
  }, noFeatures = /* @__PURE__ */ derived(() => !get(context).features.some((section) => section.items.length));
  declareLocation("attributes");
  let controls = /* @__PURE__ */ derived(() => {
    let result = [];
    return result.push(
      {
        component: ItemCrewedControl,
        props: /* @__PURE__ */ __name(({ item, ctx }) => ({ item, ctx }), "props")
      },
      {
        component: ItemEditControl,
        props: /* @__PURE__ */ __name(({ item }) => ({ item }), "props")
      }
    ), get(context).unlocked && result.push({
      component: ItemDeleteControl,
      props: /* @__PURE__ */ __name(({ item }) => ({ item }), "props")
    }), get(context).useActionsFeature && result.push({
      component: ActionFilterOverrideControl,
      props: /* @__PURE__ */ __name(({ item }) => ({ item }), "props")
    }), result;
  }), classicControlsIconWidth = 1.25, classicControlsColumnWidth = /* @__PURE__ */ derived(() => `${classicControlsIconWidth * get(controls).length}rem`);
  var div = root$28(), div_1 = child(div), node = child(div_1);
  VehicleAttributes(node, {});
  var node_1 = sibling(node, 2);
  Traits(node_1, {
    toggleable: !0,
    useSenses: !1,
    enableSpecialTraitsConfiguration: !1
  });
  var div_2 = sibling(div_1, 2), node_2 = child(div_2);
  {
    var consequent = /* @__PURE__ */ __name(($$anchor2) => {
      Notice($$anchor2, {
        children: /* @__PURE__ */ __name(($$anchor3, $$slotProps) => {
          var text$1 = text();
          template_effect(() => set_text(text$1, localize("TIDY5E.EmptySection"))), append($$anchor3, text$1);
        }, "children"),
        $$slots: { default: !0 }
      });
    }, "consequent"), alternate_6 = /* @__PURE__ */ __name(($$anchor2) => {
      var fragment_2 = comment(), node_3 = first_child(fragment_2);
      each(node_3, 17, () => get(context).features, (section) => section.key, ($$anchor3, section) => {
        var fragment_3 = comment(), node_4 = first_child(fragment_3);
        {
          var consequent_16 = /* @__PURE__ */ __name(($$anchor4) => {
            const itemEntries = /* @__PURE__ */ derived(() => get(section).items.map((item) => ({
              item,
              ctx: get(context).itemContext[item.id]
            })));
            ItemTable($$anchor4, {
              get key() {
                return get(section).key;
              },
              header: /* @__PURE__ */ __name(($$anchor5) => {
                ItemTableHeaderRow($$anchor5, {
                  children: /* @__PURE__ */ __name(($$anchor6, $$slotProps) => {
                    var fragment_6 = root_7$m(), node_5 = first_child(fragment_6);
                    ItemTableColumn(node_5, {
                      primary: !0,
                      children: /* @__PURE__ */ __name(($$anchor7, $$slotProps2) => {
                        var text_1 = text();
                        template_effect(() => set_text(text_1, localize(get(section).label))), append($$anchor7, text_1);
                      }, "children"),
                      $$slots: { default: !0 }
                    });
                    var node_6 = sibling(node_5, 2);
                    {
                      var consequent_1 = /* @__PURE__ */ __name(($$anchor7) => {
                        var fragment_8 = root_9$i(), node_7 = first_child(fragment_8);
                        ItemTableColumn(node_7, {
                          baseWidth: "3.125rem",
                          children: /* @__PURE__ */ __name(($$anchor8, $$slotProps2) => {
                            var text_2 = text();
                            template_effect(() => set_text(text_2, localize("DND5E.Uses"))), append($$anchor8, text_2);
                          }, "children"),
                          $$slots: { default: !0 }
                        });
                        var node_8 = sibling(node_7, 2);
                        ItemTableColumn(node_8, {
                          baseWidth: "7.5rem",
                          children: /* @__PURE__ */ __name(($$anchor8, $$slotProps2) => {
                            var text_3 = text();
                            template_effect(() => set_text(text_3, localize("DND5E.Usage"))), append($$anchor8, text_3);
                          }, "children"),
                          $$slots: { default: !0 }
                        }), append($$anchor7, fragment_8);
                      }, "consequent_1");
                      if_block(node_6, ($$render) => {
                        get(section).hasActions && $$render(consequent_1);
                      });
                    }
                    var node_9 = sibling(node_6, 2);
                    {
                      var consequent_3 = /* @__PURE__ */ __name(($$anchor7) => {
                        var fragment_11 = comment(), node_10 = first_child(fragment_11);
                        each(node_10, 17, () => get(section).columns, index, ($$anchor8, column) => {
                          var baseWidth = /* @__PURE__ */ derived(() => baseWidths[get(column).property] ?? "3.125rem");
                          ItemTableColumn($$anchor8, {
                            get cssClass() {
                              return `items-header-${get(column).css ?? ""}`;
                            },
                            get baseWidth() {
                              return get(baseWidth);
                            },
                            children: /* @__PURE__ */ __name(($$anchor9, $$slotProps2) => {
                              var fragment_13 = comment(), node_11 = first_child(fragment_13);
                              {
                                var consequent_2 = /* @__PURE__ */ __name(($$anchor10) => {
                                  var fragment_14 = comment(), node_12 = first_child(fragment_14);
                                  html(node_12, () => alternateColumnHeaderContent[get(column).property]), append($$anchor10, fragment_14);
                                }, "consequent_2"), alternate = /* @__PURE__ */ __name(($$anchor10) => {
                                  var text_4 = text();
                                  template_effect(() => set_text(text_4, get(column).label)), append($$anchor10, text_4);
                                }, "alternate");
                                if_block(node_11, ($$render) => {
                                  alternateColumnHeaderContent[get(column).property] ? $$render(consequent_2) : $$render(alternate, !1);
                                });
                              }
                              append($$anchor9, fragment_13);
                            }, "children"),
                            $$slots: { default: !0 }
                          });
                        }), append($$anchor7, fragment_11);
                      }, "consequent_3");
                      if_block(node_9, ($$render) => {
                        get(section).columns && $$render(consequent_3);
                      });
                    }
                    var node_13 = sibling(node_9, 2);
                    {
                      var consequent_4 = /* @__PURE__ */ __name(($$anchor7) => {
                        ItemTableColumn($$anchor7, {
                          get baseWidth() {
                            return get(classicControlsColumnWidth);
                          }
                        });
                      }, "consequent_4");
                      if_block(node_13, ($$render) => {
                        get(context).editable && get(context).useClassicControls && $$render(consequent_4);
                      });
                    }
                    append($$anchor6, fragment_6);
                  }, "children"),
                  $$slots: { default: !0 }
                });
              }, "header"),
              body: /* @__PURE__ */ __name(($$anchor5) => {
                var fragment_17 = root_18$2(), node_14 = first_child(fragment_17);
                each(node_14, 17, () => get(itemEntries), ({ item, ctx }) => item.id, ($$anchor6, $$item) => {
                  let item = /* @__PURE__ */ __name(() => get($$item).item, "item"), ctx = /* @__PURE__ */ __name(() => get($$item).ctx, "ctx");
                  var contextMenu = /* @__PURE__ */ derived(() => ({
                    type: CONSTANTS.CONTEXT_MENU_TYPE_ITEMS,
                    uuid: item().uuid
                  })), cssClass = /* @__PURE__ */ derived(() => FoundryAdapter.getInventoryRowClasses(item(), ctx()));
                  ItemTableRow($$anchor6, {
                    onMouseDown: /* @__PURE__ */ __name((event2) => FoundryAdapter.editOnMiddleClick(event2, item()), "onMouseDown"),
                    get contextMenu() {
                      return get(contextMenu);
                    },
                    get item() {
                      return item();
                    },
                    get cssClass() {
                      return get(cssClass);
                    },
                    children: /* @__PURE__ */ __name(($$anchor7, $$arg0) => {
                      let toggleSummary = /* @__PURE__ */ __name(() => $$arg0?.().toggleSummary, "toggleSummary");
                      var fragment_19 = root_20$2(), node_15 = first_child(fragment_19);
                      ItemTableCell(node_15, {
                        primary: !0,
                        children: /* @__PURE__ */ __name(($$anchor8, $$slotProps) => {
                          var fragment_20 = root_21$1(), node_16 = first_child(fragment_20), disabled = /* @__PURE__ */ derived(() => !get(context).editable);
                          ItemUseButton(node_16, {
                            get disabled() {
                              return get(disabled);
                            },
                            get item() {
                              return item();
                            }
                          });
                          var node_17 = sibling(node_16, 2);
                          ItemName(node_17, {
                            onToggle: /* @__PURE__ */ __name(() => toggleSummary()(get(context).actor), "onToggle"),
                            cssClass: "extra-small-gap",
                            get item() {
                              return item();
                            },
                            children: /* @__PURE__ */ __name(($$anchor9, $$slotProps2) => {
                              var span = root_22$1(), text_5 = child(span);
                              template_effect(() => {
                                set_attribute(span, "data-tidy-item-name", item().name), set_attribute(span, "data-tidy-sheet-part", CONSTANTS.SHEET_PARTS.ITEM_NAME), set_text(text_5, item().name);
                              }), append($$anchor9, span);
                            }, "children"),
                            $$slots: { default: !0 }
                          }), append($$anchor8, fragment_20);
                        }, "children"),
                        $$slots: { default: !0 }
                      });
                      var node_18 = sibling(node_15, 2);
                      {
                        var consequent_10 = /* @__PURE__ */ __name(($$anchor8) => {
                          var fragment_21 = root_23$2(), node_19 = first_child(fragment_21);
                          ItemTableCell(node_19, {
                            baseWidth: "3.125rem",
                            children: /* @__PURE__ */ __name(($$anchor9, $$slotProps) => {
                              var fragment_22 = comment(), node_20 = first_child(fragment_22);
                              {
                                var consequent_5 = /* @__PURE__ */ __name(($$anchor10) => {
                                  RechargeControl($$anchor10, {
                                    get document() {
                                      return item();
                                    },
                                    field: "system.uses.spent",
                                    get uses() {
                                      return item().system.uses;
                                    }
                                  });
                                }, "consequent_5"), alternate_3 = /* @__PURE__ */ __name(($$anchor10) => {
                                  var fragment_24 = comment(), node_21 = first_child(fragment_24);
                                  {
                                    var consequent_7 = /* @__PURE__ */ __name(($$anchor11) => {
                                      var fragment_25 = root_27$1();
                                      const remaining = /* @__PURE__ */ derived(() => item().system.uses.max - item().system.uses.spent);
                                      var node_22 = first_child(fragment_25);
                                      {
                                        var consequent_6 = /* @__PURE__ */ __name(($$anchor12) => {
                                          var span_1 = root_28(), text_6 = child(span_1);
                                          template_effect(() => set_text(text_6, get(remaining))), append($$anchor12, span_1);
                                        }, "consequent_6");
                                        if_block(node_22, ($$render) => {
                                          get(remaining) > 1 && $$render(consequent_6);
                                        });
                                      }
                                      var i2 = sibling(node_22, 2);
                                      template_effect(() => set_attribute(i2, "title", localize("DND5E.Charged"))), append($$anchor11, fragment_25);
                                    }, "consequent_7"), alternate_2 = /* @__PURE__ */ __name(($$anchor11) => {
                                      var fragment_26 = comment(), node_23 = first_child(fragment_26);
                                      {
                                        var consequent_8 = /* @__PURE__ */ __name(($$anchor12) => {
                                          ItemUses($$anchor12, {
                                            get item() {
                                              return item();
                                            }
                                          });
                                        }, "consequent_8"), alternate_1 = /* @__PURE__ */ __name(($$anchor12) => {
                                          var span_2 = root_31();
                                          append($$anchor12, span_2);
                                        }, "alternate_1");
                                        if_block(
                                          node_23,
                                          ($$render) => {
                                            ctx()?.hasUses ? $$render(consequent_8) : $$render(alternate_1, !1);
                                          },
                                          !0
                                        );
                                      }
                                      append($$anchor11, fragment_26);
                                    }, "alternate_2");
                                    if_block(
                                      node_21,
                                      ($$render) => {
                                        item().hasRecharge ? $$render(consequent_7) : $$render(alternate_2, !1);
                                      },
                                      !0
                                    );
                                  }
                                  append($$anchor10, fragment_24);
                                }, "alternate_3");
                                if_block(node_20, ($$render) => {
                                  item().isOnCooldown ? $$render(consequent_5) : $$render(alternate_3, !1);
                                });
                              }
                              append($$anchor9, fragment_22);
                            }, "children"),
                            $$slots: { default: !0 }
                          });
                          var node_24 = sibling(node_19, 2);
                          ItemTableCell(node_24, {
                            baseWidth: "7.5rem",
                            children: /* @__PURE__ */ __name(($$anchor9, $$slotProps) => {
                              var fragment_28 = comment(), node_25 = first_child(fragment_28);
                              {
                                var consequent_9 = /* @__PURE__ */ __name(($$anchor10) => {
                                  var span_3 = root_33(), text_7 = child(span_3);
                                  template_effect(() => set_text(text_7, item().labels?.activation ?? "")), append($$anchor10, span_3);
                                }, "consequent_9");
                                if_block(node_25, ($$render) => {
                                  ItemUtils.hasActivationType(item()) && $$render(consequent_9);
                                });
                              }
                              append($$anchor9, fragment_28);
                            }, "children"),
                            $$slots: { default: !0 }
                          }), append($$anchor8, fragment_21);
                        }, "consequent_10");
                        if_block(node_18, ($$render) => {
                          get(section).hasActions && $$render(consequent_10);
                        });
                      }
                      var node_26 = sibling(node_18, 2);
                      {
                        var consequent_13 = /* @__PURE__ */ __name(($$anchor8) => {
                          var fragment_29 = comment(), node_27 = first_child(fragment_29);
                          each(node_27, 17, () => get(section).columns, index, ($$anchor9, column) => {
                            var fragment_30 = comment(), node_28 = first_child(fragment_30);
                            {
                              var consequent_11 = /* @__PURE__ */ __name(($$anchor10) => {
                                ItemTableCell($$anchor10, {
                                  baseWidth: "4.375rem",
                                  children: /* @__PURE__ */ __name(($$anchor11, $$slotProps) => {
                                    var div_3 = root_37();
                                    template_effect(() => set_attribute(div_3, "title", localize("DND5E.HitPoints")));
                                    var node_29 = child(div_3), valueTitle = /* @__PURE__ */ derived(() => localize("DND5E.HitPointsCurrent")), valueDisabled = /* @__PURE__ */ derived(() => !get(context).editable), maxTitle = /* @__PURE__ */ derived(() => localize("DND5E.HitPointsMax")), maxDisabled = /* @__PURE__ */ derived(() => !get(context).editable || get(context).lockSensitiveFields);
                                    ResourceWithBar(node_29, {
                                      get document() {
                                        return item();
                                      },
                                      get value() {
                                        return item().system.hp.value;
                                      },
                                      valueField: "system.hp.value",
                                      get valueTitle() {
                                        return get(valueTitle);
                                      },
                                      get valueDisabled() {
                                        return get(valueDisabled);
                                      },
                                      get max() {
                                        return item().system.hp.max;
                                      },
                                      maxField: "system.hp.max",
                                      get maxTitle() {
                                        return get(maxTitle);
                                      },
                                      get maxDisabled() {
                                        return get(maxDisabled);
                                      },
                                      Bar: HpBar
                                    }), append($$anchor11, div_3);
                                  }, "children"),
                                  $$slots: { default: !0 }
                                });
                              }, "consequent_11"), alternate_5 = /* @__PURE__ */ __name(($$anchor10) => {
                                const isNumber = /* @__PURE__ */ derived(() => get(column).editable === "Number"), fallback = /* @__PURE__ */ derived(() => get(isNumber) ? "0" : ""), value = /* @__PURE__ */ derived(() => FoundryAdapter.getProperty(item(), get(column).property)?.toString() ?? FoundryAdapter.getProperty(ctx(), get(column).property)?.toString() ?? get(fallback));
                                var baseWidth_1 = /* @__PURE__ */ derived(() => baseWidths[get(column).property] ?? "3.125rem");
                                ItemTableCell($$anchor10, {
                                  get baseWidth() {
                                    return get(baseWidth_1);
                                  },
                                  children: /* @__PURE__ */ __name(($$anchor11, $$slotProps) => {
                                    var fragment_33 = comment(), node_30 = first_child(fragment_33);
                                    {
                                      var consequent_12 = /* @__PURE__ */ __name(($$anchor12) => {
                                        var disabled_1 = /* @__PURE__ */ derived(() => !get(context).editable);
                                        TextInput($$anchor12, {
                                          get document() {
                                            return item();
                                          },
                                          get field() {
                                            return get(column).property;
                                          },
                                          get allowDeltaChanges() {
                                            return get(isNumber);
                                          },
                                          selectOnFocus: !0,
                                          get value() {
                                            return get(value);
                                          },
                                          get disabled() {
                                            return get(disabled_1);
                                          }
                                        });
                                      }, "consequent_12"), alternate_4 = /* @__PURE__ */ __name(($$anchor12) => {
                                        var text_8 = text();
                                        template_effect(() => set_text(text_8, FoundryAdapter.getProperty(item(), get(column).property) ?? FoundryAdapter.getProperty(ctx(), get(column).property) ?? get(fallback))), append($$anchor12, text_8);
                                      }, "alternate_4");
                                      if_block(node_30, ($$render) => {
                                        get(column).editable ? $$render(consequent_12) : $$render(alternate_4, !1);
                                      });
                                    }
                                    append($$anchor11, fragment_33);
                                  }, "children"),
                                  $$slots: { default: !0 }
                                });
                              }, "alternate_5");
                              if_block(node_28, ($$render) => {
                                get(column).property === "system.hp.value" ? $$render(consequent_11) : $$render(alternate_5, !1);
                              });
                            }
                            append($$anchor9, fragment_30);
                          }), append($$anchor8, fragment_29);
                        }, "consequent_13");
                        if_block(node_26, ($$render) => {
                          get(section).columns && $$render(consequent_13);
                        });
                      }
                      var node_31 = sibling(node_26, 2);
                      {
                        var consequent_14 = /* @__PURE__ */ __name(($$anchor8) => {
                          ItemTableCell($$anchor8, {
                            get baseWidth() {
                              return get(classicControlsColumnWidth);
                            },
                            children: /* @__PURE__ */ __name(($$anchor9, $$slotProps) => {
                              var params = /* @__PURE__ */ derived(() => ({ item: item(), ctx: ctx() }));
                              ClassicControls($$anchor9, {
                                get controls() {
                                  return get(controls);
                                },
                                get params() {
                                  return get(params);
                                }
                              });
                            }, "children"),
                            $$slots: { default: !0 }
                          });
                        }, "consequent_14");
                        if_block(node_31, ($$render) => {
                          get(context).editable && get(context).useClassicControls && $$render(consequent_14);
                        });
                      }
                      append($$anchor7, fragment_19);
                    }, "children"),
                    $$slots: { default: !0 }
                  });
                });
                var node_32 = sibling(node_14, 2);
                {
                  var consequent_15 = /* @__PURE__ */ __name(($$anchor6) => {
                    ItemTableFooter($$anchor6, {
                      get actor() {
                        return get(context).actor;
                      },
                      get section() {
                        return get(section);
                      },
                      isItem: !0
                    });
                  }, "consequent_15");
                  if_block(node_32, ($$render) => {
                    get(context).unlocked && get(section).dataset && $$render(consequent_15);
                  });
                }
                append($$anchor5, fragment_17);
              }, "body"),
              $$slots: { header: !0, body: !0 }
            });
          }, "consequent_16");
          if_block(node_4, ($$render) => {
            (get(context).unlocked || get(section).items.length) && $$render(consequent_16);
          });
        }
        append($$anchor3, fragment_3);
      }), append($$anchor2, fragment_2);
    }, "alternate_6");
    if_block(node_2, ($$render) => {
      get(noFeatures) && !get(context).unlocked ? $$render(consequent) : $$render(alternate_6, !1);
    });
  }
  append($$anchor, div), pop();
}
__name(VehicleAttributesTab, "VehicleAttributesTab");
var root_2$z = /* @__PURE__ */ template("<!> <!> <!>", 1), root_12$4 = /* @__PURE__ */ template('<span class="truncate flex-1"> </span>'), root_10$a = /* @__PURE__ */ template("<!> <!> <!>", 1), root_9$h = /* @__PURE__ */ template("<!> <!> <!>", 1), root_8$i = /* @__PURE__ */ template("<!> <!>", 1), root_7$l = /* @__PURE__ */ template("<!> <!>", 1);
function CargoList($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getVehicleSheetContext), itemEntries = /* @__PURE__ */ derived(() => $$props.section.items.map((item) => ({
    item,
    ctx: get(context).itemContext[item.id]
  }))), inlineToggleService = getContext(CONSTANTS.SVELTE_CONTEXT.INLINE_TOGGLE_SERVICE), baseWidths = {
    quantity: "5rem",
    price: "4.375rem",
    weight: "3.75rem"
  }, controls = /* @__PURE__ */ derived(() => {
    let result = [
      {
        component: ItemEditControl,
        props: /* @__PURE__ */ __name(({ item }) => ({ item }), "props")
      }
    ];
    return get(context).unlocked && result.push({
      component: ItemDeleteControl,
      props: /* @__PURE__ */ __name(({ item }) => ({ item }), "props")
    }), get(context).useActionsFeature && result.push({
      component: ActionFilterOverrideControl,
      props: /* @__PURE__ */ __name(({ item }) => ({ item }), "props")
    }), result;
  }), classicControlsIconWidth = 1.25, classicControlsColumnWidth = /* @__PURE__ */ derived(() => `${classicControlsIconWidth * get(controls).length}rem`);
  const localize = FoundryAdapter.localize;
  ItemTable($$anchor, {
    get key() {
      return $$props.section.key;
    },
    header: /* @__PURE__ */ __name(($$anchor2) => {
      ItemTableHeaderRow($$anchor2, {
        children: /* @__PURE__ */ __name(($$anchor3, $$slotProps) => {
          var fragment_2 = root_2$z(), node = first_child(fragment_2);
          ItemTableColumn(node, {
            primary: !0,
            children: /* @__PURE__ */ __name(($$anchor4, $$slotProps2) => {
              var text$1 = text();
              template_effect(() => set_text(text$1, localize($$props.section.label))), append($$anchor4, text$1);
            }, "children"),
            $$slots: { default: !0 }
          });
          var node_1 = sibling(node, 2);
          each(node_1, 17, () => $$props.section.columns, index, ($$anchor4, column) => {
            var baseWidth = /* @__PURE__ */ derived(() => baseWidths[get(column).property] ?? "3.125rem");
            ItemTableColumn($$anchor4, {
              get cssClass() {
                return `items-header-${get(column).css ?? ""}`;
              },
              get baseWidth() {
                return get(baseWidth);
              },
              children: /* @__PURE__ */ __name(($$anchor5, $$slotProps2) => {
                var text_1 = text();
                template_effect(() => set_text(text_1, get(column).label)), append($$anchor5, text_1);
              }, "children"),
              $$slots: { default: !0 }
            });
          });
          var node_2 = sibling(node_1, 2);
          {
            var consequent = /* @__PURE__ */ __name(($$anchor4) => {
              ItemTableColumn($$anchor4, {
                get baseWidth() {
                  return get(classicControlsColumnWidth);
                }
              });
            }, "consequent");
            if_block(node_2, ($$render) => {
              get(context).editable && get(context).useClassicControls && $$render(consequent);
            });
          }
          append($$anchor3, fragment_2);
        }, "children"),
        $$slots: { default: !0 }
      });
    }, "header"),
    body: /* @__PURE__ */ __name(($$anchor2) => {
      var fragment_7 = root_7$l(), node_3 = first_child(fragment_7);
      each(node_3, 19, () => get(itemEntries), ({ item, ctx }, index2) => item.id ?? index2, ($$anchor3, $$item) => {
        let item = /* @__PURE__ */ __name(() => get($$item).item, "item"), ctx = /* @__PURE__ */ __name(() => get($$item).ctx, "ctx");
        var fragment_8 = root_8$i(), node_4 = first_child(fragment_8), contextMenu = /* @__PURE__ */ derived(() => ({
          type: CONSTANTS.CONTEXT_MENU_TYPE_ITEMS,
          uuid: item().uuid
        })), cssClass = /* @__PURE__ */ derived(() => FoundryAdapter.getInventoryRowClasses(item(), ctx()));
        ItemTableRow(node_4, {
          onMouseDown: /* @__PURE__ */ __name((event2) => FoundryAdapter.editOnMiddleClick(event2, item()), "onMouseDown"),
          get contextMenu() {
            return get(contextMenu);
          },
          get item() {
            return item();
          },
          get cssClass() {
            return get(cssClass);
          },
          children: /* @__PURE__ */ __name(($$anchor4, $$arg0) => {
            let toggleSummary = /* @__PURE__ */ __name(() => $$arg0?.().toggleSummary, "toggleSummary");
            var fragment_9 = root_9$h(), node_5 = first_child(fragment_9);
            ItemTableCell(node_5, {
              primary: !0,
              children: /* @__PURE__ */ __name(($$anchor5, $$slotProps) => {
                var fragment_10 = root_10$a(), node_6 = first_child(fragment_10), disabled = /* @__PURE__ */ derived(() => !get(context).editable);
                ItemUseButton(node_6, {
                  get disabled() {
                    return get(disabled);
                  },
                  get item() {
                    return item();
                  }
                });
                var node_7 = sibling(node_6, 2);
                {
                  var consequent_1 = /* @__PURE__ */ __name(($$anchor6) => {
                    InlineToggleControl($$anchor6, {
                      get entityId() {
                        return item().id;
                      },
                      inlineToggleService
                    });
                  }, "consequent_1");
                  if_block(node_7, ($$render) => {
                    "containerContents" in ctx() && ctx().containerContents && $$render(consequent_1);
                  });
                }
                var node_8 = sibling(node_7, 2);
                ItemName(node_8, {
                  onToggle: /* @__PURE__ */ __name(() => toggleSummary()(get(context).actor), "onToggle"),
                  cssClass: "extra-small-gap",
                  get item() {
                    return item();
                  },
                  children: /* @__PURE__ */ __name(($$anchor6, $$slotProps2) => {
                    var span = root_12$4(), text_2 = child(span);
                    template_effect(() => {
                      set_attribute(span, "data-tidy-item-name", item().name), set_attribute(span, "data-tidy-sheet-part", CONSTANTS.SHEET_PARTS.ITEM_NAME), set_text(text_2, item().name);
                    }), append($$anchor6, span);
                  }, "children"),
                  $$slots: { default: !0 }
                }), append($$anchor5, fragment_10);
              }, "children"),
              $$slots: { default: !0 }
            });
            var node_9 = sibling(node_5, 2);
            {
              var consequent_3 = /* @__PURE__ */ __name(($$anchor5) => {
                var fragment_12 = comment(), node_10 = first_child(fragment_12);
                each(node_10, 17, () => $$props.section.columns, index, ($$anchor6, column) => {
                  const isNumber = /* @__PURE__ */ derived(() => get(column).editable === "Number"), fallback = /* @__PURE__ */ derived(() => get(isNumber) ? "0" : ""), value = /* @__PURE__ */ derived(() => FoundryAdapter.getProperty(item(), get(column).property)?.toString() ?? FoundryAdapter.getProperty(ctx(), get(column).property)?.toString() ?? get(fallback));
                  var baseWidth_1 = /* @__PURE__ */ derived(() => baseWidths[get(column).property] ?? "3.125rem");
                  ItemTableCell($$anchor6, {
                    get baseWidth() {
                      return get(baseWidth_1);
                    },
                    children: /* @__PURE__ */ __name(($$anchor7, $$slotProps) => {
                      var fragment_14 = comment(), node_11 = first_child(fragment_14);
                      {
                        var consequent_2 = /* @__PURE__ */ __name(($$anchor8) => {
                          var disabled_1 = /* @__PURE__ */ derived(() => !get(context).editable || get(column).property === "quantity" && get(context).lockItemQuantity);
                          TextInput($$anchor8, {
                            get document() {
                              return item();
                            },
                            get field() {
                              return get(column).property;
                            },
                            get allowDeltaChanges() {
                              return get(isNumber);
                            },
                            selectOnFocus: !0,
                            get value() {
                              return get(value);
                            },
                            get disabled() {
                              return get(disabled_1);
                            }
                          });
                        }, "consequent_2"), alternate = /* @__PURE__ */ __name(($$anchor8) => {
                          var text_3 = text();
                          template_effect(() => set_text(text_3, FoundryAdapter.getProperty(item(), get(column).property) ?? FoundryAdapter.getProperty(ctx(), get(column).property) ?? get(fallback))), append($$anchor8, text_3);
                        }, "alternate");
                        if_block(node_11, ($$render) => {
                          get(column).editable ? $$render(consequent_2) : $$render(alternate, !1);
                        });
                      }
                      append($$anchor7, fragment_14);
                    }, "children"),
                    $$slots: { default: !0 }
                  });
                }), append($$anchor5, fragment_12);
              }, "consequent_3");
              if_block(node_9, ($$render) => {
                $$props.section.columns && $$render(consequent_3);
              });
            }
            var node_12 = sibling(node_9, 2);
            {
              var consequent_4 = /* @__PURE__ */ __name(($$anchor5) => {
                ItemTableCell($$anchor5, {
                  get baseWidth() {
                    return get(classicControlsColumnWidth);
                  },
                  children: /* @__PURE__ */ __name(($$anchor6, $$slotProps) => {
                    var params = /* @__PURE__ */ derived(() => ({ item: item() }));
                    ClassicControls($$anchor6, {
                      get controls() {
                        return get(controls);
                      },
                      get params() {
                        return get(params);
                      }
                    });
                  }, "children"),
                  $$slots: { default: !0 }
                });
              }, "consequent_4");
              if_block(node_12, ($$render) => {
                get(context).editable && get(context).useClassicControls && $$render(consequent_4);
              });
            }
            append($$anchor4, fragment_9);
          }, "children"),
          $$slots: { default: !0 }
        });
        var node_13 = sibling(node_4, 2);
        {
          var consequent_5 = /* @__PURE__ */ __name(($$anchor4) => {
            InlineContainerView$1($$anchor4, {
              get container() {
                return item();
              },
              get containerContents() {
                return ctx().containerContents;
              },
              get editable() {
                return get(context).editable;
              },
              inlineToggleService,
              get lockItemQuantity() {
                return get(context).lockItemQuantity;
              },
              get sheetDocument() {
                return get(context).actor;
              },
              get unlocked() {
                return get(context).unlocked;
              }
            });
          }, "consequent_5");
          if_block(node_13, ($$render) => {
            "containerContents" in ctx() && ctx().containerContents && $$render(consequent_5);
          });
        }
        append($$anchor3, fragment_8);
      });
      var node_14 = sibling(node_3, 2);
      {
        var consequent_6 = /* @__PURE__ */ __name(($$anchor3) => {
          var isItem = /* @__PURE__ */ derived(() => $$props.section.dataset.type !== "crew" && $$props.section.dataset.type !== "passengers");
          ItemTableFooter($$anchor3, {
            get actor() {
              return get(context).actor;
            },
            get section() {
              return $$props.section;
            },
            create: /* @__PURE__ */ __name(() => FoundryAdapter.createItem({ type: $$props.section.dataset.type }, get(context).actor), "create"),
            get isItem() {
              return get(isItem);
            }
          });
        }, "consequent_6");
        if_block(node_14, ($$render) => {
          get(context).unlocked && $$props.section.dataset && $$render(consequent_6);
        });
      }
      append($$anchor2, fragment_7);
    }, "body"),
    $$slots: { header: !0, body: !0 }
  }), pop();
}
__name(CargoList, "CargoList");
var root_2$y = /* @__PURE__ */ template("<!> <!> <!>", 1), root_9$g = /* @__PURE__ */ template("<!> <!> <!>", 1), root_7$k = /* @__PURE__ */ template("<!> <!>", 1), root$27 = /* @__PURE__ */ template('<div style="display: contents;" class="passenger-crew-list-container svelte-1xkntph"><!></div>');
function PassengerOrCrewList($$anchor, $$props) {
  push($$props, !0);
  let baseWidths = {
    quantity: "5rem",
    price: "4.375rem",
    weight: "3.75rem"
  }, context = /* @__PURE__ */ derived(getVehicleSheetContext), itemEntries = /* @__PURE__ */ derived(() => $$props.section.items.map((item) => ({
    item,
    ctx: get(context).itemContext[item.id]
  })));
  const classicControlsEditableRowBaseWidth = "1.5rem";
  function saveNonItemSectionData(ev, index2, field, section) {
    const cargo = foundry.utils.deepClone(get(context).actor.system.cargo[section.dataset.type]), value = ev.currentTarget.value, item = cargo[index2];
    return item && (item[field] = ev.currentTarget.type === "number" ? Number(value) : value, get(context).actor.update({
      [`system.cargo.${section.dataset.type}`]: cargo
    })), !1;
  }
  __name(saveNonItemSectionData, "saveNonItemSectionData");
  function deleteCrewOrPassenger(section, index2) {
    const cargo = foundry.utils.deepClone(get(context).actor.system.cargo[section.dataset.type]).filter((_, i2) => i2 !== index2);
    return get(context).actor.update({
      [`system.cargo.${section.dataset.type}`]: cargo
    }), !1;
  }
  __name(deleteCrewOrPassenger, "deleteCrewOrPassenger");
  async function onItemCreate(type) {
    const actor = get(context).actor, cargo = foundry.utils.deepClone(actor.system.cargo[type]);
    return cargo.push(FoundryAdapter.getNewCargo()), actor.update({ [`system.cargo.${type}`]: cargo });
  }
  __name(onItemCreate, "onItemCreate");
  let controls = /* @__PURE__ */ derived(() => {
    let result = [];
    return get(context).unlocked && result.push({
      component: ItemDeleteControl,
      props: /* @__PURE__ */ __name(({ item, index: index2, section }) => ({
        onDelete: /* @__PURE__ */ __name(() => deleteCrewOrPassenger(section, index2), "onDelete"),
        item
      }), "props")
    }), result;
  });
  const localize = FoundryAdapter.localize;
  var div = root$27(), node = child(div);
  ItemTable(node, {
    get key() {
      return $$props.section.key;
    },
    header: /* @__PURE__ */ __name(($$anchor2) => {
      ItemTableHeaderRow($$anchor2, {
        children: /* @__PURE__ */ __name(($$anchor3, $$slotProps) => {
          var fragment_1 = root_2$y(), node_1 = first_child(fragment_1);
          ItemTableColumn(node_1, {
            primary: !0,
            children: /* @__PURE__ */ __name(($$anchor4, $$slotProps2) => {
              var text$1 = text();
              template_effect(() => set_text(text$1, localize($$props.section.label))), append($$anchor4, text$1);
            }, "children"),
            $$slots: { default: !0 }
          });
          var node_2 = sibling(node_1, 2);
          each(node_2, 17, () => $$props.section.columns, index, ($$anchor4, column) => {
            var baseWidth = /* @__PURE__ */ derived(() => baseWidths[get(column).property] ?? "3.125rem");
            ItemTableColumn($$anchor4, {
              get cssClass() {
                return `items-header-${get(column).css ?? ""}`;
              },
              get baseWidth() {
                return get(baseWidth);
              },
              children: /* @__PURE__ */ __name(($$anchor5, $$slotProps2) => {
                var text_1 = text();
                template_effect(() => set_text(text_1, get(column).label)), append($$anchor5, text_1);
              }, "children"),
              $$slots: { default: !0 }
            });
          });
          var node_3 = sibling(node_2, 2);
          {
            var consequent = /* @__PURE__ */ __name(($$anchor4) => {
              ItemTableColumn($$anchor4, { baseWidth: classicControlsEditableRowBaseWidth });
            }, "consequent");
            if_block(node_3, ($$render) => {
              get(context).editable && get(context).unlocked && $$render(consequent);
            });
          }
          append($$anchor3, fragment_1);
        }, "children"),
        $$slots: { default: !0 }
      });
    }, "header"),
    body: /* @__PURE__ */ __name(($$anchor2) => {
      var fragment_6 = root_7$k(), node_4 = first_child(fragment_6);
      each(node_4, 19, () => get(itemEntries), ({ item, ctx }, index2) => item.id ?? index2, ($$anchor3, $$item, index$1) => {
        let item = /* @__PURE__ */ __name(() => get($$item).item, "item"), ctx = /* @__PURE__ */ __name(() => get($$item).ctx, "ctx");
        ItemTableRow($$anchor3, {
          children: /* @__PURE__ */ __name(($$anchor4, $$slotProps) => {
            var fragment_8 = root_9$g(), node_5 = first_child(fragment_8);
            ItemTableCell(node_5, {
              primary: !0,
              children: /* @__PURE__ */ __name(($$anchor5, $$slotProps2) => {
                var disabled = /* @__PURE__ */ derived(() => !get(context).editable), attributes = /* @__PURE__ */ derived(() => ({ "data-tidy-item-name": item().name }));
                TextInput($$anchor5, {
                  get document() {
                    return item();
                  },
                  field: "name",
                  selectOnFocus: !0,
                  onSaveChange: /* @__PURE__ */ __name((ev) => saveNonItemSectionData(ev, get(index$1), "name", $$props.section), "onSaveChange"),
                  get value() {
                    return item().name;
                  },
                  class: "editable-name",
                  get disabled() {
                    return get(disabled);
                  },
                  get attributes() {
                    return get(attributes);
                  }
                });
              }, "children"),
              $$slots: { default: !0 }
            });
            var node_6 = sibling(node_5, 2);
            {
              var consequent_2 = /* @__PURE__ */ __name(($$anchor5) => {
                var fragment_10 = comment(), node_7 = first_child(fragment_10);
                each(node_7, 17, () => $$props.section.columns, index, ($$anchor6, column) => {
                  const isNumber = /* @__PURE__ */ derived(() => get(column).editable === "Number"), fallback = /* @__PURE__ */ derived(() => get(isNumber) ? "0" : ""), value = /* @__PURE__ */ derived(() => FoundryAdapter.getProperty(item(), get(column).property)?.toString() ?? FoundryAdapter.getProperty(ctx(), get(column).property)?.toString() ?? get(fallback));
                  var baseWidth_1 = /* @__PURE__ */ derived(() => baseWidths[get(column).property] ?? "3.125rem");
                  ItemTableCell($$anchor6, {
                    get baseWidth() {
                      return get(baseWidth_1);
                    },
                    children: /* @__PURE__ */ __name(($$anchor7, $$slotProps2) => {
                      var fragment_12 = comment(), node_8 = first_child(fragment_12);
                      {
                        var consequent_1 = /* @__PURE__ */ __name(($$anchor8) => {
                          var disabled_1 = /* @__PURE__ */ derived(() => !get(context).editable || get(column).property === "quantity" && get(context).lockItemQuantity);
                          TextInput($$anchor8, {
                            get document() {
                              return item();
                            },
                            get field() {
                              return get(column).property;
                            },
                            get allowDeltaChanges() {
                              return get(isNumber);
                            },
                            selectOnFocus: !0,
                            get value() {
                              return get(value);
                            },
                            onSaveChange: /* @__PURE__ */ __name((ev) => saveNonItemSectionData(ev, get(index$1), get(column).property, $$props.section), "onSaveChange"),
                            get disabled() {
                              return get(disabled_1);
                            }
                          });
                        }, "consequent_1"), alternate = /* @__PURE__ */ __name(($$anchor8) => {
                          var text_2 = text();
                          template_effect(() => set_text(text_2, FoundryAdapter.getProperty(item(), get(column).property) ?? FoundryAdapter.getProperty(ctx(), get(column).property) ?? get(fallback))), append($$anchor8, text_2);
                        }, "alternate");
                        if_block(node_8, ($$render) => {
                          get(column).editable && !item().id ? $$render(consequent_1) : $$render(alternate, !1);
                        });
                      }
                      append($$anchor7, fragment_12);
                    }, "children"),
                    $$slots: { default: !0 }
                  });
                }), append($$anchor5, fragment_10);
              }, "consequent_2");
              if_block(node_6, ($$render) => {
                $$props.section.columns && $$render(consequent_2);
              });
            }
            var node_9 = sibling(node_6, 2);
            {
              var consequent_3 = /* @__PURE__ */ __name(($$anchor5) => {
                ItemTableCell($$anchor5, {
                  baseWidth: classicControlsEditableRowBaseWidth,
                  children: /* @__PURE__ */ __name(($$anchor6, $$slotProps2) => {
                    var params = /* @__PURE__ */ derived(() => ({
                      item: item(),
                      index: get(index$1),
                      section: $$props.section
                    }));
                    ClassicControls($$anchor6, {
                      get controls() {
                        return get(controls);
                      },
                      get params() {
                        return get(params);
                      }
                    });
                  }, "children"),
                  $$slots: { default: !0 }
                });
              }, "consequent_3");
              if_block(node_9, ($$render) => {
                get(context).editable && get(context).unlocked && $$render(consequent_3);
              });
            }
            append($$anchor4, fragment_8);
          }, "children"),
          $$slots: { default: !0 }
        });
      });
      var node_10 = sibling(node_4, 2);
      {
        var consequent_4 = /* @__PURE__ */ __name(($$anchor3) => {
          var isItem = /* @__PURE__ */ derived(() => $$props.section.dataset.type !== "crew" && $$props.section.dataset.type !== "passengers");
          ItemTableFooter($$anchor3, {
            get actor() {
              return get(context).actor;
            },
            get section() {
              return $$props.section;
            },
            create: /* @__PURE__ */ __name(() => onItemCreate($$props.section.dataset.type), "create"),
            get isItem() {
              return get(isItem);
            }
          });
        }, "consequent_4");
        if_block(node_10, ($$render) => {
          get(context).unlocked && $$props.section.dataset && $$render(consequent_4);
        });
      }
      append($$anchor2, fragment_6);
    }, "body"),
    $$slots: { header: !0, body: !0 }
  }), append($$anchor, div), pop();
}
__name(PassengerOrCrewList, "PassengerOrCrewList");
var root_7$j = /* @__PURE__ */ template('<div class="currency"><!></div> <!>', 1), root$26 = /* @__PURE__ */ template('<!> <div class="scroll-container flex-column small-gap"></div> <!>', 1);
function VehicleCargoAndCrewTab($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getVehicleSheetContext), noCargoOrCrew = /* @__PURE__ */ derived(() => get(context).cargo.some((section) => section.items.length > 0) === !1);
  const localize = FoundryAdapter.localize;
  var fragment = root$26(), node = first_child(fragment);
  {
    var consequent = /* @__PURE__ */ __name(($$anchor2) => {
      Notice($$anchor2, {
        children: /* @__PURE__ */ __name(($$anchor3, $$slotProps) => {
          var text$1 = text();
          template_effect(() => set_text(text$1, localize("TIDY5E.EmptySection"))), append($$anchor3, text$1);
        }, "children"),
        $$slots: { default: !0 }
      });
    }, "consequent");
    if_block(node, ($$render) => {
      get(noCargoOrCrew) && !get(context).unlocked && $$render(consequent);
    });
  }
  var div = sibling(node, 2);
  each(div, 21, () => get(context).cargo, (section) => section.key, ($$anchor2, section) => {
    var fragment_3 = comment(), node_1 = first_child(fragment_3);
    {
      var consequent_2 = /* @__PURE__ */ __name(($$anchor3) => {
        var fragment_4 = comment(), node_2 = first_child(fragment_4);
        {
          var consequent_1 = /* @__PURE__ */ __name(($$anchor4) => {
            PassengerOrCrewList($$anchor4, {
              get section() {
                return get(section);
              }
            });
          }, "consequent_1"), alternate = /* @__PURE__ */ __name(($$anchor4) => {
            CargoList($$anchor4, {
              get section() {
                return get(section);
              }
            });
          }, "alternate");
          if_block(node_2, ($$render) => {
            get(section).editableName ? $$render(consequent_1) : $$render(alternate, !1);
          });
        }
        append($$anchor3, fragment_4);
      }, "consequent_2");
      if_block(node_1, ($$render) => {
        (get(context).unlocked || get(section).items.length) && $$render(consequent_2);
      });
    }
    append($$anchor2, fragment_3);
  });
  var node_3 = sibling(div, 2);
  TabFooter(node_3, {
    mode: "vertical",
    children: /* @__PURE__ */ __name(($$anchor2, $$slotProps) => {
      var fragment_7 = root_7$j(), div_1 = first_child(fragment_7), node_4 = child(div_1);
      Currency(node_4, {
        get document() {
          return get(context).actor;
        }
      });
      var node_5 = sibling(div_1, 2);
      {
        var consequent_3 = /* @__PURE__ */ __name(($$anchor3) => {
          EncumbranceBar($$anchor3, {});
        }, "consequent_3");
        if_block(node_5, ($$render) => {
          settings.value.useVehicleEncumbranceBar && $$render(consequent_3);
        });
      }
      append($$anchor2, fragment_7);
    }, "children"),
    $$slots: { default: !0 }
  }), append($$anchor, fragment), pop();
}
__name(VehicleCargoAndCrewTab, "VehicleCargoAndCrewTab");
var root_1$1k = /* @__PURE__ */ template('<article class="biography-notes"><!></article>'), root$25 = /* @__PURE__ */ template('<div class="note-entries svelte-1u4yr9j" data-tidy-track-scroll-y=""><!></div>');
function VehicleDescriptionTab($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getVehicleSheetContext);
  var div = root$25(), node = child(div);
  RerenderAfterFormSubmission(node, {
    get andOnValueChange() {
      return get(context).system.details.biography.value;
    },
    children: /* @__PURE__ */ __name(($$anchor2, $$slotProps) => {
      var article = root_1$1k(), node_1 = child(article);
      SheetEditor(node_1, {
        get content() {
          return get(context).biographyHTML;
        },
        target: "system.details.biography.value",
        get editable() {
          return get(context).editable;
        }
      }), action(article, ($$node) => get(context).activateEditors?.($$node)), append($$anchor2, article);
    }, "children"),
    $$slots: { default: !0 }
  }), append($$anchor, div), pop();
}
__name(VehicleDescriptionTab, "VehicleDescriptionTab");
class VehicleSheetRuntime {
  static {
    __name(this, "VehicleSheetRuntime");
  }
  static _content = [];
  static _tabs = [
    {
      title: "TIDY5E.Actions.TabName",
      content: {
        component: ActorActionsTab,
        type: "svelte"
      },
      id: CONSTANTS.TAB_ACTOR_ACTIONS,
      layout: "classic"
    },
    {
      id: CONSTANTS.TAB_VEHICLE_ATTRIBUTES,
      title: "DND5E.Attributes",
      content: {
        component: VehicleAttributesTab,
        type: "svelte"
      },
      layout: "classic"
    },
    {
      id: CONSTANTS.TAB_VEHICLE_CARGO_AND_CREW,
      title: "DND5E.VehicleCargoCrew",
      content: {
        component: VehicleCargoAndCrewTab,
        type: "svelte"
      },
      layout: "classic"
    },
    {
      id: CONSTANTS.TAB_NPC_EFFECTS,
      title: "DND5E.Effects",
      content: {
        component: ActorEffectsTab,
        type: "svelte"
      },
      layout: "classic"
    },
    {
      id: CONSTANTS.TAB_VEHICLE_DESCRIPTION,
      title: "DND5E.Description",
      content: {
        component: VehicleDescriptionTab,
        type: "svelte"
      },
      layout: "classic"
    }
  ];
  static async getContent(context) {
    return await CustomContentManager.prepareContentForRender(
      context,
      VehicleSheetRuntime._content
    );
  }
  static getTabs(context) {
    return TabManager.prepareTabsForRender(context, VehicleSheetRuntime._tabs);
  }
  static getAllRegisteredTabs() {
    return [...VehicleSheetRuntime._tabs];
  }
  static registerContent(registeredContent) {
    this._content.push(registeredContent);
  }
  static registerTab(tab, options) {
    const tabExists = VehicleSheetRuntime._tabs.some((t2) => t2.id === tab.id);
    if (tabExists) {
      warn(`Tab with id ${tab.id} already exists.`);
      return;
    }
    if (tabExists && options?.overrideExisting) {
      const index2 = VehicleSheetRuntime._tabs.findIndex((t2) => t2.id === tab.id);
      index2 >= 0 && VehicleSheetRuntime._tabs.splice(index2, 1);
    }
    VehicleSheetRuntime._tabs.push(tab);
  }
  static getTabTitle(tabId) {
    try {
      let tabTitle = this._tabs.find((t2) => t2.id === tabId)?.title;
      return typeof tabTitle == "function" && (tabTitle = tabTitle()), tabTitle ? FoundryAdapter.localize(tabTitle) : tabId;
    } catch (e2) {
      error("An error occurred while searching for a tab title.", !1, e2), debug("Tab title error troubleshooting information", { tabId });
    }
  }
}
class WorldSettingsFormApplication extends SvelteFormApplicationBase {
  static {
    __name(this, "WorldSettingsFormApplication");
  }
  unchangedSettings;
  #context = state();
  get context() {
    return get(this.#context);
  }
  set context(value) {
    set(this.#context, proxy(value));
  }
  static get defaultOptions() {
    return {
      ...super.defaultOptions,
      height: 750,
      title: "TIDY5E.WorldSettings.Menu.title",
      width: 750,
      classes: [
        ...super.defaultOptions.classes,
        "settings",
        "app-v1",
        CONSTANTS.SHEET_LAYOUT_CLASSIC
      ],
      id: "tidy-5e-sheets-world-settings",
      popOut: !0
    };
  }
  get template() {
    return FoundryAdapter.getTemplate("empty-form-template.hbs");
  }
  getData() {
    const currentSettings = getCurrentSettings();
    return {
      settings: {
        hideDeathSavesFromPlayers: currentSettings.hideDeathSavesFromPlayers,
        defaultDeathSaveRoll: currentSettings.defaultDeathSaveRoll,
        useCharacterEncumbranceBar: currentSettings.useCharacterEncumbranceBar,
        useNpcEncumbranceBar: currentSettings.useNpcEncumbranceBar,
        useVehicleEncumbranceBar: currentSettings.useVehicleEncumbranceBar,
        showPlayerName: currentSettings.showPlayerName,
        showExpandedLimitedView: currentSettings.showExpandedLimitedView,
        itemCardsFixKey: currentSettings.itemCardsFixKey,
        useCircularPortraitStyle: currentSettings.useCircularPortraitStyle,
        permanentlyUnlockCharacterSheetForGm: currentSettings.permanentlyUnlockCharacterSheetForGm,
        permanentlyUnlockNpcSheetForGm: currentSettings.permanentlyUnlockNpcSheetForGm,
        permanentlyUnlockVehicleSheetForGm: currentSettings.permanentlyUnlockVehicleSheetForGm,
        limitEffectsManagementToGm: currentSettings.limitEffectsManagementToGm,
        useCharacterInspiration: currentSettings.useCharacterInspiration,
        useVehicleMotion: currentSettings.useVehicleMotion,
        useExhaustion: currentSettings.useExhaustion,
        showTraitLabels: currentSettings.showTraitLabels,
        allowCantripsToBePrepared: currentSettings.allowCantripsToBePrepared,
        allowHpMaxOverride: currentSettings.allowHpMaxOverride,
        showActiveEffectsMarker: currentSettings.showActiveEffectsMarker,
        useTotalSheetLock: currentSettings.useTotalSheetLock,
        lockExpChanges: currentSettings.lockExpChanges,
        lockHpMaxChanges: currentSettings.lockHpMaxChanges,
        lockConfigureSheet: currentSettings.lockConfigureSheet,
        lockMoneyChanges: currentSettings.lockMoneyChanges,
        lockLevelSelector: currentSettings.lockLevelSelector,
        lockItemQuantity: currentSettings.lockItemQuantity,
        initialNpcSheetTab: currentSettings.initialNpcSheetTab,
        showNpcRestInChat: currentSettings.showNpcRestInChat,
        showNpcActorLinkMarker: currentSettings.showNpcActorLinkMarker,
        initialCharacterSheetTab: currentSettings.initialCharacterSheetTab,
        initialVehicleSheetTab: currentSettings.initialVehicleSheetTab,
        includeTidySectionFieldsInDefaultSheets: currentSettings.includeTidySectionFieldsInDefaultSheets,
        itemIdentificationPermission: currentSettings.itemIdentificationPermission,
        includeFlagsInSpellScrollCreation: currentSettings.includeFlagsInSpellScrollCreation,
        useTidySpellSchoolIcons: currentSettings.useTidySpellSchoolIcons
      },
      defaultCharacterTabs: this.mapTabSelectionFields(CharacterSheetRuntime.getAllRegisteredTabs(), currentSettings.defaultCharacterSheetTabs),
      defaultNpcTabs: this.mapTabSelectionFields(NpcSheetRuntime.getAllRegisteredTabs(), currentSettings.defaultNpcSheetTabs),
      defaultVehicleTabs: this.mapTabSelectionFields(VehicleSheetRuntime.getAllRegisteredTabs(), currentSettings.defaultVehicleSheetTabs),
      exhaustionConfig: {
        ...SettingsProvider.settings.exhaustionConfig.options.default,
        ...currentSettings.exhaustionConfig
      },
      vehicleExhaustionConfig: {
        ...SettingsProvider.settings.vehicleExhaustionConfig.options.default,
        ...currentSettings.vehicleExhaustionConfig
      }
    };
  }
  createComponent(node) {
    return this.context = this.getData(), debug("World Settings context data", this.context), mount(WorldSettings, {
      target: node,
      context: /* @__PURE__ */ new Map([
        ["context", this.context],
        [
          "functions",
          {
            save: this.saveChangedSettings.bind(this),
            apply: this.applyChangedSettings.bind(this),
            resetDefaultTabs: this.resetDefaultTabs.bind(this)
          }
        ],
        ["appId", this.appId]
      ])
    });
  }
  mapTabSelectionFields(registeredTabs, selectedTabIds) {
    const available = registeredTabs.filter((t2) => !selectedTabIds.includes(t2.id)).map((t2) => ({
      id: t2.id,
      label: FoundryAdapter.localize(TabManager.getTabTitle(t2))
    })), selected = registeredTabs.filter((t2) => selectedTabIds.includes(t2.id)).sort((a2, b2) => selectedTabIds.indexOf(a2.id) - selectedTabIds.indexOf(b2.id)).map((t2) => ({
      id: t2.id,
      label: FoundryAdapter.localize(TabManager.getTabTitle(t2))
    }));
    return { available, selected };
  }
  validate(context) {
    let valid = !0;
    return (context.defaultCharacterTabs.selected.length === 0 || context.defaultNpcTabs.selected.length === 0 || context.defaultVehicleTabs.selected.length === 0) && (valid = !1, error(FoundryAdapter.localize("TIDY5E.Settings.DefaultSheetTabs.AtLeastOneTabRequiredErrorMessage"), !0)), context.exhaustionConfig.type === "specific" && context.exhaustionConfig.levels < 1 && (valid = !1, error(FoundryAdapter.localize("TIDY5E.WorldSettings.Exhaustion.AtLeastOneLevelRequiredErrorMessage"), !0)), context.vehicleExhaustionConfig.type === "specific" && context.vehicleExhaustionConfig.levels < 1 && (valid = !1, error(FoundryAdapter.localize("TIDY5E.WorldSettings.VehicleExhaustion.AtLeastOneLevelRequiredErrorMessage"), !0)), valid;
  }
  async applyChangedSettings() {
    if (!this.context || !this.validate(this.context))
      return !1;
    this.context.exhaustionConfig.type === "specific" && (this.context.exhaustionConfig.hints = this.context.exhaustionConfig.hints.slice(0, this.context.exhaustionConfig.levels + 1)), this.context.vehicleExhaustionConfig.type === "specific" && (this.context.vehicleExhaustionConfig.hints = this.context.vehicleExhaustionConfig.hints.slice(0, this.context.vehicleExhaustionConfig.levels + 1));
    const newSettings = {
      ...this.context.settings,
      defaultCharacterSheetTabs: this.context.defaultCharacterTabs.selected.map((t2) => t2.id),
      defaultNpcSheetTabs: this.context.defaultNpcTabs.selected.map((t2) => t2.id),
      defaultVehicleSheetTabs: this.context.defaultVehicleTabs.selected.map((t2) => t2.id),
      exhaustionConfig: this.context.exhaustionConfig,
      vehicleExhaustionConfig: this.context.vehicleExhaustionConfig
    }, currentSettings = getCurrentSettings(), keys = Object.keys(newSettings);
    for (let key of keys) {
      const currentValue = currentSettings[key], newValue = newSettings[key];
      currentValue !== newValue && (await FoundryAdapter.setTidySetting(key, newValue), debug(`Updated ${key} to ${newValue}`));
    }
    return !0;
  }
  async saveChangedSettings() {
    await this.applyChangedSettings() && this.close();
  }
  resetDefaultTabs(actorType) {
    if (this.context)
      switch (actorType) {
        case CONSTANTS.SHEET_TYPE_CHARACTER:
          this.context.defaultCharacterTabs = this.mapTabSelectionFields(CharacterSheetRuntime.getAllRegisteredTabs(), [
            ...SettingsProvider.settings.defaultCharacterSheetTabs.options.default
          ]);
          break;
        case CONSTANTS.SHEET_TYPE_NPC:
          this.context.defaultNpcTabs = this.mapTabSelectionFields(NpcSheetRuntime.getAllRegisteredTabs(), [
            ...SettingsProvider.settings.defaultNpcSheetTabs.options.default
          ]);
          break;
        case CONSTANTS.SHEET_TYPE_VEHICLE:
          this.context.defaultVehicleTabs = this.mapTabSelectionFields(VehicleSheetRuntime.getAllRegisteredTabs(), [
            ...SettingsProvider.settings.defaultVehicleSheetTabs.options.default
          ]);
          break;
      }
  }
}
var on_change$3 = /* @__PURE__ */ __name((ev, setTheme) => setTheme(ev.currentTarget.value), "on_change$3"), root_2$x = /* @__PURE__ */ template("<option> </option>"), root_1$1j = /* @__PURE__ */ template('<label class="theme-label svelte-r5xyb9"> </label> <select class="svelte-r5xyb9"></select>', 1);
function ThemeSelectorButtonMenuCommand($$anchor, $$props) {
  push($$props, !1);
  const themes = Object.entries(getCoreThemes(!0)), idSuffix = Date.now().toString();
  function setTheme(value) {
    FoundryAdapter.setTidySetting("colorScheme", value);
  }
  __name(setTheme, "setTheme");
  const localize = FoundryAdapter.localize;
  init(), ButtonMenuItem($$anchor, {
    cssClass: "flex-column extra-small-gap",
    children: /* @__PURE__ */ __name(($$anchor2, $$slotProps) => {
      var fragment_1 = root_1$1j(), label = first_child(fragment_1);
      set_attribute(label, "for", `sheet-menu-${idSuffix ?? ""}`);
      var text2 = child(label);
      template_effect(() => set_text(text2, localize("TIDY5E.SheetMenu.themeLabel")));
      var select = sibling(label, 2);
      set_attribute(select, "id", `sheet-menu-${idSuffix ?? ""}`), select.__change = [on_change$3, setTheme], init_select(select, () => settings.value.colorScheme);
      var select_value;
      each(select, 5, () => themes, index, ($$anchor3, $$item) => {
        let key = /* @__PURE__ */ __name(() => get($$item)[0], "key"), value = /* @__PURE__ */ __name(() => get($$item)[1], "value");
        var option = root_2$x(), option_value = {}, text_1 = child(option);
        template_effect(() => set_text(text_1, localize(value()))), template_effect(() => {
          option_value !== (option_value = key()) && (option.value = (option.__value = key()) == null ? "" : key());
        }), append($$anchor3, option);
      }), template_effect(() => {
        select_value !== (select_value = settings.value.colorScheme) && (select.value = (select.__value = settings.value.colorScheme) == null ? "" : settings.value.colorScheme, select_option(select, settings.value.colorScheme));
      }), append($$anchor2, fragment_1);
    }, "children"),
    $$slots: { default: !0 }
  }), pop();
}
__name(ThemeSelectorButtonMenuCommand, "ThemeSelectorButtonMenuCommand");
delegate(["change"]);
var root_1$1i = /* @__PURE__ */ template("<!> <!> <!> <!> <!> <!>", 1), root$24 = /* @__PURE__ */ template('<!> <input class="theme-import-input svelte-agyjx4" type="file">', 1);
function ThemeSettingSheetMenu($$anchor, $$props) {
  push($$props, !0);
  let functions = getContext(CONSTANTS.SVELTE_CONTEXT.FUNCTIONS), fileImportInput;
  const localize = FoundryAdapter.localize;
  function onFileChanged(ev) {
    const file = ev.currentTarget.files?.[0];
    ev.currentTarget.value = "", file && $$props.onSelectFile?.(file);
  }
  __name(onFileChanged, "onFileChanged");
  var fragment = root$24(), node = first_child(fragment), buttonText = /* @__PURE__ */ derived(() => localize("TIDY5E.ThemeSettings.Sheet.menuLabel"));
  ButtonMenu(node, {
    iconClass: {
      opened: "fas fa-caret-up",
      closed: "fas fa-caret-down"
    },
    position: "bottom",
    anchor: "right",
    openerPadding: "0.125rem 0.5rem",
    get buttonText() {
      return get(buttonText);
    },
    children: /* @__PURE__ */ __name(($$anchor2, $$slotProps) => {
      var fragment_1 = root_1$1i(), node_1 = first_child(fragment_1);
      ThemeSelectorButtonMenuCommand(node_1, {});
      var node_2 = sibling(node_1, 2);
      ButtonMenuDivider(node_2);
      var node_3 = sibling(node_2, 2);
      ButtonMenuCommand(node_3, {
        onMenuClick: /* @__PURE__ */ __name(() => fileImportInput.click(), "onMenuClick"),
        iconClass: "fas fa-file-import",
        children: /* @__PURE__ */ __name(($$anchor3, $$slotProps2) => {
          var text$1 = text();
          template_effect(() => set_text(text$1, localize("TIDY5E.ThemeSettings.Sheet.import"))), append($$anchor3, text$1);
        }, "children"),
        $$slots: { default: !0 }
      });
      var node_4 = sibling(node_3, 2);
      ButtonMenuCommand(node_4, {
        onMenuClick: /* @__PURE__ */ __name(() => functions.exportTheme($$props.settings), "onMenuClick"),
        iconClass: "fas fa-file-export",
        children: /* @__PURE__ */ __name(($$anchor3, $$slotProps2) => {
          var text_1 = text();
          template_effect(() => set_text(text_1, localize("TIDY5E.ThemeSettings.Sheet.export"))), append($$anchor3, text_1);
        }, "children"),
        $$slots: { default: !0 }
      });
      var node_5 = sibling(node_4, 2);
      ButtonMenuCommand(node_5, {
        onMenuClick: /* @__PURE__ */ __name(() => functions.useExistingThemeColors(CONSTANTS.THEME_ID_DEFAULT_LIGHT), "onMenuClick"),
        iconClass: "fas fa-sun",
        children: /* @__PURE__ */ __name(($$anchor3, $$slotProps2) => {
          var text_2 = text();
          template_effect(() => set_text(text_2, localize("TIDY5E.ThemeSettings.Sheet.useDefaultLightColors"))), append($$anchor3, text_2);
        }, "children"),
        $$slots: { default: !0 }
      });
      var node_6 = sibling(node_5, 2);
      ButtonMenuCommand(node_6, {
        onMenuClick: /* @__PURE__ */ __name(() => functions.useExistingThemeColors(CONSTANTS.THEME_ID_DEFAULT_DARK), "onMenuClick"),
        iconClass: "fas fa-moon",
        children: /* @__PURE__ */ __name(($$anchor3, $$slotProps2) => {
          var text_3 = text();
          template_effect(() => set_text(text_3, localize("TIDY5E.ThemeSettings.Sheet.useDefaultDarkColors"))), append($$anchor3, text_3);
        }, "children"),
        $$slots: { default: !0 }
      }), append($$anchor2, fragment_1);
    }, "children"),
    $$slots: { default: !0 }
  });
  var input = sibling(node, 2);
  input.__change = onFileChanged, bind_this(input, ($$value) => fileImportInput = $$value, () => fileImportInput), template_effect(() => set_attribute(input, "accept", CONSTANTS.THEME_EXTENSION_WITH_DOT)), append($$anchor, fragment), pop();
}
__name(ThemeSettingSheetMenu, "ThemeSettingSheetMenu");
delegate(["change"]);
var on_change$2 = /* @__PURE__ */ __name((ev, onColorSelected, $$props) => onColorSelected($$props.colorToConfigure, ev.currentTarget.value), "on_change$2"), on_click$P = /* @__PURE__ */ __name((_, activateEyeDropper, $$props) => activateEyeDropper($$props.colorToConfigure), "on_click$P"), root_1$1h = /* @__PURE__ */ template('<button type="button" class="eye-dropper svelte-1fxcvmi"><i class="fas fa-eye-dropper"></i></button>'), root$23 = /* @__PURE__ */ template('<article class="svelte-1fxcvmi"><div class="description"><label class="svelte-1fxcvmi"> </label></div> <div class="theme-settings-group flex-row align-items-center extra-small-gap svelte-1fxcvmi"><label class="color-picker-preview svelte-1fxcvmi"></label> <input type="text" class="theme-color-textbox coloris svelte-1fxcvmi"> <!></div></article>');
function ThemeSettingColorArticle($$anchor, $$props) {
  push($$props, !0);
  let settings2 = prop($$props, "settings", 7), appId = getContext(CONSTANTS.SVELTE_CONTEXT.APP_ID);
  const eyeDropperEnabled = "EyeDropper" in window;
  function activateEyeDropper(colorToConfigure) {
    if ("EyeDropper" in window) {
      const EyeDropper = window.EyeDropper;
      new EyeDropper().open().then(({ sRGBHex }) => {
        onColorSelected(colorToConfigure, sRGBHex);
      });
    }
  }
  __name(activateEyeDropper, "activateEyeDropper");
  function onColorSelected(colorToConfigure, value) {
    settingValueToHexaString(value) && (trySetRootCssVariable(colorToConfigure.cssVariable, value, settings2().colorPickerEnabled), settings2()[colorToConfigure.key] = value);
  }
  __name(onColorSelected, "onColorSelected");
  let article;
  onMount(() => {
    article.querySelectorAll("button").forEach((button) => {
      button.type === "submit" && (button.type = "button");
    });
  });
  const localize = FoundryAdapter.localize;
  var article_1 = root$23(), div = child(article_1), label = child(div), text2 = child(label);
  template_effect(() => set_text(text2, localize($$props.colorToConfigure.name)));
  var div_1 = sibling(div, 2), label_1 = child(div_1), input = sibling(label_1, 2);
  input.__change = [on_change$2, onColorSelected, $$props];
  var node = sibling(input, 2);
  {
    var consequent = /* @__PURE__ */ __name(($$anchor2) => {
      var button_1 = root_1$1h();
      button_1.__click = [on_click$P, activateEyeDropper, $$props], append($$anchor2, button_1);
    }, "consequent");
    if_block(node, ($$render) => {
      eyeDropperEnabled && $$render(consequent);
    });
  }
  bind_this(article_1, ($$value) => article = $$value, () => article), template_effect(() => {
    set_attribute(label, "for", `${$$props.colorToConfigure.key ?? ""}-${appId ?? ""}`), set_attribute(label_1, "for", `${$$props.colorToConfigure.key ?? ""}-${appId ?? ""}`), set_attribute(label_1, "style", `--bg-color: ${settings2()[$$props.colorToConfigure.key] ?? ""};`), set_attribute(input, "id", `${$$props.colorToConfigure.key ?? ""}-${appId ?? ""}`), set_value(input, settings2()[$$props.colorToConfigure.key]);
  }), append($$anchor, article_1), pop();
}
__name(ThemeSettingColorArticle, "ThemeSettingColorArticle");
delegate(["change", "click"]);
function downloadTextFile(filename, text2) {
  const a2 = document.createElement("a"), blob = new Blob([text2], { type: "text/json;charset=utf-8;" }), url = URL.createObjectURL(blob);
  a2.setAttribute("href", url), a2.setAttribute("download", filename), a2.click();
}
__name(downloadTextFile, "downloadTextFile");
function getSingleFileFromDropEvent(ev) {
  ev.preventDefault();
  let file = null;
  return ev.dataTransfer?.items ? file = ev.dataTransfer.items[0]?.getAsFile() : ev.dataTransfer?.files && (file = ev.dataTransfer.files[0]), file;
}
__name(getSingleFileFromDropEvent, "getSingleFileFromDropEvent");
function readFileAsText(file) {
  return new Promise((resolve, reject) => {
    const fileReader = new FileReader();
    fileReader.addEventListener("load", (event2) => {
      try {
        const result = event2.target?.result?.toString();
        resolve(result ?? "");
      } catch (e2) {
        reject(e2);
      }
    }), fileReader.readAsText(file);
  });
}
__name(readFileAsText, "readFileAsText");
var root$22 = /* @__PURE__ */ template('<section class="theme-settings-wrapper svelte-1zri33" aria-label="dropzone"><div class="theme-settings-form scroll-container svelte-1zri33"><h2 class="header flex-row justify-content-space-between svelte-1zri33"> <!></h2> <div><label class="flex-row align-items-center extra-small-gap"><input type="checkbox"> </label></div> <p class="explanation svelte-1zri33"> </p> <p class="explanation drop-hint svelte-1zri33"> </p> <div class="color-pickers"></div></div> <div class="button-bar svelte-1zri33"><button type="submit" class="save-changes-btn svelte-1zri33"><i class="fas fa-save"></i> </button></div></section>');
function ThemeSettingsSheet($$anchor, $$props) {
  push($$props, !0);
  let settings2 = prop($$props, "settings", 7);
  user_effect(() => {
    settings2().colorPickerEnabled ? $$props.themeableColors.forEach((color) => trySetRootCssVariable(color.cssVariable, settings2()[color.key]?.toString(), settings2().colorPickerEnabled)) : (clearTidy5eRootCssVariables(), applyCurrentTheme(!1));
  });
  let appId = getContext(CONSTANTS.SVELTE_CONTEXT.APP_ID);
  const localize = FoundryAdapter.localize;
  async function processImportFile(file) {
    try {
      let result = await readFileAsText(file);
      result = result.replaceAll('"--t5ek-', '"--t5e-');
      const theme = JSON.parse(result);
      if (!validateImportFile(theme))
        throw new Error(`Theme file ${file.name} is in an invalid format.`);
      const updateDelta = extractSettingsUpdateDeltaFromTheme(theme, $$props.themeableColors);
      Object.assign(settings2(), updateDelta), ui.notifications.info(localize("TIDY5E.ThemeSettings.Sheet.importSuccess"));
    } catch (e2) {
      ui.notifications.error(localize("TIDY5E.ThemeSettings.Sheet.importError")), error("An error occurred while attempting to import a theme file. See the devtools console for more details.", !0, e2);
    }
  }
  __name(processImportFile, "processImportFile");
  function onDrop(ev) {
    let file = getSingleFileFromDropEvent(ev);
    file && processImportFile(file);
  }
  __name(onDrop, "onDrop"), onDestroy(() => {
    clearTidy5eRootCssVariables();
  });
  var section = root$22(), div = child(section), h2 = child(div), text2 = child(h2);
  template_effect(() => set_text(text2, `${localize("TIDY5E.ThemeSettings.Sheet.header") ?? ""} `));
  var node = sibling(text2);
  ThemeSettingSheetMenu(node, {
    get settings() {
      return settings2();
    },
    onSelectFile: processImportFile
  });
  var div_1 = sibling(h2, 2), label = child(div_1);
  set_attribute(label, "for", `colorPickerEnabled-${appId ?? ""}`);
  var input = child(label);
  set_attribute(input, "id", `colorPickerEnabled-${appId ?? ""}`);
  var text_1 = sibling(input);
  template_effect(() => set_text(text_1, ` ${localize("TIDY5E.Settings.ColorPickerEnabled.name") ?? ""}`));
  var p2 = sibling(div_1, 2), text_2 = child(p2);
  template_effect(() => set_text(text_2, localize("TIDY5E.ThemeSettings.Sheet.explanation")));
  var p_1 = sibling(p2, 2), text_3 = child(p_1);
  template_effect(() => set_text(text_3, localize("TIDY5E.ThemeSettings.Sheet.importDropHint")));
  var div_2 = sibling(p_1, 2);
  each(div_2, 21, () => $$props.themeableColors, index, ($$anchor2, colorToConfigure) => {
    ThemeSettingColorArticle($$anchor2, {
      get settings() {
        return settings2();
      },
      get colorToConfigure() {
        return get(colorToConfigure);
      }
    });
  });
  var div_3 = sibling(div, 2), button = child(div_3), text_4 = sibling(child(button));
  template_effect(() => set_text(text_4, ` ${localize("TIDY5E.SaveChanges") ?? ""}`)), event("drop", section, onDrop), bind_checked(input, () => settings2().colorPickerEnabled, ($$value) => settings2().colorPickerEnabled = $$value), append($$anchor, section), pop();
}
__name(ThemeSettingsSheet, "ThemeSettingsSheet");
class ThemeSettingsFormApplication extends SvelteFormApplicationBase {
  static {
    __name(this, "ThemeSettingsFormApplication");
  }
  themeableColors = getThemeableColors();
  #settings = state(proxy(getCurrentSettings()));
  get settings() {
    return get(this.#settings);
  }
  set settings(value) {
    set(this.#settings, proxy(value));
  }
  static get defaultOptions() {
    return {
      ...super.defaultOptions,
      height: 750,
      width: 400,
      submitOnClose: !1,
      minimizable: !0,
      id: "tidy-5e-sheets-theme-settings",
      popOut: !0,
      resizable: !0,
      closeOnSubmit: !1
    };
  }
  get title() {
    return FoundryAdapter.localize("TIDY5E.ThemeSettings.Sheet.title", { userName: game.user.name });
  }
  createComponent(node) {
    return mount(ThemeSettingsSheet, {
      target: node,
      props: {
        themeableColors: this.themeableColors,
        settings: this.settings
      },
      context: /* @__PURE__ */ new Map([
        [
          "functions",
          {
            save: this.saveChangedSettings.bind(this),
            useExistingThemeColors: this.useExistingThemeColors.bind(this),
            exportTheme: this.exportTheme.bind(this)
          }
        ],
        ["appId", this.appId]
      ])
    });
  }
  refreshContext() {
    Object.assign(this.settings, getCurrentSettings());
  }
  async saveChangedSettings(newSettings) {
    for (let color of this.themeableColors)
      await FoundryAdapter.setTidySetting(color.key, newSettings[color.key]);
    await FoundryAdapter.setTidySetting("colorPickerEnabled", newSettings.colorPickerEnabled), applyCurrentTheme(), await this.close();
  }
  useExistingThemeColors(themeId) {
    const targetTheme = getThemeOrDefault(themeId), colorsToUpdate = this.themeableColors.reduce(
      (prev, color) => (prev[color.key] = targetTheme.variables[color.cssVariable], prev),
      {}
    );
    Object.assign(this.settings, colorsToUpdate);
  }
  exportTheme(settings2) {
    const exportData = { version: 1, variables: this.themeableColors.reduce(
      (prev, curr) => (prev[curr.cssVariable] = settings2[curr.key]?.toString(), prev),
      {}
    ) };
    downloadTextFile("theme" + CONSTANTS.THEME_EXTENSION_WITH_DOT, JSON.stringify(exportData, null, " "));
  }
  async _updateObject() {
    await this.saveChangedSettings(this.settings);
  }
}
async function migrateNpcDeathFlagsToSystem({
  npc,
  overwrite,
  clearDeathFlagData
}) {
  const tidyDeath = TidyFlags.tryGetFlag(npc, "death");
  if (!tidyDeath)
    return;
  const systemDeath = npc.system.attributes?.death;
  if (!systemDeath)
    return;
  const update2 = {};
  (systemDeath?.success === 0 || overwrite) && (update2["system.attributes.death.success"] = tidyDeath.success), (systemDeath?.failure === 0 || overwrite) && (update2["system.attributes.death.failure"] = tidyDeath.failure), Object.keys(systemDeath).length && await npc.update(update2), clearDeathFlagData && TidyFlags.unsetFlag(npc, "death");
}
__name(migrateNpcDeathFlagsToSystem, "migrateNpcDeathFlagsToSystem");
var on_click$O = /* @__PURE__ */ __name((_, toggleAll) => toggleAll(), "on_click$O"), root_3$x = /* @__PURE__ */ template('<input type="checkbox" class="svelte-16v6ss3">'), root_2$w = /* @__PURE__ */ template("<!> <!>", 1), root_9$f = /* @__PURE__ */ template('<input type="checkbox" class="svelte-16v6ss3">'), on_click_1$m = /* @__PURE__ */ __name((__1, field, selectable) => get(field).onClick?.(get(selectable).document), "on_click_1$m"), root_15$3 = /* @__PURE__ */ template('<button type="button" class="inline-transparent-button"> </button>'), root_16$5 = /* @__PURE__ */ template("<div> </div>"), root_8$h = /* @__PURE__ */ template("<!> <!>", 1), on_click_2$a = /* @__PURE__ */ __name((__2, onMigrateClicked) => onMigrateClicked(), "on_click_2$a"), root$21 = /* @__PURE__ */ template('<section class="svelte-16v6ss3"><div role="presentation" class="search-container svelte-16v6ss3"><!></div> <div role="presentation" class="scroll-container svelte-16v6ss3"><!></div> <footer class="svelte-16v6ss3"><p> </p> <button> </button></footer></section>');
function MigrationSelection($$anchor, $$props) {
  push($$props, !0);
  let searchCriteria = state(""), visibleSelectablesIdSubset = /* @__PURE__ */ derived(() => new Set($$props.params.selectables.filter((s2) => get(searchCriteria).trim() === "" || s2.document.name?.toLowerCase().includes(get(searchCriteria).toLowerCase())).map((d2) => d2.document.id))), gridTemplateColumns = /* @__PURE__ */ derived(() => {
    let result = "/* Select */ 2.5rem";
    return $$props.params.columns.forEach((c2) => {
      const measurement = c2.cellWidth === "primary" ? "1fr" : c2.cellWidth;
      result += ` /* ${c2.name} */ ${measurement}`;
    }), result;
  }), totalSelected = /* @__PURE__ */ derived(() => $$props.params.selectables.filter((t2) => t2.selected).length), allSelected = /* @__PURE__ */ derived(() => get(totalSelected) >= $$props.params.selectables.length);
  function onMigrateClicked() {
    const selectedTargets = $$props.params.selectables.filter((t2) => t2.selected).map((t2) => t2.document);
    $$props.params.onConfirm(selectedTargets);
  }
  __name(onMigrateClicked, "onMigrateClicked");
  function toggleAll() {
    const targetState = !get(allSelected);
    $$props.params.selectables.forEach((o2) => o2.selected = targetState);
  }
  __name(toggleAll, "toggleAll");
  const localize = FoundryAdapter.localize;
  var section = root$21(), div = child(section), node = child(div);
  Search$1(node, {
    get value() {
      return get(searchCriteria);
    },
    set value($$value) {
      set(searchCriteria, proxy($$value));
    }
  });
  var div_1 = sibling(div, 2), node_1 = child(div_1);
  TidyTable(node_1, {
    key: "bulk-selection",
    toggleable: !1,
    get gridTemplateColumns() {
      return get(gridTemplateColumns);
    },
    header: /* @__PURE__ */ __name(($$anchor2) => {
      TidyTableHeaderRow($$anchor2, {
        children: /* @__PURE__ */ __name(($$anchor3, $$slotProps) => {
          var fragment_1 = root_2$w(), node_2 = first_child(fragment_1);
          TidyTableHeaderCell(node_2, {
            children: /* @__PURE__ */ __name(($$anchor4, $$slotProps2) => {
              var input = root_3$x();
              input.__click = [on_click$O, toggleAll], template_effect(() => set_attribute(input, "title", localize("TIDY5E.Settings.Migrations.Selection.SelectAllNoneTooltip"))), template_effect(() => set_checked(input, get(allSelected))), append($$anchor4, input);
            }, "children"),
            $$slots: { default: !0 }
          });
          var node_3 = sibling(node_2, 2);
          each(node_3, 17, () => $$props.params.columns, index, ($$anchor4, column) => {
            var primary = /* @__PURE__ */ derived(() => get(column)?.cellWidth === "primary");
            TidyTableHeaderCell($$anchor4, {
              get primary() {
                return get(primary);
              },
              children: /* @__PURE__ */ __name(($$anchor5, $$slotProps2) => {
                var text_1 = text();
                template_effect(() => set_text(text_1, get(column).name ?? "")), append($$anchor5, text_1);
              }, "children"),
              $$slots: { default: !0 }
            });
          }), append($$anchor3, fragment_1);
        }, "children"),
        $$slots: { default: !0 }
      });
    }, "header"),
    body: /* @__PURE__ */ __name(($$anchor2) => {
      var fragment_4 = comment(), node_4 = first_child(fragment_4);
      each(node_4, 17, () => $$props.params.selectables, index, ($$anchor3, selectable, $$index_2) => {
        var hidden = /* @__PURE__ */ derived(() => !get(visibleSelectablesIdSubset).has(get(selectable).document.id));
        TidyTableRow($$anchor3, {
          get hidden() {
            return get(hidden);
          },
          children: /* @__PURE__ */ __name(($$anchor4, $$slotProps) => {
            var fragment_6 = root_8$h(), node_5 = first_child(fragment_6);
            TidyTableCell(node_5, {
              children: /* @__PURE__ */ __name(($$anchor5, $$slotProps2) => {
                var input_1 = root_9$f();
                bind_checked(input_1, () => get(selectable).selected, ($$value) => get(selectable).selected = $$value), append($$anchor5, input_1);
              }, "children"),
              $$slots: { default: !0 }
            });
            var node_6 = sibling(node_5, 2);
            each(node_6, 17, () => $$props.params.columns, index, ($$anchor5, column) => {
              const field = /* @__PURE__ */ derived(() => get(column).field);
              var primary_1 = /* @__PURE__ */ derived(() => get(column)?.cellWidth === "primary");
              TidyTableCell($$anchor5, {
                get primary() {
                  return get(primary_1);
                },
                class: "flex-row small-gap",
                children: /* @__PURE__ */ __name(($$anchor6, $$slotProps2) => {
                  var fragment_8 = comment(), node_7 = first_child(fragment_8);
                  {
                    var consequent = /* @__PURE__ */ __name(($$anchor7) => {
                      var text_2 = text();
                      template_effect(() => set_text(text_2, get(field).getText(get(selectable).document) ?? "")), append($$anchor7, text_2);
                    }, "consequent"), alternate_1 = /* @__PURE__ */ __name(($$anchor7) => {
                      var fragment_10 = comment(), node_8 = first_child(fragment_10);
                      {
                        var consequent_2 = /* @__PURE__ */ __name(($$anchor8) => {
                          var fragment_11 = comment();
                          const text2 = /* @__PURE__ */ derived(() => FoundryAdapter.getProperty(get(selectable).document, get(field).propPath) ?? "");
                          var node_9 = first_child(fragment_11);
                          {
                            var consequent_1 = /* @__PURE__ */ __name(($$anchor9) => {
                              var button = root_15$3();
                              button.__click = [on_click_1$m, field, selectable];
                              var text_3 = child(button);
                              template_effect(() => set_text(text_3, get(text2))), append($$anchor9, button);
                            }, "consequent_1"), alternate = /* @__PURE__ */ __name(($$anchor9) => {
                              var div_2 = root_16$5(), text_4 = child(div_2);
                              template_effect(() => set_text(text_4, get(text2))), append($$anchor9, div_2);
                            }, "alternate");
                            if_block(node_9, ($$render) => {
                              get(field).onClick ? $$render(consequent_1) : $$render(alternate, !1);
                            });
                          }
                          append($$anchor8, fragment_11);
                        }, "consequent_2");
                        if_block(
                          node_8,
                          ($$render) => {
                            get(column).field.type === "simple" && $$render(consequent_2);
                          },
                          !0
                        );
                      }
                      append($$anchor7, fragment_10);
                    }, "alternate_1");
                    if_block(node_7, ($$render) => {
                      get(field).type === "contextual" ? $$render(consequent) : $$render(alternate_1, !1);
                    });
                  }
                  append($$anchor6, fragment_8);
                }, "children"),
                $$slots: { default: !0 }
              });
            }), append($$anchor4, fragment_6);
          }, "children"),
          $$slots: { default: !0 }
        });
      }), append($$anchor2, fragment_4);
    }, "body"),
    $$slots: { header: !0, body: !0 }
  });
  var footer = sibling(div_1, 2), p2 = child(footer), text_5 = child(p2);
  template_effect(() => set_text(text_5, localize("TIDY5E.Settings.Migrations.Selection.TotalSelectedLabel", { total: get(totalSelected) })));
  var button_1 = sibling(p2, 2);
  button_1.__click = [on_click_2$a, onMigrateClicked];
  var text_6 = child(button_1);
  template_effect(() => set_text(text_6, localize("TIDY5E.ButtonConfirm.Text"))), append($$anchor, section), pop();
}
__name(MigrationSelection, "MigrationSelection");
delegate(["click"]);
class MigrationSelectionApplication extends SvelteFormApplicationBase {
  static {
    __name(this, "MigrationSelectionApplication");
  }
  #_params = state();
  get _params() {
    return get(this.#_params);
  }
  set _params(value) {
    set(this.#_params, proxy(value));
  }
  _onClose;
  _title;
  constructor(params, onClose, options) {
    super({}, FoundryAdapter.mergeObject(MigrationSelectionApplication.defaultOptions, options)), this._params = {
      ...params,
      selectables: params.documents.map((d2) => ({ document: d2, selected: !0 }))
    }, this._title = params.title, this._onClose = onClose;
  }
  static get defaultOptions() {
    return FoundryAdapter.mergeObject(super.defaultOptions, {
      width: 650,
      height: 500,
      id: "tidy-5e-sheets-migration-selection",
      popOut: !0,
      closeOnSubmit: !0
    });
  }
  get title() {
    return this._title ?? FoundryAdapter.localize("TIDY5E.Settings.Migrations.dialogTitle");
  }
  createComponent(node) {
    return mount(MigrationSelection, {
      target: node,
      props: { params: this._params }
    });
  }
  close(...args) {
    this._onClose?.(), super.close(...args);
  }
}
var on_click$N = /* @__PURE__ */ __name((ev, migrate) => migrate(), "on_click$N"), root$20 = /* @__PURE__ */ template('<section class="svelte-f3txbi"><h2> </h2> <ul><li> </li></ul> <p> </p> <h3> </h3> <div class="options grid-auto-columns svelte-f3txbi"><label class="green-checkbox"><input type="checkbox"> </label> <label class="green-checkbox"><input type="checkbox"> </label></div> <button type="button" class="svelte-f3txbi"> </button></section>');
function NpcDeathSavesMigration($$anchor, $$props) {
  push($$props, !0);
  let migrating = state(!1), overwrite = state(!1), deleteFlags = state(!1);
  async function migrate() {
    try {
      const actorsToMigrate = Array.from(game.actors).filter((a2) => a2.type === CONSTANTS.SHEET_TYPE_NPC && a2.isOwner).map((a2) => ({ actor: a2, unlinked: !1 })), tokenActors = Array.from(canvas?.scene?.tokens ?? []).map((t2) => ({ actor: t2.actor, unlinked: !0 })).filter((a2) => a2.actor && !a2.actor.prototypeToken?.actorLink && a2.actor.isOwner);
      actorsToMigrate.push(...tokenActors), new MigrationSelectionApplication(
        {
          onConfirm: /* @__PURE__ */ __name(async (selected) => {
            set(migrating, !0), ui.notifications.info(localize("TIDY5E.Settings.Migrations.migrationBeginningMessage")), migrateActors(selected.map((s2) => s2.actor));
          }, "onConfirm"),
          columns: [
            {
              cellWidth: "primary",
              field: {
                type: "simple",
                propPath: "actor.name",
                onClick: /* @__PURE__ */ __name((target) => target.actor.sheet.render(!0), "onClick")
              },
              name: localize("TIDY5E.Settings.Migrations.Selection.ToMigrate")
            },
            {
              cellWidth: "5rem",
              field: {
                type: "simple",
                propPath: `actor.flags.${CONSTANTS.MODULE_ID}.death.success`
              },
              name: localize("DND5E.DeathSaveSuccesses")
            },
            {
              cellWidth: "5rem",
              field: {
                type: "simple",
                propPath: `actor.flags.${CONSTANTS.MODULE_ID}.death.failure`
              },
              name: localize("DND5E.DeathSaveFailures")
            },
            {
              cellWidth: "10rem",
              name: "",
              field: {
                type: "contextual",
                getText: /* @__PURE__ */ __name(({ unlinked }) => unlinked ? FoundryAdapter.localize("TIDY5E.TokenUnlinked") : FoundryAdapter.localize("DOCUMENT.Actor"), "getText")
              }
            }
          ],
          documents: actorsToMigrate,
          title: FoundryAdapter.localize("TIDY5E.Settings.Migrations.NpcDeathSaves.selectionDialogTitle")
        },
        () => {
          set(migrating, !1);
        }
      ).render(!0);
    } catch (e2) {
      error("An error occurred while preparing a bulk migration", !1, e2);
    }
  }
  __name(migrate, "migrate");
  async function migrateActors(actors) {
    try {
      for (let actorToMigrate of actors)
        await migrateActor(actorToMigrate);
    } finally {
      set(migrating, !1), ui.notifications.info(FoundryAdapter.localize("TIDY5E.Settings.Migrations.migrationCompleteMessage")), resetOptions();
    }
  }
  __name(migrateActors, "migrateActors");
  function resetOptions() {
    set(overwrite, !1), set(deleteFlags, !1);
  }
  __name(resetOptions, "resetOptions");
  async function migrateActor(actor) {
    try {
      debug(`Migrating actor ${actor?.name}...`), migrateNpcDeathFlagsToSystem({
        npc: actor,
        overwrite: get(overwrite),
        clearDeathFlagData: get(deleteFlags)
      }), debug(`Actor ${actor?.name} migration successful!`);
    } catch (e2) {
      error(`An error occurred while migrating NPC death save data for ${actor?.name}`, !1, e2), ui.notifications.error(FoundryAdapter.localize("TIDY5E.Settings.Migrations.migrationErrorMessage"), { permanent: !0 });
    }
  }
  __name(migrateActor, "migrateActor");
  const localize = FoundryAdapter.localize;
  var section = root$20(), h2 = child(section), text2 = child(h2);
  template_effect(() => set_text(text2, localize("TIDY5E.Settings.Migrations.NpcDeathSaves.sectionTitle")));
  var ul = sibling(h2, 2), li = child(ul), text_1 = child(li);
  template_effect(() => set_text(text_1, localize("DND5E.DeathSave")));
  var p2 = sibling(ul, 2), text_2 = child(p2);
  template_effect(() => set_text(text_2, localize("TIDY5E.Settings.Migrations.UnlinkedExplanation")));
  var h3 = sibling(p2, 2), text_3 = child(h3);
  template_effect(() => set_text(text_3, localize("TIDY5E.Settings.Migrations.OptionsHeader")));
  var div = sibling(h3, 2), label = child(div);
  template_effect(() => set_attribute(label, "data-tooltip", localize("TIDY5E.Settings.Migrations.OptionOverwrite.Tooltip")));
  var input = child(label), text_4 = sibling(input);
  template_effect(() => set_text(text_4, ` ${localize("TIDY5E.Settings.Migrations.OptionOverwrite.Text") ?? ""}`));
  var label_1 = sibling(label, 2);
  template_effect(() => set_attribute(label_1, "data-tooltip", localize("TIDY5E.Settings.Migrations.OptionDeleteFlags.Tooltip")));
  var input_1 = child(label_1), text_5 = sibling(input_1);
  template_effect(() => set_text(text_5, ` ${localize("TIDY5E.Settings.Migrations.OptionDeleteFlags.Text") ?? ""}`));
  var button = sibling(div, 2);
  button.__click = [on_click$N, migrate];
  var text_6 = child(button);
  template_effect(() => set_text(text_6, localize("TIDY5E.Settings.Migrations.ButtonMigration.Text"))), template_effect(() => {
    input.disabled = get(migrating), input_1.disabled = get(migrating), button.disabled = get(migrating);
  }), bind_checked(input, () => get(overwrite), ($$value) => set(overwrite, $$value)), bind_checked(input_1, () => get(deleteFlags), ($$value) => set(deleteFlags, $$value)), append($$anchor, section), pop();
}
__name(NpcDeathSavesMigration, "NpcDeathSavesMigration");
delegate(["click"]);
const mappings = [
  {
    system: "system.details.gender",
    tidy: "flags.tidy5e-sheet.gender",
    tidyDelete: "flags.tidy5e-sheet.-=gender"
  },
  {
    system: "system.details.eyes",
    tidy: "flags.tidy5e-sheet.eyes",
    tidyDelete: "flags.tidy5e-sheet.-=eyes"
  },
  {
    system: "system.details.height",
    tidy: "flags.tidy5e-sheet.height",
    tidyDelete: "flags.tidy5e-sheet.-=height"
  },
  {
    system: "system.details.hair",
    tidy: "flags.tidy5e-sheet.hair",
    tidyDelete: "flags.tidy5e-sheet.-=hair"
  },
  {
    system: "system.details.skin",
    tidy: "flags.tidy5e-sheet.skin",
    tidyDelete: "flags.tidy5e-sheet.-=skin"
  },
  {
    system: "system.details.age",
    tidy: "flags.tidy5e-sheet.age",
    tidyDelete: "flags.tidy5e-sheet.-=age"
  },
  {
    system: "system.details.weight",
    tidy: "flags.tidy5e-sheet.weight",
    tidyDelete: "flags.tidy5e-sheet.-=weight"
  }
];
async function migrateBiographicalFlagsToSystemData(params) {
  const { document: document2, overwrite, clearBiographicalFlagData } = params;
  let diff = {};
  for (let { system, tidy, tidyDelete } of mappings) {
    const systemValue = foundry.utils.getProperty(document2, system) ?? "", tidyValue = foundry.utils.getProperty(document2, tidy) ?? "";
    (isNil(systemValue, "") || overwrite) && (diff[system] = tidyValue), clearBiographicalFlagData && (diff[tidyDelete] = null);
  }
  Object.keys(diff).length && await document2.update(diff);
}
__name(migrateBiographicalFlagsToSystemData, "migrateBiographicalFlagsToSystemData");
var on_click$M = /* @__PURE__ */ __name((ev, migrate) => migrate(), "on_click$M"), root$1$ = /* @__PURE__ */ template('<section class="svelte-f3txbi"><h2> </h2> <ul><li> </li> <li> </li> <li> </li> <li> </li> <li> </li> <li> </li> <li> </li></ul> <h3> </h3> <div class="options grid-auto-columns svelte-f3txbi"><label class="green-checkbox"><input type="checkbox"> </label> <label class="green-checkbox"><input type="checkbox"> </label></div> <button type="button" class="svelte-f3txbi"> </button></section>');
function CharacterBiographyMigration($$anchor, $$props) {
  push($$props, !0);
  let migrating = state(!1), overwrite = state(!1), deleteFlags = state(!1);
  const localize = FoundryAdapter.localize;
  async function migrate() {
    try {
      const actorsToMigrate = Array.from(game.actors).filter((a2) => a2.type === CONSTANTS.SHEET_TYPE_CHARACTER);
      new MigrationSelectionApplication(
        {
          onConfirm: /* @__PURE__ */ __name(async (selected) => {
            set(migrating, !0), ui.notifications.info(localize("TIDY5E.Settings.Migrations.migrationBeginningMessage")), migrateActors(selected);
          }, "onConfirm"),
          columns: [
            {
              cellWidth: "primary",
              field: {
                type: "simple",
                propPath: "name",
                onClick: /* @__PURE__ */ __name((target) => target.sheet.render(!0), "onClick")
              },
              name: localize("TIDY5E.Settings.Migrations.Selection.ToMigrate")
            }
          ],
          documents: actorsToMigrate,
          title: FoundryAdapter.localize("TIDY5E.Settings.Migrations.CharacterBiography.selectionDialogTitle")
        },
        () => {
          set(migrating, !1);
        }
      ).render(!0);
    } catch (e2) {
      error("An error occurred while preparing a bulk migration", !1, e2);
    }
  }
  __name(migrate, "migrate");
  async function migrateActors(actors) {
    try {
      for (let actorToMigrate of actors)
        await migrateActor(actorToMigrate);
    } finally {
      set(migrating, !1), ui.notifications.info(FoundryAdapter.localize("TIDY5E.Settings.Migrations.migrationCompleteMessage")), resetOptions();
    }
  }
  __name(migrateActors, "migrateActors");
  function resetOptions() {
    set(overwrite, !1), set(deleteFlags, !1);
  }
  __name(resetOptions, "resetOptions");
  async function migrateActor(actor) {
    try {
      debug(`Migrating actor ${actor?.name}...`), migrateBiographicalFlagsToSystemData({
        document: actor,
        clearBiographicalFlagData: get(deleteFlags),
        overwrite: get(overwrite)
      }), debug(`Actor ${actor?.name} migration successful!`);
    } catch (e2) {
      error(`An error occurred while migrating biographical data for ${actor?.name}`, !1, e2), ui.notifications.error(FoundryAdapter.localize("TIDY5E.Settings.Migrations.migrationErrorMessage"), { permanent: !0 });
    }
  }
  __name(migrateActor, "migrateActor");
  var section = root$1$(), h2 = child(section), text2 = child(h2);
  template_effect(() => set_text(text2, localize("TIDY5E.Settings.Migrations.CharacterBiography.sectionTitle")));
  var ul = sibling(h2, 2), li = child(ul), text_1 = child(li);
  template_effect(() => set_text(text_1, localize("DND5E.Age")));
  var li_1 = sibling(li, 2), text_2 = child(li_1);
  template_effect(() => set_text(text_2, localize("DND5E.Eyes")));
  var li_2 = sibling(li_1, 2), text_3 = child(li_2);
  template_effect(() => set_text(text_3, localize("DND5E.Gender")));
  var li_3 = sibling(li_2, 2), text_4 = child(li_3);
  template_effect(() => set_text(text_4, localize("DND5E.Hair")));
  var li_4 = sibling(li_3, 2), text_5 = child(li_4);
  template_effect(() => set_text(text_5, localize("DND5E.Height")));
  var li_5 = sibling(li_4, 2), text_6 = child(li_5);
  template_effect(() => set_text(text_6, localize("DND5E.Skin")));
  var li_6 = sibling(li_5, 2), text_7 = child(li_6);
  template_effect(() => set_text(text_7, localize("DND5E.Weight")));
  var h3 = sibling(ul, 2), text_8 = child(h3);
  template_effect(() => set_text(text_8, localize("TIDY5E.Settings.Migrations.OptionsHeader")));
  var div = sibling(h3, 2), label = child(div);
  template_effect(() => set_attribute(label, "data-tooltip", localize("TIDY5E.Settings.Migrations.OptionOverwrite.Tooltip")));
  var input = child(label), text_9 = sibling(input);
  template_effect(() => set_text(text_9, ` ${localize("TIDY5E.Settings.Migrations.OptionOverwrite.Text") ?? ""}`));
  var label_1 = sibling(label, 2);
  template_effect(() => set_attribute(label_1, "data-tooltip", localize("TIDY5E.Settings.Migrations.OptionDeleteFlags.Tooltip")));
  var input_1 = child(label_1), text_10 = sibling(input_1);
  template_effect(() => set_text(text_10, ` ${localize("TIDY5E.Settings.Migrations.OptionDeleteFlags.Text") ?? ""}`));
  var button = sibling(div, 2);
  button.__click = [on_click$M, migrate];
  var text_11 = child(button);
  template_effect(() => set_text(text_11, localize("TIDY5E.Settings.Migrations.ButtonMigration.Text"))), template_effect(() => {
    input.disabled = get(migrating), input_1.disabled = get(migrating), button.disabled = get(migrating);
  }), bind_checked(input, () => get(overwrite), ($$value) => set(overwrite, $$value)), bind_checked(input_1, () => get(deleteFlags), ($$value) => set(deleteFlags, $$value)), append($$anchor, section), pop();
}
__name(CharacterBiographyMigration, "CharacterBiographyMigration");
delegate(["click"]);
const ccssFlagPropPath = "flags.custom-character-sheet-sections.sectionName";
async function migrateCcssToTidyForItem({
  item,
  overwrite,
  clearCcssFlagData
}) {
  try {
    const sectionName = getCcssSectionName(item);
    if (isNil(sectionName, ""))
      return;
    const tidySection = TidyFlags.section.get(item);
    (isNil(tidySection, "") || overwrite) && TidyFlags.section.set(item, sectionName), clearCcssFlagData && item.update({
      "flags.custom-character-sheet-sections.-=sectionName": null
    });
  } catch (e2) {
    error("An error occurred while migrating CCSS data from item.", !1, e2), debug("CCSS Item Migration troubleshooting info", {
      item: item?.toObject?.(),
      overwrite,
      clearCcssFlagData
    });
  }
}
__name(migrateCcssToTidyForItem, "migrateCcssToTidyForItem");
function getCcssSectionName(item) {
  return foundry.utils.getProperty(item, ccssFlagPropPath)?.trim();
}
__name(getCcssSectionName, "getCcssSectionName");
var on_click$L = /* @__PURE__ */ __name((ev, migrateCompendia) => migrateCompendia(), "on_click$L"), on_click_1$l = /* @__PURE__ */ __name((ev, migrate) => migrate(), "on_click_1$l"), root$1_ = /* @__PURE__ */ template('<section class="svelte-11aceoq"><h2> </h2> <div class="callout-banner svelte-11aceoq"><p> </p></div> <p> </p> <h3> </h3> <div class="options grid-auto-columns svelte-11aceoq"><label class="green-checkbox"><input type="checkbox"> </label> <label class="green-checkbox"><input type="checkbox"> </label></div> <footer class="flex-row extra-small-gap svelte-11aceoq"><button type="button"> </button> <button type="button"> </button></footer></section>');
function CcssToTidyMigration($$anchor, $$props) {
  push($$props, !0);
  let migrating = state(!1), overwrite = state(!1), deleteFlags = state(!1);
  async function migrate() {
    try {
      const actorItemsToMigrate = Array.from(game.actors).filter((a2) => a2.isOwner).map((a2) => ({ actor: a2, unlinked: !1 })).flatMap((value) => Array.from(value.actor.items).map((item) => ({ item, unlinked: value.unlinked }))), tokenActorItemsToMigrate = Array.from(canvas?.scene?.tokens ?? []).map((t2) => ({ actor: t2.actor, unlinked: !0 })).filter((a2) => a2.actor && !a2.actor.prototypeToken?.actorLink && a2.actor.isOwner).flatMap((value) => Array.from(value.actor.items).map((item) => ({ item, unlinked: value.unlinked }))), worldItemsToMigrate = Array.from(game.items).map((item) => ({ item, unlinked: !0 })), itemsToMigrate = [
        ...tokenActorItemsToMigrate,
        ...actorItemsToMigrate,
        ...worldItemsToMigrate
      ].filter((value) => !isNil(getCcssSectionName(value.item), ""));
      new MigrationSelectionApplication(
        {
          onConfirm: /* @__PURE__ */ __name(async (selected) => {
            set(migrating, !0), ui.notifications.info(localize("TIDY5E.Settings.Migrations.migrationBeginningMessage"));
            for (let choice of selected)
              await migrateCcssToTidyForItem({
                item: choice.item,
                overwrite: get(overwrite),
                clearCcssFlagData: get(deleteFlags)
              });
            set(migrating, !1), ui.notifications.info(localize("TIDY5E.Settings.Migrations.migrationCompleteMessage")), resetOptions();
          }, "onConfirm"),
          columns: [
            {
              cellWidth: "primary",
              field: {
                type: "simple",
                propPath: "item.name",
                onClick: /* @__PURE__ */ __name((target) => target.item.sheet.render(!0), "onClick")
              },
              name: localize("TIDY5E.Settings.Migrations.Selection.ToMigrate")
            },
            {
              cellWidth: "8rem",
              field: {
                type: "simple",
                propPath: `item.${ccssFlagPropPath}`
              },
              name: localize("TIDY5E.Settings.Migrations.CcssToTidy.ccss")
            },
            {
              cellWidth: "8rem",
              field: {
                type: "simple",
                propPath: `item.${TidyFlags.section.prop}`
              },
              name: localize("TIDY5E.Settings.Migrations.CcssToTidy.section")
            },
            {
              cellWidth: "10rem",
              field: {
                type: "simple",
                propPath: "item.parent.name",
                onClick: /* @__PURE__ */ __name((target) => target.item.parent?.sheet?.render(!0), "onClick")
              },
              name: localize("TIDY5E.Settings.Migrations.Parent")
            },
            {
              cellWidth: "10rem",
              name: "",
              field: {
                type: "contextual",
                getText: /* @__PURE__ */ __name(({ unlinked }) => unlinked ? FoundryAdapter.localize("TIDY5E.TokenUnlinked") : FoundryAdapter.localize("DOCUMENT.Actor"), "getText")
              }
            }
          ],
          documents: itemsToMigrate,
          title: FoundryAdapter.localize("TIDY5E.Settings.Migrations.CcssToTidy.selectionDialogTitle")
        },
        () => {
          set(migrating, !1);
        },
        { width: 960 }
      ).render(!0);
    } catch (e2) {
      error("An error occurred while preparing a bulk migration", !1, e2);
    }
  }
  __name(migrate, "migrate");
  async function migrateCompendia() {
    const compendiaForMigrating = Array.from(game.packs.values()).filter((c2) => !c2.locked && c2.documentName === "Item").map((c2) => ({
      label: c2.metadata.label,
      type: c2.metadata.type,
      id: c2.metadata.id,
      size: c2.index.size
    }));
    new MigrationSelectionApplication({
      onConfirm: /* @__PURE__ */ __name(async (selected) => {
        ui.notifications.info(localize("TIDY5E.Settings.Migrations.migrationBeginningMessage"));
        for (const compendium of selected) {
          debug(`Migrating compendium "${compendium.label}"...`);
          try {
            const items = await game.packs.get(compendium.id).getDocuments();
            for (const item of items)
              await migrateCcssToTidyForItem({
                item,
                overwrite: get(overwrite),
                clearCcssFlagData: get(deleteFlags)
              });
            debug(`Compendium "${compendium.label}" migration successful.`);
          } catch (e2) {
            error(localize("TIDY5E.Settings.Migrations.migrationErrorMessage"), !0), error(`Error while migrating compendium "${compendium.label}"`, !1, e2);
          }
        }
        ui.notifications.info(localize("TIDY5E.Settings.Migrations.migrationCompleteMessage"));
      }, "onConfirm"),
      columns: [
        {
          cellWidth: "primary",
          field: {
            type: "simple",
            propPath: "label",
            onClick: /* @__PURE__ */ __name((target) => game.packs.get(target.id).render(!0), "onClick")
          },
          name: localize("TIDY5E.Settings.Migrations.MigrateCompendia.CompendiumLabel")
        },
        {
          cellWidth: "5rem",
          field: {
            type: "contextual",
            getText: /* @__PURE__ */ __name((c2) => localize(`DOCUMENT.${c2.type}`), "getText")
          },
          name: localize("Type")
        },
        {
          cellWidth: "10rem",
          field: { type: "simple", propPath: "size" },
          name: localize("TIDY5E.Settings.Migrations.MigrateCompendia.TotalEntriesLabel")
        }
      ],
      documents: compendiaForMigrating,
      title: localize("TIDY5E.Settings.Migrations.MigrateCompendia.SelectionDialogTitle")
    }).render(!0);
  }
  __name(migrateCompendia, "migrateCompendia");
  function resetOptions() {
    set(overwrite, !1), set(deleteFlags, !1);
  }
  __name(resetOptions, "resetOptions");
  const localize = FoundryAdapter.localize;
  var section = root$1_(), h2 = child(section), text2 = child(h2);
  template_effect(() => set_text(text2, localize("TIDY5E.Settings.Migrations.CcssToTidy.sectionTitle")));
  var div = sibling(h2, 2), p2 = child(div), text_1 = child(p2);
  template_effect(() => set_text(text_1, localize("TIDY5E.Settings.Migrations.CcssToTidy.explanation1")));
  var p_1 = sibling(div, 2), text_2 = child(p_1);
  template_effect(() => set_text(text_2, localize("TIDY5E.Settings.Migrations.UnlinkedExplanation")));
  var h3 = sibling(p_1, 2), text_3 = child(h3);
  template_effect(() => set_text(text_3, localize("TIDY5E.Settings.Migrations.OptionsHeader")));
  var div_1 = sibling(h3, 2), label = child(div_1);
  template_effect(() => set_attribute(label, "data-tooltip", localize("TIDY5E.Settings.Migrations.CcssToTidy.overwriteTooltip")));
  var input = child(label), text_4 = sibling(input);
  template_effect(() => set_text(text_4, ` ${localize("TIDY5E.Settings.Migrations.CcssToTidy.overwrite") ?? ""}`));
  var label_1 = sibling(label, 2);
  template_effect(() => set_attribute(label_1, "data-tooltip", localize("TIDY5E.Settings.Migrations.CcssToTidy.deleteFlagsTooltip")));
  var input_1 = child(label_1), text_5 = sibling(input_1);
  template_effect(() => set_text(text_5, ` ${localize("TIDY5E.Settings.Migrations.CcssToTidy.deleteFlags") ?? ""}`));
  var footer = sibling(div_1, 2), button = child(footer);
  button.__click = [on_click$L, migrateCompendia];
  var text_6 = child(button);
  template_effect(() => set_text(text_6, localize("TIDY5E.Settings.Migrations.MigrateCompendia.Title")));
  var button_1 = sibling(button, 2);
  button_1.__click = [on_click_1$l, migrate];
  var text_7 = child(button_1);
  template_effect(() => set_text(text_7, localize("TIDY5E.Settings.Migrations.ButtonMigration.Text"))), template_effect(() => {
    input.disabled = get(migrating), input_1.disabled = get(migrating), button.disabled = get(migrating), button_1.disabled = get(migrating);
  }), bind_checked(input, () => get(overwrite), ($$value) => set(overwrite, $$value)), bind_checked(input_1, () => get(deleteFlags), ($$value) => set(deleteFlags, $$value)), append($$anchor, section), pop();
}
__name(CcssToTidyMigration, "CcssToTidyMigration");
delegate(["click"]);
const tidyFlagFavorite = "favorite";
async function migrateFavoritesToSystem({
  pc,
  clearFavoriteFlagData
}) {
  if (pc)
    try {
      const tidyFavorites = Array.from(pc.items).filter(
        (i2) => !!i2.flags[CONSTANTS.MODULE_ID]?.favorite
      );
      for (const favorite of tidyFavorites)
        await pc.system.addFavorite({
          id: favorite.getRelativeUUID(pc),
          type: "item"
        }), clearFavoriteFlagData && await TidyFlags.unsetFlag(favorite, tidyFlagFavorite);
    } catch (e2) {
      error("An error occurred while migrating an actor's favorites", !1, {
        error: e2,
        actor: pc
      }), error(
        FoundryAdapter.localize(
          "TIDY5E.Settings.Migrations.migrationErrorMessage"
        ),
        !0
      );
    }
}
__name(migrateFavoritesToSystem, "migrateFavoritesToSystem");
var on_click$K = /* @__PURE__ */ __name((ev, migrate) => migrate(), "on_click$K"), root$1Z = /* @__PURE__ */ template('<section class="svelte-1fnhfkf"><h2> </h2> <h3> </h3> <div class="options grid-auto-columns svelte-1fnhfkf"><label class="green-checkbox"><input type="checkbox"> </label></div> <footer class="flex-row extra-small-gap svelte-1fnhfkf"><button type="button"> </button></footer></section>');
function FavoritesToSystemMigration($$anchor, $$props) {
  push($$props, !0);
  let migrating = state(!1), deleteFlags = state(!1);
  const localize = FoundryAdapter.localize;
  async function migrate() {
    const actorsToMigrate = Array.from(game.actors).filter((a2) => a2.isOwner && a2.type === CONSTANTS.SHEET_TYPE_CHARACTER);
    new MigrationSelectionApplication({
      onConfirm: /* @__PURE__ */ __name(async (selected) => {
        set(migrating, !0), ui.notifications.info(localize("TIDY5E.Settings.Migrations.migrationBeginningMessage"));
        for (let choice of selected)
          await migrateFavoritesToSystem({
            pc: choice,
            clearFavoriteFlagData: get(deleteFlags)
          });
        ui.notifications.info(localize("TIDY5E.Settings.Migrations.migrationCompleteMessage")), resetOptions(), set(migrating, !1);
      }, "onConfirm"),
      columns: [
        {
          cellWidth: "primary",
          field: {
            type: "simple",
            propPath: "name",
            onClick: /* @__PURE__ */ __name((target) => target.sheet.render(!0), "onClick")
          },
          name: localize("TIDY5E.Settings.Migrations.Selection.ToMigrate")
        }
      ],
      documents: actorsToMigrate,
      title: FoundryAdapter.localize("TIDY5E.Settings.Migrations.FavoritesToSystem.selectionDialogTitle")
    }).render(!0);
    function resetOptions() {
      set(deleteFlags, !1);
    }
    __name(resetOptions, "resetOptions");
  }
  __name(migrate, "migrate");
  var section = root$1Z(), h2 = child(section), text2 = child(h2);
  template_effect(() => set_text(text2, localize("TIDY5E.Settings.Migrations.FavoritesToSystem.sectionTitle")));
  var h3 = sibling(h2, 2), text_1 = child(h3);
  template_effect(() => set_text(text_1, localize("TIDY5E.Settings.Migrations.OptionsHeader")));
  var div = sibling(h3, 2), label = child(div);
  template_effect(() => set_attribute(label, "data-tooltip", localize("TIDY5E.Settings.Migrations.OptionDeleteFlags.Tooltip")));
  var input = child(label), text_2 = sibling(input);
  template_effect(() => set_text(text_2, ` ${localize("TIDY5E.Settings.Migrations.OptionDeleteFlags.Text") ?? ""}`));
  var footer = sibling(div, 2), button = child(footer);
  button.__click = [on_click$K, migrate];
  var text_3 = child(button);
  template_effect(() => set_text(text_3, localize("TIDY5E.Settings.Migrations.ButtonMigration.Text"))), template_effect(() => {
    input.disabled = get(migrating), button.disabled = get(migrating);
  }), bind_checked(input, () => get(deleteFlags), ($$value) => set(deleteFlags, $$value)), append($$anchor, section), pop();
}
__name(FavoritesToSystemMigration, "FavoritesToSystemMigration");
delegate(["click"]);
const ApiConstants = {
  TAB_ID_CHARACTER_ATTRIBUTES: CONSTANTS.TAB_CHARACTER_ATTRIBUTES,
  TAB_ID_CHARACTER_INVENTORY: CONSTANTS.TAB_ACTOR_INVENTORY,
  TAB_ID_CHARACTER_SPELLBOOK: CONSTANTS.TAB_CHARACTER_SPELLBOOK,
  TAB_ID_CHARACTER_FEATURES: CONSTANTS.TAB_CHARACTER_FEATURES,
  TAB_ID_CHARACTER_EFFECTS: CONSTANTS.TAB_CHARACTER_EFFECTS,
  TAB_ID_CHARACTER_BIOGRAPHY: CONSTANTS.TAB_CHARACTER_BIOGRAPHY,
  TAB_ID_CHARACTER_JOURNAL: CONSTANTS.TAB_CHARACTER_JOURNAL,
  TAB_ID_GROUP_MEMBERS: CONSTANTS.TAB_GROUP_MEMBERS,
  TAB_ID_GROUP_INVENTORY: CONSTANTS.TAB_ACTOR_INVENTORY,
  TAB_ID_GROUP_DESCRIPTION: CONSTANTS.TAB_GROUP_DESCRIPTION,
  TAB_ID_NPC_ABILITIES: CONSTANTS.TAB_NPC_ABILITIES,
  TAB_ID_NPC_SPELLBOOK: CONSTANTS.TAB_NPC_SPELLBOOK,
  TAB_ID_NPC_EFFECTS: CONSTANTS.TAB_NPC_EFFECTS,
  TAB_ID_NPC_BIOGRAPHY: CONSTANTS.TAB_NPC_BIOGRAPHY,
  TAB_ID_NPC_JOURNAL: CONSTANTS.TAB_NPC_JOURNAL,
  TAB_ID_VEHICLE_ATTRIBUTES: CONSTANTS.TAB_VEHICLE_ATTRIBUTES,
  TAB_ID_VEHICLE_CARGO_AND_CREW: CONSTANTS.TAB_VEHICLE_CARGO_AND_CREW,
  TAB_ID_VEHICLE_EFFECTS: CONSTANTS.TAB_VEHICLE_EFFECTS,
  TAB_ID_VEHICLE_DESCRIPTION: CONSTANTS.TAB_VEHICLE_DESCRIPTION,
  TAB_ID_ACTOR_ACTIONS: CONSTANTS.TAB_ACTOR_ACTIONS,
  /** The attribute which indicates a particular part of a sheet. */
  SHEET_PART_ATTRIBUTE: CONSTANTS.SHEET_PART_ATTRIBUTE,
  /**
   * Values used in conjunction with the attribute `api.constants.SHEET_PART_ATTRIBUTE` to identify a part of a Tidy 5e sheet.
   *
   * @example an element which is tagged with a sheet part value
   * ```html
   * <div class="resources" data-tidy-sheet-part="resources-container">...</div>
   * ```
   *
   * @example targeting a sheet part for content injection during Tidy render
   * ```js
   * // Every time Tidy renders, whether a full render or a partial
   * Hooks.on("tidy5e-sheet.renderActorSheet", (sheet, element, data) => {
   *   const api = game.modules.get('tidy5e-sheet').api;
   *   const selector = api.getSheetPartSelector(
   *     api.constants.SHEET_PARTS.RESOURCES_CONTAINER
   *   );
   *   // get the resources container of the target actor sheet
   *   element
   *     .querySelector(selector)
   *     // inject some HTML
   *     ?.insertAdjacentHTML(
   *       // put it as the first element inside the resources container; see https://developer.mozilla.org/en-US/docs/Web/API/Element/insertAdjacentHTML#afterbegin
   *       "afterbegin",
   *       // here's my content
   *       // pro tip: `data-tidy-render-scheme="handlebars"` causes this content to re-render on every Tidy render, full or partial
   *       `<div style="display: contents;" data-tidy-render-scheme="handlebars">
   *           <h2 type="button" style="width: 100%;">Resources for ${data.actor.name}</h2>
   *         </div>`
   *     );
   * });
   * ```
   *
   * @remarks
   * Tidy 5e Sheets are tagged with `data-tidy-sheet-part` attributes
   * so that most parts of the sheet can be generally identified.
   * This module uses specific attributes rather than classes because of
   * HTML classes' multiple purposes, including use for CSS styling.
   * Using sheet part attributes allows for identifying the same general thing
   * even when considering a potentially alternate Tidy sheet layout.
   */
  SHEET_PARTS: CONSTANTS.SHEET_PARTS
};
class ActionListApi {
  static {
    __name(this, "ActionListApi");
  }
  /**
   * Remap how activation types are treated when the Action List organizes items into sections.
   * @param mappings an object with `key`s and `value`s representing a mapping from source activation type to intended target activation type.
   * @example Treating Midi-QoL reaction sub-types like a reaction
   * ```js
   * Hooks.once('tidy5e-sheet.ready', (api) => {
   *   api.config.actionList.mapActivationTypesToSections({
   *     reactionpreattack: 'reaction',
   *     reactiondamage: 'reaction',
   *     reactionmanual: 'reaction',
   *   });
   * });
   * ```
   * @remarks
   * In terms of UI, the `key` and `value` fields are the `value` attribute on the Activation Type dropdown, or the database value.
   * 
   * Multiple calls to this API function merge the latest results in, resulting in last-come, last-server.
   * If multiple modules remap the same activation type, the last caller's remapping will be the winner.
   */
  mapActivationTypesToSections(mappings2) {
    ActionListRuntime.addActivationTypeMappings(mappings2);
  }
}
class ActorItemApi {
  static {
    __name(this, "ActorItemApi");
  }
  /**
   * Registers actor item section commands which Tidy 5e can render at select locations on the sheet.
   * @param commands actor item section commands for Tidy 5e to render
   *
   * @example Registering a command that sorts items
   * ```js
   * Hooks.once('tidy5e-sheet.ready', (api) => {
   *   api.config.actorItem.registerSectionFooterCommands([
   *     {
   *       enabled: (params) =>
   *         params.section.items?.length > 1 || params.section.spells?.length > 1,
   *       iconClass: 'fa-solid fa-arrow-up-a-z',
   *       tooltip: 'Sort by Name Ascending',
   *       execute: async (params) => {
   *         const actor = params.actor;
   *         const itemsToSort = params.section.items ?? params.section.spells;
   *         await actor.updateEmbeddedDocuments(
   *           'Item',
   *           [...itemsToSort]
   *             .sort((a, b) => {
   *               return a.name.localeCompare(b.name, game.i18n.lang);
   *             })
   *             .map((item, idx) => {
   *               return { _id: item.id, sort: idx };
   *             })
   *         );
   *       },
   *     },
   *   ]);
   * });
   * ```
   */
  registerSectionFooterCommands(commands) {
    ActorItemRuntime.registerActorItemSectionCommands(commands);
  }
}
class ActorPortraitRuntime {
  static {
    __name(this, "ActorPortraitRuntime");
  }
  static _portraitMenuCommands = [
    {
      label: "TIDY5E.ShowPortraitArt",
      execute: /* @__PURE__ */ __name((params) => {
        FoundryAdapter.renderImagePopout(params.actor.img, {
          title: FoundryAdapter.localize("TIDY5E.PortraitTitle", {
            subject: params.actor.name
          }),
          shareable: !0,
          uuid: params.actor.uuid
        });
      }, "execute"),
      iconClass: "fa-solid fa-image fa-fw"
    },
    {
      label: "TIDY5E.ShowTokenArt",
      execute: /* @__PURE__ */ __name(async (params) => {
        let imageSrc = params.actor.token?.texture?.src;
        if (!imageSrc) {
          let images = await params.actor.getTokenImages();
          imageSrc = images.length > 1 ? (
            // Grab a random wildcard token upon request... for chaos.
            images[Math.floor(Math.random() * images.length)]
          ) : images[0];
        }
        FoundryAdapter.renderImagePopout(imageSrc, {
          title: FoundryAdapter.localize("TIDY5E.PortraitTitle", {
            subject: params.actor.name
          }),
          shareable: !0,
          uuid: params.actor.uuid
        });
      }, "execute"),
      iconClass: "fa-regular fa-circle-user fa-fw"
    }
  ];
  static registerMenuCommands(commands) {
    ActorPortraitRuntime._portraitMenuCommands.push(...commands);
  }
  static getEnabledPortraitMenuCommands(actor) {
    return ActorPortraitRuntime._portraitMenuCommands.filter((c2) => {
      try {
        return c2.enabled?.({ actor }) ?? !0;
      } catch (e2) {
        return error(
          "Failed to check if actor portrait menu command is enabled",
          !1,
          { error: e2, actor }
        ), !1;
      }
    });
  }
}
class ActorPortraitApi {
  static {
    __name(this, "ActorPortraitApi");
  }
  /**
   * Register actor portrait menu commands which Tidy 5e can render on the sheet when appropriate.
   * @param commands actor portrait menu commands for Tidy 5e to render
   *
   * @example Registering a command
   * ```js
   * Hooks.once("tidy5e-sheet.ready", (api) => {
   *   api.config.actorPortrait.registerMenuCommands([
   *     {
   *       label: "Test",
   *       iconClass: "fa-solid fa-flask",
   *       tooltip: "Click for test result",
   *       enabled: (params) => params.actor.type !== "vehicle",
   *       execute: (params) => {
   *         console.log(params);
   *         ui.notifications.info(
   *           "Hello, Test Portrait Menu Command for " + params.actor.name
   *         );
   *       },
   *     },
   *   ]);
   * });
   * ```
   */
  registerMenuCommands(commands) {
    ActorPortraitRuntime.registerMenuCommands([...commands]);
  }
}
class CustomActorTraitsRuntime {
  static {
    __name(this, "CustomActorTraitsRuntime");
  }
  static _traits = [];
  static registerCustomActorTraits(traits) {
    const registeredTraits = traits.map((t2) => ({
      title: t2.title,
      iconClass: t2.iconClass,
      alwaysShow: t2.alwaysShow,
      openConfiguration: t2.openConfiguration,
      openConfigurationTooltip: t2.openConfigurationTooltip,
      enabled: t2.enabled
    }));
    CustomActorTraitsRuntime._traits.push(...registeredTraits);
  }
  static getEnabledTraits(context) {
    return this._traits.filter((t2) => {
      try {
        return t2.enabled?.({ context }) ?? !0;
      } catch (e2) {
        return error(
          "An error occurred while determining if a custom actor trait is enabled.",
          !1,
          e2
        ), debug("Custom actor trait enabled error details", {
          context,
          trait: t2
        }), !1;
      }
    });
  }
}
class ActorTraitsApi {
  static {
    __name(this, "ActorTraitsApi");
  }
  /**
   * Registers multiple custom traits to the actor traits section of the actor sheet.
   * @param traits traits to register
   *
   * @example Registering vehicle traits
   * ```js
   * Hooks.once("tidy5e-sheet.ready", (api) => {
   *   api.config.actorTraits.registerActorTraits([
   *     {
   *       title: "Vehicle Customization Options",
   *       iconClass: "fa-solid fa-ferry",
   *       enabled: (params) => params.context.actor.type === "vehicle",
   *       openConfiguration: (params) => {
   *         // TODO: Open totally awesome config dialog for setting custom vehicle stuff.
   *       },
   *       openConfigurationTooltip: "Click to customize!",
   *     },
   *     {
   *       title: "Vehicle Tribble Manager",
   *       iconClass: "fa-solid fa-ghost",
   *       enabled: (params) => params.context.actor.type === "vehicle",
   *       openConfiguration: (params) => {
   *         // TODO: Open a hopeless manager dialog for dealing with a tribble infestation.
   *       },
   *       openConfigurationTooltip: "Click to manage the unmanageable tribble problem 😰",
   *       alwaysShow: true,
   *     },
   *   ]);
   * });
   * ```
   */
  registerActorTraits(traits) {
    CustomActorTraitsRuntime.registerCustomActorTraits(traits);
  }
  /**
   * Registers a custom actor trait to the actor traits section of the actor sheet.
   * @param trait the trait to register
   *
   * @example Registering an actor trait
   * ```js
   * Hooks.once('tidy5e-sheet.ready', (api) => {
   *   api.config.actorTraits.registerActorTrait({
   *     title: "Configure My Module",
   *     iconClass: "fa-solid fa-spaghetti-monster-flying",
   *     enabled: (params) =>
   *       ["character", "npc"].includes(params.context.actor.type),
   *     openConfiguration: (params) => {
   *       // TODO: For example, open another form to input some data.
   *     },
   *     openConfigurationTooltip: "Click to configure my module",
   *   });
   * });
   * ```
   *
   * @remarks
   * The actor traits section is a good place to put a configuration button for opening another dialog for a custom module.
   */
  registerActorTrait(trait) {
    this.registerActorTraits([trait]);
  }
}
class SpellSchoolApi {
  static {
    __name(this, "SpellSchoolApi");
  }
  /**
   * Sets an icon class for a target school key.
   * @param schoolKey the key that represents a spell school, e.g. "abj" for Abjuration, "nec" for Necromancy, and "trs" for Transmutation
   * @param iconClass a class string for an `<i>` element
   *
   * @example Changing the transmutation icon to some nice coins.
   * ```js
   * Hooks.once("tidy5e-sheet.ready", (api) => {
   *   api.config.spellSchool.setIcon('trs', 'fa-solid fa-coins');
   * });
   * ```
   */
  setIcon(schoolKey, iconClass) {
    SpellSchool.setIcon(schoolKey, iconClass);
  }
}
class ItemSummaryApi {
  static {
    __name(this, "ItemSummaryApi");
  }
  /**
   * Registers item summary commands which Tidy 5e can render at select locations on the sheet.
   * @param commands item summary commands for Tidy 5e to render
   *
   * @example Registering commands that show for specific actor types
   * ```js
   * Hooks.once('tidy5e-sheet.ready', (api) => {
   *   api.config.itemSummary.registerCommands([
   *     {
   *       label: 'Character Button',
   *       enabled: (params) => params.item.actor?.type === 'character',
   *       iconClass: 'fas fa-dice-d20',
   *       execute: (params) => {
   *         console.log('Clicked Character button', params.item);
   *       },
   *     },
   *     {
   *       label: 'NPC Button',
   *       enabled: (params) => params.item.actor?.type === 'npc',
   *       execute: (params) => {
   *         console.log('Clicked NPC button', params.item);
   *       },
   *     },
   *     {
   *       label: 'Vehicle Button',
   *       enabled: (params) => params.item.actor?.type === 'vehicle',
   *       execute: (params) => {
   *         console.log('Clicked Vehicle button', params.item);
   *       },
   *     },
   *   ]);
   * });
   * ```
   *
   * @example Displaying a button for versatile weapons only
   * ```js
   * Hooks.once('tidy5e-sheet.ready', (api) => {
   *   api.config.itemSummary.registerCommands([
   *     {
   *       label: 'Versatile Weapon Button',
   *       enabled: (params) =>
   *         params.item.type === 'weapon' &&
   *         params.item.system?.properties?.has('ver') &&
   *         params.item.system?.damage?.versatile,
   *       iconClass: 'fa-solid fa-hands-praying',
   *       execute: (params) => {
   *         console.log('Do something versatile', params.item);
   *       },
   *     },
   *   ]);
   * });
   * ```
   */
  registerCommands(commands = []) {
    ItemSummaryRuntime.registerItemSummaryCommands(commands);
  }
}
class ExhaustionApi {
  static {
    __name(this, "ExhaustionApi");
  }
  /**
   * Configures exhaustion to use an open number field,
   * rather than a constrained set of levels.
   *
   * @example
   * ```js
   * Hooks.once('tidy5e-sheet.ready', async (api) => {
   *   await api.config.exhaustion.useOpenNumberExhaustion();
   * });
   * ```
   */
  async useOpenNumberExhaustion() {
    const config = { type: "open" };
    await FoundryAdapter.setTidySetting("exhaustionConfig", config);
  }
  /**
   * Configures exhaustion to use a constrained set of levels
   * with optional hints (usually rendered as tooltips).
   * @param params information needed to configure specific-level exhaustion
   *
   * @example Setting 3-level exhaustion
   * ```js
   * Hooks.once('tidy5e-sheet.ready', async (api) => {
   *   await api.config.exhaustion.useSpecificLevelExhaustion({
   *     totalLevels: 3,
   *     hints: [
   *       'No exhaustion',
   *       'You are kind of tired',
   *       'You look unwell',
   *       'Dead 💀',
   *     ],
   *   });
   * });
   * ```
   */
  async useSpecificLevelExhaustion(params) {
    const exhaustion = settings.value.exhaustionConfig, fallbackHints = exhaustion.type === "specific" ? exhaustion.hints : [], config = {
      type: "specific",
      hints: params?.hints ?? fallbackHints,
      levels: Math.max(params?.totalLevels ?? 1, 1)
    };
    await FoundryAdapter.setTidySetting("exhaustionConfig", config);
  }
  /**
   * Configures vehicle exhaustion to use an open number field,
   * rather than a constrained set of levels.
   *
   * @example
   * ```js
   * Hooks.once('tidy5e-sheet.ready', async (api) => {
   *   await api.config.exhaustion.useOpenNumberVehicleExhaustion();
   * });
   * ```
   */
  async useOpenNumberVehicleExhaustion() {
    const config = { type: "open" };
    await FoundryAdapter.setTidySetting("vehicleExhaustionConfig", config);
  }
  /**
   * Configures vehicle exhaustion to use a constrained set of levels
   * with optional hints (usually rendered as tooltips).
   * @param params information needed to configure specific-level vehicle exhaustion
   *
   * @example Setting 3-level vehicle exhaustion
   * ```js
   * Hooks.once('tidy5e-sheet.ready', async (api) => {
   *   await api.config.exhaustion.useSpecificLevelVehicleExhaustion({
   *     totalLevels: 3,
   *     hints: ['Ship shape', 'A shape', "Uh oh, it's falling apart", 'Borked'],
   *   });
   * });
   * ```
   */
  async useSpecificLevelVehicleExhaustion(params) {
    const exhaustion = settings.value.vehicleExhaustionConfig, fallbackHints = exhaustion.type === "specific" ? exhaustion.hints : [], config = {
      type: "specific",
      hints: params?.hints ?? fallbackHints,
      levels: Math.max(params?.totalLevels ?? 1, 1)
    };
    await FoundryAdapter.setTidySetting("vehicleExhaustionConfig", config);
  }
}
class FloatingContextMenu extends ContextMenu {
  static {
    __name(this, "FloatingContextMenu");
  }
  constructor(...args) {
    super(...args);
  }
  /** @override */
  _setPosition([html2], [target]) {
    const positionInfo = {
      insertTarget: document.body,
      html: html2,
      target
    };
    if (!TidyHooks.tidy5eSheetsPrepareFloatingContextMenuPosition(positionInfo))
      return;
    positionInfo.insertTarget.appendChild(html2);
    const { clientWidth, clientHeight } = positionInfo.insertTarget, { width, height } = html2.getBoundingClientRect(), { clientX, clientY } = window.event, left = Math.min(clientX + 1, clientWidth - width);
    this._expandUp = clientY + height > clientHeight, html2.classList.add("floating"), html2.classList.add("tidy5e-sheet"), html2.classList.toggle("expand-up", this._expandUp), html2.classList.toggle("expand-down", !this._expandUp), html2.style.visibility = "", html2.style.left = `${left}px`, this._expandUp ? html2.style.bottom = `${clientHeight - clientY}px` : html2.style.top = `${clientY}px`, target.classList.add("context");
  }
}
var on_click$J = /* @__PURE__ */ __name((event2, openItemImagePicker, context) => openItemImagePicker(event2.currentTarget, get(context).item), "on_click$J"), root$1Y = /* @__PURE__ */ template('<div class="item-image item-image-show-item-art"><img class="profile"> <div role="presentation" aria-hidden="true" class="unidentified-glyph"><i class="fas fa-question"></i></div></div>');
function ItemProfilePicture($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getItemSheetContext);
  const localize = FoundryAdapter.localize;
  function openItemImagePicker(target, item) {
    const rect = target.getBoundingClientRect(), current = item.img;
    return FoundryAdapter.browseFilePicker({
      type: "image",
      current,
      callback: /* @__PURE__ */ __name((path) => {
        item.update({ img: path });
      }, "callback"),
      top: rect.top + 40,
      left: rect.left + 10
    });
  }
  __name(openItemImagePicker, "openItemImagePicker");
  function showItemArt(item) {
    FoundryAdapter.renderImagePopout(item.img, {
      title: FoundryAdapter.localize("TIDY5E.ItemImageTitle", { subject: item.name }),
      shareable: !0,
      uuid: item.uuid
    });
  }
  __name(showItemArt, "showItemArt");
  let itemImageContainer, contextMenuOptions = /* @__PURE__ */ derived(() => [
    {
      name: "TIDY5E.ShowItemArt",
      icon: '<i class="fa-solid fa-image fa-fw"></i>',
      callback: /* @__PURE__ */ __name(() => showItemArt(get(context).item), "callback")
    }
  ]);
  user_effect(() => {
    new FloatingContextMenu(FoundryAdapter.getJqueryWrappedElement(itemImageContainer), `[data-tidy-sheet-part=${CONSTANTS.SHEET_PARTS.ITEM_IMAGE_CONTAINER}]`, [], {
      onOpen: /* @__PURE__ */ __name(() => {
        ui.context.menuItems = get(contextMenuOptions);
      }, "onOpen")
    });
  });
  var div = root$1Y(), img = child(div);
  const stringified_text = /* @__PURE__ */ derived(() => localize("TIDY5E.EditSheetImageHint") ?? ""), stringified_text_1 = /* @__PURE__ */ derived(() => localize("TIDY5E.SheetImageOptionsHint") ?? "");
  template_effect(() => set_attribute(img, "title", `${get(stringified_text)} / ${get(stringified_text_1)}`)), img.__click = [on_click$J, openItemImagePicker, context];
  var div_1 = sibling(img, 2);
  bind_this(div, ($$value) => itemImageContainer = $$value, () => itemImageContainer), template_effect(() => {
    set_attribute(div, "data-tidy-sheet-part", CONSTANTS.SHEET_PARTS.ITEM_IMAGE_CONTAINER), set_attribute(img, "src", get(context).item.img), set_attribute(img, "alt", get(context).item.name), set_attribute(img, "data-tidy-sheet-part", CONSTANTS.SHEET_PARTS.ITEM_IMAGE), toggle_class(img, "conceal", get(context).item.system.identified === !1), toggle_class(div_1, "conceal", get(context).item.system.identified === !1);
  }), append($$anchor, div), pop();
}
__name(ItemProfilePicture, "ItemProfilePicture");
delegate(["click"]);
var root_2$v = /* @__PURE__ */ template('<span class="source-label truncate svelte-rlyf3i"> </span>'), on_click$I = /* @__PURE__ */ __name((_, $$props) => FoundryAdapter.renderSourceConfig($$props.document, $$props.keyPath), "on_click$I"), root_3$w = /* @__PURE__ */ template('<button type="button" class="inline-icon-button config-button svelte-rlyf3i"><i class="fas fa-cog"></i></button>'), root$1X = /* @__PURE__ */ template('<div class="source-container flex-row extra-small-gap align-items-center svelte-rlyf3i"><!> <!></div>');
function Source($$anchor, $$props) {
  push($$props, !0);
  let keyPathToCustom = /* @__PURE__ */ derived(() => `${$$props.keyPath}.custom`), source2 = /* @__PURE__ */ derived(() => FoundryAdapter.getProperty($$props.document, $$props.keyPath));
  const localize = FoundryAdapter.localize;
  var div = root$1X(), node = child(div);
  {
    var consequent = /* @__PURE__ */ __name(($$anchor2) => {
      var value = /* @__PURE__ */ derived(() => get(source2)?.custom), placeholder = /* @__PURE__ */ derived(() => localize("DND5E.SOURCE.FIELDS.source.label"));
      TextInput($$anchor2, {
        get document() {
          return $$props.document;
        },
        get field() {
          return get(keyPathToCustom);
        },
        get value() {
          return get(value);
        },
        get placeholder() {
          return get(placeholder);
        },
        class: "source-custom"
      });
    }, "consequent"), alternate = /* @__PURE__ */ __name(($$anchor2) => {
      var span = root_2$v(), text2 = child(span);
      template_effect(() => {
        set_attribute(span, "title", get(source2)?.label ?? ""), set_text(text2, get(source2)?.label ?? "");
      }), append($$anchor2, span);
    }, "alternate");
    if_block(node, ($$render) => {
      get(source2)?.directlyEditable ? $$render(consequent) : $$render(alternate, !1);
    });
  }
  var node_1 = sibling(node, 2);
  {
    var consequent_1 = /* @__PURE__ */ __name(($$anchor2) => {
      var button = root_3$w();
      button.__click = [on_click$I, $$props], template_effect(() => set_attribute(button, "tabindex", settings.value.useAccessibleKeyboardSupport ? 0 : -1)), append($$anchor2, button);
    }, "consequent_1");
    if_block(node_1, ($$render) => {
      $$props.editable && $$render(consequent_1);
    });
  }
  append($$anchor, div), pop();
}
__name(Source, "Source");
delegate(["click"]);
function ItemIdentifiableName($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getItemSheetContext), appId = /* @__PURE__ */ derived(() => get(context).document.id);
  const localize = FoundryAdapter.localize;
  var fragment = comment(), node = first_child(fragment);
  {
    var consequent = /* @__PURE__ */ __name(($$anchor2) => {
      var attributes = /* @__PURE__ */ derived(() => ({
        "data-tidy-item-name": get(context).item.name
      })), placeholder = /* @__PURE__ */ derived(() => localize("DND5E.ItemName")), disabled = /* @__PURE__ */ derived(() => !get(context).editable);
      TextInput($$anchor2, {
        get id() {
          return `${get(appId) ?? ""}-name`;
        },
        get document() {
          return get(context).item;
        },
        field: "name",
        get value() {
          return get(context).item.name;
        },
        get attributes() {
          return get(attributes);
        },
        get placeholder() {
          return get(placeholder);
        },
        get disabled() {
          return get(disabled);
        },
        get title() {
          return get(context).item.name;
        }
      });
    }, "consequent"), alternate = /* @__PURE__ */ __name(($$anchor2) => {
      var attributes_1 = /* @__PURE__ */ derived(() => ({
        "data-tidy-item-name": get(context).system.unidentified.name
      })), placeholder_1 = /* @__PURE__ */ derived(() => localize("DND5E.NameUnidentified")), disabled_1 = /* @__PURE__ */ derived(() => !get(context).editable);
      TextInput($$anchor2, {
        get id() {
          return `${get(appId) ?? ""}-name`;
        },
        get document() {
          return get(context).item;
        },
        field: "system.unidentified.name",
        get value() {
          return get(context).system.unidentified.name;
        },
        get attributes() {
          return get(attributes_1);
        },
        get placeholder() {
          return get(placeholder_1);
        },
        get disabled() {
          return get(disabled_1);
        },
        get title() {
          return get(context).identifiedName;
        }
      });
    }, "alternate");
    if_block(node, ($$render) => {
      get(context).system.identified ? $$render(consequent) : $$render(alternate, !1);
    });
  }
  append($$anchor, fragment), pop();
}
__name(ItemIdentifiableName, "ItemIdentifiableName");
var root_3$v = /* @__PURE__ */ template("<i></i>"), root_1$1g = /* @__PURE__ */ template("<!> <!> <!>", 1);
function PropertyToggle($$anchor, $$props) {
  push($$props, !0);
  let checked = prop($$props, "checked", 15, !1), title = prop($$props, "title", 3, ""), disabled = prop($$props, "disabled", 3, !1), iconSrc = prop($$props, "iconSrc", 3, null), iconClass = prop($$props, "iconClass", 3, null);
  async function handleChange(newValue) {
    try {
      const result = await $$props.document.update({ [$$props.field]: newValue });
    } catch (e2) {
      error("An error occurred while toggling a property", !1, e2), debug("Property toggle error troubleshooting info", {
        originalValue: !newValue,
        state: checked()
      });
    }
  }
  __name(handleChange, "handleChange");
  var class_1 = /* @__PURE__ */ derived(() => `flex-row small-gap tidy-property-toggle ${(checked() ? "active" : "inactive") ?? ""}`);
  TidySwitch($$anchor, {
    get class() {
      return get(class_1);
    },
    onChange: /* @__PURE__ */ __name((ev) => handleChange(ev.currentTarget.checked), "onChange"),
    get title() {
      return title();
    },
    get disabled() {
      return disabled();
    },
    get checked() {
      return checked();
    },
    set checked($$value) {
      checked($$value);
    },
    children: /* @__PURE__ */ __name(($$anchor2, $$slotProps) => {
      var fragment_1 = root_1$1g(), node = first_child(fragment_1);
      {
        var consequent = /* @__PURE__ */ __name(($$anchor3) => {
          Dnd5eIcon($$anchor3, {
            get src() {
              return iconSrc();
            }
          });
        }, "consequent");
        if_block(node, ($$render) => {
          iconSrc() && $$render(consequent);
        });
      }
      var node_1 = sibling(node, 2);
      {
        var consequent_1 = /* @__PURE__ */ __name(($$anchor3) => {
          var i2 = root_3$v();
          template_effect(() => set_class(i2, clsx(iconClass()))), append($$anchor3, i2);
        }, "consequent_1");
        if_block(node_1, ($$render) => {
          iconClass() && $$render(consequent_1);
        });
      }
      var node_2 = sibling(node_1, 2);
      snippet(node_2, () => $$props.children ?? noop), append($$anchor2, fragment_1);
    }, "children"),
    $$slots: { default: !0 }
  }), pop();
}
__name(PropertyToggle, "PropertyToggle");
var root_1$1f = /* @__PURE__ */ template("<div> </div>"), root_3$u = /* @__PURE__ */ template("<div> </div>"), root$1W = /* @__PURE__ */ template('<div class="flex-row extra-small-gap flex-wrap"><!> <!></div>');
function ItemHeaderToggles($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getSheetContext);
  const localize = FoundryAdapter.localize;
  let equipLabelWidthCh = /* @__PURE__ */ derived(() => Math.max(localize("DND5E.Equipped").length, localize("DND5E.Unequipped").length)), identifiedLabelWidthCh = /* @__PURE__ */ derived(() => Math.max(localize("DND5E.Identified").length, localize("DND5E.Unidentified.Title").length));
  var div = root$1W(), node = child(div), disabled = /* @__PURE__ */ derived(() => !get(context).editable), title = /* @__PURE__ */ derived(() => get(context).system.equipped ? localize("DND5E.Equipped") : localize("DND5E.Unequipped"));
  PropertyToggle(node, {
    get document() {
      return get(context).item;
    },
    field: "system.equipped",
    get checked() {
      return get(context).system.equipped;
    },
    get disabled() {
      return get(disabled);
    },
    get title() {
      return get(title);
    },
    iconClass: "fas fa-user-alt fa-fw",
    children: /* @__PURE__ */ __name(($$anchor2, $$slotProps) => {
      var div_1 = root_1$1f(), text2 = child(div_1);
      template_effect(() => set_text(text2, get(context).system.equipped ? localize("DND5E.Equipped") : localize("DND5E.Unequipped"))), template_effect(() => set_attribute(div_1, "style", `width: ${get(equipLabelWidthCh) ?? ""}ch`)), append($$anchor2, div_1);
    }, "children"),
    $$slots: { default: !0 }
  });
  var node_1 = sibling(node, 2);
  {
    var consequent = /* @__PURE__ */ __name(($$anchor2) => {
      var disabled_1 = /* @__PURE__ */ derived(() => !get(context).editable), title_1 = /* @__PURE__ */ derived(() => get(context).system.identified ? localize("DND5E.Identified") : localize("DND5E.Unidentified.Title"));
      PropertyToggle($$anchor2, {
        get document() {
          return get(context).item;
        },
        field: "system.identified",
        get checked() {
          return get(context).system.identified;
        },
        get disabled() {
          return get(disabled_1);
        },
        get title() {
          return get(title_1);
        },
        iconClass: "fas fa-magnifying-glass fa-fw",
        children: /* @__PURE__ */ __name(($$anchor3, $$slotProps) => {
          var div_2 = root_3$u(), text_1 = child(div_2);
          template_effect(() => set_text(text_1, get(context).system.identified ? localize("DND5E.Identified") : localize("DND5E.Unidentified.Title"))), template_effect(() => set_attribute(div_2, "style", `width: ${get(identifiedLabelWidthCh) ?? ""}ch`)), append($$anchor3, div_2);
        }, "children"),
        $$slots: { default: !0 }
      });
    }, "consequent");
    if_block(node_1, ($$render) => {
      FoundryAdapter.canIdentify(get(context).item) && $$render(consequent);
    });
  }
  append($$anchor, div), pop();
}
__name(ItemHeaderToggles, "ItemHeaderToggles");
var root_1$1e = /* @__PURE__ */ template("<span> </span>"), root$1V = /* @__PURE__ */ template('<header class="sheet-header flexrow gap"><!> <div class="header-details flexrow small-gap"><h1 class="charname"><!></h1> <div class="item-subtitle"><h4 class="item-type"> </h4></div> <ul class="summary flexrow"><li> </li> <li><!></li> <li class="flex-row"><!></li></ul> <!></div></header> <!> <section class="tidy-sheet-body"><!></section>', 1);
function EquipmentSheet($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getItemSheetContext), appId = /* @__PURE__ */ derived(() => get(context).document.id), selectedTabId = state("");
  const localize = FoundryAdapter.localize;
  var fragment = root$1V(), header = first_child(fragment), node = child(header);
  ItemProfilePicture(node, {});
  var div = sibling(node, 2), h1 = child(div), node_1 = child(h1);
  ItemIdentifiableName(node_1, {});
  var div_1 = sibling(h1, 2), h4 = child(div_1), text2 = child(h4), ul = sibling(div_1, 2), li = child(ul), text_1 = child(li), li_1 = sibling(li, 2), node_2 = child(li_1);
  {
    var consequent = /* @__PURE__ */ __name(($$anchor2) => {
      var span = root_1$1e(), text_2 = child(span);
      template_effect(() => set_text(text_2, localize("DND5E.Unidentified.Title"))), append($$anchor2, span);
    }, "consequent"), alternate = /* @__PURE__ */ __name(($$anchor2) => {
      var disabled = /* @__PURE__ */ derived(() => !get(context).editable);
      Select($$anchor2, {
        get id() {
          return `${get(appId) ?? ""}-rarity`;
        },
        get document() {
          return get(context).item;
        },
        field: "system.rarity",
        class: "item-rarity",
        get value() {
          return get(context).system.rarity;
        },
        get disabled() {
          return get(disabled);
        },
        blankValue: "",
        children: /* @__PURE__ */ __name(($$anchor3, $$slotProps) => {
          SelectOptions($$anchor3, {
            get data() {
              return get(context).config.itemRarity;
            },
            blank: ""
          });
        }, "children"),
        $$slots: { default: !0 }
      });
    }, "alternate");
    if_block(node_2, ($$render) => {
      get(context).concealDetails ? $$render(consequent) : $$render(alternate, !1);
    });
  }
  var li_2 = sibling(li_1, 2), node_3 = child(li_2), editable = /* @__PURE__ */ derived(() => get(context).editable && !get(context).concealDetails);
  Source(node_3, {
    get document() {
      return get(context).item;
    },
    keyPath: "system.source",
    get editable() {
      return get(editable);
    }
  });
  var node_4 = sibling(ul, 2);
  ItemHeaderToggles(node_4, {});
  var node_5 = sibling(header, 2);
  Tabs(node_5, {
    get tabs() {
      return get(context).tabs;
    },
    get sheet() {
      return get(context).item.sheet;
    },
    get selectedTabId() {
      return get(selectedTabId);
    },
    set selectedTabId($$value) {
      set(selectedTabId, proxy($$value));
    }
  });
  var section = sibling(node_5, 2), node_6 = child(section);
  TabContents(node_6, {
    get tabs() {
      return get(context).tabs;
    },
    get selectedTabId() {
      return get(selectedTabId);
    }
  }), template_effect(() => {
    set_attribute(div, "data-tidy-sheet-part", CONSTANTS.SHEET_PARTS.NAME_HEADER_ROW), set_attribute(h1, "data-tidy-sheet-part", CONSTANTS.SHEET_PARTS.NAME_CONTAINER), set_text(text2, get(context).itemType ?? ""), set_text(text_1, get(context).system.type.label);
  }), append($$anchor, fragment), pop();
}
__name(EquipmentSheet, "EquipmentSheet");
function mapPropertiesToSave(context, ev, keyToSave) {
  const propertiesToSave = context.properties.options.filter(
    (property) => property.value !== keyToSave && property.selected && !context.itemOverrides.has(`system.properties.${property.value}`)
  ).map((property) => property.value);
  return ev.currentTarget.checked && propertiesToSave.push(keyToSave), {
    "system.properties": propertiesToSave
  };
}
__name(mapPropertiesToSave, "mapPropertiesToSave");
function mapMulticlassingAbilitiesToSave(context, ev) {
  const selectedAbilities = new Set(
    context.system.primaryAbility.value
  );
  return ev.currentTarget.checked ? selectedAbilities.add(ev.currentTarget.value) : selectedAbilities.delete(ev.currentTarget.value), {
    "system.primaryAbility.value": selectedAbilities
  };
}
__name(mapMulticlassingAbilitiesToSave, "mapMulticlassingAbilitiesToSave");
function mapSystemDamageTypesToSave(context, prefix, source2, ev) {
  const selectedAbilities = new Set(
    source2.types
  );
  return ev.currentTarget.checked ? selectedAbilities.add(ev.currentTarget.value) : selectedAbilities.delete(ev.currentTarget.value), {
    [`${prefix}types`]: selectedAbilities
  };
}
__name(mapSystemDamageTypesToSave, "mapSystemDamageTypesToSave");
function ItemProperties($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getItemSheetContext), appId = /* @__PURE__ */ derived(() => get(context).document.id);
  const localize = FoundryAdapter.localize;
  var fragment = comment(), node = first_child(fragment);
  each(node, 17, () => get(context).properties.options, index, ($$anchor2, property) => {
    const field = /* @__PURE__ */ derived(() => `system.properties.${get(property).value}`), isEnchanted = /* @__PURE__ */ derived(() => get(context).itemOverrides.has(get(field))), enchantedTooltip = /* @__PURE__ */ derived(() => get(isEnchanted) ? localize("DND5E.ENCHANTMENT.Warning.Override") : null);
    var id = /* @__PURE__ */ derived(() => `${get(appId) ?? ""}-properties-${get(property).value?.slugify() ?? ""}`), disabled = /* @__PURE__ */ derived(() => !get(context).editable || get(isEnchanted));
    Checkbox($$anchor2, {
      get id() {
        return get(id);
      },
      labelCssClass: "checkbox",
      get document() {
        return get(context).item;
      },
      get field() {
        return get(field);
      },
      get checked() {
        return get(property).selected;
      },
      get disabled() {
        return get(disabled);
      },
      onDataPreparing: /* @__PURE__ */ __name((ev) => mapPropertiesToSave(get(context), ev, get(property).value), "onDataPreparing"),
      get tooltip() {
        return get(enchantedTooltip);
      },
      children: /* @__PURE__ */ __name(($$anchor3, $$slotProps) => {
        var text$1 = text();
        template_effect(() => set_text(text$1, get(property).label)), append($$anchor3, text$1);
      }, "children"),
      $$slots: { default: !0 }
    });
  }), append($$anchor, fragment), pop();
}
__name(ItemProperties, "ItemProperties");
var root$1U = /* @__PURE__ */ template('<fieldset><div class="form-group"><label> </label> <div class="form-fields"><!></div></div> <div class="form-group"><label> </label> <div class="form-fields"><!> <!></div></div></fieldset> <fieldset><legend> </legend> <div class="form-group stacked container-properties"><label for=""> </label> <!></div> <div class="form-group"><label> </label> <div class="form-fields"><!></div></div> <div class="form-group"><label> </label> <div class="form-fields"><!></div></div> <div class="form-group"><label> </label> <div class="form-fields"><!> <!></div></div></fieldset> <fieldset><legend> </legend> <div class="form-group custom-section"><label> </label> <div class="form-fields"><!></div></div> <div class="form-group custom-action-section"><label> </label> <div class="form-fields"><!></div></div></fieldset>', 1);
function ContainerDetailsTab($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getContainerSheetClassicContext), appId = /* @__PURE__ */ derived(() => get(context).document.id);
  const localize = FoundryAdapter.localize;
  var fragment = root$1U(), fieldset = first_child(fragment), div = child(fieldset), label = child(div), text2 = child(label);
  template_effect(() => set_text(text2, localize("DND5E.Weight")));
  var div_1 = sibling(label, 2), node = child(div_1), disabled = /* @__PURE__ */ derived(() => !get(context).editable);
  NumberInput(node, {
    get id() {
      return `${get(appId) ?? ""}-weight-value`;
    },
    get value() {
      return get(context).source.weight.value;
    },
    step: "any",
    field: "system.weight.value",
    get document() {
      return get(context).item;
    },
    get disabled() {
      return get(disabled);
    },
    selectOnFocus: !0
  });
  var div_2 = sibling(div, 2), label_1 = child(div_2), text_1 = child(label_1);
  template_effect(() => set_text(text_1, localize("DND5E.Price")));
  var div_3 = sibling(label_1, 2), node_1 = child(div_3), disabled_1 = /* @__PURE__ */ derived(() => !get(context).editable);
  NumberInput(node_1, {
    get id() {
      return `${get(appId) ?? ""}-price-value`;
    },
    get value() {
      return get(context).source.price.value;
    },
    step: "any",
    field: "system.price.value",
    get document() {
      return get(context).item;
    },
    get disabled() {
      return get(disabled_1);
    },
    selectOnFocus: !0,
    cssClass: "large-value"
  });
  var node_2 = sibling(node_1, 2), disabled_2 = /* @__PURE__ */ derived(() => !get(context).editable);
  Select(node_2, {
    get value() {
      return get(context).source.price.denomination;
    },
    field: "system.price.denomination",
    get document() {
      return get(context).item;
    },
    get disabled() {
      return get(disabled_2);
    },
    children: /* @__PURE__ */ __name(($$anchor2, $$slotProps) => {
      SelectOptions($$anchor2, {
        get data() {
          return get(context).config.currencies;
        },
        labelProp: "abbreviation"
      });
    }, "children"),
    $$slots: { default: !0 }
  });
  var fieldset_1 = sibling(fieldset, 2), legend = child(fieldset_1), text_2 = child(legend);
  template_effect(() => set_text(text_2, localize("DND5E.ItemContainerDetails")));
  var div_4 = sibling(legend, 2), label_2 = child(div_4), text_3 = child(label_2);
  template_effect(() => set_text(text_3, localize("DND5E.ItemContainerProperties")));
  var node_3 = sibling(label_2, 2);
  ItemProperties(node_3, {});
  var div_5 = sibling(div_4, 2), label_3 = child(div_5), text_4 = child(label_3);
  template_effect(() => set_text(text_4, localize("DND5E.ItemContainerCapacity")));
  var div_6 = sibling(label_3, 2), node_4 = child(div_6), disabled_3 = /* @__PURE__ */ derived(() => !get(context).editable);
  NumberInput(node_4, {
    get id() {
      return `${get(appId) ?? ""}-capacity-value`;
    },
    get document() {
      return get(context).item;
    },
    field: "system.capacity.value",
    get value() {
      return get(context).source.capacity.value;
    },
    get disabled() {
      return get(disabled_3);
    },
    placeholder: "—"
  });
  var div_7 = sibling(div_5, 2), label_4 = child(div_7), text_5 = child(label_4);
  template_effect(() => set_text(text_5, localize("DND5E.ItemContainerCapacityType")));
  var div_8 = sibling(label_4, 2), node_5 = child(div_8), disabled_4 = /* @__PURE__ */ derived(() => !get(context).editable);
  Select(node_5, {
    get id() {
      return `${get(appId) ?? ""}-capacity-type`;
    },
    get document() {
      return get(context).item;
    },
    field: "system.capacity.type",
    get value() {
      return get(context).source.capacity.type;
    },
    get disabled() {
      return get(disabled_4);
    },
    children: /* @__PURE__ */ __name(($$anchor2, $$slotProps) => {
      SelectOptions($$anchor2, {
        get data() {
          return get(context).config.itemCapacityTypes;
        }
      });
    }, "children"),
    $$slots: { default: !0 }
  });
  var div_9 = sibling(div_7, 2), label_5 = child(div_9), text_6 = child(label_5);
  template_effect(() => set_text(text_6, localize("DND5E.Attunement")));
  var div_10 = sibling(label_5, 2), node_6 = child(div_10), disabled_5 = /* @__PURE__ */ derived(() => !get(context).editable || // @ts-expect-error
  !get(context).config.attunementTypes[get(context).system.attunement]), title = /* @__PURE__ */ derived(() => localize("DND5E.AttunementAttuned"));
  Checkbox(node_6, {
    get id() {
      return `${get(appId) ?? ""}-attuned`;
    },
    get document() {
      return get(context).item;
    },
    field: "system.attuned",
    get checked() {
      return get(context).source.attuned;
    },
    get disabled() {
      return get(disabled_5);
    },
    get title() {
      return get(title);
    }
  });
  var node_7 = sibling(node_6, 2), disabled_6 = /* @__PURE__ */ derived(() => !get(context).editable);
  Select(node_7, {
    get id() {
      return `${get(appId) ?? ""}-attunement`;
    },
    get document() {
      return get(context).item;
    },
    field: "system.attunement",
    get value() {
      return get(context).source.attunement;
    },
    get disabled() {
      return get(disabled_6);
    },
    children: /* @__PURE__ */ __name(($$anchor2, $$slotProps) => {
      var blank = /* @__PURE__ */ derived(() => localize("DND5E.AttunementNone"));
      SelectOptions($$anchor2, {
        get data() {
          return get(context).config.attunementTypes;
        },
        get blank() {
          return get(blank);
        }
      });
    }, "children"),
    $$slots: { default: !0 }
  });
  var fieldset_2 = sibling(fieldset_1, 2), legend_1 = child(fieldset_2), text_7 = child(legend_1);
  template_effect(() => set_text(text_7, FoundryAdapter.localize("TIDY5E.Tidy5eSettings")));
  var div_11 = sibling(legend_1, 2), label_6 = child(div_11), text_8 = child(label_6);
  template_effect(() => set_text(text_8, FoundryAdapter.localize("TIDY5E.Section.Label")));
  var div_12 = sibling(label_6, 2), node_8 = child(div_12), value = /* @__PURE__ */ derived(() => TidyFlags.section.get(get(context).item)), disabled_7 = /* @__PURE__ */ derived(() => !get(context).editable);
  TextInput(node_8, {
    get document() {
      return get(context).item;
    },
    get field() {
      return TidyFlags.section.prop;
    },
    get value() {
      return get(value);
    },
    selectOnFocus: !0,
    get disabled() {
      return get(disabled_7);
    },
    get id() {
      return `${get(appId) ?? ""}-custom-section`;
    }
  });
  var div_13 = sibling(div_11, 2), label_7 = child(div_13), text_9 = child(label_7);
  template_effect(() => set_text(text_9, FoundryAdapter.localize("TIDY5E.Section.ActionLabel")));
  var div_14 = sibling(label_7, 2), node_9 = child(div_14), value_1 = /* @__PURE__ */ derived(() => TidyFlags.actionSection.get(get(context).item)), disabled_8 = /* @__PURE__ */ derived(() => !get(context).editable);
  TextInput(node_9, {
    get document() {
      return get(context).item;
    },
    get field() {
      return TidyFlags.actionSection.prop;
    },
    get value() {
      return get(value_1);
    },
    selectOnFocus: !0,
    get disabled() {
      return get(disabled_8);
    },
    get id() {
      return `${get(appId) ?? ""}-custom-action-section`;
    }
  }), template_effect(() => {
    set_attribute(label, "for", `${get(appId) ?? ""}-weight`), set_attribute(label_1, "for", `${get(appId) ?? ""}-price-value`), set_attribute(label_3, "for", `${get(appId) ?? ""}-capacity-value`), set_attribute(label_4, "for", `${get(appId) ?? ""}-capacity-type`), set_attribute(label_5, "for", `${get(appId) ?? ""}-attunement`), set_attribute(label_6, "for", `${get(appId) ?? ""}-custom-section`), set_attribute(label_7, "for", `${get(appId) ?? ""}-custom-action-section`);
  }), append($$anchor, fragment), pop();
}
__name(ContainerDetailsTab, "ContainerDetailsTab");
var root$1T = /* @__PURE__ */ template('<div class="unidentified-notice svelte-ak5nvu"><div class="svelte-ak5nvu"><strong class="svelte-ak5nvu"> </strong> <p> </p></div></div>');
function UnidentifiedNotice($$anchor, $$props) {
  push($$props, !1);
  const localize = FoundryAdapter.localize;
  init();
  var div = root$1T(), div_1 = child(div), strong = child(div_1), text2 = child(strong);
  template_effect(() => set_text(text2, localize("DND5E.Unidentified.Title")));
  var p2 = sibling(strong, 2), text_1 = child(p2);
  template_effect(() => set_text(text_1, localize("DND5E.Unidentified.Notice"))), transition(3, div, () => fade, () => ({ delay: 0, duration: 750 })), append($$anchor, div), pop();
}
__name(UnidentifiedNotice, "UnidentifiedNotice");
var root$1S = /* @__PURE__ */ template('<div role="presentation" class="concealing-parent inert-animation-container svelte-127wf1k"><div role="presentation"><!></div> <!></div>');
function ContentConcealer($$anchor, $$props) {
  push($$props, !0);
  var div = root$1S(), div_1 = child(div), node = child(div_1);
  snippet(node, () => $$props.children ?? noop);
  var node_1 = sibling(div_1, 2);
  {
    var consequent = /* @__PURE__ */ __name(($$anchor2) => {
      UnidentifiedNotice($$anchor2, {});
    }, "consequent");
    if_block(node_1, ($$render) => {
      $$props.conceal && $$render(consequent);
    });
  }
  template_effect(() => div_1.inert = $$props.conceal), append($$anchor, div), pop();
}
__name(ContentConcealer, "ContentConcealer");
var on_click$H = /* @__PURE__ */ __name((event2, onAddClicked, section) => onAddClicked(section()), "on_click$H"), root_4$m = /* @__PURE__ */ template('<button type="button" class="active-effect-control inline-icon-button"><i class="fas fa-plus"></i> </button>'), root_6$e = /* @__PURE__ */ template('<li class="notification info"> </li>'), root_5$n = /* @__PURE__ */ template('<ol class="info"></ol>'), on_mousedown = /* @__PURE__ */ __name((event2, handleMiddleClickToEdit, effect2) => handleMiddleClickToEdit(event2, effect2()), "on_mousedown"), on_click_1$k = /* @__PURE__ */ __name((__1, effect2) => effect2().update({ disabled: !effect2().disabled }), "on_click_1$k"), root_9$e = /* @__PURE__ */ template('<button type="button" class="active-effect-control inline-icon-button"><i class="fas"></i></button>'), on_click_2$9 = /* @__PURE__ */ __name((__2, effect2) => effect2().sheet.render(!0), "on_click_2$9"), on_click_3$4 = /* @__PURE__ */ __name((__3, effect2) => effect2().deleteDialog(), "on_click_3$4"), root_8$g = /* @__PURE__ */ template('<!> <button type="button" class="active-effect-control inline-icon-button"><i class="fas fa-edit"></i></button> <button type="button" class="active-effect-control inline-icon-button"><i class="fas fa-trash"></i></button>', 1), root_7$i = /* @__PURE__ */ template('<li class="item effect flexrow" data-info-card="effect"><div class="item-name effect-name flexrow"><img class="item-image"> <span class="truncate"> </span></div> <div class="effect-source truncate"> </div> <div class="effect-duration truncate"> </div> <div class="item-controls active-effect-controls flexrow"><!></div></li>'), root_3$t = /* @__PURE__ */ template('<li class="items-header flexrow"><h3 class="item-name effect-name flexrow"> </h3> <div class="effect-source"> </div> <div class="effect-source"> </div> <div class="item-controls active-effect-controls flexrow"><!></div></li> <!> <ol class="item-list"></ol>', 1), root_1$1d = /* @__PURE__ */ template('<ol class="items-list effects-list"></ol>');
function ItemActiveEffectsTab($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getSheetContext), effects = /* @__PURE__ */ derived(() => Object.entries(get(context).effects));
  const localize = FoundryAdapter.localize;
  function onAddClicked(section) {
    const owner = get(context).item;
    return FoundryAdapter.addEffect(section.type, owner);
  }
  __name(onAddClicked, "onAddClicked");
  function handleMiddleClickToEdit(event2, effect2) {
    event2.button === CONSTANTS.MOUSE_BUTTON_AUXILIARY && effect2.sheet.render(!0);
  }
  __name(handleMiddleClickToEdit, "handleMiddleClickToEdit");
  function handleDragStart(event2, effect2) {
    if (!effect2)
      return;
    const dragData = effect2.toDragData();
    event2.dataTransfer?.setData("text/plain", JSON.stringify(dragData));
  }
  __name(handleDragStart, "handleDragStart"), ContentConcealer($$anchor, {
    get conceal() {
      return get(context).concealDetails;
    },
    children: /* @__PURE__ */ __name(($$anchor2, $$slotProps) => {
      var ol = root_1$1d();
      each(ol, 21, () => get(effects), index, ($$anchor3, $$item) => {
        let section = /* @__PURE__ */ __name(() => get($$item)[1], "section");
        var fragment_1 = comment();
        const effectEntries = /* @__PURE__ */ derived(() => section().effects.map((effect2) => ({ effect: effect2 })));
        var node = first_child(fragment_1);
        {
          var consequent_4 = /* @__PURE__ */ __name(($$anchor4) => {
            var fragment_2 = root_3$t(), li = first_child(fragment_2), h3 = child(li), text2 = child(h3);
            template_effect(() => set_text(text2, localize(section().label)));
            var div = sibling(h3, 2), text_1 = child(div);
            template_effect(() => set_text(text_1, localize("DND5E.SOURCE.FIELDS.source.label")));
            var div_1 = sibling(div, 2), text_2 = child(div_1);
            template_effect(() => set_text(text_2, localize("DND5E.Duration")));
            var div_2 = sibling(div_1, 2), node_1 = child(div_2);
            {
              var consequent = /* @__PURE__ */ __name(($$anchor5) => {
                var button = root_4$m();
                template_effect(() => set_attribute(button, "title", localize("DND5E.EffectCreate"))), button.__click = [on_click$H, onAddClicked, section];
                var text_3 = sibling(child(button));
                template_effect(() => set_text(text_3, ` ${localize("DND5E.Add") ?? ""}`)), template_effect(() => set_attribute(button, "tabindex", settings.value.useAccessibleKeyboardSupport ? 0 : -1)), append($$anchor5, button);
              }, "consequent");
              if_block(node_1, ($$render) => {
                get(context).editable && $$render(consequent);
              });
            }
            var node_2 = sibling(li, 2);
            {
              var consequent_1 = /* @__PURE__ */ __name(($$anchor5) => {
                var ol_1 = root_5$n();
                each(ol_1, 21, () => section().info, index, ($$anchor6, info) => {
                  var li_1 = root_6$e(), text_4 = child(li_1);
                  template_effect(() => set_text(text_4, get(info) ?? "")), append($$anchor6, li_1);
                }), append($$anchor5, ol_1);
              }, "consequent_1");
              if_block(node_2, ($$render) => {
                section().info && $$render(consequent_1);
              });
            }
            var ol_2 = sibling(node_2, 2);
            each(ol_2, 21, () => get(effectEntries), index, ($$anchor5, $$item2) => {
              let effect2 = /* @__PURE__ */ __name(() => get($$item2).effect, "effect");
              var li_2 = root_7$i();
              li_2.__mousedown = [
                on_mousedown,
                handleMiddleClickToEdit,
                effect2
              ];
              var div_3 = child(li_2), img = child(div_3), span = sibling(img, 2), text_5 = child(span), div_4 = sibling(div_3, 2), text_6 = child(div_4), div_5 = sibling(div_4, 2), text_7 = child(div_5), div_6 = sibling(div_5, 2), node_3 = child(div_6);
              {
                var consequent_3 = /* @__PURE__ */ __name(($$anchor6) => {
                  var fragment_3 = root_8$g(), node_4 = first_child(fragment_3);
                  {
                    var consequent_2 = /* @__PURE__ */ __name(($$anchor7) => {
                      var button_1 = root_9$e();
                      button_1.__click = [on_click_1$k, effect2];
                      var i2 = child(button_1);
                      template_effect(() => {
                        set_attribute(button_1, "title", effect2().disabled ? "DND5E.EffectEnable" : "DND5E.EffectDisable"), set_attribute(button_1, "tabindex", settings.value.useAccessibleKeyboardSupport ? 0 : -1), toggle_class(i2, "fa-check", effect2().disabled), toggle_class(i2, "fa-times", !effect2().disabled);
                      }), append($$anchor7, button_1);
                    }, "consequent_2");
                    if_block(node_4, ($$render) => {
                      section().type !== "enchantment" && $$render(consequent_2);
                    });
                  }
                  var button_2 = sibling(node_4, 2);
                  template_effect(() => set_attribute(button_2, "title", localize("DND5E.EffectEdit"))), button_2.__click = [on_click_2$9, effect2];
                  var button_3 = sibling(button_2, 2);
                  template_effect(() => set_attribute(button_3, "title", localize("DND5E.EffectDelete"))), button_3.__click = [on_click_3$4, effect2], template_effect(() => {
                    set_attribute(button_2, "tabindex", settings.value.useAccessibleKeyboardSupport ? 0 : -1), set_attribute(button_3, "tabindex", settings.value.useAccessibleKeyboardSupport ? 0 : -1);
                  }), append($$anchor6, fragment_3);
                }, "consequent_3");
                if_block(node_3, ($$render) => {
                  get(context).editable && $$render(consequent_3);
                });
              }
              template_effect(() => {
                set_attribute(li_2, "data-effect-id", effect2().id), set_attribute(li_2, "draggable", get(context).owner), set_attribute(li_2, "data-context-menu", CONSTANTS.CONTEXT_MENU_TYPE_EFFECTS), set_attribute(li_2, "data-info-card-entity-uuid", effect2().uuid), set_attribute(img, "src", effect2().img ?? effect2().icon), set_attribute(img, "alt", effect2().name ?? ""), set_attribute(span, "title", effect2().name ?? ""), set_text(text_5, effect2().name ?? ""), set_attribute(div_4, "title", effect2().sourceName ?? ""), set_text(text_6, effect2().sourceName ?? ""), set_attribute(div_5, "title", effect2().duration.label ?? ""), set_text(text_7, effect2().duration.label ?? "");
              }), event("dragstart", li_2, (ev) => handleDragStart(ev, effect2())), append($$anchor5, li_2);
            }), template_effect(() => set_attribute(li, "data-effect-type", section().type)), append($$anchor4, fragment_2);
          }, "consequent_4");
          if_block(node, ($$render) => {
            section().hidden || $$render(consequent_4);
          });
        }
        append($$anchor3, fragment_1);
      }), event("drop", ol, (ev) => get(context).item.sheet._onDrop(ev)), append($$anchor2, ol);
    }, "children"),
    $$slots: { default: !0 }
  }), pop();
}
__name(ItemActiveEffectsTab, "ItemActiveEffectsTab");
delegate(["click", "mousedown"]);
var on_click$G = /* @__PURE__ */ __name((_, toggleAdvancementLock, context) => toggleAdvancementLock(get(context).item), "on_click$G"), root_3$s = /* @__PURE__ */ template('<i class="fas fa-lock-open"></i> ', 1), root_4$l = /* @__PURE__ */ template('<i class="fas fa-lock"></i> ', 1), root_2$u = /* @__PURE__ */ template('<button class="inline-icon-button"><!></button>'), on_click_1$j = /* @__PURE__ */ __name((__1, context) => FoundryAdapter.createAdvancementSelectionDialog(get(context).item), "on_click_1$j"), root_5$m = /* @__PURE__ */ template('<div class="item-controls add-button"><button type="button" class="inline-icon-button"><i class="fas fa-plus"></i> </button></div>'), root_6$d = /* @__PURE__ */ template('<div role="presentation"></div>'), root_1$1c = /* @__PURE__ */ template('<li class="items-header main-controls advancement flex-row justify-content-space-between"><div class="item-controls configuration-mode-control"><!></div> <!></li>'), on_click_2$8 = /* @__PURE__ */ __name((__2, level, context) => FoundryAdapter.modifyAdvancementChoices(level(), get(context).item), "on_click_2$8"), root_12$3 = /* @__PURE__ */ template('<div><button type="button" class="inline-transparent-button"> </button></div>'), root_13$4 = /* @__PURE__ */ template('<div class="item-checkmark"><i class="fas fa-check-circle"></i></div>'), root_15$2 = /* @__PURE__ */ template('<div class="item-warning"><i class="fas fa-exclamation-triangle"></i></div>'), root_18$1 = /* @__PURE__ */ template('<img alt="">'), root_19 = /* @__PURE__ */ template('<div class="flexrow"><!></div>'), on_click_3$3 = /* @__PURE__ */ __name((__3, advancement, context) => FoundryAdapter.editAdvancement(get(advancement).id, get(context).item), "on_click_3$3"), on_click_4 = /* @__PURE__ */ __name((__4, advancement, context) => FoundryAdapter.deleteAdvancement(get(advancement).id, get(context).item), "on_click_4"), root_23$1 = /* @__PURE__ */ template('<div class="item-controls flexrow"><button type="button" class="inline-icon-button"><i class="fas fa-edit"></i></button> <button type="button" class="inline-icon-button"><i class="fas fa-trash"></i></button></div>'), root_24$1 = /* @__PURE__ */ template('<div class="item-summary"><!></div>'), root_16$4 = /* @__PURE__ */ template('<li class="advancement-item item flexrow"><div class="item-name flexrow"><div class="item-image"><!></div> <span class="title truncate"><!></span></div> <!> <!> <!></li>'), root_7$h = /* @__PURE__ */ template('<li class="items-header flexrow"><h3 class="item-name flexrow"><!></h3> <!> <!></li> <ol class="item-list"></ol>', 1), root$1R = /* @__PURE__ */ template('<ol class="items-list flex-1"><!> <!></ol>');
function ItemAdvancementTab($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getItemSheetContext), advancements = /* @__PURE__ */ derived(() => Object.entries(get(context).advancement));
  const localize = FoundryAdapter.localize;
  function toggleAdvancementLock(item) {
    get(context).toggleAdvancementLock();
  }
  __name(toggleAdvancementLock, "toggleAdvancementLock");
  const basicSvgFilePathRegex = /\.svg$/i;
  function isSvg(iconPath) {
    return basicSvgFilePathRegex.test(iconPath?.trim());
  }
  __name(isSvg, "isSvg");
  function handleAdvancementDragStart(event2, advancement) {
    if (!advancement)
      return;
    const dragData = get(context).item.advancement.byId[advancement.id]?.toDragData();
    event2.dataTransfer?.setData("text/plain", JSON.stringify(dragData));
  }
  __name(handleAdvancementDragStart, "handleAdvancementDragStart");
  var ol = root$1R(), node = child(ol);
  {
    var consequent_3 = /* @__PURE__ */ __name(($$anchor2) => {
      var li = root_1$1c(), div = child(li), node_1 = child(div);
      {
        var consequent_1 = /* @__PURE__ */ __name(($$anchor3) => {
          var button = root_2$u();
          button.__click = [on_click$G, toggleAdvancementLock, context], template_effect(() => set_attribute(button, "title", localize("DND5E.AdvancementConfigurationActionDisable")));
          var node_2 = child(button);
          {
            var consequent = /* @__PURE__ */ __name(($$anchor4) => {
              var fragment = root_3$s(), text2 = sibling(first_child(fragment));
              template_effect(() => set_text(text2, ` ${localize("DND5E.AdvancementConfigurationModeEnabled") ?? ""}`)), append($$anchor4, fragment);
            }, "consequent"), alternate = /* @__PURE__ */ __name(($$anchor4) => {
              var fragment_1 = root_4$l(), text_1 = sibling(first_child(fragment_1));
              template_effect(() => set_text(text_1, ` ${localize("DND5E.AdvancementConfigurationModeDisabled") ?? ""}`)), append($$anchor4, fragment_1);
            }, "alternate");
            if_block(node_2, ($$render) => {
              get(context).advancementEditable ? $$render(consequent) : $$render(alternate, !1);
            });
          }
          template_effect(() => set_attribute(button, "tabindex", settings.value.useAccessibleKeyboardSupport ? 0 : -1)), append($$anchor3, button);
        }, "consequent_1");
        if_block(node_1, ($$render) => {
          get(context).editable && get(context).isEmbedded && $$render(consequent_1);
        });
      }
      var node_3 = sibling(div, 2);
      {
        var consequent_2 = /* @__PURE__ */ __name(($$anchor3) => {
          var div_1 = root_5$m(), button_1 = child(div_1);
          template_effect(() => set_attribute(button_1, "title", localize("DND5E.AdvancementControlCreate"))), template_effect(() => set_attribute(button_1, "aria-label", localize("DND5E.AdvancementControlCreate"))), button_1.__click = [on_click_1$j, context];
          var text_2 = sibling(child(button_1));
          template_effect(() => set_text(text_2, ` ${localize("DND5E.Add") ?? ""}`)), template_effect(() => set_attribute(button_1, "tabindex", settings.value.useAccessibleKeyboardSupport ? 0 : -1)), append($$anchor3, div_1);
        }, "consequent_2"), alternate_1 = /* @__PURE__ */ __name(($$anchor3) => {
          var div_2 = root_6$d();
          append($$anchor3, div_2);
        }, "alternate_1");
        if_block(node_3, ($$render) => {
          get(context).editable && get(context).advancementEditable ? $$render(consequent_2) : $$render(alternate_1, !1);
        });
      }
      append($$anchor2, li);
    }, "consequent_3");
    if_block(node, ($$render) => {
      get(context).editable && $$render(consequent_3);
    });
  }
  var node_4 = sibling(node, 2);
  each(node_4, 17, () => get(advancements), index, ($$anchor2, $$item) => {
    let level = /* @__PURE__ */ __name(() => get($$item)[0], "level"), data = /* @__PURE__ */ __name(() => get($$item)[1], "data");
    var fragment_2 = root_7$h(), li_1 = first_child(fragment_2), h3 = child(li_1), node_5 = child(h3);
    {
      var consequent_4 = /* @__PURE__ */ __name(($$anchor3) => {
        var text_3 = text();
        template_effect(() => set_text(text_3, localize("DND5E.AdvancementLevelAnyHeader"))), append($$anchor3, text_3);
      }, "consequent_4"), alternate_3 = /* @__PURE__ */ __name(($$anchor3) => {
        var fragment_4 = comment(), node_6 = first_child(fragment_4);
        {
          var consequent_5 = /* @__PURE__ */ __name(($$anchor4) => {
            var text_4 = text();
            template_effect(() => set_text(text_4, localize("DND5E.AdvancementLevelNoneHeader"))), append($$anchor4, text_4);
          }, "consequent_5"), alternate_2 = /* @__PURE__ */ __name(($$anchor4) => {
            var text_5 = text();
            template_effect(() => set_text(text_5, localize("DND5E.AdvancementLevelHeader", { level: level() }))), append($$anchor4, text_5);
          }, "alternate_2");
          if_block(
            node_6,
            ($$render) => {
              level() === "unconfigured" ? $$render(consequent_5) : $$render(alternate_2, !1);
            },
            !0
          );
        }
        append($$anchor3, fragment_4);
      }, "alternate_3");
      if_block(node_5, ($$render) => {
        level() === "0" ? $$render(consequent_4) : $$render(alternate_3, !1);
      });
    }
    var node_7 = sibling(h3, 2);
    {
      var consequent_6 = /* @__PURE__ */ __name(($$anchor3) => {
        var div_3 = root_12$3(), button_2 = child(div_3);
        button_2.__click = [on_click_2$8, level, context];
        var text_6 = child(button_2);
        template_effect(() => set_text(text_6, localize("DND5E.AdvancementModifyChoices"))), template_effect(() => set_attribute(button_2, "tabindex", settings.value.useAccessibleKeyboardSupport ? 0 : -1)), append($$anchor3, div_3);
      }, "consequent_6");
      if_block(node_7, ($$render) => {
        get(context).editable && data().configured && level() !== "unconfigured" && $$render(consequent_6);
      });
    }
    var node_8 = sibling(node_7, 2);
    {
      var consequent_7 = /* @__PURE__ */ __name(($$anchor3) => {
        var div_4 = root_13$4();
        template_effect(() => set_attribute(div_4, "title", localize("DND5E.AdvancementConfiguredComplete"))), append($$anchor3, div_4);
      }, "consequent_7"), alternate_4 = /* @__PURE__ */ __name(($$anchor3) => {
        var fragment_7 = comment(), node_9 = first_child(fragment_7);
        {
          var consequent_8 = /* @__PURE__ */ __name(($$anchor4) => {
            var div_5 = root_15$2();
            template_effect(() => set_attribute(div_5, "title", localize("DND5E.AdvancementConfiguredIncomplete"))), append($$anchor4, div_5);
          }, "consequent_8");
          if_block(
            node_9,
            ($$render) => {
              data().configured === "partial" && $$render(consequent_8);
            },
            !0
          );
        }
        append($$anchor3, fragment_7);
      }, "alternate_4");
      if_block(node_8, ($$render) => {
        data().configured === "full" ? $$render(consequent_7) : $$render(alternate_4, !1);
      });
    }
    var ol_1 = sibling(li_1, 2);
    each(ol_1, 21, () => data().items, index, ($$anchor3, advancement) => {
      var li_2 = root_16$4();
      const isSvgIcon = /* @__PURE__ */ derived(() => isSvg(get(advancement).icon));
      var div_6 = child(li_2), div_7 = child(div_6), node_10 = child(div_7);
      {
        var consequent_9 = /* @__PURE__ */ __name(($$anchor4) => {
          InlineSvg($$anchor4, {
            get svgUrl() {
              return get(advancement).icon;
            }
          });
        }, "consequent_9"), alternate_5 = /* @__PURE__ */ __name(($$anchor4) => {
          var img = root_18$1();
          template_effect(() => set_attribute(img, "src", get(advancement).icon)), append($$anchor4, img);
        }, "alternate_5");
        if_block(node_10, ($$render) => {
          get(isSvgIcon) ? $$render(consequent_9) : $$render(alternate_5, !1);
        });
      }
      var span = sibling(div_7, 2), node_11 = child(span);
      html(node_11, () => get(advancement).title);
      var node_12 = sibling(div_6, 2);
      {
        var consequent_12 = /* @__PURE__ */ __name(($$anchor4) => {
          var div_8 = root_19(), node_13 = child(div_8);
          {
            var consequent_10 = /* @__PURE__ */ __name(($$anchor5) => {
              var text_7 = text();
              template_effect(() => set_text(text_7, localize("DND5E.AdvancementClassRestrictionPrimary"))), append($$anchor5, text_7);
            }, "consequent_10"), alternate_6 = /* @__PURE__ */ __name(($$anchor5) => {
              var fragment_10 = comment(), node_14 = first_child(fragment_10);
              {
                var consequent_11 = /* @__PURE__ */ __name(($$anchor6) => {
                  var text_8 = text();
                  template_effect(() => set_text(text_8, localize("DND5E.AdvancementClassRestrictionSecondary"))), append($$anchor6, text_8);
                }, "consequent_11");
                if_block(
                  node_14,
                  ($$render) => {
                    get(advancement).classRestriction === "secondary" && $$render(consequent_11);
                  },
                  !0
                );
              }
              append($$anchor5, fragment_10);
            }, "alternate_6");
            if_block(node_13, ($$render) => {
              get(advancement).classRestriction === "primary" ? $$render(consequent_10) : $$render(alternate_6, !1);
            });
          }
          append($$anchor4, div_8);
        }, "consequent_12");
        if_block(node_12, ($$render) => {
          (get(context).advancementEditable || !get(context).isEmbedded) && $$render(consequent_12);
        });
      }
      var node_15 = sibling(node_12, 2);
      {
        var consequent_13 = /* @__PURE__ */ __name(($$anchor4) => {
          var div_9 = root_23$1(), button_3 = child(div_9);
          template_effect(() => set_attribute(button_3, "title", localize("DND5E.AdvancementControlEdit"))), template_effect(() => set_attribute(button_3, "aria-label", localize("DND5E.AdvancementControlEdit"))), button_3.__click = [on_click_3$3, advancement, context];
          var button_4 = sibling(button_3, 2);
          template_effect(() => set_attribute(button_4, "title", localize("DND5E.AdvancementControlDelete"))), template_effect(() => set_attribute(button_4, "aria-label", localize("DND5E.AdvancementControlDelete"))), button_4.__click = [on_click_4, advancement, context], template_effect(() => {
            set_attribute(button_3, "tabindex", settings.value.useAccessibleKeyboardSupport ? 0 : -1), set_attribute(button_4, "tabindex", settings.value.useAccessibleKeyboardSupport ? 0 : -1);
          }), append($$anchor4, div_9);
        }, "consequent_13");
        if_block(node_15, ($$render) => {
          get(context).editable && get(context).advancementEditable && $$render(consequent_13);
        });
      }
      var node_16 = sibling(node_15, 2);
      {
        var consequent_14 = /* @__PURE__ */ __name(($$anchor4) => {
          var div_10 = root_24$1(), node_17 = child(div_10);
          html(node_17, () => get(advancement).summary), append($$anchor4, div_10);
        }, "consequent_14");
        if_block(node_16, ($$render) => {
          get(advancement).summary && $$render(consequent_14);
        });
      }
      template_effect(() => {
        set_attribute(li_2, "data-id", get(advancement).id), set_attribute(li_2, "draggable", get(context).editable), toggle_class(div_7, "svg", get(isSvgIcon)), set_attribute(span, "title", get(advancement).title);
      }), event("dragstart", li_2, (ev) => handleAdvancementDragStart(ev, get(advancement))), append($$anchor3, li_2);
    }), template_effect(() => set_attribute(li_1, "data-level", level())), append($$anchor2, fragment_2);
  }), event("drop", ol, (ev) => get(context).owner && get(context).item.sheet._onDrop(ev)), append($$anchor, ol), pop();
}
__name(ItemAdvancementTab, "ItemAdvancementTab");
delegate(["click"]);
var on_click$F = /* @__PURE__ */ __name((_, context) => FoundryAdapter.openStartingEquipmentConfig(get(context).item), "on_click$F"), root_1$1b = /* @__PURE__ */ template('<span class="svelte-cyol35"><button type="button" class="configure-starting-equipment inline-icon-button"><i class="fas fa-gear"></i></button></span>'), root$1Q = /* @__PURE__ */ template('<h3 class="form-header flex-row justify-content-space-between"> <!></h3> <div class="starting-equipment-text svelte-cyol35"><!></div> <div class="form-group"><label> </label> <div class="form-fields"><!></div> <p class="hint"> </p></div>', 1);
function ItemStartingEquipment($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getItemSheetContext), appId = /* @__PURE__ */ derived(() => get(context).document.id);
  const localize = FoundryAdapter.localize;
  var fragment = root$1Q(), h3 = first_child(fragment), text2 = child(h3);
  template_effect(() => set_text(text2, `${localize("DND5E.StartingEquipment.Title") ?? ""} `));
  var node = sibling(text2);
  {
    var consequent = /* @__PURE__ */ __name(($$anchor2) => {
      var span = root_1$1b(), button = child(span);
      template_effect(() => set_attribute(button, "title", localize("DND5E.StartingEquipment.Action.Configure"))), template_effect(() => set_attribute(button, "aria-label", localize("DND5E.StartingEquipment.Action.Configure"))), button.__click = [on_click$F, context], template_effect(() => set_attribute(button, "tabindex", settings.value.useAccessibleKeyboardSupport ? 0 : -1)), append($$anchor2, span);
    }, "consequent");
    if_block(node, ($$render) => {
      get(context).editable && $$render(consequent);
    });
  }
  var div = sibling(h3, 2), node_1 = child(div);
  html(node_1, () => coalesce(get(context).system.startingEquipmentDescription, localize("None")));
  var div_1 = sibling(div, 2), label = child(div_1), text_1 = child(label);
  template_effect(() => set_text(text_1, localize("DND5E.StartingEquipment.Wealth.Label")));
  var div_2 = sibling(label, 2), node_2 = child(div_2), disabled = /* @__PURE__ */ derived(() => !get(context).editable);
  TextInput(node_2, {
    get id() {
      return `${get(appId) ?? ""}-wealth`;
    },
    get document() {
      return get(context).item;
    },
    field: "system.wealth",
    get value() {
      return get(context).source.wealth;
    },
    get disabled() {
      return get(disabled);
    }
  });
  var p2 = sibling(div_2, 2), text_2 = child(p2);
  template_effect(() => set_text(text_2, localize("DND5E.StartingEquipment.Wealth.Hint"))), template_effect(() => set_attribute(label, "for", `${get(appId) ?? ""}-wealth`)), append($$anchor, fragment), pop();
}
__name(ItemStartingEquipment, "ItemStartingEquipment");
delegate(["click"]);
var root$1P = /* @__PURE__ */ template('<div class="form-group"><label> </label> <div class="form-fields"><!></div> <p class="hint"> </p></div> <!>', 1);
function ItemBackgroundDetailsTab($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getItemSheetContext), appId = /* @__PURE__ */ derived(() => get(context).document.id);
  const localize = FoundryAdapter.localize;
  var fragment = root$1P(), div = first_child(fragment), label = child(div), text2 = child(label);
  template_effect(() => set_text(text2, localize("DND5E.Identifier")));
  var div_1 = sibling(label, 2), node = child(div_1), disabled = /* @__PURE__ */ derived(() => !get(context).editable);
  TextInput(node, {
    get id() {
      return `${get(appId) ?? ""}-identifier`;
    },
    get document() {
      return get(context).item;
    },
    field: "system.identifier",
    get value() {
      return get(context).source.identifier;
    },
    get placeholder() {
      return get(context).item.identifier;
    },
    get disabled() {
      return get(disabled);
    }
  });
  var p2 = sibling(div_1, 2), text_1 = child(p2);
  template_effect(() => set_text(text_1, localize("DND5E.IdentifierError")));
  var node_1 = sibling(div, 2);
  ItemStartingEquipment(node_1, {}), template_effect(() => set_attribute(label, "for", `${get(appId) ?? ""}-identifier`)), append($$anchor, fragment), pop();
}
__name(ItemBackgroundDetailsTab, "ItemBackgroundDetailsTab");
var on_click$E = /* @__PURE__ */ __name((_, context) => {
  new MaxPreparedSpellsConfigFormApplication(get(context).item.name, get(context).item).render(!0);
}, "on_click$E"), root$1O = /* @__PURE__ */ template('<div class="form-group"><label> </label> <div class="form-fields"><!></div></div> <div class="form-group"><label> </label> <div class="form-fields"><!></div></div> <div class="form-group"><label> </label> <div class="form-fields"><!> <a class="spell-preparation-search inline-icon-button"><i class="fa-solid fa-search fa-fw"></i></a></div></div>', 1);
function DetailsSpellcasting($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getItemSheetContext), appId = /* @__PURE__ */ derived(() => get(context).document.id);
  const localize = FoundryAdapter.localize;
  var fragment = root$1O(), div = first_child(fragment), label = child(div), text2 = child(label);
  template_effect(() => set_text(text2, localize("DND5E.SpellProgression")));
  var div_1 = sibling(label, 2), node = child(div_1), disabled = /* @__PURE__ */ derived(() => !get(context).editable);
  Select(node, {
    get id() {
      return `${get(appId) ?? ""}-spellcasting-progression`;
    },
    get document() {
      return get(context).item;
    },
    field: "system.spellcasting.progression",
    get value() {
      return get(context).system.spellcasting.progression;
    },
    get disabled() {
      return get(disabled);
    },
    children: /* @__PURE__ */ __name(($$anchor2, $$slotProps) => {
      SelectOptions($$anchor2, {
        get data() {
          return get(context).config.spellProgression;
        }
      });
    }, "children"),
    $$slots: { default: !0 }
  });
  var div_2 = sibling(div, 2), label_1 = child(div_2), text_1 = child(label_1);
  template_effect(() => set_text(text_1, localize("DND5E.SpellAbility")));
  var div_3 = sibling(label_1, 2), node_1 = child(div_3), disabled_1 = /* @__PURE__ */ derived(() => !get(context).editable);
  Select(node_1, {
    get id() {
      return `${get(appId) ?? ""}-spellcasting-ability`;
    },
    get document() {
      return get(context).item;
    },
    field: "system.spellcasting.ability",
    get value() {
      return get(context).system.spellcasting.ability;
    },
    get disabled() {
      return get(disabled_1);
    },
    children: /* @__PURE__ */ __name(($$anchor2, $$slotProps) => {
      SelectOptions($$anchor2, {
        get data() {
          return get(context).config.abilities;
        },
        labelProp: "label",
        blank: ""
      });
    }, "children"),
    $$slots: { default: !0 }
  });
  var div_4 = sibling(div_2, 2), label_2 = child(div_4), text_2 = child(label_2);
  template_effect(() => set_text(text_2, localize("DND5E.SpellPreparation.Formula")));
  var div_5 = sibling(label_2, 2), node_2 = child(div_5), disabled_2 = /* @__PURE__ */ derived(() => !get(context).editable);
  TextInput(node_2, {
    get id() {
      return `${get(appId) ?? ""}-spellcasting-preparation-formula`;
    },
    get document() {
      return get(context).item;
    },
    field: "system.spellcasting.preparation.formula",
    get value() {
      return get(context).system.spellcasting.preparation.formula;
    },
    dataset: { formulaEditor: !0 },
    get disabled() {
      return get(disabled_2);
    }
  });
  var a2 = sibling(node_2, 2);
  template_effect(() => set_attribute(a2, "title", localize("TIDY5E.MaxPreparedSpellsConfig.ExamplesHeader"))), a2.__click = [on_click$E, context], template_effect(() => {
    set_attribute(label, "for", `${get(appId) ?? ""}-spellcasting-progression`), set_attribute(label_1, "for", `${get(appId) ?? ""}-spellcasting-ability`), set_attribute(label_2, "for", `${get(appId) ?? ""}-spellcasting-preparation-formula`);
  }), append($$anchor, fragment), pop();
}
__name(DetailsSpellcasting, "DetailsSpellcasting");
delegate(["click"]);
var root_2$t = /* @__PURE__ */ template("<option> </option>"), root_5$l = /* @__PURE__ */ template('<div class="form-group"><label> </label> <!> <p class="hint"> </p></div>'), root$1N = /* @__PURE__ */ template('<h3 class="form-header"> </h3> <div class="form-group"><label> </label> <div class="form-fields"><!></div> <p class="hint"><!> </p></div> <div class="form-group split-group"><label> </label> <div class="form-fields"><div class="form-group label-top"><label> </label> <!></div> <div class="form-group label-top"><label> </label> <!></div></div></div> <h3 class="form-header"> </h3> <div class="form-group stacked primary-abilities"><label for=""> </label> <!> <p class="hint"> </p></div> <!> <h3 class="form-header"> </h3> <!> <!>', 1);
function ItemClassDetailsTab($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getItemSheetContext), appId = /* @__PURE__ */ derived(() => get(context).document.id), abilities = /* @__PURE__ */ derived(() => Object.entries(get(context).config.abilities).map(([key, value]) => ({ key, label: value.label })));
  const localize = FoundryAdapter.localize;
  var fragment = root$1N(), h3 = first_child(fragment), text$1 = child(h3);
  template_effect(() => set_text(text$1, localize("DND5E.ItemClassDetails")));
  var div = sibling(h3, 2), label_1 = child(div), text_1 = child(label_1);
  template_effect(() => set_text(text_1, localize("DND5E.Identifier")));
  var div_1 = sibling(label_1, 2), node = child(div_1), disabled = /* @__PURE__ */ derived(() => !get(context).editable);
  TextInput(node, {
    get id() {
      return `${get(appId) ?? ""}-identifier`;
    },
    get document() {
      return get(context).item;
    },
    field: "system.identifier",
    get value() {
      return get(context).source.identifier;
    },
    get placeholder() {
      return get(context).item.identifier;
    },
    get disabled() {
      return get(disabled);
    }
  });
  var p2 = sibling(div_1, 2), node_1 = child(p2);
  html(node_1, () => localize("DND5E.ClassIdentifierHint", { identifier: get(context).item.identifier }));
  var text_2 = sibling(node_1);
  template_effect(() => set_text(text_2, ` ${localize("DND5E.IdentifierError") ?? ""}`));
  var div_2 = sibling(div, 2), label_2 = child(div_2), text_3 = child(label_2);
  template_effect(() => set_text(text_3, localize("DND5E.HitDice")));
  var div_3 = sibling(label_2, 2), div_4 = child(div_3), label_3 = child(div_4), text_4 = child(label_3);
  template_effect(() => set_text(text_4, localize("DND5E.Denomination")));
  var node_2 = sibling(label_3, 2), disabled_1 = /* @__PURE__ */ derived(() => !get(context).editable);
  Select(node_2, {
    get id() {
      return `${get(appId) ?? ""}-hit-dice`;
    },
    get document() {
      return get(context).item;
    },
    field: "system.hitDice",
    get value() {
      return get(context).source.hitDice;
    },
    get disabled() {
      return get(disabled_1);
    },
    children: /* @__PURE__ */ __name(($$anchor2, $$slotProps) => {
      var fragment_1 = comment(), node_3 = first_child(fragment_1);
      each(node_3, 17, () => get(context).config.hitDieTypes, index, ($$anchor3, type) => {
        var option = root_2$t(), option_value = {}, text_5 = child(option);
        template_effect(() => {
          option_value !== (option_value = get(type)) && (option.value = (option.__value = get(type)) == null ? "" : get(type)), set_text(text_5, get(type));
        }), append($$anchor3, option);
      }), append($$anchor2, fragment_1);
    }, "children"),
    $$slots: { default: !0 }
  });
  var div_5 = sibling(div_4, 2), label_4 = child(div_5), text_6 = child(label_4);
  template_effect(() => set_text(text_6, localize("DND5E.Spent")));
  var node_4 = sibling(label_4, 2), disabled_2 = /* @__PURE__ */ derived(() => !get(context).editable);
  NumberInput(node_4, {
    get id() {
      return `${get(appId) ?? ""}-hitDiceUsed`;
    },
    get document() {
      return get(context).item;
    },
    field: "system.hitDiceUsed",
    get value() {
      return get(context).source.hitDiceUsed;
    },
    placeholder: "0",
    get disabled() {
      return get(disabled_2);
    }
  });
  var h3_1 = sibling(div_2, 2), text_7 = child(h3_1);
  template_effect(() => set_text(text_7, localize("DND5E.ItemClassDetails")));
  var div_6 = sibling(h3_1, 2), label_5 = child(div_6), text_8 = child(label_5);
  template_effect(() => set_text(text_8, localize("DND5E.CLASS.FIELDS.primaryAbility.value.label")));
  var node_5 = sibling(label_5, 2);
  each(node_5, 17, () => get(abilities), ({ key, label }) => key, ($$anchor2, $$item) => {
    let key = /* @__PURE__ */ __name(() => get($$item).key, "key"), label = /* @__PURE__ */ __name(() => get($$item).label, "label");
    var id = /* @__PURE__ */ derived(() => `${get(appId) ?? ""}-primaryAbility-value-${key()?.slugify() ?? ""}`), checked = /* @__PURE__ */ derived(() => get(context).system.primaryAbility.value.has(key())), disabled_3 = /* @__PURE__ */ derived(() => !get(context).editable);
    Checkbox($$anchor2, {
      get id() {
        return get(id);
      },
      labelCssClass: "checkbox",
      get document() {
        return get(context).item;
      },
      field: "system.primaryAbility.value",
      get checked() {
        return get(checked);
      },
      get value() {
        return key();
      },
      get disabled() {
        return get(disabled_3);
      },
      onDataPreparing: /* @__PURE__ */ __name((ev) => mapMulticlassingAbilitiesToSave(get(context), ev), "onDataPreparing"),
      children: /* @__PURE__ */ __name(($$anchor3, $$slotProps) => {
        var text_9 = text();
        template_effect(() => set_text(text_9, label())), append($$anchor3, text_9);
      }, "children"),
      $$slots: { default: !0 }
    });
  });
  var p_1 = sibling(node_5, 2), text_10 = child(p_1);
  template_effect(() => set_text(text_10, localize("DND5E.CLASS.FIELDS.primaryAbility.value.hint")));
  var node_6 = sibling(div_6, 2);
  {
    var consequent = /* @__PURE__ */ __name(($$anchor2) => {
      var div_7 = root_5$l(), label_6 = child(div_7), text_11 = child(label_6);
      template_effect(() => set_text(text_11, localize("DND5E.CLASS.FIELDS.primaryAbility.all.label")));
      var node_7 = sibling(label_6, 2), disabled_4 = /* @__PURE__ */ derived(() => !get(context).editable);
      Checkbox(node_7, {
        get id() {
          return `${get(appId) ?? ""}-primaryAbility-fields-all`;
        },
        get document() {
          return get(context).item;
        },
        field: "system.primaryAbility.fields.all",
        get checked() {
          return get(context).source.primaryAbility.all;
        },
        get disabled() {
          return get(disabled_4);
        }
      });
      var p_2 = sibling(node_7, 2), text_12 = child(p_2);
      template_effect(() => set_text(text_12, localize("DND5E.CLASS.FIELDS.primaryAbility.all.hint"))), template_effect(() => set_attribute(label_6, "for", `${get(appId) ?? ""}-primaryAbility-fields-all`)), append($$anchor2, div_7);
    }, "consequent");
    if_block(node_6, ($$render) => {
      get(context).source.primaryAbility.value.size > 1 && $$render(consequent);
    });
  }
  var h3_2 = sibling(node_6, 2), text_13 = child(h3_2);
  template_effect(() => set_text(text_13, localize("DND5E.Spellcasting")));
  var node_8 = sibling(h3_2, 2);
  DetailsSpellcasting(node_8, {});
  var node_9 = sibling(node_8, 2);
  ItemStartingEquipment(node_9, {}), template_effect(() => {
    set_attribute(label_1, "for", `${get(appId) ?? ""}-identifier`), set_attribute(label_2, "for", `${get(appId) ?? ""}-hit-dice`), set_attribute(label_3, "for", `${get(appId) ?? ""}-hit-dice`), set_attribute(label_4, "for", `${get(appId) ?? ""}-hit-dice-spent`);
  }), append($$anchor, fragment), pop();
}
__name(ItemClassDetailsTab, "ItemClassDetailsTab");
var root_2$s = /* @__PURE__ */ template('<div class="form-group split-group"><label> </label> <div class="form-fields"><div class="form-group label-top"><label> </label> <!></div> <div class="form-group label-top"><label> </label> <!></div> <div class="form-group label-top"><label> </label> <!></div></div></div>'), root_4$k = /* @__PURE__ */ template('<div class="form-group stacked damage-types"><label for=""> </label> <!></div>'), root$1M = /* @__PURE__ */ template('<div class="form-group split-group"><label>Formula</label> <div class="form-fields"><!> <!></div></div> <!> <!>', 1);
function FieldDamage($$anchor, $$props) {
  push($$props, !0);
  let numberPlaceholder = prop($$props, "numberPlaceholder", 3, ""), types = prop($$props, "types", 3, void 0), context = /* @__PURE__ */ derived(getItemSheetContext), appId = /* @__PURE__ */ derived(() => get(context).document.id), idPrefix = /* @__PURE__ */ derived(() => `${get(appId)}-${$$props.prefix.replaceAll(".", "-")}`);
  const localize = FoundryAdapter.localize;
  var fragment = root$1M(), div = first_child(fragment), label_1 = child(div), div_1 = sibling(label_1, 2), node = child(div_1), disabled = /* @__PURE__ */ derived(() => !get(context).editable);
  Checkbox(node, {
    get id() {
      return `${get(idPrefix) ?? ""}custom-enabled`;
    },
    get document() {
      return get(context).item;
    },
    get field() {
      return `${$$props.prefix ?? ""}custom.enabled`;
    },
    get checked() {
      return $$props.source.custom.enabled;
    },
    get disabled() {
      return get(disabled);
    }
  });
  var node_1 = sibling(node, 2);
  {
    var consequent = /* @__PURE__ */ __name(($$anchor2) => {
      var disabled_1 = /* @__PURE__ */ derived(() => !get(context).editable);
      TextInput($$anchor2, {
        get id() {
          return `${get(idPrefix) ?? ""}custom-formula`;
        },
        get document() {
          return get(context).item;
        },
        get field() {
          return `${$$props.prefix ?? ""}custom.formula`;
        },
        get value() {
          return $$props.source.custom.formula;
        },
        get disabled() {
          return get(disabled_1);
        }
      });
    }, "consequent");
    if_block(node_1, ($$render) => {
      $$props.source.custom.enabled && $$render(consequent);
    });
  }
  var node_2 = sibling(div, 2);
  {
    var consequent_1 = /* @__PURE__ */ __name(($$anchor2) => {
      var div_2 = root_2$s(), label_2 = child(div_2), text2 = child(label_2);
      template_effect(() => set_text(text2, get(context).system.damage.heal ? localize("DND5E.HEAL.Title") : localize("DND5E.DAMAGE.Title")));
      var div_3 = sibling(label_2, 2), div_4 = child(div_3), label_3 = child(div_4), text_1 = child(label_3);
      template_effect(() => set_text(text_1, localize("DND5E.Number")));
      var node_3 = sibling(label_3, 2), disabled_2 = /* @__PURE__ */ derived(() => !get(context).editable);
      NumberInput(node_3, {
        get id() {
          return `${get(idPrefix) ?? ""}number`;
        },
        get document() {
          return get(context).item;
        },
        get field() {
          return `${$$props.prefix ?? ""}number`;
        },
        get value() {
          return $$props.source.number;
        },
        get placeholder() {
          return numberPlaceholder();
        },
        min: "0",
        step: "1",
        get disabled() {
          return get(disabled_2);
        }
      });
      var div_5 = sibling(div_4, 2), label_4 = child(div_5), text_2 = child(label_4);
      template_effect(() => set_text(text_2, localize("DND5E.Die")));
      var node_4 = sibling(label_4, 2), disabled_3 = /* @__PURE__ */ derived(() => !get(context).editable);
      Select(node_4, {
        get id() {
          return `${get(idPrefix) ?? ""}denomination`;
        },
        get document() {
          return get(context).item;
        },
        get field() {
          return `${$$props.prefix ?? ""}denomination`;
        },
        get value() {
          return $$props.source.denomination;
        },
        blankValue: "",
        get disabled() {
          return get(disabled_3);
        },
        children: /* @__PURE__ */ __name(($$anchor3, $$slotProps) => {
          SelectOptions($$anchor3, {
            get data() {
              return $$props.denominationOptions;
            },
            labelProp: "label",
            valueProp: "value"
          });
        }, "children"),
        $$slots: { default: !0 }
      });
      var div_6 = sibling(div_5, 2), label_5 = child(div_6), text_3 = child(label_5);
      template_effect(() => set_text(text_3, localize("DND5E.Bonus")));
      var node_5 = sibling(label_5, 2), disabled_4 = /* @__PURE__ */ derived(() => !get(context).editable);
      TextInput(node_5, {
        get id() {
          return `${get(idPrefix) ?? ""}bonus`;
        },
        get document() {
          return get(context).item;
        },
        get field() {
          return `${$$props.prefix ?? ""}bonus`;
        },
        get value() {
          return $$props.source.bonus;
        },
        get disabled() {
          return get(disabled_4);
        }
      }), template_effect(() => {
        set_attribute(label_2, "for", `${get(idPrefix) ?? ""}number`), set_attribute(label_3, "for", `${get(idPrefix) ?? ""}number`), set_attribute(label_4, "for", `${get(idPrefix) ?? ""}denomination`), set_attribute(label_5, "for", `${get(idPrefix) ?? ""}bonus`);
      }), append($$anchor2, div_2);
    }, "consequent_1");
    if_block(node_2, ($$render) => {
      $$props.source.custom.enabled || $$render(consequent_1);
    });
  }
  var node_6 = sibling(node_2, 2);
  {
    var consequent_2 = /* @__PURE__ */ __name(($$anchor2) => {
      var div_7 = root_4$k(), label_6 = child(div_7), text_4 = child(label_6);
      template_effect(() => set_text(text_4, localize("DND5E.Type")));
      var node_7 = sibling(label_6, 2);
      each(node_7, 17, types, ({ value, label, selected }) => value, ($$anchor3, $$item) => {
        let value = /* @__PURE__ */ __name(() => get($$item).value, "value"), label = /* @__PURE__ */ __name(() => get($$item).label, "label"), selected = /* @__PURE__ */ __name(() => get($$item).selected, "selected");
        var id = /* @__PURE__ */ derived(() => `${get(idPrefix) ?? ""}types-${value()?.slugify() ?? ""}`), disabled_5 = /* @__PURE__ */ derived(() => !get(context).editable);
        Checkbox($$anchor3, {
          get id() {
            return get(id);
          },
          labelCssClass: "checkbox",
          get document() {
            return get(context).item;
          },
          get field() {
            return `${$$props.prefix ?? ""}types`;
          },
          get checked() {
            return selected();
          },
          get value() {
            return value();
          },
          get disabled() {
            return get(disabled_5);
          },
          onDataPreparing: /* @__PURE__ */ __name((ev) => mapSystemDamageTypesToSave(get(context), $$props.prefix, $$props.source, ev), "onDataPreparing"),
          children: /* @__PURE__ */ __name(($$anchor4, $$slotProps) => {
            var text_5 = text();
            template_effect(() => set_text(text_5, label())), append($$anchor4, text_5);
          }, "children"),
          $$slots: { default: !0 }
        });
      }), append($$anchor2, div_7);
    }, "consequent_2");
    if_block(node_6, ($$render) => {
      types() && $$render(consequent_2);
    });
  }
  template_effect(() => set_attribute(label_1, "for", `${get(idPrefix) ?? ""}custom-enabled`)), append($$anchor, fragment), pop();
}
__name(FieldDamage, "FieldDamage");
var root_1$1a = /* @__PURE__ */ template('<div class="form-group"><label> </label> <!> <p class="hint"> </p></div>'), on_click$D = /* @__PURE__ */ __name((_, context) => get(context).item.sheet.addRecovery(), "on_click$D"), root_3$r = /* @__PURE__ */ template('<button type="button" class="inline-icon-button create-recovery-button" data-tooltip="DND5E.USES.Recovery.Action.Create"><i class="fas fa-plus"></i></button>'), root_5$k = /* @__PURE__ */ template('<div class="form-group label-top"><label> </label> <select><!></select></div>'), root_7$g = /* @__PURE__ */ template("<select><!></select>"), root_9$d = /* @__PURE__ */ template('<input type="text">'), root_6$c = /* @__PURE__ */ template('<div class="form-group label-top"><label> </label> <!></div>'), root_10$9 = /* @__PURE__ */ template('<button type="button" class="inline-icon-button align-self-stretch" data-action="deleteRecovery"><i class="fas fa-minus"></i></button>'), root_4$j = /* @__PURE__ */ template('<div class="form-group split-group full-width card"><div class="form-fields"><div class="form-group label-top"><label> </label> <select><!></select></div> <!> <!> <!></div></div>'), root_11$7 = /* @__PURE__ */ template('<div class="empty"> </div>'), root_2$r = /* @__PURE__ */ template('<h3 class="form-header"><span> </span> <!></h3> <!>', 1), root$1L = /* @__PURE__ */ template('<h3 class="form-header"> </h3> <div class="form-group split-group"><label> </label> <div class="form-fields"><div class="form-group label-top"><label> </label> <!></div> <div class="form-group label-top"><label> </label> <!></div></div></div> <!> <!>', 1);
function FieldUses($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getItemSheetContext), appId = /* @__PURE__ */ derived(() => get(context).document.id);
  const localize = FoundryAdapter.localize;
  var fragment = root$1L(), h3 = first_child(fragment), text2 = child(h3);
  template_effect(() => set_text(text2, localize("DND5E.Usage")));
  var div = sibling(h3, 2), label = child(div), text_1 = child(label);
  template_effect(() => set_text(text_1, localize("DND5E.LimitedUses")));
  var div_1 = sibling(label, 2), div_2 = child(div_1), label_1 = child(div_2), text_2 = child(label_1);
  template_effect(() => set_text(text_2, localize("DND5E.Spent")));
  var node = sibling(label_1, 2), disabled = /* @__PURE__ */ derived(() => !get(context).editable);
  NumberInput(node, {
    get id() {
      return `${get(appId) ?? ""}-uses-spent`;
    },
    get document() {
      return get(context).item;
    },
    field: "system.uses.spent",
    get value() {
      return get(context).source.uses.spent;
    },
    get disabled() {
      return get(disabled);
    }
  });
  var div_3 = sibling(div_2, 2), label_2 = child(div_3), text_3 = child(label_2);
  template_effect(() => set_text(text_3, localize("DND5E.Max")));
  var node_1 = sibling(label_2, 2), disabled_1 = /* @__PURE__ */ derived(() => !get(context).editable);
  TextInput(node_1, {
    get id() {
      return `${get(appId) ?? ""}-uses-max`;
    },
    get document() {
      return get(context).item;
    },
    field: "system.uses.max",
    get value() {
      return get(context).source.uses.max;
    },
    get disabled() {
      return get(disabled_1);
    }
  });
  var node_2 = sibling(div, 2);
  {
    var consequent = /* @__PURE__ */ __name(($$anchor2) => {
      var div_4 = root_1$1a(), label_3 = child(div_4), text_4 = child(label_3);
      template_effect(() => set_text(text_4, localize("DND5E.CONSUMABLE.FIELDS.uses.autoDestroy.label")));
      var node_3 = sibling(label_3, 2), disabled_2 = /* @__PURE__ */ derived(() => !get(context).editable);
      Checkbox(node_3, {
        get id() {
          return `${get(appId) ?? ""}-uses-autoDestroy`;
        },
        get document() {
          return get(context).item;
        },
        field: "system.uses.autoDestroy",
        get checked() {
          return get(context).source.uses.autoDestroy;
        },
        get disabled() {
          return get(disabled_2);
        }
      });
      var p2 = sibling(node_3, 2), text_5 = child(p2);
      template_effect(() => set_text(text_5, localize("DND5E.CONSUMABLE.FIELDS.uses.autoDestroy.hint"))), template_effect(() => set_attribute(label_3, "for", `${get(appId) ?? ""}-uses-autoDestroy`)), append($$anchor2, div_4);
    }, "consequent");
    if_block(node_2, ($$render) => {
      get(context).system.schema.fields.uses?.fields?.autoDestroy && $$render(consequent);
    });
  }
  var node_4 = sibling(node_2, 2);
  {
    var consequent_7 = /* @__PURE__ */ __name(($$anchor2) => {
      var fragment_1 = root_2$r(), h3_1 = first_child(fragment_1), span = child(h3_1), text_6 = child(span);
      template_effect(() => set_text(text_6, localize("DND5E.Recovery")));
      var node_5 = sibling(span, 2);
      {
        var consequent_1 = /* @__PURE__ */ __name(($$anchor3) => {
          var button = root_3$r();
          template_effect(() => set_attribute(button, "aria-label", localize("DND5E.USES.Recovery.Action.Create"))), button.__click = [on_click$D, context], template_effect(() => set_attribute(button, "tabindex", settings.value.useAccessibleKeyboardSupport ? 0 : -1)), append($$anchor3, button);
        }, "consequent_1");
        if_block(node_5, ($$render) => {
          get(context).editable && $$render(consequent_1);
        });
      }
      var node_6 = sibling(h3_1, 2);
      each(
        node_6,
        17,
        () => get(context).usesRecovery,
        index,
        ($$anchor3, recovery, index2) => {
          var div_5 = root_4$j();
          set_attribute(div_5, "data-index", index2);
          var div_6 = child(div_5), div_7 = child(div_6), label_4 = child(div_7), text_7 = child(label_4);
          template_effect(() => set_text(text_7, localize("DND5E.USES.FIELDS.uses.recovery.FIELDS.period.label")));
          var select = sibling(label_4, 2);
          set_attribute(select, "data-tidy-field", `system.uses.recovery.${index2 ?? ""}.period`), init_select(select, () => get(recovery).data.period);
          var select_value;
          select.__change = (ev) => get(context).item.sheet.updateRecovery(index2, "period", ev.currentTarget.value);
          var node_7 = child(select);
          SelectOptions(node_7, {
            get data() {
              return get(context).recoveryPeriods;
            },
            labelProp: "label",
            valueProp: "value"
          });
          var node_8 = sibling(div_7, 2);
          {
            var consequent_2 = /* @__PURE__ */ __name(($$anchor4) => {
              var div_8 = root_5$k(), label_5 = child(div_8), text_8 = child(label_5);
              template_effect(() => set_text(text_8, localize("DND5E.USES.FIELDS.uses.recovery.FIELDS.type.label")));
              var select_1 = sibling(label_5, 2);
              set_attribute(select_1, "data-tidy-field", `system.uses.recovery.${index2 ?? ""}.type`), init_select(select_1, () => get(recovery).data.type);
              var select_1_value;
              select_1.__change = (ev) => get(context).item.sheet.updateRecovery(index2, "type", ev.currentTarget.value);
              var node_9 = child(select_1);
              SelectOptions(node_9, {
                get data() {
                  return get(context).recoveryTypes;
                },
                labelProp: "label",
                valueProp: "value"
              }), template_effect(() => {
                set_attribute(label_5, "for", `${get(appId) ?? ""}-uses-recovery-${index2 ?? ""}-type`), set_attribute(select_1, "id", `${get(appId) ?? ""}-uses-recovery-${index2 ?? ""}-type`), select_1_value !== (select_1_value = get(recovery).data.type) && (select_1.value = (select_1.__value = get(recovery).data.type) == null ? "" : get(recovery).data.type, select_option(select_1, get(recovery).data.type)), select_1.disabled = !get(context).editable;
              }), append($$anchor4, div_8);
            }, "consequent_2");
            if_block(node_8, ($$render) => {
              get(recovery).data.period !== "recharge" && $$render(consequent_2);
            });
          }
          var node_10 = sibling(node_8, 2);
          {
            var consequent_5 = /* @__PURE__ */ __name(($$anchor4) => {
              var div_9 = root_6$c(), label_6 = child(div_9), text_9 = child(label_6);
              template_effect(() => set_text(text_9, localize("DND5E.USES.FIELDS.uses.recovery.FIELDS.formula.label")));
              var node_11 = sibling(label_6, 2);
              {
                var consequent_3 = /* @__PURE__ */ __name(($$anchor5) => {
                  var select_2 = root_7$g();
                  set_attribute(select_2, "data-tidy-field", `system.uses.recovery.${index2 ?? ""}.formula`), select_2.__change = (ev) => get(context).item.sheet.updateRecovery(index2, "formula", ev.currentTarget.value), init_select(select_2, () => get(recovery).data.formula);
                  var select_2_value, node_12 = child(select_2);
                  SelectOptions(node_12, {
                    get data() {
                      return get(recovery).formulaOptions;
                    },
                    labelProp: "label",
                    valueProp: "value"
                  }), template_effect(() => {
                    set_attribute(select_2, "id", `${get(appId) ?? ""}-uses-recovery-${index2 ?? ""}-formula`), select_2_value !== (select_2_value = get(recovery).data.formula) && (select_2.value = (select_2.__value = get(recovery).data.formula) == null ? "" : get(recovery).data.formula, select_option(select_2, get(recovery).data.formula)), select_2.disabled = !get(context).editable;
                  }), append($$anchor5, select_2);
                }, "consequent_3"), alternate = /* @__PURE__ */ __name(($$anchor5) => {
                  var fragment_2 = comment(), node_13 = first_child(fragment_2);
                  {
                    var consequent_4 = /* @__PURE__ */ __name(($$anchor6) => {
                      var input = root_9$d();
                      set_attribute(input, "data-tidy-field", `system.uses.recovery.${index2 ?? ""}.formula`), input.__change = (ev) => get(context).item.sheet.updateRecovery(index2, "formula", ev.currentTarget.value), template_effect(() => {
                        set_attribute(input, "id", `${get(appId) ?? ""}-uses-recovery-${index2 ?? ""}-formula`), input.disabled = !get(context).editable, set_value(input, get(recovery).data.formula ?? "");
                      }), append($$anchor6, input);
                    }, "consequent_4");
                    if_block(
                      node_13,
                      ($$render) => {
                        get(recovery).data.type === "formula" && $$render(consequent_4);
                      },
                      !0
                    );
                  }
                  append($$anchor5, fragment_2);
                }, "alternate");
                if_block(node_11, ($$render) => {
                  get(recovery).formulaOptions ? $$render(consequent_3) : $$render(alternate, !1);
                });
              }
              template_effect(() => set_attribute(label_6, "for", `${get(appId) ?? ""}-uses-recovery-${index2 ?? ""}-formula`)), append($$anchor4, div_9);
            }, "consequent_5");
            if_block(node_10, ($$render) => {
              (get(recovery).data.type === "formula" || get(recovery).formulaOptions) && $$render(consequent_5);
            });
          }
          var node_14 = sibling(node_10, 2);
          {
            var consequent_6 = /* @__PURE__ */ __name(($$anchor4) => {
              var button_1 = root_10$9();
              template_effect(() => set_attribute(button_1, "title", localize("DND5E.USES.Recovery.Action.Delete"))), template_effect(() => set_attribute(button_1, "aria-label", localize("DND5E.USES.Recovery.Action.Delete"))), button_1.__click = () => get(context).item.sheet.deleteRecovery(index2), template_effect(() => set_attribute(button_1, "tabindex", settings.value.useAccessibleKeyboardSupport ? 0 : -1)), append($$anchor4, button_1);
            }, "consequent_6");
            if_block(node_14, ($$render) => {
              get(context).editable && $$render(consequent_6);
            });
          }
          template_effect(() => {
            set_attribute(label_4, "for", `${get(appId) ?? ""}-uses-recovery-${index2 ?? ""}-period`), set_attribute(select, "id", `${get(appId) ?? ""}-uses-recovery-${index2 ?? ""}-period`), select_value !== (select_value = get(recovery).data.period) && (select.value = (select.__value = get(recovery).data.period) == null ? "" : get(recovery).data.period, select_option(select, get(recovery).data.period)), select.disabled = !get(context).editable;
          }), append($$anchor3, div_5);
        },
        ($$anchor3) => {
          var div_10 = root_11$7(), text_10 = child(div_10);
          template_effect(() => set_text(text_10, localize("DND5E.UsesPeriods.Never"))), append($$anchor3, div_10);
        }
      ), append($$anchor2, fragment_1);
    }, "consequent_7");
    if_block(node_4, ($$render) => {
      get(context).item.hasLimitedUses && $$render(consequent_7);
    });
  }
  template_effect(() => {
    set_attribute(label, "for", `${get(appId) ?? ""}-uses-spent`), set_attribute(label_1, "for", `${get(appId) ?? ""}-uses-spent`), set_attribute(label_2, "for", `${get(appId) ?? ""}-uses-max`);
  }), append($$anchor, fragment), pop();
}
__name(FieldUses, "FieldUses");
delegate(["click", "change"]);
var root_3$q = /* @__PURE__ */ template('<div class="form-group"><label> </label> <!></div>'), root_7$f = /* @__PURE__ */ template('<div class="form-group label-top"><label> </label> <!></div>'), root_5$j = /* @__PURE__ */ template('<div class="form-group"><label> </label> <div class="form-fields"><div class="form-group label-top no-gap"><label> </label> <div class="form-fields"><!> <!></div></div> <!></div></div>'), root_1$19 = /* @__PURE__ */ template('<h3 class="form-header"> </h3> <div class="form-group"><label> </label> <!></div> <!> <div class="form-group stacked consumable-properties"><label for=""> </label> <!></div> <!> <h3 class="form-header"> </h3> <div class="form-group"><label> </label> <!> <p class="hint"> </p></div> <!> <!>', 1);
function ItemConsumableDetailsTab($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getItemSheetContext), appId = /* @__PURE__ */ derived(() => get(context).document.id);
  const localize = FoundryAdapter.localize;
  ContentConcealer($$anchor, {
    get conceal() {
      return get(context).concealDetails;
    },
    children: /* @__PURE__ */ __name(($$anchor2, $$slotProps) => {
      var fragment_1 = root_1$19(), h3 = first_child(fragment_1), text2 = child(h3);
      template_effect(() => set_text(text2, localize("DND5E.ItemConsumableDetails")));
      var div = sibling(h3, 2), label = child(div), text_1 = child(label);
      template_effect(() => set_text(text_1, localize("DND5E.ItemConsumableType")));
      var node = sibling(label, 2), disabled = /* @__PURE__ */ derived(() => !get(context).editable);
      Select(node, {
        get id() {
          return `${get(appId) ?? ""}-type-value`;
        },
        get document() {
          return get(context).item;
        },
        field: "system.type.value",
        get value() {
          return get(context).system.type.value;
        },
        get disabled() {
          return get(disabled);
        },
        blankValue: "",
        children: /* @__PURE__ */ __name(($$anchor3, $$slotProps2) => {
          SelectOptions($$anchor3, {
            get data() {
              return get(context).config.consumableTypes;
            },
            labelProp: "label",
            blank: ""
          });
        }, "children"),
        $$slots: { default: !0 }
      });
      var node_1 = sibling(div, 2);
      {
        var consequent = /* @__PURE__ */ __name(($$anchor3) => {
          var div_1 = root_3$q();
          const consumableSubTypeLabel = /* @__PURE__ */ derived(() => localize("DND5E.ItemConsumableSubtype", {
            category: (
              // @ts-expect-error
              get(context).config.consumableTypes[get(context).system.type.value]?.label
            )
          }));
          var label_1 = child(div_1), text_2 = child(label_1), node_2 = sibling(label_1, 2), disabled_1 = /* @__PURE__ */ derived(() => !get(context).editable);
          Select(node_2, {
            get id() {
              return `${get(appId) ?? ""}-type-subtype`;
            },
            get document() {
              return get(context).item;
            },
            field: "system.type.subtype",
            get value() {
              return get(context).system.type.subtype;
            },
            get disabled() {
              return get(disabled_1);
            },
            children: /* @__PURE__ */ __name(($$anchor4, $$slotProps2) => {
              SelectOptions($$anchor4, {
                get data() {
                  return get(context).itemSubtypes;
                },
                blank: ""
              });
            }, "children"),
            $$slots: { default: !0 }
          }), template_effect(() => {
            set_attribute(label_1, "for", `${get(appId) ?? ""}-type-subtype`), set_text(text_2, get(consumableSubTypeLabel));
          }), append($$anchor3, div_1);
        }, "consequent");
        if_block(node_1, ($$render) => {
          get(context).itemSubtypes && $$render(consequent);
        });
      }
      var div_2 = sibling(node_1, 2), label_2 = child(div_2), text_3 = child(label_2);
      template_effect(() => set_text(text_3, get(context).system.type.value === "ammo" ? localize("DND5E.ItemAmmoProperties") : localize("DND5E.ItemConsumableProperties")));
      var node_3 = sibling(label_2, 2);
      ItemProperties(node_3, {});
      var node_4 = sibling(div_2, 2);
      {
        var consequent_2 = /* @__PURE__ */ __name(($$anchor3) => {
          var div_3 = root_5$j(), label_3 = child(div_3), text_4 = child(label_3);
          template_effect(() => set_text(text_4, localize("DND5E.Item.Property.Magical")));
          var div_4 = sibling(label_3, 2), div_5 = child(div_4), label_4 = child(div_5), text_5 = child(label_4);
          template_effect(() => set_text(text_5, localize("DND5E.Attunement")));
          var div_6 = sibling(label_4, 2), node_5 = child(div_6), disabled_2 = /* @__PURE__ */ derived(() => !get(context).editable || // @ts-expect-error
          !get(context).config.attunementTypes[get(context).system.attunement]), title = /* @__PURE__ */ derived(() => localize("DND5E.AttunementAttuned"));
          Checkbox(node_5, {
            get id() {
              return `$${get(appId) ?? ""}-system-attuned`;
            },
            get document() {
              return get(context).item;
            },
            field: "system.attuned",
            get checked() {
              return get(context).source.attuned;
            },
            get disabled() {
              return get(disabled_2);
            },
            get title() {
              return get(title);
            }
          });
          var node_6 = sibling(node_5, 2), disabled_3 = /* @__PURE__ */ derived(() => !get(context).editable);
          Select(node_6, {
            get id() {
              return `$${get(appId) ?? ""}-system-attunement`;
            },
            get document() {
              return get(context).item;
            },
            field: "system.attunement",
            get value() {
              return get(context).system.attunement;
            },
            get disabled() {
              return get(disabled_3);
            },
            class: "flex-1",
            children: /* @__PURE__ */ __name(($$anchor4, $$slotProps2) => {
              var blank = /* @__PURE__ */ derived(() => localize("DND5E.AttunementNone"));
              SelectOptions($$anchor4, {
                get data() {
                  return get(context).config.attunementTypes;
                },
                get blank() {
                  return get(blank);
                }
              });
            }, "children"),
            $$slots: { default: !0 }
          });
          var node_7 = sibling(div_5, 2);
          {
            var consequent_1 = /* @__PURE__ */ __name(($$anchor4) => {
              var div_7 = root_7$f(), label_5 = child(div_7), text_6 = child(label_5);
              template_effect(() => set_text(text_6, localize("DND5E.Bonus")));
              var node_8 = sibling(label_5, 2), disabled_4 = /* @__PURE__ */ derived(() => !get(context).editable);
              NumberInput(node_8, {
                get id() {
                  return `${get(appId) ?? ""}-magical-bonus`;
                },
                get value() {
                  return get(context).system.magicalBonus;
                },
                field: "system.magicalBonus",
                get document() {
                  return get(context).item;
                },
                get disabled() {
                  return get(disabled_4);
                },
                min: "0",
                step: "1",
                placeholder: "0"
              }), template_effect(() => set_attribute(label_5, "for", `${get(appId) ?? ""}-magical-bonus`)), append($$anchor4, div_7);
            }, "consequent_1");
            if_block(node_7, ($$render) => {
              get(context).system.type.value === CONSTANTS.ITEM_SYSTEM_TYPE_AMMO && $$render(consequent_1);
            });
          }
          template_effect(() => {
            set_attribute(label_3, "for", `$${get(appId) ?? ""}-system-attunement`), set_attribute(label_4, "for", `$${get(appId) ?? ""}-system-attuned`);
          }), append($$anchor3, div_3);
        }, "consequent_2");
        if_block(node_4, ($$render) => {
          get(context).properties.object.mgc && $$render(consequent_2);
        });
      }
      var h3_1 = sibling(node_4, 2), text_7 = child(h3_1);
      template_effect(() => set_text(text_7, localize("DND5E.CONSUMABLE.FIELDS.damage.label")));
      var div_8 = sibling(h3_1, 2), label_6 = child(div_8), text_8 = child(label_6);
      template_effect(() => set_text(text_8, localize("DND5E.CONSUMABLE.FIELDS.damage.replace.label")));
      var node_9 = sibling(label_6, 2), disabled_5 = /* @__PURE__ */ derived(() => !get(context).editable);
      Checkbox(node_9, {
        get id() {
          return `${get(appId) ?? ""}-damage-replace`;
        },
        get document() {
          return get(context).item;
        },
        field: "system.damage.replace",
        get checked() {
          return get(context).source.damage.replace;
        },
        get disabled() {
          return get(disabled_5);
        }
      });
      var p2 = sibling(node_9, 2), text_9 = child(p2);
      template_effect(() => set_text(text_9, localize("DND5E.CONSUMABLE.FIELDS.damage.replace.hint")));
      var node_10 = sibling(div_8, 2);
      {
        var consequent_3 = /* @__PURE__ */ __name(($$anchor3) => {
          FieldDamage($$anchor3, {
            prefix: "system.damage.base.",
            get source() {
              return get(context).source.damage.base;
            },
            get denominationOptions() {
              return get(context).denominationOptions;
            },
            get types() {
              return get(context).damageTypes;
            }
          });
        }, "consequent_3");
        if_block(node_10, ($$render) => {
          get(context).system.type.value === CONSTANTS.ITEM_SYSTEM_TYPE_AMMO && $$render(consequent_3);
        });
      }
      var node_11 = sibling(node_10, 2);
      FieldUses(node_11, {}), template_effect(() => {
        set_attribute(label, "for", `${get(appId) ?? ""}-type-value`), set_attribute(label_6, "for", `${get(appId) ?? ""}-damage-replace`);
      }), append($$anchor2, fragment_1);
    }, "children"),
    $$slots: { default: !0 }
  }), pop();
}
__name(ItemConsumableDetailsTab, "ItemConsumableDetailsTab");
var root_4$i = /* @__PURE__ */ template("<!> <!>", 1), root_1$18 = /* @__PURE__ */ template("<!> <!> <!> <!> <!>", 1), root$1K = /* @__PURE__ */ template('<div class="container-contents-wrapper svelte-aulymd"><div role="presentation" class="currency-wrapper svelte-aulymd"><!></div> <!> <div class="tidy-container-contents scroll-container flex-column small-gap svelte-aulymd"><!></div> <footer class="container-contents-footer svelte-aulymd"><!></footer></div>');
function ItemContainerContentsTab($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getContainerSheetClassicContext), tabId = getContext(CONSTANTS.SVELTE_CONTEXT.TAB_ID), inlineToggleService = getContext(CONSTANTS.SVELTE_CONTEXT.INLINE_TOGGLE_SERVICE), searchCriteria = state(""), allItems = /* @__PURE__ */ derived(() => get(context).containerContents.contents.flatMap((x2) => x2.items));
  const searchResults = createSearchResultsState();
  setSearchResultsContext(searchResults), user_effect(() => {
    searchResults.uuids = ItemVisibility.getItemsToShowAtDepth({
      criteria: get(searchCriteria),
      itemContext: get(context).itemContext,
      sections: get(context).containerContents.contents,
      tabId
    });
  });
  const localize = FoundryAdapter.localize;
  let utilityBarCommands = /* @__PURE__ */ derived(() => get(context).utilities[tabId]?.utilityToolbarCommands ?? []), menuOpen = state(!1), configuredContents = /* @__PURE__ */ derived(() => SheetSections.configureInventory(get(context).containerContents.contents.filter((i2) => i2.items.length), tabId, SheetPreferencesService.getByType(get(context).item.type), TidyFlags.sectionConfig.get(get(context).item)?.[CONSTANTS.TAB_CONTAINER_CONTENTS]));
  var div = root$1K(), div_1 = child(div), node = child(div_1);
  Currency(node, {
    get document() {
      return get(context).item;
    }
  });
  var node_1 = sibling(div_1, 2);
  UtilityToolbar(node_1, {
    children: /* @__PURE__ */ __name(($$anchor2, $$slotProps) => {
      var fragment = root_1$18(), node_2 = first_child(fragment);
      Search$1(node_2, {
        get value() {
          return get(searchCriteria);
        },
        set value($$value) {
          set(searchCriteria, proxy($$value));
        }
      });
      var node_3 = sibling(node_2, 2), filters = /* @__PURE__ */ derived(() => ItemFilterRuntime.getPinnedFiltersForTab(get(context).filterPins, get(context).filterData, tabId));
      PinnedFilterToggles(node_3, {
        filterGroupName: tabId,
        get filters() {
          return get(filters);
        }
      });
      var node_4 = sibling(node_3, 2);
      FilterMenu(node_4, { tabId });
      var node_5 = sibling(node_4, 2);
      each(node_5, 17, () => get(utilityBarCommands), (command) => command.title, ($$anchor3, command) => {
        var visible = /* @__PURE__ */ derived(() => get(command).visible ?? !0);
        UtilityToolbarCommand($$anchor3, {
          get title() {
            return get(command).title;
          },
          get iconClass() {
            return get(command).iconClass;
          },
          get text() {
            return get(command).text;
          },
          get visible() {
            return get(visible);
          },
          onExecute: /* @__PURE__ */ __name((ev) => get(command).execute?.(ev), "onExecute"),
          get sections() {
            return get(configuredContents);
          }
        });
      });
      var node_6 = sibling(node_5, 2);
      {
        var consequent = /* @__PURE__ */ __name(($$anchor3) => {
          var buttonClass = /* @__PURE__ */ derived(() => get(menuOpen) ? "menu-is-open" : ""), title = /* @__PURE__ */ derived(() => localize("TIDY5E.Utilities.GMTools"));
          ButtonMenu($$anchor3, {
            iconClass: "ra ra-fairy-wand",
            get buttonClass() {
              return get(buttonClass);
            },
            position: "bottom",
            anchor: "right",
            get title() {
              return get(title);
            },
            menuElement: "div",
            buttonStyle: "transparent-inline-icon",
            get open() {
              return get(menuOpen);
            },
            set open($$value) {
              set(menuOpen, proxy($$value));
            },
            children: /* @__PURE__ */ __name(($$anchor4, $$slotProps2) => {
              var fragment_3 = root_4$i(), node_7 = first_child(fragment_3);
              ButtonMenuCommand(node_7, {
                onMenuClick: /* @__PURE__ */ __name(() => {
                  FoundryAdapter.identifyAllItemsForContainer(get(context).item, get(allItems));
                }, "onMenuClick"),
                iconClass: "fas fa-magnifying-glass",
                children: /* @__PURE__ */ __name(($$anchor5, $$slotProps3) => {
                  var text$1 = text();
                  template_effect(() => set_text(text$1, localize("TIDY5E.Utilities.IdentifyAll"))), append($$anchor5, text$1);
                }, "children"),
                $$slots: { default: !0 }
              });
              var node_8 = sibling(node_7, 2);
              ButtonMenuCommand(node_8, {
                onMenuClick: /* @__PURE__ */ __name(() => {
                  FoundryAdapter.markAllItemsAsUnidentifiedForContainer(get(context).item, get(allItems));
                }, "onMenuClick"),
                iconClass: "fas fa-question",
                children: /* @__PURE__ */ __name(($$anchor5, $$slotProps3) => {
                  var text_1 = text();
                  template_effect(() => set_text(text_1, localize("TIDY5E.Utilities.MarkAllAsUnidentified"))), append($$anchor5, text_1);
                }, "children"),
                $$slots: { default: !0 }
              }), append($$anchor4, fragment_3);
            }, "children"),
            $$slots: { default: !0 }
          });
        }, "consequent");
        if_block(node_6, ($$render) => {
          FoundryAdapter.userIsGm() && $$render(consequent);
        });
      }
      append($$anchor2, fragment);
    }, "children"),
    $$slots: { default: !0 }
  });
  var div_2 = sibling(node_1, 2), node_9 = child(div_2);
  ContainerContentsSections$1(node_9, {
    get contents() {
      return get(context).containerContents.contents;
    },
    get container() {
      return get(context).item;
    },
    get editable() {
      return get(context).editable;
    },
    get itemContext() {
      return get(context).containerContents.itemContext;
    },
    inlineToggleService,
    get lockItemQuantity() {
      return get(context).lockItemQuantity;
    },
    get sheetDocument() {
      return get(context).item;
    }
  });
  var footer = sibling(div_2, 2), node_10 = child(footer);
  CapacityBar$1(node_10, {
    get container() {
      return get(context).item;
    },
    get capacity() {
      return get(context).capacity;
    }
  }), template_effect(() => set_attribute(div_2, "data-tidy-sheet-part", CONSTANTS.SHEET_PARTS.ITEMS_CONTAINER)), append($$anchor, div), pop();
}
__name(ItemContainerContentsTab, "ItemContainerContentsTab");
var root_1$17 = /* @__PURE__ */ template('<h3 class="form-header"> </h3> <div class="form-group stacked container-properties"><label for=""> </label> <!></div> <div class="form-group"><label> </label> <div class="form-fields"><!></div></div> <div class="form-group"><label> </label> <!></div> <div class="form-group"><label> </label> <!> <!></div>', 1);
function ItemContainerDetailsTab($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getContainerSheetClassicContext), appId = /* @__PURE__ */ derived(() => get(context).document.id);
  const localize = FoundryAdapter.localize;
  ContentConcealer($$anchor, {
    get conceal() {
      return get(context).concealDetails;
    },
    children: /* @__PURE__ */ __name(($$anchor2, $$slotProps) => {
      var fragment_1 = root_1$17(), h3 = first_child(fragment_1), text2 = child(h3);
      template_effect(() => set_text(text2, localize("DND5E.ItemContainerDetails")));
      var div = sibling(h3, 2), label = child(div), text_1 = child(label);
      template_effect(() => set_text(text_1, localize("DND5E.ItemContainerProperties")));
      var node = sibling(label, 2);
      ItemProperties(node, {});
      var div_1 = sibling(div, 2), label_1 = child(div_1), text_2 = child(label_1);
      template_effect(() => set_text(text_2, localize("DND5E.ItemContainerCapacity")));
      var div_2 = sibling(label_1, 2), node_1 = child(div_2), disabled = /* @__PURE__ */ derived(() => !get(context).editable);
      NumberInput(node_1, {
        get id() {
          return `${get(appId) ?? ""}-capacity-value`;
        },
        get document() {
          return get(context).item;
        },
        field: "system.capacity.value",
        get value() {
          return get(context).source.capacity.value;
        },
        get disabled() {
          return get(disabled);
        },
        placeholder: "—"
      });
      var div_3 = sibling(div_1, 2), label_2 = child(div_3), text_3 = child(label_2);
      template_effect(() => set_text(text_3, localize("DND5E.ItemContainerCapacityType")));
      var node_2 = sibling(label_2, 2), disabled_1 = /* @__PURE__ */ derived(() => !get(context).editable);
      Select(node_2, {
        get id() {
          return `${get(appId) ?? ""}-capacity-type`;
        },
        get document() {
          return get(context).item;
        },
        field: "system.capacity.type",
        get value() {
          return get(context).source.capacity.type;
        },
        get disabled() {
          return get(disabled_1);
        },
        children: /* @__PURE__ */ __name(($$anchor3, $$slotProps2) => {
          SelectOptions($$anchor3, {
            get data() {
              return get(context).config.itemCapacityTypes;
            }
          });
        }, "children"),
        $$slots: { default: !0 }
      });
      var div_4 = sibling(div_3, 2), label_3 = child(div_4), text_4 = child(label_3);
      template_effect(() => set_text(text_4, localize("DND5E.Attunement")));
      var node_3 = sibling(label_3, 2), disabled_2 = /* @__PURE__ */ derived(() => !get(context).editable || // @ts-expect-error
      !get(context).config.attunementTypes[get(context).system.attunement]), title = /* @__PURE__ */ derived(() => localize("DND5E.AttunementAttuned"));
      Checkbox(node_3, {
        get id() {
          return `${get(appId) ?? ""}-attuned`;
        },
        get document() {
          return get(context).item;
        },
        field: "system.attuned",
        get checked() {
          return get(context).source.attuned;
        },
        get disabled() {
          return get(disabled_2);
        },
        get title() {
          return get(title);
        }
      });
      var node_4 = sibling(node_3, 2), disabled_3 = /* @__PURE__ */ derived(() => !get(context).editable);
      Select(node_4, {
        get id() {
          return `${get(appId) ?? ""}-attunement`;
        },
        get document() {
          return get(context).item;
        },
        field: "system.attunement",
        get value() {
          return get(context).source.attunement;
        },
        get disabled() {
          return get(disabled_3);
        },
        children: /* @__PURE__ */ __name(($$anchor3, $$slotProps2) => {
          var blank = /* @__PURE__ */ derived(() => localize("DND5E.AttunementNone"));
          SelectOptions($$anchor3, {
            get data() {
              return get(context).config.attunementTypes;
            },
            get blank() {
              return get(blank);
            }
          });
        }, "children"),
        $$slots: { default: !0 }
      }), template_effect(() => {
        set_attribute(label_1, "for", `${get(appId) ?? ""}-capacity-value`), set_attribute(label_2, "for", `${get(appId) ?? ""}-capacity-type`), set_attribute(label_3, "for", `${get(appId) ?? ""}-attunement`);
      }), append($$anchor2, fragment_1);
    }, "children"),
    $$slots: { default: !0 }
  }), pop();
}
__name(ItemContainerDetailsTab, "ItemContainerDetailsTab");
var root_1$16 = /* @__PURE__ */ template('<article class="editor-container"><!></article>');
function ItemDescriptionTab($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getItemSheetContext);
  var fragment = comment(), node = first_child(fragment);
  key_block(node, () => get(context).item.system.description.value, ($$anchor2) => {
    var article = root_1$16(), node_1 = child(article), editorOptions = /* @__PURE__ */ derived(() => ({ editable: get(context).editable }));
    SheetEditorV2(node_1, {
      get content() {
        return get(context).item.system.description.value;
      },
      get enriched() {
        return get(context).enriched.description;
      },
      field: "system.description.value",
      get editorOptions() {
        return get(editorOptions);
      },
      get documentUuid() {
        return get(context).document.uuid;
      },
      get manageSecrets() {
        return get(context).document.isOwner;
      }
    }), append($$anchor2, article);
  }), append($$anchor, fragment), pop();
}
__name(ItemDescriptionTab, "ItemDescriptionTab");
var root$1J = /* @__PURE__ */ template('<div class="form-group"><div class="form-group"><label> </label> <div class="form-fields"><!></div> <p class="hint"> </p></div></div>');
function ItemSpeciesDetailsTab($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getItemSheetContext), appId = /* @__PURE__ */ derived(() => get(context).document.id);
  const localize = FoundryAdapter.localize;
  var div = root$1J(), div_1 = child(div), label = child(div_1), text2 = child(label);
  template_effect(() => set_text(text2, localize("DND5E.Identifier")));
  var div_2 = sibling(label, 2), node = child(div_2), disabled = /* @__PURE__ */ derived(() => !get(context).editable);
  TextInput(node, {
    get id() {
      return `${get(appId) ?? ""}-identifier`;
    },
    get document() {
      return get(context).item;
    },
    field: "system.identifier",
    get value() {
      return get(context).source.identifier;
    },
    get placeholder() {
      return get(context).item.identifier;
    },
    get disabled() {
      return get(disabled);
    }
  });
  var p2 = sibling(div_2, 2), text_1 = child(p2);
  template_effect(() => set_text(text_1, localize("DND5E.IdentifierError"))), template_effect(() => set_attribute(label, "for", `${get(appId) ?? ""}-identifier`)), append($$anchor, div), pop();
}
__name(ItemSpeciesDetailsTab, "ItemSpeciesDetailsTab");
var root$1I = /* @__PURE__ */ template('<div class="vertical-line-separator svelte-ziqoq" aria-hidden="true" role="presentation"></div>');
function VerticalLineSeparator($$anchor) {
  var div = root$1I();
  append($$anchor, div);
}
__name(VerticalLineSeparator, "VerticalLineSeparator");
var root$1H = /* @__PURE__ */ template("<div><!></div>");
function Accordion($$anchor, $$props) {
  push($$props, !0);
  var div = root$1H(), node = child(div);
  snippet(node, () => $$props.children ?? noop), template_effect(() => set_class(div, `accordion ${$$props.class ?? ""}`)), append($$anchor, div), pop();
}
__name(Accordion, "Accordion");
var on_click$C = /* @__PURE__ */ __name((_, open) => open(!open()), "on_click$C"), root_1$15 = /* @__PURE__ */ template('<div class="accordion-item-content"><!></div>'), root$1G = /* @__PURE__ */ template('<section><h2 class="accordion-item-header"><a class="accordion-item-toggle" type="button"><span class="accordion-arrow"><i class="fas fa-chevron-right"></i></span> <!></a></h2> <!></section>');
function AccordionItem($$anchor, $$props) {
  push($$props, !0);
  let open = prop($$props, "open", 15, !1);
  var section = root$1G(), h2 = child(section), a2 = child(h2);
  a2.__click = [on_click$C, open];
  var span = child(a2), node = sibling(span, 2);
  snippet(node, () => $$props.header ?? noop);
  var node_1 = sibling(h2, 2);
  ExpandableContainer(node_1, {
    get expanded() {
      return open();
    },
    children: /* @__PURE__ */ __name(($$anchor2, $$slotProps) => {
      var div = root_1$15(), node_2 = child(div);
      snippet(node_2, () => $$props.children ?? noop), append($$anchor2, div);
    }, "children"),
    $$slots: { default: !0 }
  }), template_effect(() => {
    set_class(section, `accordion-item ${$$props.class ?? "" ?? ""}`), toggle_class(h2, "open", open()), set_attribute(a2, "data-tidy-sheet-part", CONSTANTS.SHEET_PARTS.EXPANSION_TOGGLE), toggle_class(span, "open", open());
  }), append($$anchor, section), pop();
}
__name(AccordionItem, "AccordionItem");
delegate(["click"]);
var on_click$B = /* @__PURE__ */ __name((event2, $$props, itemDescription) => {
  event2.stopPropagation(), $$props.onEdit?.({
    contentToEdit: get(itemDescription).content,
    enrichedText: get(itemDescription).enriched,
    fieldToEdit: get(itemDescription).field
  });
}, "on_click$B"), root_6$b = /* @__PURE__ */ template('<button type="button" class="inline-icon-button edit-item-description svelte-x08twt"><i class="fas fa-feather"></i></button>'), root_5$i = /* @__PURE__ */ template('<span class="flex-1 flex-row justify-content-space-between"> <!></span>'), root_7$e = /* @__PURE__ */ template('<div class="item-editor-descriptions-html-container user-select-text"><!></div>'), root_4$h = /* @__PURE__ */ template("<div><!></div>"), root_1$14 = /* @__PURE__ */ template('<div class="item-descriptions-container svelte-x08twt"><!></div>');
function ItemDescriptions$1($$anchor, $$props) {
  push($$props, !0);
  let renderDescriptions = prop($$props, "renderDescriptions", 3, !0), context = /* @__PURE__ */ derived(getItemSheetContext), accordionItemOpenStates = state(proxy([]));
  user_effect(() => {
    get(context).itemDescriptions.length !== get(accordionItemOpenStates).length && set(accordionItemOpenStates, proxy(get(context).itemDescriptions.map((_, i2) => get(accordionItemOpenStates)[i2] ?? i2 === 0)));
  });
  function manageSecrets(node) {
    if (!get(context).item.isOwner)
      return;
    const secret = new HTMLSecret({
      parentSelector: "[data-edit]",
      callbacks: {
        content: /* @__PURE__ */ __name((secret2) => foundry.utils.getProperty(get(context).item, secret2.closest("[data-edit]").dataset.edit), "content"),
        update: /* @__PURE__ */ __name((secret2, content) => get(context).item.update({
          [secret2.closest("[data-edit]").dataset.edit]: content
        }), "update")
      }
    });
    queueMicrotask(() => {
      secret.bind(node);
    });
  }
  __name(manageSecrets, "manageSecrets");
  var fragment = comment(), node_1 = first_child(fragment);
  {
    var consequent_1 = /* @__PURE__ */ __name(($$anchor2) => {
      var div = root_1$14(), node_2 = child(div);
      Accordion(node_2, {
        children: /* @__PURE__ */ __name(($$anchor3, $$slotProps) => {
          var fragment_1 = comment(), node_3 = first_child(fragment_1);
          each(node_3, 17, () => get(accordionItemOpenStates), index, ($$anchor4, $$item, i2) => {
            var fragment_2 = comment();
            const itemDescription = /* @__PURE__ */ derived(() => get(context).itemDescriptions[i2]);
            var node_4 = first_child(fragment_2);
            key_block(node_4, () => get(itemDescription).content, ($$anchor5) => {
              var div_1 = root_4$h(), node_5 = child(div_1);
              AccordionItem(node_5, {
                class: "editor",
                get open() {
                  return get(accordionItemOpenStates)[i2];
                },
                set open($$value) {
                  get(accordionItemOpenStates)[i2] = $$value;
                },
                header: /* @__PURE__ */ __name(($$anchor6) => {
                  var span = root_5$i(), text2 = child(span), node_6 = sibling(text2);
                  {
                    var consequent = /* @__PURE__ */ __name(($$anchor7) => {
                      var button = root_6$b();
                      button.__click = [on_click$B, $$props, itemDescription], template_effect(() => set_attribute(button, "tabindex", settings.value.useAccessibleKeyboardSupport ? 0 : -1)), append($$anchor7, button);
                    }, "consequent");
                    if_block(node_6, ($$render) => {
                      get(context).editable && $$render(consequent);
                    });
                  }
                  template_effect(() => set_text(text2, `${get(itemDescription).label ?? ""} `)), append($$anchor6, span);
                }, "header"),
                children: /* @__PURE__ */ __name(($$anchor6, $$slotProps2) => {
                  var div_2 = root_7$e(), node_7 = child(div_2);
                  html(node_7, () => get(itemDescription).enriched), template_effect(() => set_attribute(div_2, "data-edit", get(itemDescription).field)), append($$anchor6, div_2);
                }, "children"),
                $$slots: { header: !0, default: !0 }
              }), action(div_1, ($$node) => manageSecrets?.($$node)), append($$anchor5, div_1);
            }), append($$anchor4, fragment_2);
          }), append($$anchor3, fragment_1);
        }, "children"),
        $$slots: { default: !0 }
      }), append($$anchor2, div);
    }, "consequent_1");
    if_block(node_1, ($$render) => {
      renderDescriptions() && $$render(consequent_1);
    });
  }
  append($$anchor, fragment), pop();
}
__name(ItemDescriptions$1, "ItemDescriptions$1");
delegate(["click"]);
var root_2$q = /* @__PURE__ */ template('<div class="form-group"><label> </label> <!></div> <!>', 1), root_3$p = /* @__PURE__ */ template("<span> </span>"), root_4$g = /* @__PURE__ */ template("<!> <!>", 1), root_1$13 = /* @__PURE__ */ template('<!> <div class="form-group"><label> </label> <!></div> <!> <div class="form-group stacked"><label> </label> <!></div>', 1), root_7$d = /* @__PURE__ */ template("<li> </li>"), root_8$f = /* @__PURE__ */ template("<li> </li>"), root_9$c = /* @__PURE__ */ template("<li> </li>"), root_6$a = /* @__PURE__ */ template('<h4 class="properties-header"> </h4> <ol class="properties-list animate-inert"><!> <!> <!></ol>', 1), root_12$2 = /* @__PURE__ */ template("<li> </li>"), root_10$8 = /* @__PURE__ */ template('<section class="inert-animation-container"><h4 class="properties-header"> </h4> <ol class="properties-list"></ol></section>'), root_16$3 = /* @__PURE__ */ template('<article class="editor-container svelte-11fm6gh"><!></article>'), root_18 = /* @__PURE__ */ template('<article class="editor-container svelte-11fm6gh"><!></article>'), root$1F = /* @__PURE__ */ template('<div class="item-description flexrow align-items-stretch small-gap"><div class="item-properties svelte-11fm6gh"><!> <!> <!> <div class="flex-column small-gap"><div class="form-group section"><label> </label> <!></div> <div class="form-group section"><label> </label> <!></div></div></div> <!> <!></div> <!>', 1);
function ItemDescriptionWithSidebarTab($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getSheetContext), appId = /* @__PURE__ */ derived(() => get(context).document.id), editing = state(!1), contentToEdit = state(""), enrichedText = state(""), fieldToEdit = state("");
  function stopEditing() {
    set(editing, !1);
  }
  __name(stopEditing, "stopEditing");
  function edit(value, enriched, field) {
    set(contentToEdit, proxy(value)), set(fieldToEdit, proxy(field)), set(enrichedText, proxy(enriched)), set(editing, !0);
  }
  __name(edit, "edit");
  const localize = FoundryAdapter.localize;
  var fragment = root$1F(), div = first_child(fragment), div_1 = child(div), node = child(div_1);
  {
    var consequent_2 = /* @__PURE__ */ __name(($$anchor2) => {
      var fragment_1 = root_1$13(), node_1 = first_child(fragment_1);
      {
        var consequent = /* @__PURE__ */ __name(($$anchor3) => {
          var fragment_2 = root_2$q(), div_2 = first_child(fragment_2), label_1 = child(div_2), text2 = child(label_1);
          template_effect(() => set_text(text2, localize("DND5E.Quantity")));
          var node_2 = sibling(label_1, 2), disabled = /* @__PURE__ */ derived(() => !get(context).editable || get(context).lockItemQuantity);
          NumberInput(node_2, {
            get id() {
              return `${get(appId) ?? ""}-quantity`;
            },
            get value() {
              return get(context).source.quantity;
            },
            field: "system.quantity",
            get document() {
              return get(context).item;
            },
            step: "1",
            get disabled() {
              return get(disabled);
            },
            selectOnFocus: !0
          });
          var node_3 = sibling(div_2, 2);
          HorizontalLineSeparator(node_3, { borderColor: "separator" }), template_effect(() => set_attribute(label_1, "for", `${get(appId) ?? ""}-quantity`)), append($$anchor3, fragment_2);
        }, "consequent");
        if_block(node_1, ($$render) => {
          get(context).item.type !== CONSTANTS.ITEM_TYPE_CONTAINER && $$render(consequent);
        });
      }
      var div_3 = sibling(node_1, 2), label_2 = child(div_3), text_1 = child(label_2);
      template_effect(() => set_text(text_1, localize("DND5E.Weight")));
      var node_4 = sibling(label_2, 2), disabled_1 = /* @__PURE__ */ derived(() => !get(context).editable);
      NumberInput(node_4, {
        get id() {
          return `${get(appId) ?? ""}-weight-value`;
        },
        get value() {
          return get(context).source.weight.value;
        },
        step: "any",
        field: "system.weight.value",
        get document() {
          return get(context).item;
        },
        get disabled() {
          return get(disabled_1);
        },
        selectOnFocus: !0
      });
      var node_5 = sibling(div_3, 2);
      HorizontalLineSeparator(node_5, { borderColor: "separator" });
      var div_4 = sibling(node_5, 2), label_3 = child(div_4), text_2 = child(label_3);
      template_effect(() => set_text(text_2, localize("DND5E.Price")));
      var node_6 = sibling(label_3, 2);
      {
        var consequent_1 = /* @__PURE__ */ __name(($$anchor3) => {
          var span = root_3$p(), text_3 = child(span);
          template_effect(() => set_text(text_3, localize("DND5E.Unidentified.Value"))), append($$anchor3, span);
        }, "consequent_1"), alternate = /* @__PURE__ */ __name(($$anchor3) => {
          var fragment_3 = root_4$g(), node_7 = first_child(fragment_3), disabled_2 = /* @__PURE__ */ derived(() => !get(context).editable);
          NumberInput(node_7, {
            get id() {
              return `${get(appId) ?? ""}-price-value`;
            },
            get value() {
              return get(context).source.price.value;
            },
            step: "any",
            field: "system.price.value",
            get document() {
              return get(context).item;
            },
            get disabled() {
              return get(disabled_2);
            },
            selectOnFocus: !0,
            cssClass: "large-value"
          });
          var node_8 = sibling(node_7, 2), disabled_3 = /* @__PURE__ */ derived(() => !get(context).editable);
          Select(node_8, {
            get value() {
              return get(context).source.price.denomination;
            },
            field: "system.price.denomination",
            get document() {
              return get(context).item;
            },
            get disabled() {
              return get(disabled_3);
            },
            children: /* @__PURE__ */ __name(($$anchor4, $$slotProps) => {
              SelectOptions($$anchor4, {
                get data() {
                  return get(context).config.currencies;
                },
                labelProp: "abbreviation"
              });
            }, "children"),
            $$slots: { default: !0 }
          }), append($$anchor3, fragment_3);
        }, "alternate");
        if_block(node_6, ($$render) => {
          get(context).concealDetails ? $$render(consequent_1) : $$render(alternate, !1);
        });
      }
      template_effect(() => {
        set_attribute(label_2, "for", `${get(appId) ?? ""}-weight-value`), set_attribute(label_3, "for", `${get(appId) ?? ""}-price-value`);
      }), append($$anchor2, fragment_1);
    }, "consequent_2");
    if_block(node, ($$render) => {
      get(context).isPhysical && $$render(consequent_2);
    });
  }
  var node_9 = sibling(node, 2);
  {
    var consequent_5 = /* @__PURE__ */ __name(($$anchor2) => {
      var fragment_5 = root_6$a(), h4 = first_child(fragment_5);
      const stringified_text = /* @__PURE__ */ derived(() => localize("DND5E.Attack") ?? ""), stringified_text_1 = /* @__PURE__ */ derived(() => localize("DND5E.Damage") ?? "");
      var text_4 = child(h4);
      template_effect(() => set_text(text_4, `${get(stringified_text)}/${get(stringified_text_1)}`));
      var ol = sibling(h4, 2), node_10 = child(ol);
      {
        var consequent_3 = /* @__PURE__ */ __name(($$anchor3) => {
          var li = root_7$d(), text_5 = child(li);
          template_effect(() => set_text(text_5, get(context).labels.save)), append($$anchor3, li);
        }, "consequent_3");
        if_block(node_10, ($$render) => {
          get(context).labels.save && $$render(consequent_3);
        });
      }
      var node_11 = sibling(node_10, 2);
      {
        var consequent_4 = /* @__PURE__ */ __name(($$anchor3) => {
          var li_1 = root_8$f(), text_6 = child(li_1);
          template_effect(() => set_text(text_6, `${get(context).labels.toHit ?? ""}
            ${localize("DND5E.ToHit") ?? ""}`)), append($$anchor3, li_1);
        }, "consequent_4");
        if_block(node_11, ($$render) => {
          get(context).labels.toHit && $$render(consequent_4);
        });
      }
      var node_12 = sibling(node_11, 2);
      each(node_12, 17, () => get(context).labels.damages ?? [], index, ($$anchor3, damage) => {
        var li_2 = root_9$c();
        const label = /* @__PURE__ */ derived(() => get(damage).label);
        var text_7 = child(li_2);
        template_effect(() => set_text(text_7, get(label))), append($$anchor3, li_2);
      }), template_effect(() => ol.inert = get(context).concealDetails), append($$anchor2, fragment_5);
    }, "consequent_5");
    if_block(node_9, ($$render) => {
      (get(context).labels.toHit || get(context).labels.damages.length) && $$render(consequent_5);
    });
  }
  var node_13 = sibling(node_9, 2);
  {
    var consequent_7 = /* @__PURE__ */ __name(($$anchor2) => {
      var section = root_10$8(), h4_1 = child(section), text_8 = child(h4_1);
      template_effect(() => set_text(text_8, localize("DND5E.Properties")));
      var ol_1 = sibling(h4_1, 2);
      each(ol_1, 21, () => get(context).properties.active, index, ($$anchor3, prop2) => {
        var fragment_6 = comment(), node_14 = first_child(fragment_6);
        {
          var consequent_6 = /* @__PURE__ */ __name(($$anchor4) => {
            var li_3 = root_12$2(), text_9 = child(li_3);
            template_effect(() => set_text(text_9, get(prop2))), append($$anchor4, li_3);
          }, "consequent_6");
          if_block(node_14, ($$render) => {
            get(prop2) !== null && get(prop2) !== void 0 && $$render(consequent_6);
          });
        }
        append($$anchor3, fragment_6);
      }), template_effect(() => ol_1.inert = get(context).concealDetails), append($$anchor2, section);
    }, "consequent_7");
    if_block(node_13, ($$render) => {
      get(context).properties.active.length && $$render(consequent_7);
    });
  }
  var div_5 = sibling(node_13, 2), div_6 = child(div_5), label_4 = child(div_6), text_10 = child(label_4);
  template_effect(() => set_text(text_10, localize("TIDY5E.Section.Label")));
  var node_15 = sibling(label_4, 2), placeholder = /* @__PURE__ */ derived(() => localize("TIDY5E.Section.Default")), value_1 = /* @__PURE__ */ derived(() => TidyFlags.section.get(get(context).item) ?? ""), title = /* @__PURE__ */ derived(() => localize("TIDY5E.Section.Tooltip")), disabled_4 = /* @__PURE__ */ derived(() => !get(context).editable);
  TextInput(node_15, {
    get id() {
      return `${get(appId) ?? ""}-tidy-section`;
    },
    get document() {
      return get(context).item;
    },
    get field() {
      return TidyFlags.section.prop;
    },
    get placeholder() {
      return get(placeholder);
    },
    get value() {
      return get(value_1);
    },
    selectOnFocus: !0,
    get title() {
      return get(title);
    },
    get disabled() {
      return get(disabled_4);
    }
  });
  var div_7 = sibling(div_6, 2), label_5 = child(div_7), text_11 = child(label_5);
  template_effect(() => set_text(text_11, localize("TIDY5E.Section.ActionLabel")));
  var node_16 = sibling(label_5, 2), placeholder_1 = /* @__PURE__ */ derived(() => localize("TIDY5E.Section.Default")), value_2 = /* @__PURE__ */ derived(() => TidyFlags.actionSection.get(get(context).item) ?? ""), title_1 = /* @__PURE__ */ derived(() => localize("TIDY5E.Section.ActionTooltip")), disabled_5 = /* @__PURE__ */ derived(() => !get(context).editable);
  TextInput(node_16, {
    get id() {
      return `${get(appId) ?? ""}-tidy-action-section`;
    },
    get document() {
      return get(context).item;
    },
    get field() {
      return TidyFlags.actionSection.prop;
    },
    get placeholder() {
      return get(placeholder_1);
    },
    get value() {
      return get(value_2);
    },
    selectOnFocus: !0,
    get title() {
      return get(title_1);
    },
    get disabled() {
      return get(disabled_5);
    }
  });
  var node_17 = sibling(div_1, 2);
  VerticalLineSeparator(node_17);
  var node_18 = sibling(node_17, 2);
  {
    var consequent_8 = /* @__PURE__ */ __name(($$anchor2) => {
      var renderDescriptions = /* @__PURE__ */ derived(() => !get(editing));
      ItemDescriptions$1($$anchor2, {
        onEdit: /* @__PURE__ */ __name((detail) => edit(detail.contentToEdit, detail.enrichedText, detail.fieldToEdit), "onEdit"),
        get renderDescriptions() {
          return get(renderDescriptions);
        }
      });
    }, "consequent_8"), alternate_1 = /* @__PURE__ */ __name(($$anchor2) => {
      var fragment_8 = comment(), node_19 = first_child(fragment_8);
      {
        var consequent_9 = /* @__PURE__ */ __name(($$anchor3) => {
          var fragment_9 = comment(), node_20 = first_child(fragment_9);
          key_block(node_20, () => get(context).enriched.unidentified, ($$anchor4) => {
            var article = root_16$3(), node_21 = child(article), editorOptions = /* @__PURE__ */ derived(() => ({ editable: get(context).editable }));
            SheetEditorV2(node_21, {
              get content() {
                return get(context).system.unidentified.description;
              },
              get enriched() {
                return get(context).enriched.unidentified;
              },
              field: "system.unidentified.description",
              get editorOptions() {
                return get(editorOptions);
              },
              get documentUuid() {
                return get(context).item.uuid;
              },
              get manageSecrets() {
                return get(context).document.isOwner;
              }
            }), append($$anchor4, article);
          }), append($$anchor3, fragment_9);
        }, "consequent_9");
        if_block(
          node_19,
          ($$render) => {
            (get(context).editable || get(context).system.unidentified.description) && $$render(consequent_9);
          },
          !0
        );
      }
      append($$anchor2, fragment_8);
    }, "alternate_1");
    if_block(node_18, ($$render) => {
      FoundryAdapter.userIsGm() || get(context).isIdentified ? $$render(consequent_8) : $$render(alternate_1, !1);
    });
  }
  var node_22 = sibling(div, 2);
  {
    var consequent_10 = /* @__PURE__ */ __name(($$anchor2) => {
      var fragment_10 = comment(), node_23 = first_child(fragment_10);
      key_block(node_23, () => get(contentToEdit), ($$anchor3) => {
        var article_1 = root_18(), node_24 = child(article_1), editorOptions_1 = /* @__PURE__ */ derived(() => ({
          editable: get(context).editable,
          toggled: !1
        }));
        SheetEditorV2(node_24, {
          get enriched() {
            return get(enrichedText);
          },
          get content() {
            return get(contentToEdit);
          },
          get field() {
            return get(fieldToEdit);
          },
          get editorOptions() {
            return get(editorOptions_1);
          },
          get documentUuid() {
            return get(context).item.uuid;
          },
          onSave: /* @__PURE__ */ __name(() => stopEditing(), "onSave"),
          get manageSecrets() {
            return get(context).document.isOwner;
          }
        }), append($$anchor3, article_1);
      }), append($$anchor2, fragment_10);
    }, "consequent_10");
    if_block(node_22, ($$render) => {
      get(editing) && $$render(consequent_10);
    });
  }
  template_effect(() => {
    toggle_class(div, "hidden", get(editing)), set_attribute(div_1, "data-tidy-sheet-part", CONSTANTS.SHEET_PARTS.ITEM_SHEET_PROPERTIES), set_attribute(label_4, "for", `${get(appId) ?? ""}-tidy-section`), set_attribute(label_5, "for", `${get(appId) ?? ""}-tidy-action-section`);
  }), append($$anchor, fragment), pop();
}
__name(ItemDescriptionWithSidebarTab, "ItemDescriptionWithSidebarTab");
var root$1E = /* @__PURE__ */ template('<div role="presentation" class="gold-header-underline"><svg xmlns="http://www.w3.org/2000/svg" width="14" height="9" viewBox="0 0 14 9" fill="none"><path d="M0.5 4.42259V7.42259C0.5 7.42259 6 4.42297 14 4.42259C22 4.42221 0.5 4.42259 0.5 4.42259Z" stroke="var(--line-color)"></path></svg> <svg class="middle" xmlns="http://www.w3.org/2000/svg" height="9" viewBox="0 0 1 9" fill="none" preserveAspectRatio="none"><path d="M0 4.42259H1" stroke="var(--line-color)"></path></svg> <svg xmlns="http://www.w3.org/2000/svg" width="14" height="9" viewBox="0 0 14 9" fill="none"><path d="M 0.00338251,4.42259 H 13.5 V 1.42242 C 8.5,3.03931 5.2033825,4.42259 0.00338251,4.42259 Z" stroke="var(--line-color)"></path></svg></div>');
function GoldHeaderUnderline($$anchor) {
  var div = root$1E();
  append($$anchor, div);
}
__name(GoldHeaderUnderline, "GoldHeaderUnderline");
var on_click$A = /* @__PURE__ */ __name((_, expanded) => expanded(!expanded()), "on_click$A"), root_1$12 = /* @__PURE__ */ template('<i class="fas fa-angle-right fa-fw expand-indicator"></i>'), on_click_1$i = /* @__PURE__ */ __name((__1, $$props) => $$props.onEdit?.({
  document: $$props.document,
  itemDescription: $$props.itemDescription
}), "on_click_1$i"), root_3$o = /* @__PURE__ */ template('<div class="editor"><div class="user-select-text"><!></div></div>'), root$1D = /* @__PURE__ */ template('<section class="collapsible-editor"><header><a class="title"> <!></a> <a class="edit icon-button"><i class="fas fa-feather fa-fw"></i></a> <!></header> <!></section>');
function CollapsibleEditorSection($$anchor, $$props) {
  push($$props, !0);
  let expanded = prop($$props, "expanded", 15), showIndicator = /* @__PURE__ */ derived(() => !isNil($$props.itemDescription.enriched, ""));
  function manageSecrets(node) {
    if (!$$props.document.isOwner)
      return;
    const secret = new HTMLSecret({
      parentSelector: "[data-edit]",
      callbacks: {
        content: /* @__PURE__ */ __name((secret2) => foundry.utils.getProperty($$props.document, secret2.closest("[data-edit]").dataset.edit), "content"),
        update: /* @__PURE__ */ __name((secret2, content) => $$props.document.update({
          [secret2.closest("[data-edit]").dataset.edit]: content
        }), "update")
      }
    });
    queueMicrotask(() => {
      secret.bind(node);
    });
  }
  __name(manageSecrets, "manageSecrets");
  var section = root$1D(), header = child(section), a2 = child(header);
  a2.__click = [on_click$A, expanded];
  var text2 = child(a2), node_1 = sibling(text2);
  {
    var consequent = /* @__PURE__ */ __name(($$anchor2) => {
      var i2 = root_1$12();
      template_effect(() => toggle_class(i2, "expanded", expanded())), append($$anchor2, i2);
    }, "consequent");
    if_block(node_1, ($$render) => {
      get(showIndicator) && $$render(consequent);
    });
  }
  var a_1 = sibling(a2, 2);
  a_1.__click = [on_click_1$i, $$props];
  var node_2 = sibling(a_1, 2);
  GoldHeaderUnderline(node_2);
  var node_3 = sibling(header, 2);
  ExpandableContainer(node_3, {
    get expanded() {
      return expanded();
    },
    children: /* @__PURE__ */ __name(($$anchor2, $$slotProps) => {
      var fragment = comment(), node_4 = first_child(fragment);
      key_block(node_4, () => $$props.itemDescription.enriched, ($$anchor3) => {
        var div = root_3$o(), div_1 = child(div), node_5 = child(div_1);
        html(node_5, () => $$props.itemDescription.enriched), action(div, ($$node) => manageSecrets?.($$node)), template_effect(() => set_attribute(div_1, "data-edit", $$props.itemDescription.field)), append($$anchor3, div);
      }), append($$anchor2, fragment);
    }, "children"),
    $$slots: { default: !0 }
  }), template_effect(() => set_text(text2, `${$$props.itemDescription.label ?? ""} `)), append($$anchor, section), pop();
}
__name(CollapsibleEditorSection, "CollapsibleEditorSection");
delegate(["click"]);
var root_1$11 = /* @__PURE__ */ template('<section class="item-descriptions"></section>');
function ItemDescriptions($$anchor, $$props) {
  push($$props, !0);
  let editing = prop($$props, "editing", 15, !1), sectionItemOpenStates = proxy($$props.itemDescriptions.map((_, i2) => i2 === 0)), itemDescriptionToEdit = state(void 0);
  function handleEdit(detail) {
    set(itemDescriptionToEdit, proxy(detail.itemDescription)), editing(!0);
  }
  __name(handleEdit, "handleEdit");
  var fragment = comment(), node = first_child(fragment);
  {
    var consequent = /* @__PURE__ */ __name(($$anchor2) => {
      var section = root_1$11();
      each(section, 23, () => $$props.itemDescriptions, (itemDescription) => itemDescription.field, ($$anchor3, itemDescription, i2) => {
        CollapsibleEditorSection($$anchor3, {
          get document() {
            return $$props.document;
          },
          get itemDescription() {
            return get(itemDescription);
          },
          onEdit: /* @__PURE__ */ __name((detail) => handleEdit(detail), "onEdit"),
          get expanded() {
            return sectionItemOpenStates[get(i2)];
          },
          set expanded($$value) {
            sectionItemOpenStates[get(i2)] = $$value;
          }
        });
      }), append($$anchor2, section);
    }, "consequent"), alternate = /* @__PURE__ */ __name(($$anchor2) => {
      var fragment_2 = comment(), node_1 = first_child(fragment_2);
      {
        var consequent_1 = /* @__PURE__ */ __name(($$anchor3) => {
          SheetEditorV2($$anchor3, {
            get documentUuid() {
              return $$props.document.uuid;
            },
            get content() {
              return get(itemDescriptionToEdit).content;
            },
            editorOptions: { toggled: !1 },
            manageSecrets: !0,
            get field() {
              return get(itemDescriptionToEdit).field;
            },
            get enriched() {
              return get(itemDescriptionToEdit).enriched;
            },
            onSave: /* @__PURE__ */ __name(() => editing(!1), "onSave")
          });
        }, "consequent_1");
        if_block(
          node_1,
          ($$render) => {
            get(itemDescriptionToEdit) && $$render(consequent_1);
          },
          !0
        );
      }
      append($$anchor2, fragment_2);
    }, "alternate");
    if_block(node, ($$render) => {
      editing() ? $$render(alternate, !1) : $$render(consequent);
    });
  }
  append($$anchor, fragment), pop();
}
__name(ItemDescriptions, "ItemDescriptions");
function ItemDescriptionsTab($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getContainerSheetHightouchContext);
  ItemDescriptions($$anchor, {
    get document() {
      return get(context).document;
    },
    get itemDescriptions() {
      return get(context).itemDescriptions;
    }
  }), pop();
}
__name(ItemDescriptionsTab, "ItemDescriptionsTab");
var root_4$f = /* @__PURE__ */ template('<div class="form-group split-group"><label> </label> <div class="form-fields"><div class="form-group label-top"><label> </label> <!></div></div> <!></div>'), root$1C = /* @__PURE__ */ template('<h3 class="form-header"><!></h3> <div class="form-group"><label> </label> <!></div> <div class="form-group split-group"><label> </label> <div class="form-fields"><div class="form-group label-top"><label> </label> <!></div> <div class="form-group label-top"><label> </label> <!></div> <div class="form-group label-top"><label> </label> <!></div></div> <!></div> <!>', 1);
function DetailsMountable($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getItemSheetContext), appId = /* @__PURE__ */ derived(() => get(context).document.id);
  const localize = FoundryAdapter.localize;
  var fragment = root$1C(), h3 = first_child(fragment), node = child(h3);
  {
    var consequent = /* @__PURE__ */ __name(($$anchor2) => {
      var text$1 = text();
      template_effect(() => set_text(text$1, localize("DND5E.ItemSiegeProperties"))), append($$anchor2, text$1);
    }, "consequent"), alternate = /* @__PURE__ */ __name(($$anchor2) => {
      var fragment_2 = comment(), node_1 = first_child(fragment_2);
      {
        var consequent_1 = /* @__PURE__ */ __name(($$anchor3) => {
          var text_1 = text();
          template_effect(() => set_text(text_1, localize("DND5E.ItemVehicleProperties"))), append($$anchor3, text_1);
        }, "consequent_1");
        if_block(
          node_1,
          ($$render) => {
            get(context).item.type === CONSTANTS.ITEM_TYPE_EQUIPMENT && $$render(consequent_1);
          },
          !0
        );
      }
      append($$anchor2, fragment_2);
    }, "alternate");
    if_block(node, ($$render) => {
      get(context).item.type === CONSTANTS.ITEM_TYPE_WEAPON ? $$render(consequent) : $$render(alternate, !1);
    });
  }
  var div = sibling(h3, 2), label = child(div), text_2 = child(label);
  template_effect(() => set_text(text_2, localize("DND5E.ArmorClass")));
  var node_2 = sibling(label, 2), disabled = /* @__PURE__ */ derived(() => !get(context).editable);
  NumberInput(node_2, {
    get id() {
      return `${get(appId) ?? ""}-armor-value`;
    },
    get document() {
      return get(context).item;
    },
    field: "system.armor.value",
    get value() {
      return get(context).source.armor.value;
    },
    get disabled() {
      return get(disabled);
    },
    step: "1"
  });
  var div_1 = sibling(div, 2), label_1 = child(div_1), text_3 = child(label_1);
  template_effect(() => set_text(text_3, localize("DND5E.HitPoints")));
  var div_2 = sibling(label_1, 2), div_3 = child(div_2), label_2 = child(div_3), text_4 = child(label_2);
  template_effect(() => set_text(text_4, localize("DND5E.Current")));
  var node_3 = sibling(label_2, 2), disabled_1 = /* @__PURE__ */ derived(() => !get(context).editable);
  NumberInput(node_3, {
    get id() {
      return `${get(appId) ?? ""}-hp-value`;
    },
    get document() {
      return get(context).item;
    },
    field: "system.hp.value",
    get value() {
      return get(context).source.hp.value;
    },
    get disabled() {
      return get(disabled_1);
    },
    placeholder: "0",
    min: "0"
  });
  var div_4 = sibling(div_3, 2), label_3 = child(div_4), text_5 = child(label_3);
  template_effect(() => set_text(text_5, localize("DND5E.Max")));
  var node_4 = sibling(label_3, 2), disabled_2 = /* @__PURE__ */ derived(() => !get(context).editable);
  NumberInput(node_4, {
    get id() {
      return `${get(appId) ?? ""}-hp-max`;
    },
    get document() {
      return get(context).item;
    },
    field: "system.hp.max",
    get value() {
      return get(context).source.hp.max;
    },
    get disabled() {
      return get(disabled_2);
    },
    placeholder: "0",
    min: "0"
  });
  var div_5 = sibling(div_4, 2), label_4 = child(div_5), text_6 = child(label_4);
  template_effect(() => set_text(text_6, localize("DND5E.Threshold")));
  var node_5 = sibling(label_4, 2), disabled_3 = /* @__PURE__ */ derived(() => !get(context).editable);
  NumberInput(node_5, {
    get id() {
      return `${get(appId) ?? ""}-hp-dt`;
    },
    get document() {
      return get(context).item;
    },
    field: "system.hp.dt",
    get value() {
      return get(context).source.hp.dt;
    },
    get disabled() {
      return get(disabled_3);
    },
    placeholder: "—",
    min: "0"
  });
  var node_6 = sibling(div_2, 2), placeholder = /* @__PURE__ */ derived(() => localize("DND5E.HealthConditions")), disabled_4 = /* @__PURE__ */ derived(() => !get(context).editable);
  TextInput(node_6, {
    get id() {
      return `${get(appId) ?? ""}-hp-conditions`;
    },
    get document() {
      return get(context).item;
    },
    field: "system.hp.conditions",
    get value() {
      return get(context).item.system.hp.conditions;
    },
    get placeholder() {
      return get(placeholder);
    },
    class: "full-width",
    get disabled() {
      return get(disabled_4);
    }
  });
  var node_7 = sibling(div_1, 2);
  {
    var consequent_2 = /* @__PURE__ */ __name(($$anchor2) => {
      var div_6 = root_4$f(), label_5 = child(div_6), text_7 = child(label_5);
      template_effect(() => set_text(text_7, localize("DND5E.Speed")));
      var div_7 = sibling(label_5, 2), div_8 = child(div_7), label_6 = child(div_8), text_8 = child(label_6);
      template_effect(() => set_text(text_8, localize("DND5E.Value")));
      var node_8 = sibling(label_6, 2), disabled_5 = /* @__PURE__ */ derived(() => !get(context).editable);
      NumberInput(node_8, {
        get id() {
          return `${get(appId) ?? ""}-speed-value`;
        },
        get document() {
          return get(context).item;
        },
        field: "system.speed.value",
        get value() {
          return get(context).item.system.speed.value;
        },
        min: "0",
        placeholder: "0",
        get disabled() {
          return get(disabled_5);
        }
      });
      var node_9 = sibling(div_7, 2), placeholder_1 = /* @__PURE__ */ derived(() => localize("DND5E.SpeedConditions")), disabled_6 = /* @__PURE__ */ derived(() => !get(context).editable);
      TextInput(node_9, {
        get id() {
          return `${get(appId) ?? ""}-speed-conditions`;
        },
        get document() {
          return get(context).item;
        },
        field: "system.speed.conditions",
        get value() {
          return get(context).item.system.speed.conditions;
        },
        get placeholder() {
          return get(placeholder_1);
        },
        class: "full-width",
        get disabled() {
          return get(disabled_6);
        }
      }), template_effect(() => {
        set_attribute(label_5, "for", `${get(appId) ?? ""}-speed-value`), set_attribute(label_6, "for", `${get(appId) ?? ""}-speed-value`);
      }), append($$anchor2, div_6);
    }, "consequent_2");
    if_block(node_7, ($$render) => {
      get(context).item.type === CONSTANTS.ITEM_TYPE_EQUIPMENT && $$render(consequent_2);
    });
  }
  template_effect(() => {
    set_attribute(label, "for", `${get(appId) ?? ""}-armor-value`), set_attribute(label_1, "for", `${get(appId) ?? ""}-hp-value`), set_attribute(label_2, "for", `${get(appId) ?? ""}-hp-value`), set_attribute(label_3, "for", `${get(appId) ?? ""}-hp-max`), set_attribute(label_4, "for", `${get(appId) ?? ""}-hp-dt`);
  }), append($$anchor, fragment), pop();
}
__name(DetailsMountable, "DetailsMountable");
var root_3$n = /* @__PURE__ */ template('<div class="form-group"><label> </label> <!></div>'), root_7$c = /* @__PURE__ */ template('<div class="form-group label-top"><label> </label> <!></div>'), root_6$9 = /* @__PURE__ */ template('<div class="form-group split-group"><label> </label> <div class="form-fields"><div class="form-group label-top"><label> </label> <!></div> <!> <div class="form-group label-top"><label> </label> <!></div></div></div>'), root_9$b = /* @__PURE__ */ template('<div class="form-group label-top no-gap"><label> </label> <div class="form-fields"><!> <!></div></div>'), root_8$e = /* @__PURE__ */ template('<div class="form-group"><label> </label> <div class="form-fields"><!> <div class="form-group label-top"><label> </label> <!></div></div></div>'), root_1$10 = /* @__PURE__ */ template('<h3 class="form-header"> </h3> <div class="form-group"><label> </label> <!></div> <!> <div class="form-group"><label> </label> <!></div> <!> <div class="form-group stacked equipment-properties"><label for=""> </label> <!></div> <!> <!> <!>', 1);
function ItemEquipmentDetailsTab($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getItemSheetContext), appId = /* @__PURE__ */ derived(() => get(context).document.id);
  const localize = FoundryAdapter.localize;
  ContentConcealer($$anchor, {
    get conceal() {
      return get(context).concealDetails;
    },
    children: /* @__PURE__ */ __name(($$anchor2, $$slotProps) => {
      var fragment_1 = root_1$10(), h3 = first_child(fragment_1), text2 = child(h3);
      template_effect(() => set_text(text2, localize("DND5E.ItemEquipmentDetails")));
      var div = sibling(h3, 2), label = child(div), text_1 = child(label);
      template_effect(() => set_text(text_1, localize("DND5E.ItemEquipmentType")));
      var node = sibling(label, 2), disabled = /* @__PURE__ */ derived(() => !get(context).editable);
      Select(node, {
        get id() {
          return `${get(appId) ?? ""}-type-value`;
        },
        get document() {
          return get(context).item;
        },
        field: "system.type.value",
        get value() {
          return get(context).source.type.value;
        },
        blankValue: "",
        get disabled() {
          return get(disabled);
        },
        children: /* @__PURE__ */ __name(($$anchor3, $$slotProps2) => {
          SelectOptions($$anchor3, {
            get data() {
              return get(context).equipmentTypes;
            },
            labelProp: "label",
            valueProp: "value",
            blank: ""
          });
        }, "children"),
        $$slots: { default: !0 }
      });
      var node_1 = sibling(div, 2);
      {
        var consequent = /* @__PURE__ */ __name(($$anchor3) => {
          var div_1 = root_3$n(), label_1 = child(div_1), text_2 = child(label_1);
          template_effect(() => set_text(text_2, localize("DND5E.ItemEquipmentBase")));
          var node_2 = sibling(label_1, 2), disabled_1 = /* @__PURE__ */ derived(() => !get(context).editable);
          Select(node_2, {
            get id() {
              return `${get(appId) ?? ""}-type-baseItem`;
            },
            get document() {
              return get(context).item;
            },
            field: "system.type.baseItem",
            get value() {
              return get(context).source.type.baseItem;
            },
            blankValue: "",
            get disabled() {
              return get(disabled_1);
            },
            children: /* @__PURE__ */ __name(($$anchor4, $$slotProps2) => {
              SelectOptions($$anchor4, {
                get data() {
                  return get(context).baseItems;
                },
                labelProp: "label",
                valueProp: "value",
                blank: ""
              });
            }, "children"),
            $$slots: { default: !0 }
          }), template_effect(() => set_attribute(label_1, "for", `${get(appId) ?? ""}-type-baseItem`)), append($$anchor3, div_1);
        }, "consequent");
        if_block(node_1, ($$render) => {
          Object.keys(get(context).baseItems ?? {}).length && $$render(consequent);
        });
      }
      var div_2 = sibling(node_1, 2), label_2 = child(div_2), text_3 = child(label_2);
      template_effect(() => set_text(text_3, localize("DND5E.ProficiencyLevel")));
      var node_3 = sibling(label_2, 2), disabled_2 = /* @__PURE__ */ derived(() => !get(context).editable);
      Select(node_3, {
        get id() {
          return `${get(appId) ?? ""}-proficient`;
        },
        get document() {
          return get(context).item;
        },
        field: "system.proficient",
        get value() {
          return get(context).source.proficient;
        },
        blankValue: "",
        get disabled() {
          return get(disabled_2);
        },
        children: /* @__PURE__ */ __name(($$anchor3, $$slotProps2) => {
          var blank = /* @__PURE__ */ derived(() => localize("DND5E.Automatic"));
          SelectOptions($$anchor3, {
            get data() {
              return get(context).config.weaponAndArmorProficiencyLevels;
            },
            labelProp: "label",
            valueProp: "value",
            get blank() {
              return get(blank);
            }
          });
        }, "children"),
        $$slots: { default: !0 }
      });
      var node_4 = sibling(div_2, 2);
      {
        var consequent_2 = /* @__PURE__ */ __name(($$anchor3) => {
          var div_3 = root_6$9(), label_3 = child(div_3), text_4 = child(label_3);
          template_effect(() => set_text(text_4, localize("DND5E.Armor")));
          var div_4 = sibling(label_3, 2), div_5 = child(div_4), label_4 = child(div_5), text_5 = child(label_4);
          template_effect(() => set_text(text_5, localize("DND5E.AC")));
          var node_5 = sibling(label_4, 2), disabled_3 = /* @__PURE__ */ derived(() => !get(context).editable);
          NumberInput(node_5, {
            get id() {
              return `${get(appId) ?? ""}-armor-value`;
            },
            get document() {
              return get(context).item;
            },
            field: "system.armor.value",
            get value() {
              return get(context).source.armor.value;
            },
            step: "1",
            get disabled() {
              return get(disabled_3);
            }
          });
          var node_6 = sibling(div_5, 2);
          {
            var consequent_1 = /* @__PURE__ */ __name(($$anchor4) => {
              var div_6 = root_7$c(), label_5 = child(div_6), text_6 = child(label_5);
              template_effect(() => set_text(text_6, localize("DND5E.ItemEquipmentDexModAbbr")));
              var node_7 = sibling(label_5, 2), disabled_4 = /* @__PURE__ */ derived(() => !get(context).editable);
              NumberInput(node_7, {
                get id() {
                  return `${get(appId) ?? ""}-armor-dex`;
                },
                get document() {
                  return get(context).item;
                },
                field: "system.armor.dex",
                get value() {
                  return get(context).source.armor.dex;
                },
                step: "1",
                placeholder: "∞",
                get disabled() {
                  return get(disabled_4);
                }
              }), template_effect(() => set_attribute(label_5, "for", `${get(appId) ?? ""}-armor-dex`)), append($$anchor4, div_6);
            }, "consequent_1");
            if_block(node_6, ($$render) => {
              get(context).hasDexModifier && $$render(consequent_1);
            });
          }
          var div_7 = sibling(node_6, 2), label_6 = child(div_7), text_7 = child(label_6);
          template_effect(() => set_text(text_7, localize("DND5E.AbilityStr")));
          var node_8 = sibling(label_6, 2), disabled_5 = /* @__PURE__ */ derived(() => !get(context).editable);
          NumberInput(node_8, {
            get id() {
              return `${get(appId) ?? ""}-armor-strength`;
            },
            get document() {
              return get(context).item;
            },
            field: "system.strength",
            get value() {
              return get(context).source.strength;
            },
            step: "1",
            placeholder: "—",
            get disabled() {
              return get(disabled_5);
            }
          }), template_effect(() => {
            set_attribute(label_3, "for", `${get(appId) ?? ""}-armor-value`), set_attribute(label_4, "for", `${get(appId) ?? ""}-armor-value`), set_attribute(label_6, "for", `${get(appId) ?? ""}-armor-strength`);
          }), append($$anchor3, div_3);
        }, "consequent_2");
        if_block(node_4, ($$render) => {
          get(context).system.isArmor && $$render(consequent_2);
        });
      }
      var div_8 = sibling(node_4, 2), label_7 = child(div_8), text_8 = child(label_7);
      template_effect(() => set_text(text_8, localize("DND5E.ItemEquipmentProperties")));
      var node_9 = sibling(label_7, 2);
      ItemProperties(node_9, {});
      var node_10 = sibling(div_8, 2);
      {
        var consequent_4 = /* @__PURE__ */ __name(($$anchor3) => {
          var div_9 = root_8$e(), label_8 = child(div_9), text_9 = child(label_8);
          template_effect(() => set_text(text_9, localize("DND5E.Item.Property.Magical")));
          var div_10 = sibling(label_8, 2), node_11 = child(div_10);
          {
            var consequent_3 = /* @__PURE__ */ __name(($$anchor4) => {
              var div_11 = root_9$b(), label_9 = child(div_11), text_10 = child(label_9);
              template_effect(() => set_text(text_10, localize("DND5E.Attunement")));
              var div_12 = sibling(label_9, 2), node_12 = child(div_12), id = /* @__PURE__ */ derived(() => `${get(appId)}-system-attuned`), disabled_6 = /* @__PURE__ */ derived(() => !get(context).editable || // @ts-expect-error
              !get(context).config.attunementTypes[get(context).system.attunement]), title = /* @__PURE__ */ derived(() => localize("DND5E.AttunementAttuned"));
              Checkbox(node_12, {
                get id() {
                  return get(id);
                },
                get document() {
                  return get(context).item;
                },
                field: "system.attuned",
                get checked() {
                  return get(context).source.attuned;
                },
                get disabled() {
                  return get(disabled_6);
                },
                get title() {
                  return get(title);
                }
              });
              var node_13 = sibling(node_12, 2), disabled_7 = /* @__PURE__ */ derived(() => !get(context).editable);
              Select(node_13, {
                get id() {
                  return `${get(appId) ?? ""}-attunement`;
                },
                get document() {
                  return get(context).item;
                },
                field: "system.attunement",
                get value() {
                  return get(context).source.attunement;
                },
                get disabled() {
                  return get(disabled_7);
                },
                class: "flex-1",
                children: /* @__PURE__ */ __name(($$anchor5, $$slotProps2) => {
                  var blank_1 = /* @__PURE__ */ derived(() => localize("DND5E.AttunementNone"));
                  SelectOptions($$anchor5, {
                    get data() {
                      return get(context).config.attunementTypes;
                    },
                    get blank() {
                      return get(blank_1);
                    }
                  });
                }, "children"),
                $$slots: { default: !0 }
              }), template_effect(() => set_attribute(label_9, "for", `${get(appId) ?? ""}-attuned`)), append($$anchor4, div_11);
            }, "consequent_3");
            if_block(node_11, ($$render) => {
              get(context).item.isMountable || $$render(consequent_3);
            });
          }
          var div_13 = sibling(node_11, 2), label_10 = child(div_13), text_11 = child(label_10);
          template_effect(() => set_text(text_11, localize("DND5E.Bonus")));
          var node_14 = sibling(label_10, 2), disabled_8 = /* @__PURE__ */ derived(() => !get(context).editable);
          NumberInput(node_14, {
            get id() {
              return `${get(appId) ?? ""}-magical-bonus`;
            },
            get value() {
              return get(context).source.armor.magicalBonus;
            },
            field: "system.armor.magicalBonus",
            get document() {
              return get(context).item;
            },
            get disabled() {
              return get(disabled_8);
            },
            min: "0",
            step: "1",
            placeholder: "0"
          }), template_effect(() => {
            set_attribute(label_8, "for", `${get(appId) ?? ""}-attunement`), set_attribute(label_10, "for", `${get(appId) ?? ""}-magical-bonus`);
          }), append($$anchor3, div_9);
        }, "consequent_4");
        if_block(node_10, ($$render) => {
          get(context).properties.object.mgc && $$render(consequent_4);
        });
      }
      var node_15 = sibling(node_10, 2);
      {
        var consequent_5 = /* @__PURE__ */ __name(($$anchor3) => {
          DetailsMountable($$anchor3, {});
        }, "consequent_5");
        if_block(node_15, ($$render) => {
          get(context).system.isMountable && $$render(consequent_5);
        });
      }
      var node_16 = sibling(node_15, 2);
      FieldUses(node_16, {}), template_effect(() => {
        set_attribute(label, "for", `${get(appId) ?? ""}-type-value`), set_attribute(label_2, "for", `${get(appId) ?? ""}-proficient`);
      }), append($$anchor2, fragment_1);
    }, "children"),
    $$slots: { default: !0 }
  }), pop();
}
__name(ItemEquipmentDetailsTab, "ItemEquipmentDetailsTab");
var root_2$p = /* @__PURE__ */ template('<div class="form-group"><label> </label> <!></div>'), root_4$e = /* @__PURE__ */ template('<h3 class="form-header"> </h3> <div class="form-group"><label> </label> <!> <p class="hint"> </p></div> <div class="form-group"><label> </label> <!> <p class="hint"> </p></div>', 1), root$1B = /* @__PURE__ */ template('<h3 class="form-header"> </h3> <div class="form-group"><label> </label> <!></div> <!> <div class="form-group"><label> </label> <!> <p class="hint"> </p></div> <div class="form-group stacked feature-properties"><label for=""> </label> <!></div> <!> <!>', 1);
function ItemFeatDetailsTab($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getItemSheetContext), appId = /* @__PURE__ */ derived(() => get(context).document.id);
  const localize = FoundryAdapter.localize;
  var fragment = root$1B(), h3 = first_child(fragment), text2 = child(h3);
  template_effect(() => set_text(text2, localize("DND5E.ItemFeatureDetails")));
  var div = sibling(h3, 2), label = child(div), text_1 = child(label);
  template_effect(() => set_text(text_1, localize("DND5E.Type")));
  var node = sibling(label, 2), disabled = /* @__PURE__ */ derived(() => !get(context).editable);
  Select(node, {
    get id() {
      return `${get(appId) ?? ""}-type-value`;
    },
    get document() {
      return get(context).item;
    },
    field: "system.type.value",
    get value() {
      return get(context).source.type.value;
    },
    get disabled() {
      return get(disabled);
    },
    children: /* @__PURE__ */ __name(($$anchor2, $$slotProps) => {
      SelectOptions($$anchor2, {
        get data() {
          return get(context).config.featureTypes;
        },
        labelProp: "label",
        blank: ""
      });
    }, "children"),
    $$slots: { default: !0 }
  });
  var node_1 = sibling(div, 2);
  {
    var consequent = /* @__PURE__ */ __name(($$anchor2) => {
      var div_1 = root_2$p();
      const category = /* @__PURE__ */ derived(() => (
        // @ts-expect-error
        get(context).config.featureTypes[get(context).system.type.value]?.label
      ));
      var label_1 = child(div_1), text_2 = child(label_1);
      template_effect(() => set_text(text_2, localize("DND5E.ItemFeatureSubtype", { category: get(category) })));
      var node_2 = sibling(label_1, 2), disabled_1 = /* @__PURE__ */ derived(() => !get(context).editable);
      Select(node_2, {
        get id() {
          return `${get(appId) ?? ""}-type-subtype`;
        },
        get document() {
          return get(context).item;
        },
        field: "system.type.subtype",
        get value() {
          return get(context).source.type.subtype;
        },
        get disabled() {
          return get(disabled_1);
        },
        children: /* @__PURE__ */ __name(($$anchor3, $$slotProps) => {
          SelectOptions($$anchor3, {
            get data() {
              return get(context).itemSubtypes;
            },
            blank: ""
          });
        }, "children"),
        $$slots: { default: !0 }
      }), template_effect(() => set_attribute(label_1, "for", `${get(appId) ?? ""}-type-subtype`)), append($$anchor2, div_1);
    }, "consequent");
    if_block(node_1, ($$render) => {
      get(context).itemSubtypes && $$render(consequent);
    });
  }
  var div_2 = sibling(node_1, 2), label_2 = child(div_2), text_3 = child(label_2);
  template_effect(() => set_text(text_3, localize("DND5E.Prerequisites.FIELDS.prerequisites.level.label")));
  var node_3 = sibling(label_2, 2), disabled_2 = /* @__PURE__ */ derived(() => !get(context).editable);
  NumberInput(node_3, {
    get id() {
      return `${get(appId) ?? ""}-prerequisites-level`;
    },
    get document() {
      return get(context).item;
    },
    field: "system.prerequisites.level",
    get value() {
      return get(context).source.prerequisites.level;
    },
    get disabled() {
      return get(disabled_2);
    },
    step: "1"
  });
  var p2 = sibling(node_3, 2), text_4 = child(p2);
  template_effect(() => set_text(text_4, localize("DND5E.Prerequisites.FIELDS.prerequisites.level.hint")));
  var div_3 = sibling(div_2, 2), label_3 = child(div_3), text_5 = child(label_3);
  template_effect(() => set_text(text_5, localize("DND5E.ItemFeatureProperties")));
  var node_4 = sibling(label_3, 2);
  ItemProperties(node_4, {});
  var node_5 = sibling(div_3, 2);
  {
    var consequent_1 = /* @__PURE__ */ __name(($$anchor2) => {
      var fragment_3 = root_4$e(), h3_1 = first_child(fragment_3), text_6 = child(h3_1);
      template_effect(() => set_text(text_6, localize("DND5E.ENCHANTMENT.Label")));
      var div_4 = sibling(h3_1, 2), label_4 = child(div_4), text_7 = child(label_4);
      template_effect(() => set_text(text_7, localize("DND5E.ENCHANTMENT.FIELDS.enchantment.items.max.label")));
      var node_6 = sibling(label_4, 2), disabled_3 = /* @__PURE__ */ derived(() => !get(context).editable);
      TextInput(node_6, {
        get id() {
          return `${get(appId) ?? ""}-enchant-max`;
        },
        get document() {
          return get(context).item;
        },
        field: "system.enchant.max",
        get value() {
          return get(context).source.enchant.max;
        },
        get disabled() {
          return get(disabled_3);
        }
      });
      var p_1 = sibling(node_6, 2), text_8 = child(p_1);
      template_effect(() => set_text(text_8, localize("DND5E.ENCHANTMENT.FIELDS.enchantment.items.max.hint")));
      var div_5 = sibling(div_4, 2), label_5 = child(div_5), text_9 = child(label_5);
      template_effect(() => set_text(text_9, localize("DND5E.ENCHANTMENT.FIELDS.enchantment.items.period.label")));
      var node_7 = sibling(label_5, 2), disabled_4 = /* @__PURE__ */ derived(() => !get(context).editable);
      Select(node_7, {
        get id() {
          return `${get(appId) ?? ""}-enchant-period`;
        },
        get document() {
          return get(context).item;
        },
        field: "system.enchant.period",
        get value() {
          return get(context).source.enchant.period;
        },
        blankValue: "",
        get disabled() {
          return get(disabled_4);
        },
        children: /* @__PURE__ */ __name(($$anchor3, $$slotProps) => {
          var blank = /* @__PURE__ */ derived(() => localize("DND5E.UsesPeriods.Never"));
          SelectOptions($$anchor3, {
            get data() {
              return get(context).config.enchantmentPeriods;
            },
            get blank() {
              return get(blank);
            },
            labelProp: "label",
            valueProp: "value"
          });
        }, "children"),
        $$slots: { default: !0 }
      });
      var p_2 = sibling(node_7, 2), text_10 = child(p_2);
      template_effect(() => set_text(text_10, localize("DND5E.ENCHANTMENT.FIELDS.enchantment.items.period.hint"))), template_effect(() => {
        set_attribute(label_4, "for", `${get(appId) ?? ""}-enchant-max`), set_attribute(label_5, "for", `${get(appId) ?? ""}-enchant-period`);
      }), append($$anchor2, fragment_3);
    }, "consequent_1");
    if_block(node_5, ($$render) => {
      get(context).system.isEnchantmentSource && $$render(consequent_1);
    });
  }
  var node_8 = sibling(node_5, 2);
  FieldUses(node_8, {}), template_effect(() => {
    set_attribute(label, "for", `${get(appId) ?? ""}-type-value`), set_attribute(label_2, "for", `${get(appId) ?? ""}-prerequisites-level`);
  }), append($$anchor, fragment), pop();
}
__name(ItemFeatDetailsTab, "ItemFeatDetailsTab");
var root_3$m = /* @__PURE__ */ template('<div class="form-group"><label> </label> <!></div>'), root_1$$ = /* @__PURE__ */ template('<h3 class="form-header"> </h3> <div class="form-group"><label> </label> <!></div> <!> <div class="form-group stacked loot-properties"><label for=""> </label> <!></div>', 1);
function ItemLootDetailsTab($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getItemSheetContext), appId = /* @__PURE__ */ derived(() => get(context).document.id);
  const localize = FoundryAdapter.localize;
  ContentConcealer($$anchor, {
    get conceal() {
      return get(context).concealDetails;
    },
    children: /* @__PURE__ */ __name(($$anchor2, $$slotProps) => {
      var fragment_1 = root_1$$(), h3 = first_child(fragment_1), text2 = child(h3);
      template_effect(() => set_text(text2, localize("DND5E.ItemLootDetails")));
      var div = sibling(h3, 2), label = child(div), text_1 = child(label);
      template_effect(() => set_text(text_1, localize("DND5E.ItemLootType")));
      var node = sibling(label, 2), disabled = /* @__PURE__ */ derived(() => !get(context).editable);
      Select(node, {
        get id() {
          return `${get(appId) ?? ""}-type-value`;
        },
        get document() {
          return get(context).item;
        },
        field: "system.type.value",
        get value() {
          return get(context).source.type.value;
        },
        get disabled() {
          return get(disabled);
        },
        children: /* @__PURE__ */ __name(($$anchor3, $$slotProps2) => {
          SelectOptions($$anchor3, {
            get data() {
              return get(context).config.lootTypes;
            },
            labelProp: "label",
            blank: ""
          });
        }, "children"),
        $$slots: { default: !0 }
      });
      var node_1 = sibling(div, 2);
      {
        var consequent = /* @__PURE__ */ __name(($$anchor3) => {
          var div_1 = root_3$m();
          const subtypeLabel = /* @__PURE__ */ derived(() => localize("DND5E.ItemLootSubtype", {
            category: (
              // @ts-expect-error
              get(context).config.lootTypes[get(context).system.type.value]?.label ?? ""
            )
          }));
          var label_1 = child(div_1), text_2 = child(label_1), node_2 = sibling(label_1, 2), disabled_1 = /* @__PURE__ */ derived(() => !get(context).editable);
          Select(node_2, {
            get id() {
              return `${get(appId) ?? ""}-type-subtype`;
            },
            get document() {
              return get(context).item;
            },
            field: "system.type.subtype",
            get value() {
              return get(context).source.type.subtype;
            },
            get disabled() {
              return get(disabled_1);
            },
            blankValue: "",
            children: /* @__PURE__ */ __name(($$anchor4, $$slotProps2) => {
              SelectOptions($$anchor4, {
                get data() {
                  return get(context).itemSubtypes;
                },
                blank: ""
              });
            }, "children"),
            $$slots: { default: !0 }
          }), template_effect(() => {
            set_attribute(label_1, "for", `${get(appId) ?? ""}-type-subtype`), set_text(text_2, get(subtypeLabel));
          }), append($$anchor3, div_1);
        }, "consequent");
        if_block(node_1, ($$render) => {
          get(context).itemSubtypes && $$render(consequent);
        });
      }
      var div_2 = sibling(node_1, 2), label_2 = child(div_2), text_3 = child(label_2);
      template_effect(() => set_text(text_3, localize("DND5E.ItemLootProperties")));
      var node_3 = sibling(label_2, 2);
      ItemProperties(node_3, {}), template_effect(() => set_attribute(label, "for", `${get(appId) ?? ""}-type-value`)), append($$anchor2, fragment_1);
    }, "children"),
    $$slots: { default: !0 }
  }), pop();
}
__name(ItemLootDetailsTab, "ItemLootDetailsTab");
var on_click$z = /* @__PURE__ */ __name((_, context) => FoundryAdapter.renderCreatureTypeConfig(get(context).item), "on_click$z"), root_1$_ = /* @__PURE__ */ template('<button class="inline-icon-button hidden-config-button" type="button"><i class="fas fa-cog"></i></button>'), on_click_1$h = /* @__PURE__ */ __name((__1, context) => FoundryAdapter.renderMovementSensesConfig(get(context).item, "movement"), "on_click_1$h"), root_2$o = /* @__PURE__ */ template('<button type="button" class="inline-icon-button hidden-config-button" data-action="movement"><i class="fas fa-cog"></i></button>'), root_3$l = /* @__PURE__ */ template("<li> </li>"), root_4$d = /* @__PURE__ */ template("<li> </li>"), on_click_2$7 = /* @__PURE__ */ __name((__2, context) => FoundryAdapter.renderMovementSensesConfig(get(context).item, "senses"), "on_click_2$7"), root_5$h = /* @__PURE__ */ template('<button type="button" class="inline-icon-button hidden-config-button" data-action="senses"><i class="fas fa-cog"></i></button>'), root_6$8 = /* @__PURE__ */ template("<li> </li>"), root_7$b = /* @__PURE__ */ template("<li> </li>"), root$1A = /* @__PURE__ */ template('<div class="item-description flexrow align-items-stretch small-gap"><div class="item-properties svelte-8romn0"><h4 class="properties-header flex-row justify-content-space-between"> <!></h4> <ol class="properties-list"><li> </li></ol> <h4 class="properties-header flex-row justify-content-space-between"> <!></h4> <ol class="properties-list"></ol> <h4 class="properties-header flex-row justify-content-space-between"> <!></h4> <ol class="properties-list"></ol></div> <!> <!></div>');
function ItemSpeciesDescriptionTab($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getItemSheetContext), movementLabels = /* @__PURE__ */ derived(() => Object.values(get(context).item.system.movementLabels)), sensesLabels = /* @__PURE__ */ derived(() => get(context).item.system.sensesLabels);
  const localize = FoundryAdapter.localize;
  var div = root$1A(), div_1 = child(div), h4 = child(div_1), text2 = child(h4);
  template_effect(() => set_text(text2, `${localize("DND5E.Type") ?? ""} `));
  var node = sibling(text2);
  {
    var consequent = /* @__PURE__ */ __name(($$anchor2) => {
      var button = root_1$_();
      button.__click = [on_click$z, context], template_effect(() => set_attribute(button, "tabindex", settings.value.useAccessibleKeyboardSupport ? 0 : -1)), append($$anchor2, button);
    }, "consequent");
    if_block(node, ($$render) => {
      get(context).editable && $$render(consequent);
    });
  }
  var ol = sibling(h4, 2), li = child(ol), text_1 = child(li), h4_1 = sibling(ol, 2), text_2 = child(h4_1);
  template_effect(() => set_text(text_2, `${localize("DND5E.Movement") ?? ""} `));
  var node_1 = sibling(text_2);
  {
    var consequent_1 = /* @__PURE__ */ __name(($$anchor2) => {
      var button_1 = root_2$o();
      button_1.__click = [on_click_1$h, context], template_effect(() => set_attribute(button_1, "tabindex", settings.value.useAccessibleKeyboardSupport ? 0 : -1)), append($$anchor2, button_1);
    }, "consequent_1");
    if_block(node_1, ($$render) => {
      get(context).editable && $$render(consequent_1);
    });
  }
  var ol_1 = sibling(h4_1, 2);
  each(
    ol_1,
    21,
    () => get(movementLabels),
    index,
    ($$anchor2, label) => {
      var li_1 = root_3$l(), text_3 = child(li_1);
      template_effect(() => set_text(text_3, get(label))), append($$anchor2, li_1);
    },
    ($$anchor2) => {
      var li_2 = root_4$d(), text_4 = child(li_2);
      template_effect(() => set_text(text_4, localize("DND5E.None"))), append($$anchor2, li_2);
    }
  );
  var h4_2 = sibling(ol_1, 2), text_5 = child(h4_2);
  template_effect(() => set_text(text_5, `${localize("DND5E.Senses") ?? ""} `));
  var node_2 = sibling(text_5);
  {
    var consequent_2 = /* @__PURE__ */ __name(($$anchor2) => {
      var button_2 = root_5$h();
      button_2.__click = [on_click_2$7, context], template_effect(() => set_attribute(button_2, "tabindex", settings.value.useAccessibleKeyboardSupport ? 0 : -1)), append($$anchor2, button_2);
    }, "consequent_2");
    if_block(node_2, ($$render) => {
      get(context).editable && $$render(consequent_2);
    });
  }
  var ol_2 = sibling(h4_2, 2);
  each(
    ol_2,
    21,
    () => get(sensesLabels),
    index,
    ($$anchor2, label) => {
      var li_3 = root_6$8(), text_6 = child(li_3);
      template_effect(() => set_text(text_6, get(label))), append($$anchor2, li_3);
    },
    ($$anchor2) => {
      var li_4 = root_7$b(), text_7 = child(li_4);
      template_effect(() => set_text(text_7, localize("DND5E.None"))), append($$anchor2, li_4);
    }
  );
  var node_3 = sibling(div_1, 2);
  VerticalLineSeparator(node_3);
  var node_4 = sibling(node_3, 2);
  ItemDescriptionTab(node_4, {}), template_effect(() => {
    set_attribute(div_1, "data-tidy-sheet-part", CONSTANTS.SHEET_PARTS.ITEM_SHEET_PROPERTIES), set_text(text_1, get(context).item.system.typeLabel);
  }), append($$anchor, div), pop();
}
__name(ItemSpeciesDescriptionTab, "ItemSpeciesDescriptionTab");
delegate(["click"]);
var root_1$Z = /* @__PURE__ */ template('<div class="form-group label-top"><label> </label> <!></div>'), root_4$c = /* @__PURE__ */ template('<div class="form-group"><label> </label> <!> <p class="hint"> </p></div>'), root_7$a = /* @__PURE__ */ template('<div class="form-group label-top"><label> </label> <!></div>'), root_8$d = /* @__PURE__ */ template('<div class="form-group label-top"><label> </label> <!></div>'), root_10$7 = /* @__PURE__ */ template('<div class="form-group checkbox"><label> </label> <!></div>'), root_6$7 = /* @__PURE__ */ template('<div class="form-group split-group"><label for=""> </label> <div class="form-fields"><div class="form-group label-top"><label> </label> <!></div> <!> <!> <div class="form-group label-top"><label> </label> <!></div></div></div> <div class="form-group split-group"><label> </label> <div class="form-fields"><div class="form-field label-top"><label> </label> <!></div> <!></div></div>', 1), root$1z = /* @__PURE__ */ template('<h3 class="form-header"> </h3> <div class="form-group split-group"><label> </label> <div class="form-fields"><!> <div class="form-group label-top"><label> </label> <!></div></div> <!></div> <!> <h3 class="form-header"> </h3> <div class="form-group"><label> </label> <!></div> <!>', 1);
function FieldTargets($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getItemSheetContext), appId = /* @__PURE__ */ derived(() => get(context).document.id);
  const localize = FoundryAdapter.localize;
  var fragment = root$1z(), h3 = first_child(fragment), text2 = child(h3);
  template_effect(() => set_text(text2, localize("DND5E.TargetPl")));
  var div = sibling(h3, 2), label = child(div), text_1 = child(label);
  template_effect(() => set_text(text_1, localize("DND5E.Type")));
  var div_1 = sibling(label, 2), node = child(div_1);
  {
    var consequent = /* @__PURE__ */ __name(($$anchor2) => {
      var div_2 = root_1$Z(), label_1 = child(div_2), text_2 = child(label_1);
      template_effect(() => set_text(text_2, localize("DND5E.Amount")));
      var node_1 = sibling(label_1, 2), disabled = /* @__PURE__ */ derived(() => !get(context).editable);
      TextInput(node_1, {
        get id() {
          return `${get(appId) ?? ""}-target-affects-count`;
        },
        get document() {
          return get(context).item;
        },
        field: "system.target.affects.count",
        get value() {
          return get(context).source.target.affects.count;
        },
        get placeholder() {
          return get(context).affectsPlaceholder;
        },
        get disabled() {
          return get(disabled);
        }
      }), template_effect(() => set_attribute(label_1, "for", `${get(appId) ?? ""}-target-affects-count`)), append($$anchor2, div_2);
    }, "consequent");
    if_block(node, ($$render) => {
      get(context).system.target.affects.scalar && $$render(consequent);
    });
  }
  var div_3 = sibling(node, 2), label_2 = child(div_3), text_3 = child(label_2);
  template_effect(() => set_text(text_3, localize("DND5E.Type")));
  var node_2 = sibling(label_2, 2), disabled_1 = /* @__PURE__ */ derived(() => !get(context).editable);
  Select(node_2, {
    get id() {
      return `${get(appId) ?? ""}-target-affects-type`;
    },
    get document() {
      return get(context).item;
    },
    field: "system.target.affects.type",
    get value() {
      return get(context).source.target.affects.type;
    },
    blankValue: "",
    get disabled() {
      return get(disabled_1);
    },
    children: /* @__PURE__ */ __name(($$anchor2, $$slotProps) => {
      SelectOptions($$anchor2, {
        get data() {
          return get(context).config.individualTargetTypes;
        },
        blank: ""
      });
    }, "children"),
    $$slots: { default: !0 }
  });
  var node_3 = sibling(div_1, 2);
  {
    var consequent_1 = /* @__PURE__ */ __name(($$anchor2) => {
      var placeholder = /* @__PURE__ */ derived(() => localize("DND5E.TARGET.FIELDS.target.affects.special.label")), disabled_2 = /* @__PURE__ */ derived(() => !get(context).editable);
      TextInput($$anchor2, {
        get id() {
          return `${get(appId) ?? ""}-target-affects-special`;
        },
        get document() {
          return get(context).item;
        },
        field: "system.target.affects.special",
        get value() {
          return get(context).source.target.affects.special;
        },
        class: "full-width",
        get placeholder() {
          return get(placeholder);
        },
        get disabled() {
          return get(disabled_2);
        }
      });
    }, "consequent_1");
    if_block(node_3, ($$render) => {
      get(context).source.target.affects.type && $$render(consequent_1);
    });
  }
  var node_4 = sibling(div, 2);
  {
    var consequent_2 = /* @__PURE__ */ __name(($$anchor2) => {
      var div_4 = root_4$c(), label_3 = child(div_4), text_4 = child(label_3);
      template_effect(() => set_text(text_4, localize("DND5E.TARGET.FIELDS.target.affects.choice.label")));
      var node_5 = sibling(label_3, 2), disabled_3 = /* @__PURE__ */ derived(() => !get(context).editable);
      Checkbox(node_5, {
        get id() {
          return `${get(appId) ?? ""}-target-affects-choice`;
        },
        get document() {
          return get(context).item;
        },
        field: "system.target.affects.choice",
        get checked() {
          return get(context).source.target.affects.choice;
        },
        get disabled() {
          return get(disabled_3);
        }
      });
      var p2 = sibling(node_5, 2), text_5 = child(p2);
      template_effect(() => set_text(text_5, localize("DND5E.TARGET.FIELDS.target.affects.choice.hint"))), template_effect(() => set_attribute(label_3, "for", `${get(appId) ?? ""}-target-affects-choice`)), append($$anchor2, div_4);
    }, "consequent_2");
    if_block(node_4, ($$render) => {
      get(context).system.target.template.type && $$render(consequent_2);
    });
  }
  var h3_1 = sibling(node_4, 2), text_6 = child(h3_1);
  template_effect(() => set_text(text_6, localize("DND5E.TargetTypeArea")));
  var div_5 = sibling(h3_1, 2), label_4 = child(div_5), text_7 = child(label_4);
  template_effect(() => set_text(text_7, localize("DND5E.Shape")));
  var node_6 = sibling(label_4, 2), disabled_4 = /* @__PURE__ */ derived(() => !get(context).editable);
  Select(node_6, {
    get id() {
      return `${get(appId) ?? ""}-target-template-type`;
    },
    get document() {
      return get(context).item;
    },
    field: "system.target.template.type",
    get value() {
      return get(context).source.target.template.type;
    },
    get disabled() {
      return get(disabled_4);
    },
    children: /* @__PURE__ */ __name(($$anchor2, $$slotProps) => {
      SelectOptions($$anchor2, {
        get data() {
          return get(context).config.areaTargetOptions;
        },
        labelProp: "label",
        valueProp: "value"
      });
    }, "children"),
    $$slots: { default: !0 }
  });
  var node_7 = sibling(div_5, 2);
  {
    var consequent_6 = /* @__PURE__ */ __name(($$anchor2) => {
      var fragment_4 = root_6$7(), div_6 = first_child(fragment_4), label_5 = child(div_6), text_8 = child(label_5);
      template_effect(() => set_text(text_8, localize("DND5E.Dimensions")));
      var div_7 = sibling(label_5, 2), div_8 = child(div_7), label_6 = child(div_8), text_9 = child(label_6);
      template_effect(() => set_text(text_9, localize(get(context).dimensions.size)));
      var node_8 = sibling(label_6, 2), disabled_5 = /* @__PURE__ */ derived(() => !get(context).editable);
      TextInput(node_8, {
        get id() {
          return `${get(appId) ?? ""}-target-template-size`;
        },
        get document() {
          return get(context).item;
        },
        field: "system.target.template.size",
        get value() {
          return get(context).source.target.template.size;
        },
        get disabled() {
          return get(disabled_5);
        }
      });
      var node_9 = sibling(div_8, 2);
      {
        var consequent_3 = /* @__PURE__ */ __name(($$anchor3) => {
          var div_9 = root_7$a(), label_7 = child(div_9), text_10 = child(label_7);
          template_effect(() => set_text(text_10, localize(get(context).dimensions.width)));
          var node_10 = sibling(label_7, 2), disabled_6 = /* @__PURE__ */ derived(() => !get(context).editable);
          TextInput(node_10, {
            get id() {
              return `${get(appId) ?? ""}-target-template-width`;
            },
            get document() {
              return get(context).item;
            },
            field: "system.target.template.width",
            get value() {
              return get(context).source.target.template.width;
            },
            get disabled() {
              return get(disabled_6);
            }
          }), template_effect(() => set_attribute(label_7, "for", `${get(appId) ?? ""}-target-template-width`)), append($$anchor3, div_9);
        }, "consequent_3");
        if_block(node_9, ($$render) => {
          get(context).dimensions?.width && $$render(consequent_3);
        });
      }
      var node_11 = sibling(node_9, 2);
      {
        var consequent_4 = /* @__PURE__ */ __name(($$anchor3) => {
          var div_10 = root_8$d(), label_8 = child(div_10), text_11 = child(label_8);
          template_effect(() => set_text(text_11, localize(get(context).dimensions.height)));
          var node_12 = sibling(label_8, 2), disabled_7 = /* @__PURE__ */ derived(() => !get(context).editable);
          TextInput(node_12, {
            get id() {
              return `${get(appId) ?? ""}-target-template-height`;
            },
            get document() {
              return get(context).item;
            },
            field: "system.target.template.height",
            get value() {
              return get(context).source.target.template.height;
            },
            get disabled() {
              return get(disabled_7);
            }
          }), template_effect(() => set_attribute(label_8, "for", `${get(appId) ?? ""}-target-template-height`)), append($$anchor3, div_10);
        }, "consequent_4");
        if_block(node_11, ($$render) => {
          get(context).dimensions?.height && $$render(consequent_4);
        });
      }
      var div_11 = sibling(node_11, 2), label_9 = child(div_11), text_12 = child(label_9);
      template_effect(() => set_text(text_12, localize("DND5E.MovementUnits")));
      var node_13 = sibling(label_9, 2), disabled_8 = /* @__PURE__ */ derived(() => !get(context).editable);
      Select(node_13, {
        get id() {
          return `${get(appId) ?? ""}-target-template-units`;
        },
        get document() {
          return get(context).item;
        },
        field: "system.target.template.units",
        get value() {
          return get(context).source.target.template.units;
        },
        get disabled() {
          return get(disabled_8);
        },
        children: /* @__PURE__ */ __name(($$anchor3, $$slotProps) => {
          SelectOptions($$anchor3, {
            get data() {
              return get(context).config.movementUnits;
            }
          });
        }, "children"),
        $$slots: { default: !0 }
      });
      var div_12 = sibling(div_6, 2), label_10 = child(div_12), text_13 = child(label_10);
      template_effect(() => set_text(text_13, localize("DND5E.Multiple")));
      var div_13 = sibling(label_10, 2), div_14 = child(div_13), label_11 = child(div_14), text_14 = child(label_11);
      template_effect(() => set_text(text_14, localize("DND5E.Amount")));
      var node_14 = sibling(label_11, 2), disabled_9 = /* @__PURE__ */ derived(() => !get(context).editable);
      TextInput(node_14, {
        get id() {
          return `${get(appId) ?? ""}-target-template-count`;
        },
        get document() {
          return get(context).item;
        },
        field: "system.target.template.count",
        get value() {
          return get(context).source.target.template.count;
        },
        placeholder: "1",
        get disabled() {
          return get(disabled_9);
        }
      });
      var node_15 = sibling(div_14, 2);
      {
        var consequent_5 = /* @__PURE__ */ __name(($$anchor3) => {
          var div_15 = root_10$7(), label_12 = child(div_15), text_15 = child(label_12);
          template_effect(() => set_text(text_15, localize("DND5E.Contiguous")));
          var node_16 = sibling(label_12, 2), disabled_10 = /* @__PURE__ */ derived(() => !get(context).editable);
          Checkbox(node_16, {
            get id() {
              return `${get(appId) ?? ""}-target-template-contiguous`;
            },
            get document() {
              return get(context).item;
            },
            field: "system.target.template.contiguous",
            get checked() {
              return get(context).source.target.template.contiguous;
            },
            get disabled() {
              return get(disabled_10);
            }
          }), template_effect(() => set_attribute(label_12, "for", `${get(appId) ?? ""}-target-template-contiguous`)), append($$anchor3, div_15);
        }, "consequent_5");
        if_block(node_15, ($$render) => {
          get(context).system.target.template.type && get(context).system.target.template.count > 1 && $$render(consequent_5);
        });
      }
      template_effect(() => {
        set_attribute(label_6, "for", `${get(appId) ?? ""}-target-template-size`), set_attribute(label_9, "for", `${get(appId) ?? ""}-target-template-units`), set_attribute(label_10, "for", `${get(appId) ?? ""}-target-template-count`), set_attribute(label_11, "for", `${get(appId) ?? ""}-target-template-count`);
      }), append($$anchor2, fragment_4);
    }, "consequent_6");
    if_block(node_7, ($$render) => {
      get(context).system.target.template.type && get(context).dimensions && $$render(consequent_6);
    });
  }
  template_effect(() => {
    set_attribute(label, "for", `${get(appId) ?? ""}-target-affects-type`), set_attribute(label_2, "for", `${get(appId) ?? ""}-target-affects-type`), set_attribute(label_4, "for", `${get(appId) ?? ""}-target-template-type`);
  }), append($$anchor, fragment), pop();
}
__name(FieldTargets, "FieldTargets");
var root_1$Y = /* @__PURE__ */ template('<div class="form-group label-top"><label> </label> <!></div>'), root$1y = /* @__PURE__ */ template('<div class="form-group split-group"><label> </label> <div class="form-fields"><!> <div class="form-group label-top"><label> </label> <!></div></div> <!></div>');
function FieldActivation($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getItemSheetContext), appId = /* @__PURE__ */ derived(() => get(context).document.id);
  const localize = FoundryAdapter.localize;
  var div = root$1y(), label = child(div), text2 = child(label);
  template_effect(() => set_text(text2, localize("DND5E.SpellCastTime")));
  var div_1 = sibling(label, 2), node = child(div_1);
  {
    var consequent = /* @__PURE__ */ __name(($$anchor2) => {
      var div_2 = root_1$Y(), label_1 = child(div_2), text_1 = child(label_1);
      template_effect(() => set_text(text_1, localize("DND5E.Amount")));
      var node_1 = sibling(label_1, 2), disabled = /* @__PURE__ */ derived(() => !get(context).editable);
      NumberInput(node_1, {
        get id() {
          return `${get(appId) ?? ""}-activation-value`;
        },
        get document() {
          return get(context).item;
        },
        field: "system.activation.value",
        get value() {
          return get(context).source.activation.value;
        },
        placeholder: "—",
        min: "0",
        get disabled() {
          return get(disabled);
        }
      }), template_effect(() => set_attribute(label_1, "for", `${get(appId) ?? ""}-activation-value`)), append($$anchor2, div_2);
    }, "consequent");
    if_block(node, ($$render) => {
      get(context).system.activation.scalar && $$render(consequent);
    });
  }
  var div_3 = sibling(node, 2), label_2 = child(div_3), text_2 = child(label_2);
  template_effect(() => set_text(text_2, localize("DND5E.Cost")));
  var node_2 = sibling(label_2, 2), disabled_1 = /* @__PURE__ */ derived(() => !get(context).editable);
  Select(node_2, {
    get id() {
      return `${get(appId) ?? ""}-activation-type`;
    },
    get document() {
      return get(context).item;
    },
    field: "system.activation.type",
    get value() {
      return get(context).source.activation.type;
    },
    get disabled() {
      return get(disabled_1);
    },
    children: /* @__PURE__ */ __name(($$anchor2, $$slotProps) => {
      SelectOptions($$anchor2, {
        get data() {
          return get(context).activationTypes;
        },
        labelProp: "label",
        valueProp: "value"
      });
    }, "children"),
    $$slots: { default: !0 }
  });
  var node_3 = sibling(div_1, 2), placeholder = /* @__PURE__ */ derived(() => localize("DND5E.ItemActivationCondition")), disabled_2 = /* @__PURE__ */ derived(() => !get(context).editable);
  TextInput(node_3, {
    get id() {
      return `${get(appId) ?? ""}-activation-condition`;
    },
    get document() {
      return get(context).item;
    },
    field: "system.activation.condition",
    get value() {
      return get(context).source.activation.condition;
    },
    get placeholder() {
      return get(placeholder);
    },
    class: "full-width",
    get disabled() {
      return get(disabled_2);
    }
  }), template_effect(() => {
    set_attribute(label, "for", `${get(appId) ?? ""}-activation-value`), set_attribute(label_2, "for", `${get(appId) ?? ""}-activation-type`);
  }), append($$anchor, div), pop();
}
__name(FieldActivation, "FieldActivation");
var root_1$X = /* @__PURE__ */ template('<div class="form-group label-top"><label> </label> <!></div>'), root$1x = /* @__PURE__ */ template('<div class="form-group split-group"><label> </label> <div class="form-fields"><!> <div class="form-group label-top"><label> </label> <!></div></div> <!></div>');
function FieldRange($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getItemSheetContext), appId = /* @__PURE__ */ derived(() => get(context).document.id);
  const localize = FoundryAdapter.localize;
  var div = root$1x(), label = child(div), text2 = child(label);
  template_effect(() => set_text(text2, localize("DND5E.Range")));
  var div_1 = sibling(label, 2), node = child(div_1);
  {
    var consequent = /* @__PURE__ */ __name(($$anchor2) => {
      var div_2 = root_1$X(), label_1 = child(div_2), text_1 = child(label_1);
      template_effect(() => set_text(text_1, localize("DND5E.Value")));
      var node_1 = sibling(label_1, 2), disabled = /* @__PURE__ */ derived(() => !get(context).editable);
      TextInput(node_1, {
        get id() {
          return `${get(appId) ?? ""}-range-value`;
        },
        get document() {
          return get(context).item;
        },
        field: "system.range.value",
        get value() {
          return get(context).source.range.value;
        },
        get disabled() {
          return get(disabled);
        }
      }), template_effect(() => set_attribute(label_1, "for", `${get(appId) ?? ""}-range-value`)), append($$anchor2, div_2);
    }, "consequent");
    if_block(node, ($$render) => {
      get(context).system.range.scalar && $$render(consequent);
    });
  }
  var div_3 = sibling(node, 2), label_2 = child(div_3), text_2 = child(label_2);
  template_effect(() => set_text(text_2, localize("DND5E.MovementUnits")));
  var node_2 = sibling(label_2, 2), disabled_1 = /* @__PURE__ */ derived(() => !get(context).editable);
  Select(node_2, {
    get id() {
      return `${get(appId) ?? ""}-range-units`;
    },
    get document() {
      return get(context).item;
    },
    field: "system.range.units",
    get value() {
      return get(context).source.range.units;
    },
    get disabled() {
      return get(disabled_1);
    },
    children: /* @__PURE__ */ __name(($$anchor2, $$slotProps) => {
      SelectOptions($$anchor2, {
        get data() {
          return get(context).rangeTypes;
        },
        labelProp: "label",
        valueProp: "value"
      });
    }, "children"),
    $$slots: { default: !0 }
  });
  var node_3 = sibling(div_1, 2), placeholder = /* @__PURE__ */ derived(() => localize("DND5E.RANGE.FIELDS.range.special.label")), disabled_2 = /* @__PURE__ */ derived(() => !get(context).editable);
  TextInput(node_3, {
    get id() {
      return `${get(appId) ?? ""}-range-special`;
    },
    get document() {
      return get(context).item;
    },
    field: "system.range.special",
    get value() {
      return get(context).source.range.special;
    },
    class: "full-width",
    get placeholder() {
      return get(placeholder);
    },
    get disabled() {
      return get(disabled_2);
    }
  }), template_effect(() => {
    set_attribute(label, "for", `${get(appId) ?? ""}-range-units`), set_attribute(label_2, "for", `${get(appId) ?? ""}-range-units`);
  }), append($$anchor, div), pop();
}
__name(FieldRange, "FieldRange");
var root_1$W = /* @__PURE__ */ template('<div class="form-group label-top"><label> </label> <!></div>'), root$1w = /* @__PURE__ */ template('<div class="form-group split-group"><label> </label> <div class="form-fields"><!> <div class="form-group label-top"><label> </label> <!></div></div> <!></div>');
function FieldDuration($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getItemSheetContext), appId = /* @__PURE__ */ derived(() => get(context).document.id);
  const localize = FoundryAdapter.localize;
  var div = root$1w(), label = child(div), text2 = child(label);
  template_effect(() => set_text(text2, localize("DND5E.Duration")));
  var div_1 = sibling(label, 2), node = child(div_1);
  {
    var consequent = /* @__PURE__ */ __name(($$anchor2) => {
      var div_2 = root_1$W(), label_1 = child(div_2), text_1 = child(label_1);
      template_effect(() => set_text(text_1, localize("DND5E.Amount")));
      var node_1 = sibling(label_1, 2), disabled = /* @__PURE__ */ derived(() => !get(context).editable);
      TextInput(node_1, {
        get id() {
          return `${get(appId) ?? ""}-duration-value`;
        },
        get document() {
          return get(context).item;
        },
        field: "system.duration.value",
        get value() {
          return get(context).source.duration.value;
        },
        placeholder: "—",
        get disabled() {
          return get(disabled);
        }
      }), template_effect(() => set_attribute(label_1, "for", `${get(appId) ?? ""}-duration-value`)), append($$anchor2, div_2);
    }, "consequent");
    if_block(node, ($$render) => {
      get(context).system.duration.scalar && $$render(consequent);
    });
  }
  var div_3 = sibling(node, 2), label_2 = child(div_3), text_2 = child(label_2);
  template_effect(() => set_text(text_2, localize("DND5E.DurationTime")));
  var node_2 = sibling(label_2, 2), disabled_1 = /* @__PURE__ */ derived(() => !get(context).editable);
  Select(node_2, {
    get id() {
      return `${get(appId) ?? ""}-duration-units`;
    },
    get document() {
      return get(context).item;
    },
    field: "system.duration.units",
    get value() {
      return get(context).source.duration.units;
    },
    get disabled() {
      return get(disabled_1);
    },
    children: /* @__PURE__ */ __name(($$anchor2, $$slotProps) => {
      SelectOptions($$anchor2, {
        get data() {
          return get(context).durationUnits;
        },
        labelProp: "label",
        valueProp: "value"
      });
    }, "children"),
    $$slots: { default: !0 }
  });
  var node_3 = sibling(div_1, 2);
  {
    var consequent_1 = /* @__PURE__ */ __name(($$anchor2) => {
      var placeholder = /* @__PURE__ */ derived(() => localize("DND5E.DURATION.FIELDS.duration.special.label")), disabled_2 = /* @__PURE__ */ derived(() => !get(context).editable);
      TextInput($$anchor2, {
        get id() {
          return `${get(appId) ?? ""}-duration-special`;
        },
        get document() {
          return get(context).item;
        },
        field: "system.duration.special",
        get value() {
          return get(context).source.duration.special;
        },
        get placeholder() {
          return get(placeholder);
        },
        class: "full-width",
        get disabled() {
          return get(disabled_2);
        }
      });
    }, "consequent_1");
    if_block(node_3, ($$render) => {
      get(context).system.duration.units === "spec" && $$render(consequent_1);
    });
  }
  template_effect(() => {
    set_attribute(label, "for", `${get(appId) ?? ""}-duration-units`), set_attribute(label_2, "for", `${get(appId) ?? ""}-duration-units`);
  }), append($$anchor, div), pop();
}
__name(FieldDuration, "FieldDuration");
var root_3$k = /* @__PURE__ */ template('<div class="form-group split-group"><label for=""> </label> <div class="form-fields"><div class="form-group label-top"><label> </label> <!></div> <div class="form-group label-top"><label class="label-icon currency gp"> </label> <div class="form-fields"><!></div></div> <div class="form-group checkbox"><label> </label> <!></div></div> <!></div>'), root_6$6 = /* @__PURE__ */ template('<div class="form-group"><label> </label> <!></div> <!>', 1), root_9$a = /* @__PURE__ */ template('<div class="form-group"><label> </label> <!></div>'), root$1v = /* @__PURE__ */ template('<h3 class="form-header"> </h3> <div class="form-group"><label> </label> <!></div> <div class="form-group"><label> </label> <!></div> <div class="form-group spell-components stacked"><label for=""> </label> <!></div> <!> <div class="form-group"><label> </label> <div class="form-fields"><!> <!></div></div> <!> <h3 class="form-header"> </h3> <!> <!> <!> <!> <!>', 1);
function ItemSpellDetailsTab($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getItemSheetContext), appId = /* @__PURE__ */ derived(() => get(context).document.id);
  const localize = FoundryAdapter.localize;
  var fragment = root$1v(), h3 = first_child(fragment), text2 = child(h3);
  template_effect(() => set_text(text2, localize("DND5E.SpellDetails")));
  var div = sibling(h3, 2), label = child(div), text_1 = child(label);
  template_effect(() => set_text(text_1, localize("DND5E.SpellLevel")));
  var node = sibling(label, 2), disabled = /* @__PURE__ */ derived(() => !get(context).editable);
  Select(node, {
    get id() {
      return `${get(appId) ?? ""}-level`;
    },
    get document() {
      return get(context).item;
    },
    field: "system.level",
    get value() {
      return get(context).source.level;
    },
    get disabled() {
      return get(disabled);
    },
    children: /* @__PURE__ */ __name(($$anchor2, $$slotProps) => {
      SelectOptions($$anchor2, {
        get data() {
          return get(context).config.spellLevels;
        }
      });
    }, "children"),
    $$slots: { default: !0 }
  });
  var div_1 = sibling(div, 2), label_1 = child(div_1), text_2 = child(label_1);
  template_effect(() => set_text(text_2, localize("DND5E.SpellSchool")));
  var node_1 = sibling(label_1, 2), disabled_1 = /* @__PURE__ */ derived(() => !get(context).editable);
  Select(node_1, {
    get id() {
      return `${get(appId) ?? ""}-school`;
    },
    get document() {
      return get(context).item;
    },
    field: "system.school",
    get value() {
      return get(context).source.school;
    },
    get disabled() {
      return get(disabled_1);
    },
    children: /* @__PURE__ */ __name(($$anchor2, $$slotProps) => {
      SelectOptions($$anchor2, {
        get data() {
          return get(context).config.spellSchools;
        },
        labelProp: "label",
        blank: ""
      });
    }, "children"),
    $$slots: { default: !0 }
  });
  var div_2 = sibling(div_1, 2), label_2 = child(div_2), text_3 = child(label_2);
  template_effect(() => set_text(text_3, localize("DND5E.SpellComponents")));
  var node_2 = sibling(label_2, 2);
  ItemProperties(node_2, {});
  var node_3 = sibling(div_2, 2);
  {
    var consequent = /* @__PURE__ */ __name(($$anchor2) => {
      var div_3 = root_3$k(), label_3 = child(div_3), text_4 = child(label_3);
      template_effect(() => set_text(text_4, localize("DND5E.SpellMaterials")));
      var div_4 = sibling(label_3, 2), div_5 = child(div_4), label_4 = child(div_5), text_5 = child(label_4);
      template_effect(() => set_text(text_5, localize("DND5E.Supply")));
      var node_4 = sibling(label_4, 2), disabled_2 = /* @__PURE__ */ derived(() => !get(context).editable);
      NumberInput(node_4, {
        get id() {
          return `${get(appId) ?? ""}-materials-supply`;
        },
        get document() {
          return get(context).item;
        },
        field: "system.materials.supply",
        get value() {
          return get(context).source.materials.supply;
        },
        min: "0",
        get disabled() {
          return get(disabled_2);
        }
      });
      var div_6 = sibling(div_5, 2), label_5 = child(div_6);
      template_effect(() => set_attribute(label_5, "aria-label", localize("DND5E.CostGP")));
      var text_6 = child(label_5);
      template_effect(() => set_text(text_6, localize("DND5E.Cost")));
      var div_7 = sibling(label_5, 2), node_5 = child(div_7), disabled_3 = /* @__PURE__ */ derived(() => !get(context).editable);
      NumberInput(node_5, {
        get id() {
          return `${get(appId) ?? ""}-materials-cost`;
        },
        get document() {
          return get(context).item;
        },
        field: "system.materials.cost",
        get value() {
          return get(context).source.materials.cost;
        },
        min: "0",
        placeholder: "—",
        get disabled() {
          return get(disabled_3);
        }
      });
      var div_8 = sibling(div_6, 2), label_6 = child(div_8), text_7 = child(label_6);
      template_effect(() => set_text(text_7, localize("DND5E.Consumed")));
      var node_6 = sibling(label_6, 2), disabled_4 = /* @__PURE__ */ derived(() => !get(context).editable);
      Checkbox(node_6, {
        get id() {
          return `${get(appId) ?? ""}-materials-consumed`;
        },
        get document() {
          return get(context).item;
        },
        field: "system.materials.consumed",
        get checked() {
          return get(context).source.materials.consumed;
        },
        get disabled() {
          return get(disabled_4);
        }
      });
      var node_7 = sibling(div_4, 2), disabled_5 = /* @__PURE__ */ derived(() => !get(context).editable);
      TextInput(node_7, {
        get id() {
          return `${get(appId) ?? ""}-materials-value`;
        },
        get document() {
          return get(context).item;
        },
        field: "system.materials.value",
        get value() {
          return get(context).source.materials.value;
        },
        class: "full-width",
        get disabled() {
          return get(disabled_5);
        }
      }), template_effect(() => {
        set_attribute(label_4, "for", `${get(appId) ?? ""}-materials-supply`), set_attribute(label_5, "for", `${get(appId) ?? ""}-materials-cost`), set_attribute(label_6, "for", `${get(appId) ?? ""}-materials-consumed`);
      }), append($$anchor2, div_3);
    }, "consequent");
    if_block(node_3, ($$render) => {
      get(context).properties.object.material && $$render(consequent);
    });
  }
  var div_9 = sibling(node_3, 2), label_7 = child(div_9), text_8 = child(label_7);
  template_effect(() => set_text(text_8, localize("DND5E.SpellPreparation.Mode")));
  var div_10 = sibling(label_7, 2), node_8 = child(div_10);
  {
    var consequent_1 = /* @__PURE__ */ __name(($$anchor2) => {
      var title = /* @__PURE__ */ derived(() => localize("DND5E.Prepared")), attributes = /* @__PURE__ */ derived(() => ({ "aria-label": localize("DND5E.Prepared") })), disabled_6 = /* @__PURE__ */ derived(() => !get(context).editable);
      Checkbox($$anchor2, {
        get id() {
          return `${get(appId) ?? ""}-preparation-prepared`;
        },
        get document() {
          return get(context).item;
        },
        field: "system.preparation.prepared",
        get checked() {
          return get(context).source.preparation.prepared;
        },
        get title() {
          return get(title);
        },
        get attributes() {
          return get(attributes);
        },
        get disabled() {
          return get(disabled_6);
        }
      });
    }, "consequent_1");
    if_block(node_8, ($$render) => {
      get(context).source.preparation.mode === CONSTANTS.SPELL_PREPARATION_MODE_PREPARED && $$render(consequent_1);
    });
  }
  var node_9 = sibling(node_8, 2), disabled_7 = /* @__PURE__ */ derived(() => !get(context).editable);
  Select(node_9, {
    get id() {
      return `${get(appId) ?? ""}-preparation-mode`;
    },
    get document() {
      return get(context).item;
    },
    field: "system.preparation.mode",
    get value() {
      return get(context).source.preparation.mode;
    },
    get disabled() {
      return get(disabled_7);
    },
    children: /* @__PURE__ */ __name(($$anchor2, $$slotProps) => {
      SelectOptions($$anchor2, {
        get data() {
          return get(context).config.spellPreparationModes;
        },
        labelProp: "label"
      });
    }, "children"),
    $$slots: { default: !0 }
  });
  var node_10 = sibling(div_9, 2);
  {
    var consequent_2 = /* @__PURE__ */ __name(($$anchor2) => {
      var fragment_5 = root_6$6(), div_11 = first_child(fragment_5), label_8 = child(div_11), text_9 = child(label_8);
      template_effect(() => set_text(text_9, localize("DND5E.SpellSourceClass")));
      var node_11 = sibling(label_8, 2), disabled_8 = /* @__PURE__ */ derived(() => !get(context).editable);
      Select(node_11, {
        get id() {
          return `${get(appId) ?? ""}-sourceClass`;
        },
        get document() {
          return get(context).item;
        },
        field: "system.sourceClass",
        get value() {
          return get(context).source.sourceClass;
        },
        get disabled() {
          return get(disabled_8);
        },
        blankValue: "",
        children: /* @__PURE__ */ __name(($$anchor3, $$slotProps) => {
          SelectOptions($$anchor3, {
            get data() {
              return get(context).document.parent.spellcastingClasses;
            },
            labelProp: "name",
            blank: ""
          });
        }, "children"),
        $$slots: { default: !0 }
      });
      var node_12 = sibling(div_11, 2), disabled_9 = /* @__PURE__ */ derived(() => !get(context).editable);
      Select(node_12, {
        get id() {
          return `${get(appId) ?? ""}-ability`;
        },
        get document() {
          return get(context).item;
        },
        field: "system.ability",
        get value() {
          return get(context).source.ability;
        },
        get disabled() {
          return get(disabled_9);
        },
        blankValue: "",
        children: /* @__PURE__ */ __name(($$anchor3, $$slotProps) => {
          SelectOptions($$anchor3, {
            get data() {
              return get(context).config.abilities;
            },
            labelProp: "label",
            get blank() {
              return get(context).defaultAbility;
            }
          });
        }, "children"),
        $$slots: { default: !0 }
      }), template_effect(() => set_attribute(label_8, "for", `${get(appId) ?? ""}-sourceClass`)), append($$anchor2, fragment_5);
    }, "consequent_2"), alternate = /* @__PURE__ */ __name(($$anchor2) => {
      var div_12 = root_9$a(), label_9 = child(div_12), text_10 = child(label_9);
      template_effect(() => set_text(text_10, localize("DND5E.SpellSourceClass")));
      var node_13 = sibling(label_9, 2), disabled_10 = /* @__PURE__ */ derived(() => !get(context).editable);
      TextInput(node_13, {
        get id() {
          return `${get(appId) ?? ""}-sourceClass`;
        },
        get document() {
          return get(context).item;
        },
        field: "system.sourceClass",
        get value() {
          return get(context).source.sourceClass;
        },
        get disabled() {
          return get(disabled_10);
        }
      }), template_effect(() => set_attribute(label_9, "for", `${get(appId) ?? ""}-sourceClass`)), append($$anchor2, div_12);
    }, "alternate");
    if_block(node_10, ($$render) => {
      get(context).isEmbedded ? $$render(consequent_2) : $$render(alternate, !1);
    });
  }
  var h3_1 = sibling(node_10, 2), text_11 = child(h3_1);
  template_effect(() => set_text(text_11, localize("DND5E.Casting")));
  var node_14 = sibling(h3_1, 2);
  FieldActivation(node_14, {});
  var node_15 = sibling(node_14, 2);
  FieldRange(node_15, {});
  var node_16 = sibling(node_15, 2);
  FieldDuration(node_16, {});
  var node_17 = sibling(node_16, 2);
  FieldTargets(node_17, {});
  var node_18 = sibling(node_17, 2);
  FieldUses(node_18, {}), template_effect(() => {
    set_attribute(label, "for", `${get(appId) ?? ""}-level`), set_attribute(label_1, "for", `${get(appId) ?? ""}-school`), set_attribute(label_7, "for", `${get(appId) ?? ""}-preparation-mode`);
  }), append($$anchor, fragment), pop();
}
__name(ItemSpellDetailsTab, "ItemSpellDetailsTab");
var root$1u = /* @__PURE__ */ template('<div class="form-group"><label> </label> <div class="form-fields"><!></div> <p class="hint"> </p></div> <div class="form-group"><label> </label> <div class="form-fields"><!></div> <p class="hint"> </p></div> <h3 class="form-header"> </h3> <!>', 1);
function ItemSubclassDetailsTab($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getItemSheetContext), appId = /* @__PURE__ */ derived(() => get(context).document.id);
  const localize = FoundryAdapter.localize;
  var fragment = root$1u(), div = first_child(fragment), label = child(div), text2 = child(label);
  template_effect(() => set_text(text2, localize("DND5E.Identifier")));
  var div_1 = sibling(label, 2), node = child(div_1), disabled = /* @__PURE__ */ derived(() => !get(context).editable);
  TextInput(node, {
    get id() {
      return `${get(appId) ?? ""}-identifier`;
    },
    get document() {
      return get(context).item;
    },
    field: "system.identifier",
    get value() {
      return get(context).source.identifier;
    },
    get placeholder() {
      return get(context).item.identifier;
    },
    get disabled() {
      return get(disabled);
    }
  });
  var p2 = sibling(div_1, 2), text_1 = child(p2);
  template_effect(() => set_text(text_1, localize("DND5E.IdentifierError")));
  var div_2 = sibling(div, 2), label_1 = child(div_2), text_2 = child(label_1);
  template_effect(() => set_text(text_2, localize("DND5E.ClassIdentifier")));
  var div_3 = sibling(label_1, 2), node_1 = child(div_3), disabled_1 = /* @__PURE__ */ derived(() => !get(context).editable);
  TextInput(node_1, {
    get id() {
      return `${get(appId) ?? ""}-classIdentifier`;
    },
    get document() {
      return get(context).item;
    },
    field: "system.classIdentifier",
    get value() {
      return get(context).source.classIdentifier;
    },
    get disabled() {
      return get(disabled_1);
    }
  });
  var p_1 = sibling(div_3, 2), text_3 = child(p_1);
  template_effect(() => set_text(text_3, localize("DND5E.SubclassIdentifierHint")));
  var h3 = sibling(div_2, 2), text_4 = child(h3);
  template_effect(() => set_text(text_4, localize("DND5E.Spellcasting")));
  var node_2 = sibling(h3, 2);
  DetailsSpellcasting(node_2, {}), template_effect(() => {
    set_attribute(label, "for", `${get(appId) ?? ""}-identifier`), set_attribute(label_1, "for", `${get(appId) ?? ""}-classIdentifier`);
  }), append($$anchor, fragment), pop();
}
__name(ItemSubclassDetailsTab, "ItemSubclassDetailsTab");
var root_3$j = /* @__PURE__ */ template('<div class="form-group"><label> </label> <!></div>'), root_7$9 = /* @__PURE__ */ template('<div class="form-group"><label> </label> <div class="form-fields no-gap"><!> <!></div></div>'), root_1$V = /* @__PURE__ */ template('<div class="form-group"><label> </label> <!></div> <!> <div class="form-group stacked tool-properties"><label for=""> </label> <!></div> <div class="form-group"><label> </label> <div class="form-fields"><div class="form-group label-top"><label for=""> </label> <!></div> <div class="form-group label-top"><label> </label> <!></div></div></div> <div class="form-group"><label> </label> <!></div> <!> <!>', 1);
function ItemToolDetailsTab($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getItemSheetContext);
  const localize = FoundryAdapter.localize;
  let appId = /* @__PURE__ */ derived(() => get(context).document.id);
  ContentConcealer($$anchor, {
    get conceal() {
      return get(context).concealDetails;
    },
    children: /* @__PURE__ */ __name(($$anchor2, $$slotProps) => {
      var fragment_1 = root_1$V(), div = first_child(fragment_1), label = child(div), text2 = child(label);
      template_effect(() => set_text(text2, localize("DND5E.ItemToolType")));
      var node = sibling(label, 2), disabled = /* @__PURE__ */ derived(() => !get(context).editable);
      Select(node, {
        get id() {
          return `${get(appId) ?? ""}-type-value`;
        },
        get document() {
          return get(context).item;
        },
        field: "system.type.value",
        get value() {
          return get(context).source.type.value;
        },
        get disabled() {
          return get(disabled);
        },
        children: /* @__PURE__ */ __name(($$anchor3, $$slotProps2) => {
          SelectOptions($$anchor3, {
            get data() {
              return get(context).config.toolTypes;
            },
            blank: ""
          });
        }, "children"),
        $$slots: { default: !0 }
      });
      var node_1 = sibling(div, 2);
      {
        var consequent = /* @__PURE__ */ __name(($$anchor3) => {
          var div_1 = root_3$j(), label_1 = child(div_1), text_1 = child(label_1);
          template_effect(() => set_text(text_1, localize("DND5E.ItemToolBase")));
          var node_2 = sibling(label_1, 2), disabled_1 = /* @__PURE__ */ derived(() => !get(context).editable);
          Select(node_2, {
            get id() {
              return `${get(appId) ?? ""}-type-baseItem`;
            },
            get document() {
              return get(context).item;
            },
            field: "system.type.baseItem",
            get value() {
              return get(context).source.type.baseItem;
            },
            get disabled() {
              return get(disabled_1);
            },
            children: /* @__PURE__ */ __name(($$anchor4, $$slotProps2) => {
              SelectOptions($$anchor4, {
                get data() {
                  return get(context).baseItems;
                },
                blank: ""
              });
            }, "children"),
            $$slots: { default: !0 }
          }), template_effect(() => set_attribute(label_1, "for", `${get(appId) ?? ""}-type-baseItem`)), append($$anchor3, div_1);
        }, "consequent");
        if_block(node_1, ($$render) => {
          Object.keys(get(context).baseItems ?? {}).length && $$render(consequent);
        });
      }
      var div_2 = sibling(node_1, 2), label_2 = child(div_2), text_2 = child(label_2);
      template_effect(() => set_text(text_2, localize("DND5E.ItemToolProperties")));
      var node_3 = sibling(label_2, 2);
      ItemProperties(node_3, {});
      var div_3 = sibling(div_2, 2), label_3 = child(div_3), text_3 = child(label_3);
      template_effect(() => set_text(text_3, localize("DND5E.ActionAbil")));
      var div_4 = sibling(label_3, 2), div_5 = child(div_4), label_4 = child(div_5), text_4 = child(label_4);
      template_effect(() => set_text(text_4, localize("DND5E.Proficiency")));
      var node_4 = sibling(label_4, 2), disabled_2 = /* @__PURE__ */ derived(() => !get(context).editable);
      Select(node_4, {
        get id() {
          return `${get(appId) ?? ""}-proficient`;
        },
        get document() {
          return get(context).item;
        },
        field: "system.proficient",
        get value() {
          return get(context).source.proficient;
        },
        get disabled() {
          return get(disabled_2);
        },
        children: /* @__PURE__ */ __name(($$anchor3, $$slotProps2) => {
          var blank = /* @__PURE__ */ derived(() => localize("DND5E.Automatic"));
          SelectOptions($$anchor3, {
            get data() {
              return get(context).config.proficiencyLevels;
            },
            get blank() {
              return get(blank);
            }
          });
        }, "children"),
        $$slots: { default: !0 }
      });
      var div_6 = sibling(div_5, 2), label_5 = child(div_6), text_5 = child(label_5);
      template_effect(() => set_text(text_5, localize("DND5E.Ability")));
      var node_5 = sibling(label_5, 2), disabled_3 = /* @__PURE__ */ derived(() => !get(context).editable);
      Select(node_5, {
        get id() {
          return `${get(appId) ?? ""}-ability`;
        },
        get document() {
          return get(context).item;
        },
        field: "system.ability",
        get value() {
          return get(context).source.ability;
        },
        get disabled() {
          return get(disabled_3);
        },
        children: /* @__PURE__ */ __name(($$anchor3, $$slotProps2) => {
          var blank_1 = /* @__PURE__ */ derived(() => localize("DND5E.Default"));
          SelectOptions($$anchor3, {
            get data() {
              return get(context).config.abilities;
            },
            labelProp: "label",
            get blank() {
              return get(blank_1);
            }
          });
        }, "children"),
        $$slots: { default: !0 }
      });
      var div_7 = sibling(div_3, 2), label_6 = child(div_7), text_6 = child(label_6);
      template_effect(() => set_text(text_6, localize("DND5E.ItemToolBonus")));
      var node_6 = sibling(label_6, 2), id = /* @__PURE__ */ derived(() => `${get(appId)}-system-bonus`), disabled_4 = /* @__PURE__ */ derived(() => !get(context).editable);
      TextInput(node_6, {
        get id() {
          return get(id);
        },
        get document() {
          return get(context).item;
        },
        field: "system.bonus",
        get value() {
          return get(context).source.bonus;
        },
        get disabled() {
          return get(disabled_4);
        }
      });
      var node_7 = sibling(div_7, 2);
      {
        var consequent_1 = /* @__PURE__ */ __name(($$anchor3) => {
          var div_8 = root_7$9(), label_7 = child(div_8), text_7 = child(label_7);
          template_effect(() => set_text(text_7, localize("DND5E.Attunement")));
          var div_9 = sibling(label_7, 2), node_8 = child(div_9), id_1 = /* @__PURE__ */ derived(() => `${get(appId)}-system-attuned`), disabled_5 = /* @__PURE__ */ derived(() => !get(context).editable || // @ts-expect-error
          !get(context).config.attunementTypes[get(context).source.attunement]), title = /* @__PURE__ */ derived(() => localize("DND5E.Attuned"));
          Checkbox(node_8, {
            get id() {
              return get(id_1);
            },
            get document() {
              return get(context).item;
            },
            field: "system.attuned",
            get checked() {
              return get(context).source.attuned;
            },
            get disabled() {
              return get(disabled_5);
            },
            get title() {
              return get(title);
            }
          });
          var node_9 = sibling(node_8, 2), disabled_6 = /* @__PURE__ */ derived(() => !get(context).editable);
          Select(node_9, {
            get id() {
              return `${get(appId) ?? ""}-attunement`;
            },
            get document() {
              return get(context).item;
            },
            field: "system.attunement",
            get value() {
              return get(context).source.attunement;
            },
            get disabled() {
              return get(disabled_6);
            },
            children: /* @__PURE__ */ __name(($$anchor4, $$slotProps2) => {
              var blank_2 = /* @__PURE__ */ derived(() => localize("DND5E.AttunementNone"));
              SelectOptions($$anchor4, {
                get data() {
                  return get(context).config.attunementTypes;
                },
                get blank() {
                  return get(blank_2);
                }
              });
            }, "children"),
            $$slots: { default: !0 }
          }), template_effect(() => set_attribute(label_7, "for", `${get(appId) ?? ""}-attunement`)), append($$anchor3, div_8);
        }, "consequent_1");
        if_block(node_7, ($$render) => {
          get(context).properties.object.mgc && $$render(consequent_1);
        });
      }
      var node_10 = sibling(node_7, 2);
      FieldUses(node_10, {}), template_effect(() => {
        set_attribute(label, "for", `${get(appId) ?? ""}-type-value`), set_attribute(label_3, "for", `${get(appId) ?? ""}-proficient`), set_attribute(label_5, "for", `${get(appId) ?? ""}-ability`), set_attribute(label_6, "for", `${get(appId) ?? ""}-bonus`);
      }), append($$anchor2, fragment_1);
    }, "children"),
    $$slots: { default: !0 }
  }), pop();
}
__name(ItemToolDetailsTab, "ItemToolDetailsTab");
var root_3$i = /* @__PURE__ */ template('<div class="form-group"><label> </label> <!></div>'), root_5$g = /* @__PURE__ */ template('<div class="form-group"><label> </label> <!></div>'), root_9$9 = /* @__PURE__ */ template('<div class="form-group label-top no-gap"><label for=""> </label> <div class="form-fields"><!> <!></div></div>'), root_8$c = /* @__PURE__ */ template('<div class="form-group split-group"><label> </label> <div class="form-fields"><!> <div class="form-group label-top"><label> </label> <!></div></div></div>'), root_11$6 = /* @__PURE__ */ template('<div class="form-group"><label for=""> </label> <!></div>'), root_14$2 = /* @__PURE__ */ template('<div class="form-group label-top"><label> </label> <!></div>'), root_13$3 = /* @__PURE__ */ template('<div class="form-group split-group"><label for=""> </label> <div class="form-fields"><div class="form-group label-top"><label> </label> <!></div> <div class="form-group label-top"><label> </label> <!></div> <!></div></div> <div class="form-group"><label for=""> </label> <!></div>', 1), root_17$1 = /* @__PURE__ */ template('<div class="form-group label-top"><label> </label> <!></div>'), root_16$2 = /* @__PURE__ */ template('<div class="form-group split-group"><label for=""> </label> <div class="form-fields"><!> <div class="form-group label-top"><label for=""> </label> <!></div></div></div>'), root_20$1 = /* @__PURE__ */ template('<h3 class="form-header"> </h3> <!>', 1), root_1$U = /* @__PURE__ */ template('<h3 class="form-header"> </h3> <div class="form-group"><label> </label> <!></div> <!> <!> <div class="form-group"><label> </label> <!> <p class="hint"> </p></div> <div class="form-group stacked weapon-properties"><label for=""> </label> <!></div> <!> <!> <h3 class="form-header"> </h3> <!> <!> <h3 class="form-header"> </h3> <div class="form-fields"><p class="hint"> </p></div> <!> <!> <!>', 1);
function ItemWeaponDetailsTab($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getItemSheetContext), appId = /* @__PURE__ */ derived(() => get(context).document.id);
  const localize = FoundryAdapter.localize;
  ContentConcealer($$anchor, {
    get conceal() {
      return get(context).concealDetails;
    },
    children: /* @__PURE__ */ __name(($$anchor2, $$slotProps) => {
      var fragment_1 = root_1$U(), h3 = first_child(fragment_1), text2 = child(h3);
      template_effect(() => set_text(text2, localize("DND5E.ItemWeaponDetails")));
      var div = sibling(h3, 2), label = child(div), text_1 = child(label);
      template_effect(() => set_text(text_1, localize("DND5E.ItemWeaponType")));
      var node = sibling(label, 2), disabled = /* @__PURE__ */ derived(() => !get(context).editable);
      Select(node, {
        get id() {
          return `${get(appId) ?? ""}-type-value`;
        },
        get document() {
          return get(context).item;
        },
        field: "system.type.value",
        get value() {
          return get(context).source.type.value;
        },
        get disabled() {
          return get(disabled);
        },
        blankValue: "",
        children: /* @__PURE__ */ __name(($$anchor3, $$slotProps2) => {
          SelectOptions($$anchor3, {
            get data() {
              return get(context).config.weaponTypes;
            },
            blank: ""
          });
        }, "children"),
        $$slots: { default: !0 }
      });
      var node_1 = sibling(div, 2);
      {
        var consequent = /* @__PURE__ */ __name(($$anchor3) => {
          var div_1 = root_3$i(), label_1 = child(div_1), text_2 = child(label_1);
          template_effect(() => set_text(text_2, localize("DND5E.ItemWeaponBase")));
          var node_2 = sibling(label_1, 2), disabled_1 = /* @__PURE__ */ derived(() => !get(context).editable);
          Select(node_2, {
            get id() {
              return `${get(appId) ?? ""}-type-baseItem`;
            },
            get document() {
              return get(context).item;
            },
            field: "system.type.baseItem",
            get value() {
              return get(context).source.type.baseItem;
            },
            get disabled() {
              return get(disabled_1);
            },
            children: /* @__PURE__ */ __name(($$anchor4, $$slotProps2) => {
              SelectOptions($$anchor4, {
                get data() {
                  return get(context).baseItems;
                },
                blank: ""
              });
            }, "children"),
            $$slots: { default: !0 }
          }), template_effect(() => set_attribute(label_1, "for", `${get(appId) ?? ""}-type-baseItem`)), append($$anchor3, div_1);
        }, "consequent");
        if_block(node_1, ($$render) => {
          Object.keys(get(context).baseItems ?? {}).length && $$render(consequent);
        });
      }
      var node_3 = sibling(node_1, 2);
      {
        var consequent_1 = /* @__PURE__ */ __name(($$anchor3) => {
          var div_2 = root_5$g(), label_2 = child(div_2), text_3 = child(label_2);
          template_effect(() => set_text(text_3, localize("DND5E.ProficiencyLevel")));
          var node_4 = sibling(label_2, 2), disabled_2 = /* @__PURE__ */ derived(() => !get(context).editable);
          Select(node_4, {
            get id() {
              return `${get(appId) ?? ""}-proficient`;
            },
            get document() {
              return get(context).item;
            },
            field: "system.proficient",
            get value() {
              return get(context).source.proficient;
            },
            get disabled() {
              return get(disabled_2);
            },
            children: /* @__PURE__ */ __name(($$anchor4, $$slotProps2) => {
              var blank = /* @__PURE__ */ derived(() => localize("DND5E.Automatic"));
              SelectOptions($$anchor4, {
                get data() {
                  return get(context).config.weaponAndArmorProficiencyLevels;
                },
                get blank() {
                  return get(blank);
                }
              });
            }, "children"),
            $$slots: { default: !0 }
          }), template_effect(() => set_attribute(label_2, "for", `${get(appId) ?? ""}-proficient`)), append($$anchor3, div_2);
        }, "consequent_1");
        if_block(node_3, ($$render) => {
          get(context).item.isMountable || $$render(consequent_1);
        });
      }
      var div_3 = sibling(node_3, 2), label_3 = child(div_3), text_4 = child(label_3);
      template_effect(() => set_text(text_4, localize("DND5E.WEAPON.FIELDS.mastery.label")));
      var node_5 = sibling(label_3, 2), disabled_3 = /* @__PURE__ */ derived(() => !get(context).editable);
      Select(node_5, {
        get id() {
          return `${get(appId) ?? ""}-weapon-mastery`;
        },
        get document() {
          return get(context).item;
        },
        field: "system.mastery",
        get value() {
          return get(context).source.mastery;
        },
        blankValue: "",
        get disabled() {
          return get(disabled_3);
        },
        children: /* @__PURE__ */ __name(($$anchor3, $$slotProps2) => {
          SelectOptions($$anchor3, {
            get data() {
              return get(context).config.weaponMasteries;
            },
            labelProp: "label",
            blank: ""
          });
        }, "children"),
        $$slots: { default: !0 }
      });
      var p2 = sibling(node_5, 2), text_5 = child(p2);
      template_effect(() => set_text(text_5, localize("DND5E.WEAPON.FIELDS.mastery.hint")));
      var div_4 = sibling(div_3, 2), label_4 = child(div_4), text_6 = child(label_4);
      template_effect(() => set_text(text_6, localize("DND5E.ItemWeaponProperties")));
      var node_6 = sibling(label_4, 2);
      ItemProperties(node_6, {});
      var node_7 = sibling(div_4, 2);
      {
        var consequent_3 = /* @__PURE__ */ __name(($$anchor3) => {
          var div_5 = root_8$c(), label_5 = child(div_5), text_7 = child(label_5);
          template_effect(() => set_text(text_7, localize("DND5E.Item.Property.Magical")));
          var div_6 = sibling(label_5, 2), node_8 = child(div_6);
          {
            var consequent_2 = /* @__PURE__ */ __name(($$anchor4) => {
              var div_7 = root_9$9(), label_6 = child(div_7), text_8 = child(label_6);
              template_effect(() => set_text(text_8, localize("DND5E.Attunement")));
              var div_8 = sibling(label_6, 2), node_9 = child(div_8), disabled_4 = /* @__PURE__ */ derived(() => !get(context).editable || // @ts-expect-error
              !get(context).config.attunementTypes[get(context).system.attunement]), title = /* @__PURE__ */ derived(() => localize("DND5E.AttunementAttuned"));
              Checkbox(node_9, {
                get id() {
                  return `${get(appId) ?? ""}-attuned`;
                },
                get document() {
                  return get(context).item;
                },
                field: "system.attuned",
                get checked() {
                  return get(context).source.attuned;
                },
                get disabled() {
                  return get(disabled_4);
                },
                get title() {
                  return get(title);
                }
              });
              var node_10 = sibling(node_9, 2), disabled_5 = /* @__PURE__ */ derived(() => !get(context).editable);
              Select(node_10, {
                get id() {
                  return `${get(appId) ?? ""}-attunement`;
                },
                get document() {
                  return get(context).item;
                },
                field: "system.attunement",
                get value() {
                  return get(context).system.attunement;
                },
                get disabled() {
                  return get(disabled_5);
                },
                class: "flex-1",
                children: /* @__PURE__ */ __name(($$anchor5, $$slotProps2) => {
                  var blank_1 = /* @__PURE__ */ derived(() => localize("DND5E.AttunementNone"));
                  SelectOptions($$anchor5, {
                    get data() {
                      return get(context).config.attunementTypes;
                    },
                    get blank() {
                      return get(blank_1);
                    }
                  });
                }, "children"),
                $$slots: { default: !0 }
              }), append($$anchor4, div_7);
            }, "consequent_2");
            if_block(node_8, ($$render) => {
              get(context).item.isMountable || $$render(consequent_2);
            });
          }
          var div_9 = sibling(node_8, 2), label_7 = child(div_9), text_9 = child(label_7);
          template_effect(() => set_text(text_9, localize("DND5E.Bonus")));
          var node_11 = sibling(label_7, 2), disabled_6 = /* @__PURE__ */ derived(() => !get(context).editable);
          NumberInput(node_11, {
            get id() {
              return `${get(appId) ?? ""}-magical-bonus`;
            },
            get value() {
              return get(context).system.magicalBonus;
            },
            field: "system.magicalBonus",
            get document() {
              return get(context).item;
            },
            get disabled() {
              return get(disabled_6);
            },
            min: "0",
            step: "1",
            placeholder: "0"
          }), template_effect(() => {
            set_attribute(label_5, "for", `${get(appId) ?? ""}-attunement`), set_attribute(label_7, "for", `${get(appId) ?? ""}-magical-bonus`);
          }), append($$anchor3, div_5);
        }, "consequent_3");
        if_block(node_7, ($$render) => {
          get(context).properties.object.mgc && $$render(consequent_3);
        });
      }
      var node_12 = sibling(node_7, 2);
      {
        var consequent_4 = /* @__PURE__ */ __name(($$anchor3) => {
          var div_10 = root_11$6(), label_8 = child(div_10), text_10 = child(label_8);
          template_effect(() => set_text(text_10, localize("DND5E.WEAPON.FIELDS.ammunition.type.label")));
          var node_13 = sibling(label_8, 2), disabled_7 = /* @__PURE__ */ derived(() => !get(context).editable);
          Select(node_13, {
            get document() {
              return get(context).item;
            },
            field: "system.ammunition.type",
            get value() {
              return get(context).source.ammunition.type;
            },
            blankValue: "",
            get disabled() {
              return get(disabled_7);
            },
            children: /* @__PURE__ */ __name(($$anchor4, $$slotProps2) => {
              SelectOptions($$anchor4, {
                get data() {
                  return get(context).config.consumableTypes.ammo.subtypes;
                },
                blank: ""
              });
            }, "children"),
            $$slots: { default: !0 }
          }), append($$anchor3, div_10);
        }, "consequent_4");
        if_block(node_12, ($$render) => {
          get(context).properties.object.amm && $$render(consequent_4);
        });
      }
      var h3_1 = sibling(node_12, 2), text_11 = child(h3_1);
      template_effect(() => set_text(text_11, localize("DND5E.Range")));
      var node_14 = sibling(h3_1, 2);
      {
        var consequent_6 = /* @__PURE__ */ __name(($$anchor3) => {
          var fragment_8 = root_13$3(), div_11 = first_child(fragment_8), label_9 = child(div_11), text_12 = child(label_9);
          template_effect(() => set_text(text_12, localize("DND5E.RangeDistance")));
          var div_12 = sibling(label_9, 2), div_13 = child(div_12), label_10 = child(div_13), text_13 = child(label_10);
          template_effect(() => set_text(text_13, localize("DND5E.Normal")));
          var node_15 = sibling(label_10, 2), disabled_8 = /* @__PURE__ */ derived(() => !get(context).editable);
          NumberInput(node_15, {
            get id() {
              return `${get(appId) ?? ""}-range-value`;
            },
            get document() {
              return get(context).item;
            },
            field: "system.range.value",
            get value() {
              return get(context).source.range.value;
            },
            min: "0",
            get disabled() {
              return get(disabled_8);
            }
          });
          var div_14 = sibling(div_13, 2), label_11 = child(div_14), text_14 = child(label_11);
          template_effect(() => set_text(text_14, localize("DND5E.Long")));
          var node_16 = sibling(label_11, 2), disabled_9 = /* @__PURE__ */ derived(() => !get(context).editable);
          NumberInput(node_16, {
            get id() {
              return `${get(appId) ?? ""}-range-long`;
            },
            get document() {
              return get(context).item;
            },
            field: "system.range.long",
            get value() {
              return get(context).source.range.long;
            },
            min: "0",
            get disabled() {
              return get(disabled_9);
            }
          });
          var node_17 = sibling(div_14, 2);
          {
            var consequent_5 = /* @__PURE__ */ __name(($$anchor4) => {
              var div_15 = root_14$2(), label_12 = child(div_15), text_15 = child(label_12);
              template_effect(() => set_text(text_15, localize("DND5E.RANGE.FIELDS.range.reach.label")));
              var node_18 = sibling(label_12, 2), placeholder = /* @__PURE__ */ derived(() => get(context).system.range.reach === null ? "—" : get(context).system.range.reach), disabled_10 = /* @__PURE__ */ derived(() => !get(context).editable);
              NumberInput(node_18, {
                get id() {
                  return `${get(appId) ?? ""}-range-reach`;
                },
                get document() {
                  return get(context).item;
                },
                field: "system.range.reach",
                get value() {
                  return get(context).source.range.reach;
                },
                min: "0",
                get placeholder() {
                  return get(placeholder);
                },
                get disabled() {
                  return get(disabled_10);
                }
              }), template_effect(() => set_attribute(label_12, "for", `${get(appId) ?? ""}-range-reach`)), append($$anchor4, div_15);
            }, "consequent_5");
            if_block(node_17, ($$render) => {
              get(context).system.attackType !== "ranged" && $$render(consequent_5);
            });
          }
          var div_16 = sibling(div_11, 2), label_13 = child(div_16), text_16 = child(label_13);
          template_effect(() => set_text(text_16, localize("DND5E.MovementUnits")));
          var node_19 = sibling(label_13, 2), disabled_11 = /* @__PURE__ */ derived(() => !get(context).editable);
          Select(node_19, {
            get document() {
              return get(context).item;
            },
            field: "system.range.units",
            get value() {
              return get(context).source.range.units;
            },
            blankValue: "",
            get disabled() {
              return get(disabled_11);
            },
            children: /* @__PURE__ */ __name(($$anchor4, $$slotProps2) => {
              SelectOptions($$anchor4, {
                get data() {
                  return get(context).config.movementUnits;
                },
                blank: ""
              });
            }, "children"),
            $$slots: { default: !0 }
          }), template_effect(() => {
            set_attribute(label_10, "for", `${get(appId) ?? ""}-range-value`), set_attribute(label_11, "for", `${get(appId) ?? ""}-range-long`);
          }), append($$anchor3, fragment_8);
        }, "consequent_6"), alternate = /* @__PURE__ */ __name(($$anchor3) => {
          var div_17 = root_16$2(), label_14 = child(div_17), text_17 = child(label_14);
          template_effect(() => set_text(text_17, localize("DND5E.RangeDistance")));
          var div_18 = sibling(label_14, 2), node_20 = child(div_18);
          {
            var consequent_7 = /* @__PURE__ */ __name(($$anchor4) => {
              var div_19 = root_17$1(), label_15 = child(div_19), text_18 = child(label_15);
              template_effect(() => set_text(text_18, localize("DND5E.RANGE.FIELDS.range.reach.label")));
              var node_21 = sibling(label_15, 2), placeholder_1 = /* @__PURE__ */ derived(() => get(context).system.range.reach === null ? "—" : get(context).system.range.reach), disabled_12 = /* @__PURE__ */ derived(() => !get(context).editable);
              NumberInput(node_21, {
                get id() {
                  return `${get(appId) ?? ""}-range-reach`;
                },
                get document() {
                  return get(context).item;
                },
                field: "system.range.reach",
                get value() {
                  return get(context).source.range.reach;
                },
                min: "0",
                get placeholder() {
                  return get(placeholder_1);
                },
                get disabled() {
                  return get(disabled_12);
                }
              }), template_effect(() => set_attribute(label_15, "for", `${get(appId) ?? ""}-range-reach`)), append($$anchor4, div_19);
            }, "consequent_7");
            if_block(node_20, ($$render) => {
              get(context).system.attackType === "melee" && $$render(consequent_7);
            });
          }
          var div_20 = sibling(node_20, 2), label_16 = child(div_20), text_19 = child(label_16);
          template_effect(() => set_text(text_19, localize("DND5E.MovementUnits")));
          var node_22 = sibling(label_16, 2), disabled_13 = /* @__PURE__ */ derived(() => !get(context).editable);
          Select(node_22, {
            get document() {
              return get(context).item;
            },
            field: "system.range.units",
            get value() {
              return get(context).source.range.units;
            },
            get disabled() {
              return get(disabled_13);
            },
            children: /* @__PURE__ */ __name(($$anchor4, $$slotProps2) => {
              SelectOptions($$anchor4, {
                get data() {
                  return get(context).config.movementUnits;
                }
              });
            }, "children"),
            $$slots: { default: !0 }
          }), append($$anchor3, div_17);
        }, "alternate");
        if_block(node_14, ($$render) => {
          get(context).system.hasRange || !get(context).system.attackType ? $$render(consequent_6) : $$render(alternate, !1);
        });
      }
      var node_23 = sibling(node_14, 2);
      {
        var consequent_8 = /* @__PURE__ */ __name(($$anchor3) => {
          DetailsMountable($$anchor3, {});
        }, "consequent_8");
        if_block(node_23, ($$render) => {
          get(context).system.isMountable && $$render(consequent_8);
        });
      }
      var h3_2 = sibling(node_23, 2), text_20 = child(h3_2);
      template_effect(() => set_text(text_20, localize("DND5E.DAMAGE.Title")));
      var div_21 = sibling(h3_2, 2), p_1 = child(div_21), text_21 = child(p_1);
      template_effect(() => set_text(text_21, localize("DND5E.WEAPON.FIELDS.damage.hint")));
      var node_24 = sibling(div_21, 2);
      FieldDamage(node_24, {
        prefix: "system.damage.base.",
        get source() {
          return get(context).source.damage.base;
        },
        get denominationOptions() {
          return get(context).denominationOptions.base;
        },
        get types() {
          return get(context).damageTypes;
        }
      });
      var node_25 = sibling(node_24, 2);
      {
        var consequent_9 = /* @__PURE__ */ __name(($$anchor3) => {
          var fragment_12 = root_20$1(), h3_3 = first_child(fragment_12), text_22 = child(h3_3);
          template_effect(() => set_text(text_22, localize("DND5E.Versatile")));
          var node_26 = sibling(h3_3, 2);
          FieldDamage(node_26, {
            get denominationOptions() {
              return get(context).denominationOptions.base;
            },
            get source() {
              return get(context).source.damage.versatile;
            },
            prefix: "system.damage.versatile.",
            get numberPlaceholder() {
              return get(context).source.damage.base.number;
            }
          }), append($$anchor3, fragment_12);
        }, "consequent_9");
        if_block(node_25, ($$render) => {
          get(context).properties.object.ver && $$render(consequent_9);
        });
      }
      var node_27 = sibling(node_25, 2);
      FieldUses(node_27, {}), template_effect(() => {
        set_attribute(label, "for", `${get(appId) ?? ""}-type-value`), set_attribute(label_3, "for", `${get(appId) ?? ""}-weapon-mastery`);
      }), append($$anchor2, fragment_1);
    }, "children"),
    $$slots: { default: !0 }
  }), pop();
}
__name(ItemWeaponDetailsTab, "ItemWeaponDetailsTab");
var on_click$y = /* @__PURE__ */ __name((_, context) => get(context).item.sheet.addActivity(), "on_click$y"), root_1$T = /* @__PURE__ */ template('<button type="button" class="add-activity-button svelte-1gvxaa1"><i class="fas fa-plus"></i> </button>'), root_4$b = /* @__PURE__ */ template('<img class="activity-icon svelte-1gvxaa1">'), on_click_1$g = /* @__PURE__ */ __name((__1, context, activity) => get(context).system.activities?.get(get(activity).id).sheet.render(!0), "on_click_1$g"), on_click_2$6 = /* @__PURE__ */ __name((__2, context, activity) => get(context).system.activities?.get(get(activity).id)?.deleteDialog(), "on_click_2$6"), root_5$f = /* @__PURE__ */ template('<button type="button" class="inline-icon-button"><i class="fas fa-trash"></i></button>'), root_2$n = /* @__PURE__ */ template('<div class="activity card svelte-1gvxaa1" draggable="true" data-info-card="activity"><div class="icon svelte-1gvxaa1"><!></div> <button type="button" class="transparent-button highlight-on-hover name svelte-1gvxaa1"> </button> <!></div>'), root$1t = /* @__PURE__ */ template('<section class="flex-1 flex-column extra-small-gap"><header class="header"><!></header> <div class="scroll-container activities svelte-1gvxaa1"></div></section>');
function ItemActivitiesTab($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getItemSheetContext);
  const localize = FoundryAdapter.localize;
  function handleDragStart(ev, activityId) {
    const activity = get(context).item.system.activities?.get(activityId);
    ev.dataTransfer?.setData("text/plain", JSON.stringify(activity.toDragData()));
  }
  __name(handleDragStart, "handleDragStart");
  var section = root$1t(), header = child(section), node = child(header);
  {
    var consequent = /* @__PURE__ */ __name(($$anchor2) => {
      var button = root_1$T();
      button.__click = [on_click$y, context];
      var text2 = sibling(child(button));
      template_effect(() => set_text(text2, ` ${localize("DND5E.Add") ?? ""}`)), template_effect(() => set_attribute(button, "tabindex", settings.value.useAccessibleKeyboardSupport ? 0 : -1)), append($$anchor2, button);
    }, "consequent");
    if_block(node, ($$render) => {
      get(context).editable && $$render(consequent);
    });
  }
  var div = sibling(header, 2);
  each(div, 21, () => get(context).activities, (activity) => activity.id, ($$anchor2, activity) => {
    var div_1 = root_2$n();
    template_effect(() => set_attribute(div_1, "data-configurable", Activities.isConfigurable(get(activity))));
    var div_2 = child(div_1), node_1 = child(div_2);
    {
      var consequent_1 = /* @__PURE__ */ __name(($$anchor3) => {
        Dnd5eIcon($$anchor3, {
          get src() {
            return get(activity).img.src;
          }
        });
      }, "consequent_1"), alternate = /* @__PURE__ */ __name(($$anchor3) => {
        var img = root_4$b();
        template_effect(() => {
          set_attribute(img, "src", get(activity).img.src), set_attribute(img, "alt", get(activity).name);
        }), append($$anchor3, img);
      }, "alternate");
      if_block(node_1, ($$render) => {
        get(activity).img.svg ? $$render(consequent_1) : $$render(alternate, !1);
      });
    }
    var button_1 = sibling(div_2, 2);
    button_1.__click = [on_click_1$g, context, activity];
    var text_1 = child(button_1), node_2 = sibling(button_1, 2);
    {
      var consequent_2 = /* @__PURE__ */ __name(($$anchor3) => {
        var button_2 = root_5$f();
        template_effect(() => set_attribute(button_2, "title", localize("DND5E.ACTIVITY.Action.Delete"))), button_2.__click = [on_click_2$6, context, activity], template_effect(() => set_attribute(button_2, "tabindex", settings.value.useAccessibleKeyboardSupport ? 0 : -1)), append($$anchor3, button_2);
      }, "consequent_2");
      if_block(node_2, ($$render) => {
        get(context).editable && $$render(consequent_2);
      });
    }
    template_effect(() => {
      set_attribute(div_1, "data-activity-id", get(activity).id), set_attribute(div_1, "data-info-card-entity-uuid", get(activity).uuid), toggle_class(div_2, "svg", get(activity).img.svg), button_1.disabled = !get(context).editable, set_attribute(button_1, "tabindex", settings.value.useAccessibleKeyboardSupport ? 0 : -1), set_text(text_1, get(activity).name);
    }), event("dragstart", div_1, (ev) => handleDragStart(ev, get(activity).id)), append($$anchor2, div_1);
  }), append($$anchor, section), pop();
}
__name(ItemActivitiesTab, "ItemActivitiesTab");
delegate(["click"]);
var root_5$e = /* @__PURE__ */ template('<div class="form-group"><label> </label> <div class="form-fields"><!></div></div>'), root_6$5 = /* @__PURE__ */ template('<div class="form-group split-group"><label> </label> <div class="form-fields"><div class="form-group label-top"><label> </label> <div class="form-fields"><!></div></div> <div class="form-group label-top"><label> </label> <div class="form-fields"><!></div></div></div></div> <div class="form-group split-group"><label> </label> <div class="form-fields"><div class="form-group label-top"><label> </label> <div class="form-fields"><!></div></div> <div class="form-group label-top"><label for=""> </label> <div class="form-fields"><div class="form-fields"><!></div></div></div></div></div> <div class="form-group"><label> </label> <div class="form-fields"><!></div> <p class="hint"> </p></div> <div class="form-group"><label> </label> <div class="form-fields"><!></div> <p class="hint"> </p></div> <div class="form-group"><label> </label> <div class="form-fields"><!></div> <p class="hint"> </p></div>', 1), root_8$b = /* @__PURE__ */ template('<div class="form-group"><label> </label> <div class="form-fields"><!></div> <p class="hint"> </p></div>'), on_click$x = /* @__PURE__ */ __name((_, context) => get(context).item.sheet.submit({ updateData: { "system.craft": null } }), "on_click$x"), root_11$5 = /* @__PURE__ */ template('<div class="details flexrow"><img> <!> <div class="list-controls flexrow"><button type="button" class="icon-button"><i class="fa-solid fa-trash"></i></button></div></div>'), on_change$1 = /* @__PURE__ */ __name(async (__1, context) => await get(context).item.sheet.submit(), "on_change$1"), root_12$1 = /* @__PURE__ */ template("<document-tags></document-tags>", 2), root_13$2 = /* @__PURE__ */ template('<div class="quantity"><span class="separator">&times;</span> <!></div>'), root_10$6 = /* @__PURE__ */ template('<h3 class="form-header"> </h3> <p class="hint"> </p> <div><ul class="separated-list single-item facility-craft"><li><!></li></ul> <!></div>', 1), root_14$1 = /* @__PURE__ */ template('<h3 class="form-header"> </h3> <div class="form-group"><label> </label> <div class="form-fields"><!></div></div> <div class="form-group split-group"><label> </label> <div class="form-fields"><div class="form-group label-top"><label> </label> <div class="form-fields"><div class="form-fields"><!></div></div></div> <div class="form-group label-top"><label> </label> <div class="form-fields"><div class="form-fields"><!></div></div></div></div></div> <div class="form-group"><label> </label> <div class="form-fields"><!></div></div> <div class="form-group"><label> </label> <div class="form-fields"><!> <span class="sep unit">&percnt;</span></div></div>', 1), root_1$S = /* @__PURE__ */ template('<h3 class="form-header"> </h3> <div class="form-group"><label> </label> <div class="form-fields"><!></div></div> <div class="form-group"><label> </label> <div class="form-fields"><!></div></div> <div class="form-group"><label> </label> <div class="form-fields"><!></div></div> <!> <!> <h3 class="form-header"> </h3> <div class="form-group"><label> </label> <div class="form-fields"><!></div></div> <div class="form-group split-group"><label> </label> <div class="form-fields"><div class="form-group label-top"><label> </label> <div class="form-fields"><div class="form-fields"><!></div></div></div> <div class="form-group label-top"><label> </label> <div class="form-fields"><div class="form-fields"><!></div></div></div></div></div> <!> <!>', 1);
function ItemFacilityDetailsTab($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getItemSheetContext), appId = /* @__PURE__ */ derived(() => get(context).document.id), source2 = /* @__PURE__ */ derived(() => get(context).source);
  const localize = FoundryAdapter.localize;
  ContentConcealer($$anchor, {
    get conceal() {
      return get(context).concealDetails;
    },
    children: /* @__PURE__ */ __name(($$anchor2, $$slotProps) => {
      var fragment_1 = root_1$S(), h3 = first_child(fragment_1), text2 = child(h3);
      template_effect(() => set_text(text2, localize("DND5E.ItemFacilityDetails")));
      var div = sibling(h3, 2), label = child(div), text_1 = child(label);
      template_effect(() => set_text(text_1, localize("DND5E.FACILITY.FIELDS.type.value.label")));
      var div_1 = sibling(label, 2), node = child(div_1);
      Select(node, {
        get document() {
          return get(context).document;
        },
        field: "system.type.value",
        get value() {
          return get(source2).type.value;
        },
        get id() {
          return `${get(appId) ?? ""}-system-type-value`;
        },
        blankValue: null,
        children: /* @__PURE__ */ __name(($$anchor3, $$slotProps2) => {
          SelectOptions($$anchor3, {
            get data() {
              return get(context).config.facilities.types;
            },
            labelProp: "label",
            valueProp: "value"
          });
        }, "children"),
        $$slots: { default: !0 }
      });
      var div_2 = sibling(div, 2), label_1 = child(div_2), text_2 = child(label_1);
      template_effect(() => set_text(text_2, localize("DND5E.FACILITY.FIELDS.type.subtype.label")));
      var div_3 = sibling(label_1, 2), node_1 = child(div_3);
      Select(node_1, {
        get document() {
          return get(context).document;
        },
        field: "system.type.subtype",
        get value() {
          return get(source2).type.subtype;
        },
        get id() {
          return `${get(appId) ?? ""}-system-type-subtype`;
        },
        children: /* @__PURE__ */ __name(($$anchor3, $$slotProps2) => {
          var data = /* @__PURE__ */ derived(() => get(context).facilitySubtypes ?? {});
          SelectOptions($$anchor3, {
            get data() {
              return get(data);
            },
            labelProp: "label",
            valueProp: "value",
            blank: ""
          });
        }, "children"),
        $$slots: { default: !0 }
      });
      var div_4 = sibling(div_2, 2), label_2 = child(div_4), text_3 = child(label_2);
      template_effect(() => set_text(text_3, localize("DND5E.FACILITY.FIELDS.size.label")));
      var div_5 = sibling(label_2, 2), node_2 = child(div_5);
      Select(node_2, {
        get document() {
          return get(context).document;
        },
        field: "system.size",
        get value() {
          return get(source2).size;
        },
        get id() {
          return `${get(appId) ?? ""}-system-size`;
        },
        children: /* @__PURE__ */ __name(($$anchor3, $$slotProps2) => {
          SelectOptions($$anchor3, {
            get data() {
              return get(context).config.facilities.sizes;
            },
            labelProp: "label"
          });
        }, "children"),
        $$slots: { default: !0 }
      });
      var node_3 = sibling(div_4, 2);
      {
        var consequent = /* @__PURE__ */ __name(($$anchor3) => {
          var div_6 = root_5$e(), label_3 = child(div_6), text_4 = child(label_3);
          template_effect(() => set_text(text_4, localize("DND5E.FACILITY.FIELDS.level.label")));
          var div_7 = sibling(label_3, 2), node_4 = child(div_7);
          NumberInput(node_4, {
            get id() {
              return `${get(appId) ?? ""}-system-level`;
            },
            get document() {
              return get(context).document;
            },
            field: "system.level",
            get value() {
              return get(source2).level;
            },
            selectOnFocus: !0,
            min: "1",
            step: "1"
          }), template_effect(() => set_attribute(label_3, "for", `${get(appId) ?? ""}-system-level`)), append($$anchor3, div_6);
        }, "consequent");
        if_block(node_3, ($$render) => {
          get(source2).type.value === CONSTANTS.FACILITY_TYPE_BASIC && $$render(consequent);
        });
      }
      var node_5 = sibling(node_3, 2);
      {
        var consequent_1 = /* @__PURE__ */ __name(($$anchor3) => {
          var fragment_5 = root_6$5(), div_8 = first_child(fragment_5), label_4 = child(div_8), text_5 = child(label_4);
          template_effect(() => set_text(text_5, localize("DND5E.FACILITY.Properties")));
          var div_9 = sibling(label_4, 2), div_10 = child(div_9), label_5 = child(div_10), text_6 = child(label_5);
          template_effect(() => set_text(text_6, localize("DND5E.FACILITY.FIELDS.level.label")));
          var div_11 = sibling(label_5, 2), node_6 = child(div_11);
          NumberInput(node_6, {
            get id() {
              return `${get(appId) ?? ""}-system-level`;
            },
            get document() {
              return get(context).document;
            },
            field: "system.level",
            get value() {
              return get(source2).level;
            },
            selectOnFocus: !0,
            min: "1",
            step: "1"
          });
          var div_12 = sibling(div_10, 2), label_6 = child(div_12), text_7 = child(label_6);
          template_effect(() => set_text(text_7, localize("DND5E.FACILITY.FIELDS.order.label")));
          var div_13 = sibling(label_6, 2), node_7 = child(div_13);
          Select(node_7, {
            get document() {
              return get(context).document;
            },
            field: "system.order",
            get value() {
              return get(source2).order;
            },
            get id() {
              return `${get(appId) ?? ""}-system-order`;
            },
            children: /* @__PURE__ */ __name(($$anchor4, $$slotProps2) => {
              var data_1 = /* @__PURE__ */ derived(() => get(context).orders?.available ?? []);
              SelectOptions($$anchor4, {
                get data() {
                  return get(data_1);
                },
                blank: "",
                labelProp: "label",
                valueProp: "value"
              });
            }, "children"),
            $$slots: { default: !0 }
          });
          var div_14 = sibling(div_8, 2), label_7 = child(div_14), text_8 = child(label_7);
          template_effect(() => set_text(text_8, localize("DND5E.FACILITY.Occupants")));
          var div_15 = sibling(label_7, 2), div_16 = child(div_15), label_8 = child(div_16), text_9 = child(label_8);
          template_effect(() => set_text(text_9, localize("DND5E.FACILITY.FIELDS.hirelings.max.label")));
          var div_17 = sibling(label_8, 2), node_8 = child(div_17);
          NumberInput(node_8, {
            get id() {
              return `${get(appId) ?? ""}-system-hirelings-max`;
            },
            get document() {
              return get(context).document;
            },
            field: "system.hirelings.max",
            get value() {
              return get(source2).hirelings.max;
            },
            selectOnFocus: !0,
            min: "1",
            step: "1",
            placeholder: "—"
          });
          var div_18 = sibling(div_16, 2), label_9 = child(div_18), text_10 = child(label_9);
          template_effect(() => set_text(text_10, localize("DND5E.FACILITY.FIELDS.defenders.max.label")));
          var div_19 = sibling(label_9, 2), div_20 = child(div_19), node_9 = child(div_20);
          NumberInput(node_9, {
            get id() {
              return `${get(appId) ?? ""}-system-defenders-max`;
            },
            get document() {
              return get(context).document;
            },
            field: "system.defenders.max",
            get value() {
              return get(source2).defenders.max;
            },
            selectOnFocus: !0,
            min: "1",
            step: "1",
            placeholder: "—"
          });
          var div_21 = sibling(div_14, 2), label_10 = child(div_21), text_11 = child(label_10);
          template_effect(() => set_text(text_11, localize("DND5E.FACILITY.FIELDS.free.label")));
          var div_22 = sibling(label_10, 2), node_10 = child(div_22);
          Checkbox(node_10, {
            get id() {
              return `${get(appId) ?? ""}-system-free`;
            },
            get document() {
              return get(context).document;
            },
            field: "system.free",
            get checked() {
              return get(source2).free;
            }
          });
          var p2 = sibling(div_22, 2), text_12 = child(p2);
          template_effect(() => set_text(text_12, localize("DND5E.FACILITY.FIELDS.free.hint")));
          var div_23 = sibling(div_21, 2), label_11 = child(div_23), text_13 = child(label_11);
          template_effect(() => set_text(text_13, localize("DND5E.FACILITY.FIELDS.enlargeable.label")));
          var div_24 = sibling(label_11, 2), node_11 = child(div_24);
          Checkbox(node_11, {
            get id() {
              return `${get(appId) ?? ""}-system-enlargeable`;
            },
            get document() {
              return get(context).document;
            },
            field: "system.enlargeable",
            get checked() {
              return get(source2).enlargeable;
            }
          });
          var p_1 = sibling(div_24, 2), text_14 = child(p_1);
          template_effect(() => set_text(text_14, localize("DND5E.FACILITY.FIELDS.enlargeable.hint")));
          var div_25 = sibling(div_23, 2), label_12 = child(div_25), text_15 = child(label_12);
          template_effect(() => set_text(text_15, localize("DND5E.FACILITY.FIELDS.disabled.label")));
          var div_26 = sibling(label_12, 2), node_12 = child(div_26);
          Checkbox(node_12, {
            get id() {
              return `${get(appId) ?? ""}-system-disabled`;
            },
            get document() {
              return get(context).document;
            },
            field: "system.disabled",
            get checked() {
              return get(source2).disabled;
            }
          });
          var p_2 = sibling(div_26, 2), text_16 = child(p_2);
          template_effect(() => set_text(text_16, localize("DND5E.FACILITY.FIELDS.disabled.hint"))), template_effect(() => {
            set_attribute(label_4, "for", `${get(appId) ?? ""}-system-level`), set_attribute(label_5, "for", `${get(appId) ?? ""}-system-level`), set_attribute(label_6, "for", `${get(appId) ?? ""}-system-order`), set_attribute(label_7, "for", `${get(appId) ?? ""}-system-hirelings-max`), set_attribute(label_8, "for", `${get(appId) ?? ""}-system-hirelings-max`), set_attribute(label_10, "for", `${get(appId) ?? ""}-system-free`), set_attribute(label_11, "for", `${get(appId) ?? ""}-system-enlargeable`), set_attribute(label_12, "for", `${get(appId) ?? ""}-system-disabled`);
          }), append($$anchor3, fragment_5);
        }, "consequent_1"), alternate = /* @__PURE__ */ __name(($$anchor3) => {
          var div_27 = root_8$b(), label_13 = child(div_27), text_17 = child(label_13);
          template_effect(() => set_text(text_17, localize("DND5E.FACILITY.FIELDS.building.built.label")));
          var div_28 = sibling(label_13, 2), node_13 = child(div_28);
          Checkbox(node_13, {
            get id() {
              return `${get(appId) ?? ""}-system-building-built`;
            },
            get document() {
              return get(context).document;
            },
            field: "system.building.built",
            get checked() {
              return get(source2).building.built;
            }
          });
          var p_3 = sibling(div_28, 2), text_18 = child(p_3);
          template_effect(() => set_text(text_18, localize("DND5E.FACILITY.FIELDS.building.built.hint"))), template_effect(() => set_attribute(label_13, "for", `${get(appId) ?? ""}-system-building-built`)), append($$anchor3, div_27);
        }, "alternate");
        if_block(node_5, ($$render) => {
          get(source2).type.value === CONSTANTS.FACILITY_TYPE_SPECIAL ? $$render(consequent_1) : $$render(alternate, !1);
        });
      }
      var h3_1 = sibling(node_5, 2), text_19 = child(h3_1);
      template_effect(() => set_text(text_19, localize("DND5E.FACILITY.Orders.Label")));
      var div_29 = sibling(h3_1, 2), label_14 = child(div_29), text_20 = child(label_14);
      template_effect(() => set_text(text_20, localize("DND5E.FACILITY.FIELDS.progress.order.label")));
      var div_30 = sibling(label_14, 2), node_14 = child(div_30);
      Select(node_14, {
        get document() {
          return get(context).document;
        },
        field: "system.progress.order",
        get value() {
          return get(source2).progress.order;
        },
        get id() {
          return `${get(appId) ?? ""}-system-progress-order`;
        },
        children: /* @__PURE__ */ __name(($$anchor3, $$slotProps2) => {
          var data_2 = /* @__PURE__ */ derived(() => get(context).orders?.executable ?? []);
          SelectOptions($$anchor3, {
            get data() {
              return get(data_2);
            },
            blank: "",
            labelProp: "label",
            valueProp: "value"
          });
        }, "children"),
        $$slots: { default: !0 }
      });
      var div_31 = sibling(div_29, 2), label_15 = child(div_31), text_21 = child(label_15);
      template_effect(() => set_text(text_21, localize("DND5E.FACILITY.Progress")));
      var div_32 = sibling(label_15, 2), div_33 = child(div_32), label_16 = child(div_33), text_22 = child(label_16);
      template_effect(() => set_text(text_22, localize("DND5E.FACILITY.FIELDS.progress.value.label")));
      var div_34 = sibling(label_16, 2), div_35 = child(div_34), node_15 = child(div_35);
      NumberInput(node_15, {
        get id() {
          return `${get(appId) ?? ""}-system-progress-value`;
        },
        get document() {
          return get(context).document;
        },
        field: "system.progress.value",
        get value() {
          return get(source2).progress.value;
        },
        selectOnFocus: !0,
        min: "0",
        step: "0",
        placeholder: "—"
      });
      var div_36 = sibling(div_33, 2), label_17 = child(div_36), text_23 = child(label_17);
      template_effect(() => set_text(text_23, localize("DND5E.FACILITY.FIELDS.progress.max.label")));
      var div_37 = sibling(label_17, 2), div_38 = child(div_37), node_16 = child(div_38);
      NumberInput(node_16, {
        get id() {
          return `${get(appId) ?? ""}-system-progress-max`;
        },
        get document() {
          return get(context).document;
        },
        field: "system.progress.max",
        get value() {
          return get(source2).progress.max;
        },
        selectOnFocus: !0,
        min: "1",
        step: "1",
        placeholder: "—"
      });
      var node_17 = sibling(div_31, 2);
      {
        var consequent_4 = /* @__PURE__ */ __name(($$anchor3) => {
          var fragment_8 = root_10$6(), h3_2 = first_child(fragment_8), text_24 = child(h3_2);
          template_effect(() => set_text(text_24, localize(`DND5E.FACILITY.Orders.${get(source2).order}.present`)));
          var p_4 = sibling(h3_2, 2), text_25 = child(p_4);
          template_effect(() => set_text(text_25, localize("DND5E.FACILITY.Craft.Hint")));
          var div_39 = sibling(p_4, 2), ul = child(div_39), li = child(ul), node_18 = child(li);
          {
            var consequent_2 = /* @__PURE__ */ __name(($$anchor4) => {
              var div_40 = root_11$5(), img = child(div_40), node_19 = sibling(img, 2);
              html(node_19, () => get(context).craft.contentLink);
              var div_41 = sibling(node_19, 2), button = child(div_41);
              button.__click = [on_click$x, context], template_effect(() => set_attribute(button, "data-tooltip", localize("DND5E.FACILITY.Action.RemoveCraft"))), template_effect(() => set_attribute(button, "aria-label", localize("DND5E.FACILITY.Action.RemoveCraft"))), template_effect(() => {
                set_attribute(img, "src", get(context).craft.img), set_attribute(img, "alt", get(context).craft.name);
              }), append($$anchor4, div_40);
            }, "consequent_2"), alternate_1 = /* @__PURE__ */ __name(($$anchor4) => {
              var document_tags = root_12$1();
              set_custom_element_data(document_tags, "name", "system.craft.item"), set_custom_element_data(document_tags, "single", !0), document_tags.__change = [on_change$1, context], append($$anchor4, document_tags);
            }, "alternate_1");
            if_block(node_18, ($$render) => {
              get(context).craft ? $$render(consequent_2) : $$render(alternate_1, !1);
            });
          }
          var node_20 = sibling(ul, 2);
          {
            var consequent_3 = /* @__PURE__ */ __name(($$anchor4) => {
              var div_42 = root_13$2(), node_21 = sibling(child(div_42), 2);
              NumberInput(node_21, {
                get id() {
                  return `${get(appId) ?? ""}-system-craft-quantity`;
                },
                get document() {
                  return get(context).document;
                },
                field: "system.craft.quantity",
                get value() {
                  return get(source2).craft.quantity;
                },
                selectOnFocus: !0
              }), append($$anchor4, div_42);
            }, "consequent_3");
            if_block(node_20, ($$render) => {
              get(context).isHarvesting && $$render(consequent_3);
            });
          }
          template_effect(() => toggle_class(div_39, "harvesting", get(context).isHarvesting)), append($$anchor3, fragment_8);
        }, "consequent_4");
        if_block(node_17, ($$render) => {
          get(context).canCraft && $$render(consequent_4);
        });
      }
      var node_22 = sibling(node_17, 2);
      {
        var consequent_5 = /* @__PURE__ */ __name(($$anchor3) => {
          var fragment_9 = root_14$1(), h3_3 = first_child(fragment_9), text_26 = child(h3_3);
          template_effect(() => set_text(text_26, localize("DND5E.FACILITY.Orders.trade.present")));
          var div_43 = sibling(h3_3, 2), label_18 = child(div_43), text_27 = child(label_18);
          template_effect(() => set_text(text_27, localize("DND5E.FACILITY.FIELDS.trade.stock.stocked.label")));
          var div_44 = sibling(label_18, 2), node_23 = child(div_44);
          Checkbox(node_23, {
            get id() {
              return `${get(appId) ?? ""}-system-trade-stock-stocked`;
            },
            get document() {
              return get(context).document;
            },
            field: "system.trade.stock.stocked",
            get checked() {
              return get(source2).trade.stock.stocked;
            }
          });
          var div_45 = sibling(div_43, 2), label_19 = child(div_45), text_28 = child(label_19);
          template_effect(() => set_text(text_28, localize("DND5E.FACILITY.Goods")));
          var div_46 = sibling(label_19, 2), div_47 = child(div_46), label_20 = child(div_47), text_29 = child(label_20);
          template_effect(() => set_text(text_29, localize("DND5E.FACILITY.FIELDS.trade.stock.value.label")));
          var div_48 = sibling(label_20, 2), div_49 = child(div_48), node_24 = child(div_49);
          NumberInput(node_24, {
            get id() {
              return `${get(appId) ?? ""}-system-trade-stock-value`;
            },
            get document() {
              return get(context).document;
            },
            field: "system.trade.stock.value",
            get value() {
              return get(source2).trade.stock.value;
            },
            selectOnFocus: !0,
            min: "0",
            step: "0",
            placeholder: "—"
          });
          var div_50 = sibling(div_47, 2), label_21 = child(div_50), text_30 = child(label_21);
          template_effect(() => set_text(text_30, localize("DND5E.FACILITY.FIELDS.trade.stock.max.label")));
          var div_51 = sibling(label_21, 2), div_52 = child(div_51), node_25 = child(div_52);
          NumberInput(node_25, {
            get id() {
              return `${get(appId) ?? ""}-system-trade-stock-max`;
            },
            get document() {
              return get(context).document;
            },
            field: "system.trade.stock.max",
            get value() {
              return get(source2).trade.stock.max;
            },
            selectOnFocus: !0,
            min: "1",
            step: "1",
            placeholder: "—"
          });
          var div_53 = sibling(div_45, 2), label_22 = child(div_53), text_31 = child(label_22);
          template_effect(() => set_text(text_31, localize("DND5E.FACILITY.FIELDS.trade.creatures.max.label")));
          var div_54 = sibling(label_22, 2), node_26 = child(div_54);
          NumberInput(node_26, {
            get id() {
              return `${get(appId) ?? ""}-system-trade-creatures-max`;
            },
            get document() {
              return get(context).document;
            },
            field: "system.trade.creatures.max",
            get value() {
              return get(source2).trade.creatures.max;
            },
            selectOnFocus: !0,
            min: "1",
            step: "1",
            placeholder: "—"
          });
          var div_55 = sibling(div_53, 2), label_23 = child(div_55), text_32 = child(label_23);
          template_effect(() => set_text(text_32, localize("DND5E.FACILITY.FIELDS.trade.profit.label")));
          var div_56 = sibling(label_23, 2), node_27 = child(div_56);
          NumberInput(node_27, {
            get id() {
              return `${get(appId) ?? ""}-system-trade-profit`;
            },
            get document() {
              return get(context).document;
            },
            field: "system.trade.profit",
            get value() {
              return get(source2).trade.profit;
            },
            selectOnFocus: !0,
            min: "0",
            step: "0",
            placeholder: "—"
          }), template_effect(() => {
            set_attribute(label_18, "for", `${get(appId) ?? ""}-system-trade-stock-stocked`), set_attribute(label_19, "for", `${get(appId) ?? ""}-`), set_attribute(label_20, "for", `${get(appId) ?? ""}-system-trade-stock-value`), set_attribute(label_21, "for", `${get(appId) ?? ""}-system-trade-stock-max`), set_attribute(label_22, "for", `${get(appId) ?? ""}-system-trade-creatures-max`), set_attribute(label_23, "for", `${get(appId) ?? ""}-system-trade-profit`);
          }), append($$anchor3, fragment_9);
        }, "consequent_5");
        if_block(node_22, ($$render) => {
          get(source2).type.value === CONSTANTS.FACILITY_TYPE_SPECIAL && get(source2).order === "trade" && $$render(consequent_5);
        });
      }
      template_effect(() => {
        set_attribute(label, "for", `${get(appId) ?? ""}-system-type-value`), set_attribute(label_1, "for", `${get(appId) ?? ""}-system-type-subtype`), set_attribute(label_2, "for", `${get(appId) ?? ""}-system-size`), set_attribute(label_14, "for", `${get(appId) ?? ""}-system-progress-order`), set_attribute(label_15, "for", `${get(appId) ?? ""}-system-progress-value`), set_attribute(label_16, "for", `${get(appId) ?? ""}-system-progress-value`), set_attribute(label_17, "for", `${get(appId) ?? ""}-system-progress-max`);
      }), append($$anchor2, fragment_1);
    }, "children"),
    $$slots: { default: !0 }
  }), pop();
}
__name(ItemFacilityDetailsTab, "ItemFacilityDetailsTab");
delegate(["click", "change"]);
const encumberedPct = 1 / 3 * 100, heavilyEncumberedPct = 2 / 3 * 100;
var root$1s = /* @__PURE__ */ template('<div class="meter progress" role="meter" aria-valuemin="0"><div class="label"><i class="fas fa-weight-hanging"></i> <span class="value"> </span> <span class="separator">/</span> <span class="max"> </span></div></div>');
function CapacityBar($$anchor, $$props) {
  push($$props, !0);
  let readableValue = /* @__PURE__ */ derived(() => $$props.container.system.capacity.type === CONSTANTS.ITEM_CAPACITY_TYPE_WEIGHT ? ($$props.capacity.value ?? 0).toFixed(1) : Math.ceil($$props.capacity.value ?? 0).toString()), percentage = /* @__PURE__ */ derived(() => Math.round($$props.capacity.pct));
  const localize = FoundryAdapter.localize;
  let barSeverity = /* @__PURE__ */ derived(() => get(percentage) > heavilyEncumberedPct ? "high" : get(percentage) > encumberedPct ? "medium" : "low");
  var div = root$1s();
  template_effect(() => set_attribute(div, "aria-label", localize("DND5E.ItemContainerCapacity")));
  var div_1 = child(div), span = sibling(child(div_1), 2), text2 = child(span), span_1 = sibling(span, 4), text_1 = child(span_1);
  template_effect(() => {
    set_attribute(div, "aria-valuenow", $$props.capacity.pct), set_attribute(div, "aria-valuetext", get(readableValue)), set_attribute(div, "aria-valuemax", $$props.capacity.max), set_attribute(div, "style", `--bar-percentage: ${get(percentage) ?? ""}%;`), set_attribute(div, "data-bar-severity", get(barSeverity)), set_text(text2, get(readableValue)), set_text(text_1, $$props.capacity.max);
  }), append($$anchor, div), pop();
}
__name(CapacityBar, "CapacityBar");
var root$1r = /* @__PURE__ */ template('<div class="vertical-filigree-guideline" role="presentation"><div class="guideline-header" role="presentation"><svg xmlns="http://www.w3.org/2000/svg" width="5" height="6" viewBox="0 0 5 6" fill="none" transform="translate(-0.5, 0.5)"><path d="M1 5.5C2.16667 5.33333 4.5 4 4.5 0" stroke="#E2D0A8"></path></svg> <svg xmlns="http://www.w3.org/2000/svg" width="4" height="9" viewBox="0 0 4 9" fill="none" transform="translate(0.5, 0.75)"><path d="M0 8C2 8 3.5 5.81818 3.5 0" stroke="#E2D0A8"></path></svg></div> <div class="guideline-borders"><div class="guideline-border-left" role="presentation"></div> <div class="guideline-border-right" role="presentation"></div></div> <div class="guideline-footer" role="presentation"><svg xmlns="http://www.w3.org/2000/svg" width="4" height="9" viewBox="0 0 4 9" fill="none" transform="translate(0.5, -0.75)"><path d="M0 1C2 1 3.5 3.18182 3.5 9" stroke="#E2D0A8"></path></svg> <svg xmlns="http://www.w3.org/2000/svg" width="5" height="7" viewBox="0 0 5 7" fill="none" transform="translate(-0.5, 0)"><path d="M1 1C2.16667 1.16667 4.5 2.5 4.5 6.5" stroke="#E2D0A8"></path></svg></div></div>');
function VerticalFiligreeGuideline($$anchor) {
  var div = root$1r();
  append($$anchor, div);
}
__name(VerticalFiligreeGuideline, "VerticalFiligreeGuideline");
var root_2$m = /* @__PURE__ */ template('<div class="empty-container"><span class="empty-container-text"> </span></div>'), root_1$R = /* @__PURE__ */ template('<div class="inline-content-view filigree-guideline-and-contents full-height"><!> <div class="flex-column extra-small-gap flex-1 inline-container-view"><!> <!></div></div>');
function InlineContainerView($$anchor, $$props) {
  push($$props, !0);
  let unlocked = prop($$props, "unlocked", 3, !0), toggleServiceMap = /* @__PURE__ */ derived(() => $$props.inlineToggleService.map);
  const searchResults = getSearchResultsContext();
  let tabId = getContext(CONSTANTS.SVELTE_CONTEXT.TAB_ID);
  async function onDrop(event2) {
    $$props.container.sheet._onDrop(event2), event2.preventDefault(), event2.stopImmediatePropagation();
  }
  __name(onDrop, "onDrop");
  var expanded = /* @__PURE__ */ derived(() => get(toggleServiceMap).get(tabId)?.has($$props.container.id) === !0), class_1 = /* @__PURE__ */ derived(() => searchResults.show($$props.container.uuid) ? "" : "hidden");
  ExpandableContainer($$anchor, {
    get expanded() {
      return get(expanded);
    },
    get class() {
      return get(class_1);
    },
    children: /* @__PURE__ */ __name(($$anchor2, $$slotProps) => {
      var div = root_1$R(), node = child(div);
      VerticalFiligreeGuideline(node);
      var div_1 = sibling(node, 2), node_1 = child(div_1);
      ContainerContentsSections(node_1, {
        get contents() {
          return $$props.containerContents.contents;
        },
        get container() {
          return $$props.container;
        },
        get editable() {
          return $$props.editable;
        },
        get itemContext() {
          return $$props.containerContents.itemContext;
        },
        get lockItemQuantity() {
          return $$props.lockItemQuantity;
        },
        get inlineToggleService() {
          return $$props.inlineToggleService;
        },
        get sheetDocument() {
          return $$props.sheetDocument;
        },
        get unlocked() {
          return unlocked();
        }
      });
      var node_2 = sibling(node_1, 2);
      {
        var consequent = /* @__PURE__ */ __name(($$anchor3) => {
          var div_2 = root_2$m(), span = child(div_2), text2 = child(span);
          template_effect(() => set_text(text2, FoundryAdapter.localize("TIDY5E.EmptyContainer"))), append($$anchor3, div_2);
        }, "consequent");
        if_block(node_2, ($$render) => {
          $$props.containerContents.contents.some((c2) => c2.items.length > 0) || $$render(consequent);
        });
      }
      template_effect(() => set_attribute(div_1, "data-tidy-container-id", $$props.container.id)), event("drop", div_1, onDrop), append($$anchor2, div);
    }, "children"),
    $$slots: { default: !0 }
  }), pop();
}
__name(InlineContainerView, "InlineContainerView");
var root_5$d = /* @__PURE__ */ template(' <span class="count"> </span>', 1), root_4$a = /* @__PURE__ */ template("<!> <!> <!> <!>", 1), on_click$w = /* @__PURE__ */ __name((ev, item) => FoundryAdapter.actorTryUseItem(item(), ev), "on_click$w"), on_click_1$f = /* @__PURE__ */ __name((_, $$props, tabId, item) => $$props.inlineToggleService.toggle(tabId, item().id), "on_click_1$f"), root_12 = /* @__PURE__ */ template('<a class="expand-indicator-button"><i class="fa-solid fa-angle-right expand-indicator"></i></a>'), on_click_2$5 = /* @__PURE__ */ __name((ev, toggleSummary) => toggleSummary()(), "on_click_2$5"), root_11$4 = /* @__PURE__ */ template('<div class="item-image" role="button"><span class="roll-prompt"><i class="fa fa-dice-d20"></i></span></div> <!> <a class="item-name truncate"><span class="truncate"> </span></a>', 1), root_16$1 = /* @__PURE__ */ template('<a class="item-action"><i class="fas fa-edit"></i></a> <a class="item-action"><i class="fas fa-trash"></i></a>', 1), root_15$1 = /* @__PURE__ */ template('<!> <a class="item-action"><i class="fas fa-ellipsis-vertical"></i></a>', 1), root_10$5 = /* @__PURE__ */ template("<!> <!> <!> <!>", 1), root_9$8 = /* @__PURE__ */ template('<!> <!> <hr class="table-row-divider">', 1);
function ContainerContentsSections($$anchor, $$props) {
  push($$props, !0);
  let unlocked = prop($$props, "unlocked", 3, !0);
  const tabId = getContext(CONSTANTS.SVELTE_CONTEXT.TAB_ID);
  let configuredContents = /* @__PURE__ */ derived(() => SheetSections.configureInventory($$props.contents.filter((i2) => i2.items.length), tabId, SheetPreferencesService.getByType($$props.sheetDocument.type), TidyFlags.sectionConfig.get($$props.container)?.[CONSTANTS.TAB_CONTAINER_CONTENTS]));
  const searchResults = getSearchResultsContext();
  FoundryAdapter.getWeightUnit();
  let useClassicControls = /* @__PURE__ */ derived(() => FoundryAdapter.useClassicControls($$props.container)), itemActionsWidth = /* @__PURE__ */ derived(() => get(useClassicControls) ? `/* Actions */ ${1.5 * (unlocked() ? 3 : 1)}rem` : ""), gridTemplateColumns = /* @__PURE__ */ derived(() => `/* Name */ 1fr /* Quantity */ 4.125rem /* Weight */ 2.25rem ${get(itemActionsWidth)}`), containerToggleMap = /* @__PURE__ */ derived(() => $$props.inlineToggleService.map);
  const localize = FoundryAdapter.localize;
  var fragment = comment(), node = first_child(fragment);
  each(node, 17, () => get(configuredContents), (section) => section.key, ($$anchor2, section) => {
    var fragment_1 = comment();
    const itemEntries = /* @__PURE__ */ derived(() => get(section).items.map((item) => ({ item, ctx: $$props.itemContext[item.id] })));
    var node_1 = first_child(fragment_1);
    {
      var consequent_3 = /* @__PURE__ */ __name(($$anchor3) => {
        var data_custom_section = /* @__PURE__ */ derived(() => get(section).custom ? !0 : null);
        TidyTable($$anchor3, {
          get key() {
            return get(section).key;
          },
          get "data-custom-section"() {
            return get(data_custom_section);
          },
          get gridTemplateColumns() {
            return get(gridTemplateColumns);
          },
          header: /* @__PURE__ */ __name(($$anchor4) => {
            TidyTableHeaderRow($$anchor4, {
              children: /* @__PURE__ */ __name(($$anchor5, $$slotProps) => {
                var fragment_4 = root_4$a(), node_2 = first_child(fragment_4);
                TidyTableHeaderCell(node_2, {
                  primary: !0,
                  children: /* @__PURE__ */ __name(($$anchor6, $$slotProps2) => {
                    var fragment_5 = root_5$d(), text2 = first_child(fragment_5);
                    template_effect(() => set_text(text2, `${localize(get(section).label) ?? ""} `));
                    var span = sibling(text2), text_1 = child(span);
                    template_effect(() => set_text(text_1, get(section).items.length)), append($$anchor6, fragment_5);
                  }, "children"),
                  $$slots: { default: !0 }
                });
                var node_3 = sibling(node_2, 2);
                TidyTableHeaderCell(node_3, {
                  children: /* @__PURE__ */ __name(($$anchor6, $$slotProps2) => {
                    var text_2 = text();
                    template_effect(() => set_text(text_2, localize("DND5E.Quantity"))), append($$anchor6, text_2);
                  }, "children"),
                  $$slots: { default: !0 }
                });
                var node_4 = sibling(node_3, 2);
                TidyTableHeaderCell(node_4, {
                  children: /* @__PURE__ */ __name(($$anchor6, $$slotProps2) => {
                    var text_3 = text();
                    template_effect(() => set_text(text_3, localize("DND5E.Weight"))), append($$anchor6, text_3);
                  }, "children"),
                  $$slots: { default: !0 }
                });
                var node_5 = sibling(node_4, 2);
                TidyTableHeaderCell(node_5, { class: "item-actions" }), append($$anchor5, fragment_4);
              }, "children"),
              $$slots: { default: !0 }
            });
          }, "header"),
          body: /* @__PURE__ */ __name(($$anchor4) => {
            var fragment_8 = comment(), node_6 = first_child(fragment_8);
            each(node_6, 19, () => get(itemEntries), ({ item, ctx }) => item.id, ($$anchor5, $$item) => {
              let item = /* @__PURE__ */ __name(() => get($$item).item, "item"), ctx = /* @__PURE__ */ __name(() => get($$item).ctx, "ctx");
              var fragment_9 = root_9$8();
              const weight = /* @__PURE__ */ derived(() => ctx()?.totalWeight ?? item().system.weight.value), itemBorderColor = /* @__PURE__ */ derived(() => item().system.rarity ? `var(--t5e-color-rarity-${item().system.rarity.slugify()})` : "var(--t5e-color-gold)"), showRarityBoxShadow = /* @__PURE__ */ derived(() => ["veryRare", "legendary", "artifact"].includes(item().system.rarity));
              var node_7 = first_child(fragment_9), hidden = /* @__PURE__ */ derived(() => !searchResults.show(item().uuid)), rowClass = /* @__PURE__ */ derived(() => FoundryAdapter.getInventoryRowClasses(item(), $$props.itemContext[item().id]?.attunement)), contextMenu = /* @__PURE__ */ derived(() => ({
                type: CONSTANTS.CONTEXT_MENU_TYPE_ITEMS,
                uuid: item().uuid
              }));
              ItemTableRowV2(node_7, {
                get item() {
                  return item();
                },
                get hidden() {
                  return get(hidden);
                },
                get rowClass() {
                  return get(rowClass);
                },
                get contextMenu() {
                  return get(contextMenu);
                },
                children: /* @__PURE__ */ __name(($$anchor6, $$arg0) => {
                  let toggleSummary = /* @__PURE__ */ __name(() => $$arg0?.().toggleSummary, "toggleSummary");
                  var fragment_10 = root_10$5(), node_8 = first_child(fragment_10);
                  TidyTableCell(node_8, {
                    primary: !0,
                    class: "truncate",
                    children: /* @__PURE__ */ __name(($$anchor7, $$slotProps) => {
                      var fragment_11 = root_11$4(), div = first_child(fragment_11);
                      div.__click = [on_click$w, item];
                      var node_9 = sibling(div, 2);
                      {
                        var consequent = /* @__PURE__ */ __name(($$anchor8) => {
                          var a2 = root_12();
                          a2.__click = [on_click_1$f, $$props, tabId, item];
                          var i_1 = child(a2);
                          const class_directive = /* @__PURE__ */ derived(() => get(containerToggleMap).get(tabId)?.has(item().id));
                          template_effect(() => toggle_class(i_1, "expanded", get(class_directive))), append($$anchor8, a2);
                        }, "consequent");
                        if_block(node_9, ($$render) => {
                          ("containerContents" in ctx() && ctx().containerContents || item()?.system.activities?.contents.length > 1) && $$render(consequent);
                        });
                      }
                      var a_1 = sibling(node_9, 2);
                      a_1.__click = [on_click_2$5, toggleSummary];
                      var span_1 = child(a_1), text_4 = child(span_1);
                      template_effect(() => {
                        set_attribute(div, "style", `--item-img: url(${item().img ?? ""}); --item-border-color: ${get(itemBorderColor) ?? ""};`), toggle_class(div, "special-rarity", get(showRarityBoxShadow)), set_text(text_4, item().name);
                      }), append($$anchor7, fragment_11);
                    }, "children"),
                    $$slots: { default: !0 }
                  });
                  var node_10 = sibling(node_8, 2);
                  TidyTableCell(node_10, {
                    children: /* @__PURE__ */ __name(($$anchor7, $$slotProps) => {
                      var text_5 = text();
                      template_effect(() => set_text(text_5, item().system.quantity)), append($$anchor7, text_5);
                    }, "children"),
                    $$slots: { default: !0 }
                  });
                  var node_11 = sibling(node_10, 2);
                  TidyTableCell(node_11, {
                    children: /* @__PURE__ */ __name(($$anchor7, $$slotProps) => {
                      var text_6 = text();
                      template_effect(() => set_text(text_6, get(weight))), append($$anchor7, text_6);
                    }, "children"),
                    $$slots: { default: !0 }
                  });
                  var node_12 = sibling(node_11, 2);
                  TidyTableCell(node_12, {
                    class: "item-actions",
                    children: /* @__PURE__ */ __name(($$anchor7, $$slotProps) => {
                      var fragment_14 = root_15$1(), node_13 = first_child(fragment_14);
                      {
                        var consequent_1 = /* @__PURE__ */ __name(($$anchor8) => {
                          var fragment_15 = root_16$1();
                          append($$anchor8, fragment_15);
                        }, "consequent_1");
                        if_block(node_13, ($$render) => {
                          unlocked() && $$render(consequent_1);
                        });
                      }
                      append($$anchor7, fragment_14);
                    }, "children"),
                    $$slots: { default: !0 }
                  }), append($$anchor6, fragment_10);
                }, "children"),
                $$slots: { default: !0 }
              });
              var node_14 = sibling(node_7, 2);
              {
                var consequent_2 = /* @__PURE__ */ __name(($$anchor6) => {
                  InlineContainerView($$anchor6, {
                    get container() {
                      return item();
                    },
                    get containerContents() {
                      return ctx().containerContents;
                    },
                    get editable() {
                      return $$props.editable;
                    },
                    get inlineToggleService() {
                      return $$props.inlineToggleService;
                    },
                    get lockItemQuantity() {
                      return $$props.lockItemQuantity;
                    },
                    get sheetDocument() {
                      return $$props.sheetDocument;
                    },
                    get unlocked() {
                      return unlocked();
                    }
                  });
                }, "consequent_2");
                if_block(node_14, ($$render) => {
                  "containerContents" in ctx() && ctx().containerContents && $$render(consequent_2);
                });
              }
              append($$anchor5, fragment_9);
            }), append($$anchor4, fragment_8);
          }, "body"),
          $$slots: { header: !0, body: !0 }
        });
      }, "consequent_3");
      if_block(node_1, ($$render) => {
        get(section).show && $$render(consequent_3);
      });
    }
    append($$anchor2, fragment_1);
  }), append($$anchor, fragment), pop();
}
__name(ContainerContentsSections, "ContainerContentsSections");
delegate(["click"]);
var root_1$Q = /* @__PURE__ */ template('<label class="input-group"><!> <span> </span></label>'), on_click$v = /* @__PURE__ */ __name((_, confirmConvertCurrency) => confirmConvertCurrency(), "on_click$v"), on_click_1$e = /* @__PURE__ */ __name((__1, promptCreateInventoryItem) => promptCreateInventoryItem(), "on_click_1$e"), root$1q = /* @__PURE__ */ template('<section class="currency-tracker"><!> <a class="button icon-button"><i class="fas fa-database"></i></a> <a class="button icon-button attention"><i class="fas fa-plus"></i></a></section>');
function ContainerCurrency($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getContainerSheetHightouchContext), currencies = /* @__PURE__ */ derived(() => Object.keys(CONFIG.DND5E.currencies).map((key) => ({
    key,
    value: get(context).system.currency[key]
  })));
  const localize = FoundryAdapter.localize;
  function abbreviateCurrency(currencyKey) {
    return CONFIG.DND5E.currencies[currencyKey]?.abbreviation ?? currencyKey;
  }
  __name(abbreviateCurrency, "abbreviateCurrency");
  function promptCreateInventoryItem() {
    const actor = get(context).item.actor, createData = {
      folder: get(context).item.folder,
      "system.container": get(context).item.id
    };
    TidyHooks.tidy5eSheetsPreCreateItem(actor, createData, game.user.id) && Item.implementation.createDialog(createData, {
      parent: actor,
      pack: get(context).item.pack,
      types: Inventory.getDefaultInventoryTypes(),
      keepId: !0
    });
  }
  __name(promptCreateInventoryItem, "promptCreateInventoryItem");
  function confirmConvertCurrency() {
    new dnd5e.applications.CurrencyManager(get(context).document).render(!0);
  }
  __name(confirmConvertCurrency, "confirmConvertCurrency");
  var section = root$1q(), node = child(section);
  each(node, 17, () => get(currencies), index, ($$anchor2, currency) => {
    var label = root_1$Q(), node_1 = child(label), disabled = /* @__PURE__ */ derived(() => !get(context).editable || get(context).lockMoneyChanges);
    TextInput(node_1, {
      get document() {
        return get(context).document;
      },
      get field() {
        return `system.currency.${get(currency).key ?? ""}`;
      },
      get id() {
        return `${get(context).document.id ?? ""}-system.currency.${get(currency).key ?? ""}`;
      },
      get value() {
        return get(currency).value;
      },
      allowDeltaChanges: !0,
      selectOnFocus: !0,
      get disabled() {
        return get(disabled);
      },
      get class() {
        return `currency-item currency-${get(currency).key ?? ""}`;
      },
      placeholder: "0"
    });
    var span = sibling(node_1, 2), text2 = child(span);
    template_effect(() => set_text(text2, abbreviateCurrency(get(currency).key))), template_effect(() => {
      set_class(span, `denomination ${get(currency).key ?? ""}`), set_attribute(span, "data-denom", get(currency).key);
    }), append($$anchor2, label);
  });
  var a2 = sibling(node, 2);
  a2.__click = [on_click$v, confirmConvertCurrency], template_effect(() => set_attribute(a2, "title", localize("DND5E.CurrencyManager.Title")));
  var a_1 = sibling(a2, 2);
  template_effect(() => set_attribute(a_1, "title", localize("DND5E.ItemCreate"))), a_1.__click = [on_click_1$e, promptCreateInventoryItem], append($$anchor, section), pop();
}
__name(ContainerCurrency, "ContainerCurrency");
delegate(["click"]);
var root$1p = /* @__PURE__ */ template('<label><!> <input type="checkbox" class="hidden toggle"></label>');
function ToggleButton($$anchor, $$props) {
  push($$props, !0);
  let checked = prop($$props, "checked", 3, !1), disabled = prop($$props, "disabled", 3, !1);
  var label = root$1p(), node = child(label);
  snippet(node, () => $$props.children ?? noop);
  var input = sibling(node, 2);
  input.__change = function(...$$args) {
    $$props.onchange?.apply(this, $$args);
  }, template_effect(() => {
    set_class(label, `button toggle-button ${$$props.class ?? "" ?? ""}`), toggle_class(label, "disabled", disabled()), set_checked(input, checked());
  }), append($$anchor, label), pop();
}
__name(ToggleButton, "ToggleButton");
delegate(["change"]);
var on_click$u = /* @__PURE__ */ __name((_, searchCriteria) => searchCriteria(""), "on_click$u"), root_1$P = /* @__PURE__ */ template('<a class="cancel-search"><i class="fas fa-x fa-fw"></i></a>'), root$1o = /* @__PURE__ */ template('<search><span class="icon-and-input"><i class="fas fa-magnifying-glass fa-fw"></i> <input type="text"></span> <!></search>');
function Search($$anchor, $$props) {
  push($$props, !0);
  let searchCriteria = prop($$props, "searchCriteria", 15, ""), disabled = prop($$props, "disabled", 3, !1);
  const localize = FoundryAdapter.localize;
  var search = root$1o(), span = child(search), input = sibling(child(span), 2);
  template_effect(() => set_attribute(input, "placeholder", localize("TIDY5E.Search")));
  var node = sibling(span, 2);
  {
    var consequent = /* @__PURE__ */ __name(($$anchor2) => {
      var a2 = root_1$P();
      a2.__click = [on_click$u, searchCriteria], append($$anchor2, a2);
    }, "consequent");
    if_block(node, ($$render) => {
      isNil(searchCriteria(), "") || $$render(consequent);
    });
  }
  template_effect(() => input.disabled = disabled()), bind_value(input, searchCriteria), append($$anchor, search), pop();
}
__name(Search, "Search");
delegate(["click"]);
function longpress(node, options = {}) {
  const threshold = options?.threshold ?? 500;
  user_effect(() => {
    const handleMouseDown = /* @__PURE__ */ __name(() => {
      const controller2 = new AbortController(), timeout = setTimeout(
        () => {
          options?.callback?.(node);
        },
        threshold
      ), cancel = /* @__PURE__ */ __name(() => {
        clearTimeout(timeout), controller2.abort();
      }, "cancel");
      [
        "mouseleave",
        "mouseup",
        "touchend",
        "touchmove"
        // TODO: use `touchleave` whenever it's widely available
      ].forEach((a2) => node.addEventListener(a2, cancel, { signal: controller2.signal }));
    }, "handleMouseDown"), controller = new AbortController();
    return node.addEventListener("mousedown", handleMouseDown, { signal: controller.signal }), node.addEventListener("touchstart", handleMouseDown, { signal: controller.signal }), () => {
      controller.abort();
    };
  });
}
__name(longpress, "longpress");
var on_contextmenu = /* @__PURE__ */ __name((_, toggleMenu) => toggleMenu(!0), "on_contextmenu"), root_1$O = /* @__PURE__ */ template('<i class="expand-indicator fas fa-caret-up"></i>'), root_2$l = /* @__PURE__ */ template('<i class="expand-indicator fas fa-caret-down"></i>'), root$1n = /* @__PURE__ */ template('<div class="button-with-options-wrapper"><a><!> <!></a> <menu><!></menu></div>');
function ButtonWithOptionPanel($$anchor, $$props) {
  push($$props, !0);
  let expanded = prop($$props, "expanded", 15, !1), active = prop($$props, "active", 3, !1), disabled = prop($$props, "disabled", 3, !1), anchor = prop($$props, "anchor", 3, "left"), menuEl, menuOpenerEl;
  function handleFocusOut(event2) {
    const relatedTarget = event2.relatedTarget, nearestMenuElement = relatedTarget instanceof HTMLElement ? relatedTarget.closest("menu, .button.with-options") : null;
    nearestMenuElement && [menuEl, menuOpenerEl].includes(nearestMenuElement) || (menuEl.blur(), expanded(!1));
  }
  __name(handleFocusOut, "handleFocusOut");
  async function toggleMenu(expand) {
    expanded(expand ?? !expanded()), expanded() && (await tick(), menuOpenerEl.focus());
  }
  __name(toggleMenu, "toggleMenu");
  var div = root$1n(), a2 = child(div);
  a2.__click = function(...$$args) {
    $$props.onclick?.apply(this, $$args);
  }, a2.__contextmenu = [on_contextmenu, toggleMenu], a2.__focusout = handleFocusOut;
  var node = child(a2);
  snippet(node, () => $$props.children ?? noop);
  var node_1 = sibling(node, 2);
  {
    var consequent = /* @__PURE__ */ __name(($$anchor2) => {
      var i2 = root_1$O();
      append($$anchor2, i2);
    }, "consequent"), alternate = /* @__PURE__ */ __name(($$anchor2) => {
      var i_1 = root_2$l();
      append($$anchor2, i_1);
    }, "alternate");
    if_block(node_1, ($$render) => {
      expanded() ? $$render(consequent) : $$render(alternate, !1);
    });
  }
  action(a2, ($$node, $$action_arg) => longpress?.($$node, $$action_arg), () => ({ callback: /* @__PURE__ */ __name(() => toggleMenu(), "callback") })), bind_this(a2, ($$value) => menuOpenerEl = $$value, () => menuOpenerEl);
  var menu = sibling(a2, 2);
  menu.__focusout = handleFocusOut;
  var node_2 = child(menu);
  snippet(node_2, () => $$props.options ?? noop), bind_this(menu, ($$value) => menuEl = $$value, () => menuEl), template_effect(() => {
    set_class(a2, `button with-options ${$$props.class ?? "" ?? ""}`), set_attribute(a2, "tabindex", expanded() ? 0 : null), toggle_class(a2, "expanded", expanded()), toggle_class(a2, "active", active()), toggle_class(a2, "disabled", disabled()), set_class(menu, `anchor-${anchor() ?? ""}`), set_attribute(menu, "tabindex", expanded() ? 0 : null), toggle_class(menu, "expanded", expanded());
  }), append($$anchor, div), pop();
}
__name(ButtonWithOptionPanel, "ButtonWithOptionPanel");
delegate(["click", "contextmenu", "focusout"]);
var root_1$N = /* @__PURE__ */ template('<h4> </h4> <label><input type="radio"> </label> <label><input type="radio"> </label>', 1), root_2$k = /* @__PURE__ */ template('<i class="fas fa-angles-down fa-fw"></i>'), root_8$a = /* @__PURE__ */ template('<label><input type="radio"> </label> <label><input type="radio"> </label> <label><input type="radio"> </label>', 1), root_9$7 = /* @__PURE__ */ template('<i class="fas fa-arrow-down-a-z fa-fw"></i>'), root$1m = /* @__PURE__ */ template('<section class="action-bar"><!> <!> <div class="button-group"><!> <!> <!> <!> <!></div> <a class="button icon-button"><i class="fas fa-filter"></i></a> <!> <a class="button icon-button"><i class="fas fa-gear"></i></a></section>   <div class="container-contents-wrapper"><!></div> <footer class="contents-footer"><!> <hr class="golden-fade"> <!></footer>', 1);
function ContainerContentsTab($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getContainerSheetHightouchContext), tabId = getContext(CONSTANTS.SVELTE_CONTEXT.TAB_ID), inlineToggleService = getContext(CONSTANTS.SVELTE_CONTEXT.INLINE_TOGGLE_SERVICE), searchCriteria = state("");
  const searchResults = createSearchResultsState();
  setSearchResultsContext(searchResults), user_effect(() => {
    searchResults.uuids = ItemVisibility.getItemsToShowAtDepth({
      criteria: get(searchCriteria),
      itemContext: get(context).itemContext,
      sections: get(context).containerContents.contents,
      tabId
    });
  });
  const localize = FoundryAdapter.localize;
  var fragment = root$1m(), section = first_child(fragment), node = child(section);
  ButtonWithOptionPanel(node, {
    class: "icon-button",
    options: /* @__PURE__ */ __name(($$anchor2) => {
      var fragment_1 = root_1$N(), h4 = first_child(fragment_1), text2 = child(h4);
      template_effect(() => set_text(text2, localize("TIDY5E.ExpandCollapseMenu.OptionTitle")));
      var label = sibling(h4, 2), input = child(label);
      set_checked(input, !0);
      var text_1 = sibling(input);
      template_effect(() => set_text(text_1, ` ${localize("TIDY5E.ExpandCollapseMenu.OptionTopLevel") ?? ""}`));
      var label_1 = sibling(label, 2), input_1 = child(label_1);
      set_checked(input_1, !1);
      var text_2 = sibling(input_1);
      template_effect(() => set_text(text_2, ` ${localize("TIDY5E.ExpandCollapseMenu.OptionAllSections") ?? ""}`)), template_effect(() => {
        set_attribute(label, "for", `${get(context).document.id ?? ""}-expand-collapse-behavior-top-level-sections`), set_attribute(label_1, "for", `${get(context).document.id ?? ""}-expand-collapse-behavior-all-sections`), set_attribute(input_1, "id", `${get(context).document.id ?? ""}-expand-collapse-behavior-all-sections`);
      }), append($$anchor2, fragment_1);
    }, "options"),
    children: /* @__PURE__ */ __name(($$anchor2, $$slotProps) => {
      var i2 = root_2$k();
      append($$anchor2, i2);
    }, "children"),
    $$slots: { options: !0, default: !0 }
  });
  var node_1 = sibling(node, 2);
  Search(node_1, {
    get searchCriteria() {
      return get(searchCriteria);
    },
    set searchCriteria($$value) {
      set(searchCriteria, proxy($$value));
    }
  });
  var div = sibling(node_1, 2), node_2 = child(div);
  ToggleButton(node_2, {
    class: "hide-under-450",
    children: /* @__PURE__ */ __name(($$anchor2, $$slotProps) => {
      var text_3 = text("Action");
      append($$anchor2, text_3);
    }, "children"),
    $$slots: { default: !0 }
  });
  var node_3 = sibling(node_2, 2);
  ToggleButton(node_3, {
    class: "hide-under-550",
    children: /* @__PURE__ */ __name(($$anchor2, $$slotProps) => {
      var text_4 = text("Bonus Action");
      append($$anchor2, text_4);
    }, "children"),
    $$slots: { default: !0 }
  });
  var node_4 = sibling(node_3, 2);
  ToggleButton(node_4, {
    class: "hide-under-600",
    children: /* @__PURE__ */ __name(($$anchor2, $$slotProps) => {
      var text_5 = text("Reaction");
      append($$anchor2, text_5);
    }, "children"),
    $$slots: { default: !0 }
  });
  var node_5 = sibling(node_4, 2);
  ToggleButton(node_5, {
    class: "hide-under-400",
    children: /* @__PURE__ */ __name(($$anchor2, $$slotProps) => {
      var text_6 = text("Can Use");
      append($$anchor2, text_6);
    }, "children"),
    $$slots: { default: !0 }
  });
  var node_6 = sibling(node_5, 2);
  ToggleButton(node_6, {
    children: /* @__PURE__ */ __name(($$anchor2, $$slotProps) => {
      var text_7 = text("Magical");
      append($$anchor2, text_7);
    }, "children"),
    $$slots: { default: !0 }
  });
  var node_7 = sibling(div, 4);
  ButtonWithOptionPanel(node_7, {
    class: "icon-button",
    anchor: "right",
    options: /* @__PURE__ */ __name(($$anchor2) => {
      var fragment_2 = root_8$a(), label_2 = first_child(fragment_2), input_2 = child(label_2);
      set_checked(input_2, !0);
      var text_8 = sibling(input_2);
      template_effect(() => set_text(text_8, ` ${localize("TIDY5E.SortMenu.OptionAlphabetical") ?? ""}`));
      var label_3 = sibling(label_2, 2), input_3 = child(label_3);
      set_checked(input_3, !1);
      var text_9 = sibling(input_3);
      template_effect(() => set_text(text_9, ` ${localize("TIDY5E.SortMenu.OptionManual") ?? ""}`));
      var label_4 = sibling(label_3, 2), input_4 = child(label_4);
      set_checked(input_4, !1);
      var text_10 = sibling(input_4);
      template_effect(() => set_text(text_10, ` ${localize("TIDY5E.SortMenu.OptionEquipped") ?? ""}`)), template_effect(() => {
        set_attribute(label_2, "for", `${get(context).document.id ?? ""}-sort-option-alphabetical`), set_attribute(input_2, "id", `${get(context).document.id ?? ""}-sort-option-alphabetical`), set_attribute(label_3, "for", `${get(context).document.id ?? ""}-sort-option-manual`), set_attribute(input_3, "id", `${get(context).document.id ?? ""}-sort-option-manual`), set_attribute(label_4, "for", `${get(context).document.id ?? ""}-sort-option-equipped`), set_attribute(input_4, "id", `${get(context).document.id ?? ""}-sort-option-equipped`);
      }), append($$anchor2, fragment_2);
    }, "options"),
    children: /* @__PURE__ */ __name(($$anchor2, $$slotProps) => {
      var i_1 = root_9$7();
      append($$anchor2, i_1);
    }, "children"),
    $$slots: { options: !0, default: !0 }
  });
  var div_1 = sibling(section, 2), node_8 = child(div_1);
  ContainerContentsSections(node_8, {
    get contents() {
      return get(context).containerContents.contents;
    },
    get container() {
      return get(context).item;
    },
    get editable() {
      return get(context).editable;
    },
    get itemContext() {
      return get(context).containerContents.itemContext;
    },
    inlineToggleService,
    get lockItemQuantity() {
      return get(context).lockItemQuantity;
    },
    get sheetDocument() {
      return get(context).item;
    },
    get unlocked() {
      return get(context).unlocked;
    }
  });
  var footer = sibling(div_1, 2), node_9 = child(footer);
  CapacityBar(node_9, {
    get container() {
      return get(context).item;
    },
    get capacity() {
      return get(context).capacity;
    }
  });
  var node_10 = sibling(node_9, 4);
  ContainerCurrency(node_10, {}), template_effect(() => set_attribute(section, "data-tidy-sheet-part", CONSTANTS.SHEET_PARTS.ACTION_BAR)), append($$anchor, fragment), pop();
}
__name(ContainerContentsTab, "ContainerContentsTab");
const itemSheetTabs = {
  /**
   * Interface for managing activities for an item.
   */
  activities: {
    id: CONSTANTS.TAB_ITEM_ACTIVITIES_ID,
    title: "DND5E.ACTIVITY.Title.other",
    content: {
      component: ItemActivitiesTab,
      cssClass: "activities-tab-contents",
      type: "svelte"
    }
  },
  /**
   * Advancement create/read/update/delete interface.
   */
  advancement: {
    id: CONSTANTS.TAB_ITEM_ADVANCEMENT_ID,
    title: "DND5E.AdvancementTitle",
    content: {
      component: ItemAdvancementTab,
      cssClass: "detail-tab-contents items-list-container",
      type: "svelte"
    }
  },
  /**
   * Details form for background items.
   */
  backgroundDetails: {
    id: CONSTANTS.TAB_ITEM_DETAILS_ID,
    title: "DND5E.Details",
    content: {
      component: ItemBackgroundDetailsTab,
      cssClass: "detail-tab-contents",
      type: "svelte"
    },
    autoHeight: !0
  },
  /**
   * Details form for class items.
   */
  classDetails: {
    id: CONSTANTS.TAB_ITEM_DETAILS_ID,
    title: "DND5E.Details",
    content: {
      component: ItemClassDetailsTab,
      cssClass: "detail-tab-contents",
      type: "svelte"
    },
    autoHeight: !0
  },
  /**
   * Details form for consumable items.
   */
  consumableDetails: {
    id: CONSTANTS.TAB_ITEM_DETAILS_ID,
    title: "DND5E.Details",
    content: {
      component: ItemConsumableDetailsTab,
      cssClass: "detail-tab-contents",
      type: "svelte"
    },
    autoHeight: !0
  },
  containerContents: {
    id: CONSTANTS.TAB_CONTAINER_CONTENTS,
    title: "DND5E.Contents",
    content: {
      component: ItemContainerContentsTab,
      cssClass: "detail-tab-contents",
      type: "svelte"
    }
  },
  containerDetails: {
    id: CONSTANTS.TAB_ITEM_DETAILS_ID,
    title: "DND5E.Details",
    content: {
      component: ItemContainerDetailsTab,
      cssClass: "detail-tab-contents",
      type: "svelte"
    },
    autoHeight: !0
  },
  /**
   * Description editor and a header for mechanics/flavor.
   */
  description: {
    id: CONSTANTS.TAB_ITEM_DESCRIPTION_ID,
    title: "DND5E.Description",
    content: {
      component: ItemDescriptionTab,
      cssClass: "flexcol",
      type: "svelte"
    }
  },
  /**
   * A sidebar with item inputs and properties, and a description editor.
   */
  descriptionWithSidebar: {
    id: CONSTANTS.TAB_ITEM_DESCRIPTION_ID,
    title: "DND5E.Description",
    content: {
      component: ItemDescriptionWithSidebarTab,
      cssClass: "flexrow",
      type: "svelte"
    }
  },
  /**
   * Active Effects create/read/update/delete interface.
   */
  effects: {
    id: CONSTANTS.TAB_ITEM_EFFECTS_ID,
    title: "DND5E.Effects",
    content: {
      component: ItemActiveEffectsTab,
      cssClass: "flexcol items-list-container",
      type: "svelte"
    }
  },
  /**
   * Details form for equipment items.
   */
  equipmentDetails: {
    id: CONSTANTS.TAB_ITEM_DETAILS_ID,
    title: "DND5E.Details",
    content: {
      component: ItemEquipmentDetailsTab,
      cssClass: "detail-tab-contents",
      type: "svelte"
    },
    autoHeight: !0
  },
  facilityDetails: {
    id: CONSTANTS.TAB_ITEM_DETAILS_ID,
    title: "DND5E.Details",
    content: {
      component: ItemFacilityDetailsTab,
      type: "svelte"
    }
  },
  /**
   * Details form for feat items.
   */
  featDetails: {
    id: CONSTANTS.TAB_ITEM_DETAILS_ID,
    title: "DND5E.Details",
    content: {
      component: ItemFeatDetailsTab,
      cssClass: "detail-tab-contents",
      type: "svelte"
    },
    autoHeight: !0
  },
  hightouchContainerContents: {
    id: CONSTANTS.TAB_CONTAINER_CONTENTS,
    title: "DND5E.Contents",
    content: {
      component: ContainerContentsTab,
      type: "svelte"
    }
  },
  /**
   * Details form for containers.
   */
  hightouchContainerDetails: {
    id: CONSTANTS.TAB_ITEM_DETAILS_ID,
    title: "DND5E.Details",
    content: {
      component: ContainerDetailsTab,
      type: "svelte"
    }
  },
  /**
   * Three-descriptions interface for items
   */
  hightouchDescription: {
    id: CONSTANTS.TAB_ITEM_DESCRIPTION_ID,
    title: "DND5E.Description",
    content: {
      component: ItemDescriptionsTab,
      type: "svelte"
    }
  },
  /**
   * Details form for loot.
   */
  lootDetails: {
    id: CONSTANTS.TAB_ITEM_DETAILS_ID,
    title: "DND5E.Details",
    content: {
      component: ItemLootDetailsTab,
      cssClass: "detail-tab-contents",
      type: "svelte"
    },
    autoHeight: !0
  },
  /**
   * A sidebar with species properties and configuration buttons, and a description editor.
   */
  speciesDescription: {
    id: CONSTANTS.TAB_ITEM_DESCRIPTION_ID,
    title: "DND5E.Description",
    content: {
      component: ItemSpeciesDescriptionTab,
      cssClass: "flexrow",
      type: "svelte"
    }
  },
  /**
   * Details form for species items.
   */
  speciesDetails: {
    id: CONSTANTS.TAB_ITEM_DETAILS_ID,
    title: "DND5E.Details",
    content: {
      component: ItemSpeciesDetailsTab,
      cssClass: "detail-tab-contents",
      type: "svelte"
    }
  },
  /**
   * Details form for spell items.
   */
  spellDetails: {
    id: CONSTANTS.TAB_ITEM_DETAILS_ID,
    title: "DND5E.Details",
    content: {
      component: ItemSpellDetailsTab,
      cssClass: "detail-tab-contents",
      type: "svelte"
    },
    autoHeight: !0
  },
  /**
   * Details form for subclass items.
   */
  subclassDetails: {
    id: CONSTANTS.TAB_ITEM_DETAILS_ID,
    title: "DND5E.Details",
    content: {
      component: ItemSubclassDetailsTab,
      cssClass: "detail-tab-contents",
      type: "svelte"
    },
    autoHeight: !0
  },
  /**
   * Details form for tool items.
   */
  toolDetails: {
    id: CONSTANTS.TAB_ITEM_DETAILS_ID,
    title: "DND5E.Details",
    content: {
      component: ItemToolDetailsTab,
      cssClass: "detail-tab-contents",
      type: "svelte"
    },
    autoHeight: !0
  },
  /**
   * Details form for weapon items.
   */
  weaponDetails: {
    id: CONSTANTS.TAB_ITEM_DETAILS_ID,
    title: "DND5E.Details",
    content: {
      component: ItemWeaponDetailsTab,
      cssClass: "detail-tab-contents",
      type: "svelte"
    },
    autoHeight: !0
  }
};
var root$1l = /* @__PURE__ */ template('<header class="sheet-header flexrow gap"><!> <div class="header-details flexrow small-gap"><h1 class="charname"><!></h1> <div class="item-subtitle"><h4 class="item-type"> </h4> <span class="item-status"> </span></div> <ul class="summary flexrow"><li class="flex-row"><!></li></ul></div></header> <!> <section class="tidy-sheet-body"><!></section>', 1);
function BackgroundSheet($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getItemSheetContext), appId = /* @__PURE__ */ derived(() => get(context).document.id), selectedTabId = prop($$props, "selectedTabId", 15, "description");
  const localize = FoundryAdapter.localize;
  var fragment = root$1l(), header = first_child(fragment), node = child(header);
  ItemProfilePicture(node, {});
  var div = sibling(node, 2), h1 = child(div), node_1 = child(h1), attributes = /* @__PURE__ */ derived(() => ({
    "data-tidy-item-name": get(context).item.name
  })), placeholder = /* @__PURE__ */ derived(() => localize("DND5E.BackgroundName")), disabled = /* @__PURE__ */ derived(() => !get(context).editable);
  TextInput(node_1, {
    get id() {
      return `${get(appId) ?? ""}-name`;
    },
    field: "name",
    get document() {
      return get(context).item;
    },
    get value() {
      return get(context).item.name;
    },
    get attributes() {
      return get(attributes);
    },
    get placeholder() {
      return get(placeholder);
    },
    get disabled() {
      return get(disabled);
    },
    get title() {
      return get(context).item.name;
    }
  });
  var div_1 = sibling(h1, 2), h4 = child(div_1), text2 = child(h4), span = sibling(h4, 2), text_1 = child(span), ul = sibling(div_1, 2), li = child(ul), node_2 = child(li);
  Source(node_2, {
    get document() {
      return get(context).item;
    },
    keyPath: "system.source",
    get editable() {
      return get(context).editable;
    }
  });
  var node_3 = sibling(header, 2);
  Tabs(node_3, {
    get tabs() {
      return get(context).tabs;
    },
    get sheet() {
      return get(context).item.sheet;
    },
    get selectedTabId() {
      return selectedTabId();
    },
    set selectedTabId($$value) {
      selectedTabId($$value);
    }
  });
  var section = sibling(node_3, 2), node_4 = child(section);
  TabContents(node_4, {
    get tabs() {
      return get(context).tabs;
    },
    get selectedTabId() {
      return selectedTabId();
    }
  }), template_effect(() => {
    set_attribute(div, "data-tidy-sheet-part", CONSTANTS.SHEET_PARTS.NAME_HEADER_ROW), set_attribute(h1, "data-tidy-sheet-part", CONSTANTS.SHEET_PARTS.NAME_CONTAINER), set_text(text2, get(context).itemType ?? ""), set_text(text_1, get(context).itemStatus ?? "");
  }), append($$anchor, fragment), pop();
}
__name(BackgroundSheet, "BackgroundSheet");
var root$1k = /* @__PURE__ */ template('<header class="sheet-header flexrow gap"><!> <div class="header-details flexrow small-gap"><h1 class="charname"><!></h1> <div class="item-subtitle"><h4 class="item-type"> </h4> <span class="item-status"> </span></div> <ul class="summary flexrow"><li class="flex-row"><!></li></ul></div></header> <!> <section class="tidy-sheet-body"><!></section>', 1);
function ClassSheet($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getItemSheetContext), appId = /* @__PURE__ */ derived(() => get(context).document.id), selectedTabId = state("");
  const localize = FoundryAdapter.localize;
  var fragment = root$1k(), header = first_child(fragment), node = child(header);
  ItemProfilePicture(node, {});
  var div = sibling(node, 2), h1 = child(div), node_1 = child(h1), attributes = /* @__PURE__ */ derived(() => ({
    "data-tidy-item-name": get(context).item.name
  })), placeholder = /* @__PURE__ */ derived(() => localize("DND5E.ClassName")), disabled = /* @__PURE__ */ derived(() => !get(context).editable);
  TextInput(node_1, {
    get id() {
      return `${get(appId) ?? ""}-name`;
    },
    field: "name",
    get document() {
      return get(context).item;
    },
    get value() {
      return get(context).item.name;
    },
    get attributes() {
      return get(attributes);
    },
    get placeholder() {
      return get(placeholder);
    },
    get disabled() {
      return get(disabled);
    },
    get title() {
      return get(context).item.name;
    }
  });
  var div_1 = sibling(h1, 2), h4 = child(div_1), text2 = child(h4), span = sibling(h4, 2), text_1 = child(span), ul = sibling(div_1, 2), li = child(ul), node_2 = child(li);
  Source(node_2, {
    get document() {
      return get(context).item;
    },
    keyPath: "system.source",
    get editable() {
      return get(context).editable;
    }
  });
  var node_3 = sibling(header, 2);
  Tabs(node_3, {
    get tabs() {
      return get(context).tabs;
    },
    get sheet() {
      return get(context).item.sheet;
    },
    get selectedTabId() {
      return get(selectedTabId);
    },
    set selectedTabId($$value) {
      set(selectedTabId, proxy($$value));
    }
  });
  var section = sibling(node_3, 2), node_4 = child(section);
  TabContents(node_4, {
    get tabs() {
      return get(context).tabs;
    },
    get selectedTabId() {
      return get(selectedTabId);
    }
  }), template_effect(() => {
    set_attribute(div, "data-tidy-sheet-part", CONSTANTS.SHEET_PARTS.NAME_HEADER_ROW), set_attribute(h1, "data-tidy-sheet-part", CONSTANTS.SHEET_PARTS.NAME_CONTAINER), set_text(text2, get(context).itemType ?? ""), set_text(text_1, get(context).itemStatus ?? "");
  }), append($$anchor, fragment), pop();
}
__name(ClassSheet, "ClassSheet");
var root_1$M = /* @__PURE__ */ template('<span class="item-status"> </span>'), root_2$j = /* @__PURE__ */ template("<span> </span>"), root$1j = /* @__PURE__ */ template('<header class="sheet-header flexrow gap"><!> <div class="header-details flexrow small-gap"><h1 class="charname"><!></h1> <div class="item-subtitle"><h4 class="item-type"> </h4> <!></div> <ul class="summary flexrow"><li> </li> <li><!></li> <li class="flex-row"><!></li></ul> <!></div></header> <!> <section class="tidy-sheet-body"><!></section>', 1);
function ConsumableSheet($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getItemSheetContext), appId = /* @__PURE__ */ derived(() => get(context).document.id), selectedTabId = state("");
  const localize = FoundryAdapter.localize;
  var fragment = root$1j(), header = first_child(fragment), node = child(header);
  ItemProfilePicture(node, {});
  var div = sibling(node, 2), h1 = child(div), node_1 = child(h1);
  ItemIdentifiableName(node_1, {});
  var div_1 = sibling(h1, 2), h4 = child(div_1), text2 = child(h4), node_2 = sibling(h4, 2);
  {
    var consequent = /* @__PURE__ */ __name(($$anchor2) => {
      var span = root_1$M(), text_1 = child(span);
      template_effect(() => set_text(text_1, get(context).itemStatus ?? "")), append($$anchor2, span);
    }, "consequent");
    if_block(node_2, ($$render) => {
      get(context).itemStatus && get(context).itemStatus !== get(context).itemType && $$render(consequent);
    });
  }
  var ul = sibling(div_1, 2), li = child(ul), text_2 = child(li), li_1 = sibling(li, 2), node_3 = child(li_1);
  {
    var consequent_1 = /* @__PURE__ */ __name(($$anchor2) => {
      var span_1 = root_2$j(), text_3 = child(span_1);
      template_effect(() => set_text(text_3, localize("DND5E.Unidentified.Title"))), append($$anchor2, span_1);
    }, "consequent_1"), alternate = /* @__PURE__ */ __name(($$anchor2) => {
      var disabled = /* @__PURE__ */ derived(() => !get(context).editable);
      Select($$anchor2, {
        get id() {
          return `${get(appId) ?? ""}-rarity`;
        },
        get document() {
          return get(context).item;
        },
        field: "system.rarity",
        class: "item-rarity",
        get value() {
          return get(context).system.rarity;
        },
        get disabled() {
          return get(disabled);
        },
        blankValue: "",
        children: /* @__PURE__ */ __name(($$anchor3, $$slotProps) => {
          SelectOptions($$anchor3, {
            get data() {
              return get(context).config.itemRarity;
            },
            blank: ""
          });
        }, "children"),
        $$slots: { default: !0 }
      });
    }, "alternate");
    if_block(node_3, ($$render) => {
      get(context).concealDetails ? $$render(consequent_1) : $$render(alternate, !1);
    });
  }
  var li_2 = sibling(li_1, 2), node_4 = child(li_2), editable = /* @__PURE__ */ derived(() => get(context).editable && !get(context).concealDetails);
  Source(node_4, {
    get document() {
      return get(context).item;
    },
    keyPath: "system.source",
    get editable() {
      return get(editable);
    }
  });
  var node_5 = sibling(ul, 2);
  ItemHeaderToggles(node_5, {});
  var node_6 = sibling(header, 2);
  Tabs(node_6, {
    get tabs() {
      return get(context).tabs;
    },
    get sheet() {
      return get(context).item.sheet;
    },
    get selectedTabId() {
      return get(selectedTabId);
    },
    set selectedTabId($$value) {
      set(selectedTabId, proxy($$value));
    }
  });
  var section = sibling(node_6, 2), node_7 = child(section);
  TabContents(node_7, {
    get tabs() {
      return get(context).tabs;
    },
    get selectedTabId() {
      return get(selectedTabId);
    }
  }), template_effect(() => {
    set_attribute(div, "data-tidy-sheet-part", CONSTANTS.SHEET_PARTS.NAME_HEADER_ROW), set_attribute(h1, "data-tidy-sheet-part", CONSTANTS.SHEET_PARTS.NAME_CONTAINER), set_text(text2, get(context).itemType ?? ""), set_text(text_2, get(context).itemType);
  }), append($$anchor, fragment), pop();
}
__name(ConsumableSheet, "ConsumableSheet");
var root_1$L = /* @__PURE__ */ template("<span> </span>"), root$1i = /* @__PURE__ */ template('<header class="sheet-header container-header flexrow gap"><!> <div class="header-details flexrow small-gap"><h1 class="charname"><!></h1> <div class="item-subtitle"><h4 class="item-type"> </h4></div> <ul class="summary flexrow"><li><!></li> <li class="flex-row"><!></li></ul> <!></div></header> <!> <section class="tidy-sheet-body"><!></section>', 1);
function ContainerSheet$1($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getContainerSheetClassicContext), appId = /* @__PURE__ */ derived(() => get(context).document.id), selectedTabId = state("");
  const localize = FoundryAdapter.localize;
  var fragment = root$1i(), header = first_child(fragment), node = child(header);
  ItemProfilePicture(node, {});
  var div = sibling(node, 2), h1 = child(div), node_1 = child(h1);
  ItemIdentifiableName(node_1, {});
  var div_1 = sibling(h1, 2), h4 = child(div_1), text2 = child(h4), ul = sibling(div_1, 2), li = child(ul), node_2 = child(li);
  {
    var consequent = /* @__PURE__ */ __name(($$anchor2) => {
      var span = root_1$L(), text_1 = child(span);
      template_effect(() => set_text(text_1, localize("DND5E.Unidentified.Title"))), append($$anchor2, span);
    }, "consequent"), alternate = /* @__PURE__ */ __name(($$anchor2) => {
      var disabled = /* @__PURE__ */ derived(() => !get(context).editable);
      Select($$anchor2, {
        get id() {
          return `${get(appId) ?? ""}-rarity`;
        },
        get document() {
          return get(context).item;
        },
        field: "system.rarity",
        class: "item-rarity",
        get value() {
          return get(context).system.rarity;
        },
        get disabled() {
          return get(disabled);
        },
        blankValue: "",
        children: /* @__PURE__ */ __name(($$anchor3, $$slotProps) => {
          SelectOptions($$anchor3, {
            get data() {
              return get(context).config.itemRarity;
            },
            blank: ""
          });
        }, "children"),
        $$slots: { default: !0 }
      });
    }, "alternate");
    if_block(node_2, ($$render) => {
      get(context).concealDetails ? $$render(consequent) : $$render(alternate, !1);
    });
  }
  var li_1 = sibling(li, 2), node_3 = child(li_1), editable = /* @__PURE__ */ derived(() => get(context).editable && !get(context).concealDetails);
  Source(node_3, {
    get document() {
      return get(context).item;
    },
    keyPath: "system.source",
    get editable() {
      return get(editable);
    }
  });
  var node_4 = sibling(ul, 2);
  ItemHeaderToggles(node_4, {});
  var node_5 = sibling(header, 2);
  Tabs(node_5, {
    get tabs() {
      return get(context).tabs;
    },
    get sheet() {
      return get(context).item.sheet;
    },
    get selectedTabId() {
      return get(selectedTabId);
    },
    set selectedTabId($$value) {
      set(selectedTabId, proxy($$value));
    }
  });
  var section = sibling(node_5, 2), node_6 = child(section);
  TabContents(node_6, {
    get tabs() {
      return get(context).tabs;
    },
    get selectedTabId() {
      return get(selectedTabId);
    }
  }), template_effect(() => {
    set_attribute(div, "data-tidy-sheet-part", CONSTANTS.SHEET_PARTS.NAME_HEADER_ROW), set_attribute(h1, "data-tidy-sheet-part", CONSTANTS.SHEET_PARTS.NAME_CONTAINER), set_text(text2, get(context).itemType ?? "");
  }), append($$anchor, fragment), pop();
}
__name(ContainerSheet$1, "ContainerSheet$1");
var root_1$K = /* @__PURE__ */ template('<li><div class="price"><span class="value"> </span> <i class="currency gp"></i></div></li>'), root$1h = /* @__PURE__ */ template('<header class="sheet-header flexrow gap"><!> <div class="header-details flexrow small-gap"><h1 class="charname"><!></h1> <div class="item-subtitle"><h4 class="item-type"> </h4></div> <ul class="summary flexrow"><li class="flex-row"><div class="quantity"><span class="value"> </span></div></li> <!> <li class="flex-row"><!></li></ul></div></header> <!> <section class="tidy-sheet-body"><!></section>', 1);
function FacilitySheet($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getItemSheetContext), appId = /* @__PURE__ */ derived(() => get(context).document.id), selectedTabId = state("");
  const localize = FoundryAdapter.localize;
  var fragment = root$1h(), header = first_child(fragment), node = child(header);
  ItemProfilePicture(node, {});
  var div = sibling(node, 2), h1 = child(div), node_1 = child(h1), attributes = /* @__PURE__ */ derived(() => ({
    "data-tidy-item-name": get(context).item.name
  })), disabled = /* @__PURE__ */ derived(() => !get(context).editable);
  TextInput(node_1, {
    get id() {
      return `${get(appId) ?? ""}-name`;
    },
    field: "name",
    get document() {
      return get(context).item;
    },
    get value() {
      return get(context).item.name;
    },
    get attributes() {
      return get(attributes);
    },
    get disabled() {
      return get(disabled);
    },
    get title() {
      return get(context).item.name;
    }
  });
  var div_1 = sibling(h1, 2), h4 = child(div_1), text2 = child(h4), ul = sibling(div_1, 2), li = child(ul), div_2 = child(li), span = child(div_2), text_1 = child(span);
  template_effect(() => set_text(text_1, localize("DND5E.FACILITY.Squares", { squares: get(context).system.squares })));
  var node_2 = sibling(li, 2);
  {
    var consequent = /* @__PURE__ */ __name(($$anchor2) => {
      var li_1 = root_1$K(), div_3 = child(li_1), span_1 = child(div_3), text_2 = child(span_1), i2 = sibling(span_1, 2);
      template_effect(() => {
        set_text(text_2, get(context).system.price.value), set_attribute(i2, "aria-label", get(context).config.currencies.gp.label);
      }), append($$anchor2, li_1);
    }, "consequent");
    if_block(node_2, ($$render) => {
      get(context).system.type.value === CONSTANTS.FACILITY_TYPE_BASIC && $$render(consequent);
    });
  }
  var li_2 = sibling(node_2, 2), node_3 = child(li_2);
  Source(node_3, {
    get document() {
      return get(context).item;
    },
    keyPath: "system.source",
    get editable() {
      return get(context).editable;
    }
  });
  var node_4 = sibling(header, 2);
  Tabs(node_4, {
    get tabs() {
      return get(context).tabs;
    },
    get sheet() {
      return get(context).item.sheet;
    },
    get selectedTabId() {
      return get(selectedTabId);
    },
    set selectedTabId($$value) {
      set(selectedTabId, proxy($$value));
    }
  });
  var section = sibling(node_4, 2), node_5 = child(section);
  TabContents(node_5, {
    get tabs() {
      return get(context).tabs;
    },
    get selectedTabId() {
      return get(selectedTabId);
    }
  }), template_effect(() => {
    set_attribute(div, "data-tidy-sheet-part", CONSTANTS.SHEET_PARTS.NAME_HEADER_ROW), set_attribute(h1, "data-tidy-sheet-part", CONSTANTS.SHEET_PARTS.NAME_CONTAINER), set_text(text2, get(context).itemType ?? "");
  }), append($$anchor, fragment), pop();
}
__name(FacilitySheet, "FacilitySheet");
var root$1g = /* @__PURE__ */ template('<header class="sheet-header flexrow gap"><!> <div class="header-details flexrow small-gap"><h1 class="charname"><!></h1> <div class="item-subtitle"><h4 class="item-type"> </h4> <span class="item-status"> </span></div> <ul class="summary flexrow"><li> </li> <li><!></li> <li class="flex-row"><!></li></ul></div></header> <!> <section class="tidy-sheet-body"><!></section>', 1);
function FeatSheet($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getItemSheetContext), appId = /* @__PURE__ */ derived(() => get(context).document.id), selectedTabId = state("");
  const localize = FoundryAdapter.localize;
  var fragment = root$1g(), header = first_child(fragment), node = child(header);
  ItemProfilePicture(node, {});
  var div = sibling(node, 2), h1 = child(div), node_1 = child(h1), placeholder = /* @__PURE__ */ derived(() => localize("DND5E.ItemName")), attributes = /* @__PURE__ */ derived(() => ({
    "data-tidy-item-name": get(context).item.name
  })), disabled = /* @__PURE__ */ derived(() => !get(context).editable);
  TextInput(node_1, {
    get id() {
      return `${get(appId) ?? ""}-name`;
    },
    get document() {
      return get(context).item;
    },
    field: "name",
    get placeholder() {
      return get(placeholder);
    },
    get value() {
      return get(context).item.name;
    },
    get attributes() {
      return get(attributes);
    },
    get disabled() {
      return get(disabled);
    },
    get title() {
      return get(context).item.name;
    }
  });
  var div_1 = sibling(h1, 2), h4 = child(div_1), text2 = child(h4), span = sibling(h4, 2), text_1 = child(span), ul = sibling(div_1, 2), li = child(ul), text_2 = child(li), li_1 = sibling(li, 2), node_2 = child(li_1), placeholder_1 = /* @__PURE__ */ derived(() => localize("DND5E.Requirements")), disabled_1 = /* @__PURE__ */ derived(() => !get(context).editable);
  TextInput(node_2, {
    get id() {
      return `${get(appId) ?? ""}-name`;
    },
    get document() {
      return get(context).item;
    },
    field: "system.requirements",
    get value() {
      return get(context).system.requirements;
    },
    get placeholder() {
      return get(placeholder_1);
    },
    get disabled() {
      return get(disabled_1);
    }
  });
  var li_2 = sibling(li_1, 2), node_3 = child(li_2);
  Source(node_3, {
    get document() {
      return get(context).item;
    },
    keyPath: "system.source",
    get editable() {
      return get(context).editable;
    }
  });
  var node_4 = sibling(header, 2);
  Tabs(node_4, {
    get tabs() {
      return get(context).tabs;
    },
    get sheet() {
      return get(context).item.sheet;
    },
    get selectedTabId() {
      return get(selectedTabId);
    },
    set selectedTabId($$value) {
      set(selectedTabId, proxy($$value));
    }
  });
  var section = sibling(node_4, 2), node_5 = child(section);
  TabContents(node_5, {
    get tabs() {
      return get(context).tabs;
    },
    get selectedTabId() {
      return get(selectedTabId);
    }
  }), template_effect(() => {
    set_attribute(div, "data-tidy-sheet-part", CONSTANTS.SHEET_PARTS.NAME_HEADER_ROW), set_attribute(h1, "data-tidy-sheet-part", CONSTANTS.SHEET_PARTS.NAME_CONTAINER), set_text(text2, get(context).itemType ?? ""), set_text(text_1, get(context).itemStatus ?? ""), set_text(text_2, get(context).labels.featType ?? "");
  }), append($$anchor, fragment), pop();
}
__name(FeatSheet, "FeatSheet");
var root_1$J = /* @__PURE__ */ template("<span> </span>"), root_5$c = /* @__PURE__ */ template("<div> </div>"), root$1f = /* @__PURE__ */ template('<header class="sheet-header loot-header flexrow gap"><!> <div class="header-details flexrow small-gap"><h1 class="charname"><!></h1> <div class="item-subtitle"><h4 class="item-type"> </h4> <span class="item-status"> </span></div> <ul class="summary flexrow"><li><!></li> <li class="flex-row"><!></li></ul> <div class="flex-row no-gap"><!></div></div></header> <!> <section class="tidy-sheet-body"><!></section>', 1);
function LootSheet($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getItemSheetContext), selectedTabId = state("");
  const localize = FoundryAdapter.localize;
  let appId = /* @__PURE__ */ derived(() => get(context).document.id), identifiedLabelWidthCh = /* @__PURE__ */ derived(() => Math.max(localize("DND5E.Identified").length, localize("DND5E.Unidentified.Title").length));
  var fragment = root$1f(), header = first_child(fragment), node = child(header);
  ItemProfilePicture(node, {});
  var div = sibling(node, 2), h1 = child(div), node_1 = child(h1);
  ItemIdentifiableName(node_1, {});
  var div_1 = sibling(h1, 2), h4 = child(div_1), text2 = child(h4), span = sibling(h4, 2), text_1 = child(span), ul = sibling(div_1, 2), li = child(ul), node_2 = child(li);
  {
    var consequent = /* @__PURE__ */ __name(($$anchor2) => {
      var span_1 = root_1$J(), text_2 = child(span_1);
      template_effect(() => set_text(text_2, localize("DND5E.Unidentified.Title"))), append($$anchor2, span_1);
    }, "consequent"), alternate = /* @__PURE__ */ __name(($$anchor2) => {
      var disabled = /* @__PURE__ */ derived(() => !get(context).editable);
      Select($$anchor2, {
        get id() {
          return `${get(appId) ?? ""}-rarity`;
        },
        get document() {
          return get(context).item;
        },
        field: "system.rarity",
        class: "item-rarity",
        get value() {
          return get(context).system.rarity;
        },
        get disabled() {
          return get(disabled);
        },
        blankValue: "",
        children: /* @__PURE__ */ __name(($$anchor3, $$slotProps) => {
          SelectOptions($$anchor3, {
            get data() {
              return get(context).config.itemRarity;
            },
            blank: ""
          });
        }, "children"),
        $$slots: { default: !0 }
      });
    }, "alternate");
    if_block(node_2, ($$render) => {
      get(context).concealDetails ? $$render(consequent) : $$render(alternate, !1);
    });
  }
  var li_1 = sibling(li, 2), node_3 = child(li_1), editable = /* @__PURE__ */ derived(() => get(context).editable && !get(context).concealDetails);
  Source(node_3, {
    get document() {
      return get(context).item;
    },
    keyPath: "system.source",
    get editable() {
      return get(editable);
    }
  });
  var div_2 = sibling(ul, 2), node_4 = child(div_2);
  {
    var consequent_1 = /* @__PURE__ */ __name(($$anchor2) => {
      var disabled_1 = /* @__PURE__ */ derived(() => !get(context).editable), title = /* @__PURE__ */ derived(() => get(context).system.identified ? localize("DND5E.Identified") : localize("DND5E.Unidentified.Title"));
      PropertyToggle($$anchor2, {
        get document() {
          return get(context).item;
        },
        field: "system.identified",
        get checked() {
          return get(context).system.identified;
        },
        get disabled() {
          return get(disabled_1);
        },
        get title() {
          return get(title);
        },
        iconClass: "fas fa-magnifying-glass fa-fw",
        children: /* @__PURE__ */ __name(($$anchor3, $$slotProps) => {
          var div_3 = root_5$c(), text_3 = child(div_3);
          template_effect(() => set_text(text_3, get(context).system.identified ? localize("DND5E.Identified") : localize("DND5E.Unidentified.Title"))), template_effect(() => set_attribute(div_3, "style", `width: ${get(identifiedLabelWidthCh) ?? ""}ch`)), append($$anchor3, div_3);
        }, "children"),
        $$slots: { default: !0 }
      });
    }, "consequent_1");
    if_block(node_4, ($$render) => {
      FoundryAdapter.canIdentify(get(context).item) && $$render(consequent_1);
    });
  }
  var node_5 = sibling(header, 2);
  Tabs(node_5, {
    get tabs() {
      return get(context).tabs;
    },
    get sheet() {
      return get(context).item.sheet;
    },
    get selectedTabId() {
      return get(selectedTabId);
    },
    set selectedTabId($$value) {
      set(selectedTabId, proxy($$value));
    }
  });
  var section = sibling(node_5, 2), node_6 = child(section);
  TabContents(node_6, {
    get tabs() {
      return get(context).tabs;
    },
    get selectedTabId() {
      return get(selectedTabId);
    }
  }), template_effect(() => {
    set_attribute(div, "data-tidy-sheet-part", CONSTANTS.SHEET_PARTS.NAME_HEADER_ROW), set_attribute(h1, "data-tidy-sheet-part", CONSTANTS.SHEET_PARTS.NAME_CONTAINER), set_text(text2, get(context).itemType ?? ""), set_text(text_1, get(context).itemStatus ?? "");
  }), append($$anchor, fragment), pop();
}
__name(LootSheet, "LootSheet");
var root$1e = /* @__PURE__ */ template('<header class="sheet-header flexrow gap"><!> <div class="header-details flexrow small-gap"><h1 class="charname"><!></h1> <div class="item-subtitle"><h4 class="item-type"> </h4> <span class="item-status"> </span></div> <ul class="summary flexrow"><li> </li> <li> </li> <li class="flex-row"><!></li></ul> <span class="spell-classes"> </span></div></header> <!> <section class="tidy-sheet-body"><!></section>', 1);
function SpellSheet($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getItemSheetContext), appId = /* @__PURE__ */ derived(() => get(context).document.id), selectedTabId = state("");
  const localize = FoundryAdapter.localize;
  var fragment = root$1e(), header = first_child(fragment), node = child(header);
  ItemProfilePicture(node, {});
  var div = sibling(node, 2), h1 = child(div), node_1 = child(h1), attributes = /* @__PURE__ */ derived(() => ({
    "data-tidy-item-name": get(context).item.name
  })), placeholder = /* @__PURE__ */ derived(() => localize("DND5E.SpellName")), disabled = /* @__PURE__ */ derived(() => !get(context).editable);
  TextInput(node_1, {
    get id() {
      return `${get(appId) ?? ""}-name`;
    },
    get document() {
      return get(context).item;
    },
    field: "name",
    get value() {
      return get(context).item.name;
    },
    get attributes() {
      return get(attributes);
    },
    get placeholder() {
      return get(placeholder);
    },
    get disabled() {
      return get(disabled);
    },
    get title() {
      return get(context).item.name;
    }
  });
  var div_1 = sibling(h1, 2), h4 = child(div_1), text2 = child(h4), span = sibling(h4, 2), text_1 = child(span), ul = sibling(div_1, 2), li = child(ul), text_2 = child(li), li_1 = sibling(li, 2), text_3 = child(li_1), li_2 = sibling(li_1, 2), node_2 = child(li_2);
  Source(node_2, {
    get document() {
      return get(context).item;
    },
    keyPath: "system.source",
    get editable() {
      return get(context).editable;
    }
  });
  var span_1 = sibling(ul, 2), text_4 = child(span_1), node_3 = sibling(header, 2);
  Tabs(node_3, {
    get tabs() {
      return get(context).tabs;
    },
    get sheet() {
      return get(context).item.sheet;
    },
    get selectedTabId() {
      return get(selectedTabId);
    },
    set selectedTabId($$value) {
      set(selectedTabId, proxy($$value));
    }
  });
  var section = sibling(node_3, 2), node_4 = child(section);
  TabContents(node_4, {
    get tabs() {
      return get(context).tabs;
    },
    get selectedTabId() {
      return get(selectedTabId);
    }
  }), template_effect(() => {
    set_attribute(div, "data-tidy-sheet-part", CONSTANTS.SHEET_PARTS.NAME_HEADER_ROW), set_attribute(h1, "data-tidy-sheet-part", CONSTANTS.SHEET_PARTS.NAME_CONTAINER), set_text(text2, get(context).itemType ?? ""), set_text(text_1, get(context).itemStatus ?? ""), set_text(text_2, get(context).labels.level ?? ""), set_text(text_3, get(context).labels.school ?? ""), set_text(text_4, get(context).labels?.classes ?? "");
  }), append($$anchor, fragment), pop();
}
__name(SpellSheet, "SpellSheet");
var root$1d = /* @__PURE__ */ template('<header class="sheet-header flexrow gap"><!> <div class="header-details flexrow small-gap"><h1 class="charname"><!></h1> <div class="item-subtitle"><h4 class="item-type"> </h4> <span class="item-status"> </span></div> <ul class="summary flexrow"><li class="flex-row"><!></li></ul></div></header> <!> <section class="tidy-sheet-body"><!></section>', 1);
function SubclassSheet($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getItemSheetContext), appId = /* @__PURE__ */ derived(() => get(context).document.id), selectedTabId = state("");
  const localize = FoundryAdapter.localize;
  var fragment = root$1d(), header = first_child(fragment), node = child(header);
  ItemProfilePicture(node, {});
  var div = sibling(node, 2), h1 = child(div), node_1 = child(h1), attributes = /* @__PURE__ */ derived(() => ({
    "data-tidy-item-name": get(context).item.name
  })), placeholder = /* @__PURE__ */ derived(() => localize("DND5E.SubclassName")), disabled = /* @__PURE__ */ derived(() => !get(context).editable);
  TextInput(node_1, {
    get id() {
      return `${get(appId) ?? ""}-name`;
    },
    field: "name",
    get document() {
      return get(context).item;
    },
    get value() {
      return get(context).item.name;
    },
    get attributes() {
      return get(attributes);
    },
    get placeholder() {
      return get(placeholder);
    },
    get disabled() {
      return get(disabled);
    },
    get title() {
      return get(context).item.name;
    }
  });
  var div_1 = sibling(h1, 2), h4 = child(div_1), text2 = child(h4), span = sibling(h4, 2), text_1 = child(span), ul = sibling(div_1, 2), li = child(ul), node_2 = child(li);
  Source(node_2, {
    get document() {
      return get(context).item;
    },
    keyPath: "system.source",
    get editable() {
      return get(context).editable;
    }
  });
  var node_3 = sibling(header, 2);
  Tabs(node_3, {
    get tabs() {
      return get(context).tabs;
    },
    get sheet() {
      return get(context).item.sheet;
    },
    get selectedTabId() {
      return get(selectedTabId);
    },
    set selectedTabId($$value) {
      set(selectedTabId, proxy($$value));
    }
  });
  var section = sibling(node_3, 2), node_4 = child(section);
  TabContents(node_4, {
    get tabs() {
      return get(context).tabs;
    },
    get selectedTabId() {
      return get(selectedTabId);
    }
  }), template_effect(() => {
    set_attribute(div, "data-tidy-sheet-part", CONSTANTS.SHEET_PARTS.NAME_HEADER_ROW), set_attribute(h1, "data-tidy-sheet-part", CONSTANTS.SHEET_PARTS.NAME_CONTAINER), set_text(text2, get(context).itemType ?? ""), set_text(text_1, get(context).itemStatus ?? "");
  }), append($$anchor, fragment), pop();
}
__name(SubclassSheet, "SubclassSheet");
var root_1$I = /* @__PURE__ */ template("<span> </span>"), root$1c = /* @__PURE__ */ template('<header class="sheet-header flexrow gap"><!> <div class="header-details flexrow small-gap"><h1 class="charname"><!></h1> <div class="item-subtitle"><h4 class="item-type"> </h4></div> <ul class="summary flexrow"><li> </li> <li><!></li> <li class="flex-row"><!></li></ul> <!></div></header> <!> <section class="tidy-sheet-body"><!></section>', 1);
function ToolSheet($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getItemSheetContext), appId = /* @__PURE__ */ derived(() => get(context).document.id), selectedTabId = state("");
  const localize = FoundryAdapter.localize;
  var fragment = root$1c(), header = first_child(fragment), node = child(header);
  ItemProfilePicture(node, {});
  var div = sibling(node, 2), h1 = child(div), node_1 = child(h1);
  ItemIdentifiableName(node_1, {});
  var div_1 = sibling(h1, 2), h4 = child(div_1), text2 = child(h4), ul = sibling(div_1, 2), li = child(ul), text_1 = child(li), li_1 = sibling(li, 2), node_2 = child(li_1);
  {
    var consequent = /* @__PURE__ */ __name(($$anchor2) => {
      var span = root_1$I(), text_2 = child(span);
      template_effect(() => set_text(text_2, localize("DND5E.Unidentified.Title"))), append($$anchor2, span);
    }, "consequent"), alternate = /* @__PURE__ */ __name(($$anchor2) => {
      var disabled = /* @__PURE__ */ derived(() => !get(context).editable);
      Select($$anchor2, {
        get id() {
          return `${get(appId) ?? ""}-rarity`;
        },
        get document() {
          return get(context).item;
        },
        field: "system.rarity",
        class: "item-rarity",
        get value() {
          return get(context).system.rarity;
        },
        get disabled() {
          return get(disabled);
        },
        blankValue: "",
        children: /* @__PURE__ */ __name(($$anchor3, $$slotProps) => {
          SelectOptions($$anchor3, {
            get data() {
              return get(context).config.itemRarity;
            },
            blank: ""
          });
        }, "children"),
        $$slots: { default: !0 }
      });
    }, "alternate");
    if_block(node_2, ($$render) => {
      get(context).concealDetails ? $$render(consequent) : $$render(alternate, !1);
    });
  }
  var li_2 = sibling(li_1, 2), node_3 = child(li_2), editable = /* @__PURE__ */ derived(() => get(context).editable && !get(context).concealDetails);
  Source(node_3, {
    get document() {
      return get(context).item;
    },
    keyPath: "system.source",
    get editable() {
      return get(editable);
    }
  });
  var node_4 = sibling(ul, 2);
  ItemHeaderToggles(node_4, {});
  var node_5 = sibling(header, 2);
  Tabs(node_5, {
    get tabs() {
      return get(context).tabs;
    },
    get sheet() {
      return get(context).item.sheet;
    },
    get selectedTabId() {
      return get(selectedTabId);
    },
    set selectedTabId($$value) {
      set(selectedTabId, proxy($$value));
    }
  });
  var section = sibling(node_5, 2), node_6 = child(section);
  TabContents(node_6, {
    get tabs() {
      return get(context).tabs;
    },
    get selectedTabId() {
      return get(selectedTabId);
    }
  }), template_effect(() => {
    set_attribute(div, "data-tidy-sheet-part", CONSTANTS.SHEET_PARTS.NAME_HEADER_ROW), set_attribute(h1, "data-tidy-sheet-part", CONSTANTS.SHEET_PARTS.NAME_CONTAINER), set_text(text2, get(context).itemType ?? ""), set_text(text_1, get(context).system.type.label);
  }), append($$anchor, fragment), pop();
}
__name(ToolSheet, "ToolSheet");
var root_1$H = /* @__PURE__ */ template("<span> </span>"), root$1b = /* @__PURE__ */ template('<header class="sheet-header flexrow gap"><!> <div class="header-details flexrow small-gap"><h1 class="charname"><!></h1> <div class="item-subtitle"><h4 class="item-type"> </h4></div> <ul class="summary flexrow"><li> </li> <li><!></li> <li class="flex-row"><!></li></ul> <!></div></header> <!> <section class="tidy-sheet-body"><!></section>', 1);
function WeaponSheet($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getItemSheetContext), appId = /* @__PURE__ */ derived(() => get(context).document.id), selectedTabId = state("");
  const localize = FoundryAdapter.localize;
  var fragment = root$1b(), header = first_child(fragment), node = child(header);
  ItemProfilePicture(node, {});
  var div = sibling(node, 2), h1 = child(div), node_1 = child(h1);
  ItemIdentifiableName(node_1, {});
  var div_1 = sibling(h1, 2), h4 = child(div_1), text2 = child(h4), ul = sibling(div_1, 2), li = child(ul), text_1 = child(li), li_1 = sibling(li, 2), node_2 = child(li_1);
  {
    var consequent = /* @__PURE__ */ __name(($$anchor2) => {
      var span = root_1$H(), text_2 = child(span);
      template_effect(() => set_text(text_2, localize("DND5E.Unidentified.Title"))), append($$anchor2, span);
    }, "consequent"), alternate = /* @__PURE__ */ __name(($$anchor2) => {
      var disabled = /* @__PURE__ */ derived(() => !get(context).editable);
      Select($$anchor2, {
        get id() {
          return `${get(appId) ?? ""}-rarity`;
        },
        get document() {
          return get(context).item;
        },
        field: "system.rarity",
        class: "item-rarity",
        get value() {
          return get(context).system.rarity;
        },
        get disabled() {
          return get(disabled);
        },
        blankValue: "",
        children: /* @__PURE__ */ __name(($$anchor3, $$slotProps) => {
          SelectOptions($$anchor3, {
            get data() {
              return get(context).config.itemRarity;
            },
            blank: ""
          });
        }, "children"),
        $$slots: { default: !0 }
      });
    }, "alternate");
    if_block(node_2, ($$render) => {
      get(context).concealDetails ? $$render(consequent) : $$render(alternate, !1);
    });
  }
  var li_2 = sibling(li_1, 2), node_3 = child(li_2), editable = /* @__PURE__ */ derived(() => get(context).editable && !get(context).concealDetails);
  Source(node_3, {
    get document() {
      return get(context).item;
    },
    keyPath: "system.source",
    get editable() {
      return get(editable);
    }
  });
  var node_4 = sibling(ul, 2);
  ItemHeaderToggles(node_4, {});
  var node_5 = sibling(header, 2);
  Tabs(node_5, {
    get tabs() {
      return get(context).tabs;
    },
    get sheet() {
      return get(context).item.sheet;
    },
    get selectedTabId() {
      return get(selectedTabId);
    },
    set selectedTabId($$value) {
      set(selectedTabId, proxy($$value));
    }
  });
  var section = sibling(node_5, 2), node_6 = child(section);
  TabContents(node_6, {
    get tabs() {
      return get(context).tabs;
    },
    get selectedTabId() {
      return get(selectedTabId);
    }
  }), template_effect(() => {
    set_attribute(div, "data-tidy-sheet-part", CONSTANTS.SHEET_PARTS.NAME_HEADER_ROW), set_attribute(h1, "data-tidy-sheet-part", CONSTANTS.SHEET_PARTS.NAME_CONTAINER), set_text(text2, get(context).itemType ?? ""), set_text(text_1, get(context).system.type.label);
  }), append($$anchor, fragment), pop();
}
__name(WeaponSheet, "WeaponSheet");
var root$1a = /* @__PURE__ */ template('<header class="sheet-header flexrow gap"><!> <div class="header-details flexrow small-gap"><h1 class="charname"><!></h1> <div class="item-subtitle"><h4 class="item-type"> </h4> <span class="item-status"> </span></div> <ul class="summary flexrow"><li class="flex-row"><!></li></ul></div></header> <!> <section class="tidy-sheet-body"><!></section>', 1);
function SpeciesSheet($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getItemSheetContext), appId = /* @__PURE__ */ derived(() => get(context).document.id), selectedTabId = state("");
  const localize = FoundryAdapter.localize;
  var fragment = root$1a(), header = first_child(fragment), node = child(header);
  ItemProfilePicture(node, {});
  var div = sibling(node, 2), h1 = child(div), node_1 = child(h1), attributes = /* @__PURE__ */ derived(() => ({
    "data-tidy-item-name": get(context).item.name
  })), placeholder = /* @__PURE__ */ derived(() => localize("DND5E.ClassName")), disabled = /* @__PURE__ */ derived(() => !get(context).editable);
  TextInput(node_1, {
    get id() {
      return `${get(appId) ?? ""}-name`;
    },
    field: "name",
    get document() {
      return get(context).item;
    },
    get value() {
      return get(context).item.name;
    },
    get attributes() {
      return get(attributes);
    },
    get placeholder() {
      return get(placeholder);
    },
    get disabled() {
      return get(disabled);
    },
    get title() {
      return get(context).item.name;
    }
  });
  var div_1 = sibling(h1, 2), h4 = child(div_1), text2 = child(h4), span = sibling(h4, 2), text_1 = child(span), ul = sibling(div_1, 2), li = child(ul), node_2 = child(li);
  Source(node_2, {
    get document() {
      return get(context).item;
    },
    keyPath: "system.source",
    get editable() {
      return get(context).editable;
    }
  });
  var node_3 = sibling(header, 2);
  Tabs(node_3, {
    get tabs() {
      return get(context).tabs;
    },
    get sheet() {
      return get(context).item.sheet;
    },
    get selectedTabId() {
      return get(selectedTabId);
    },
    set selectedTabId($$value) {
      set(selectedTabId, proxy($$value));
    }
  });
  var section = sibling(node_3, 2), node_4 = child(section);
  TabContents(node_4, {
    get tabs() {
      return get(context).tabs;
    },
    get selectedTabId() {
      return get(selectedTabId);
    }
  }), template_effect(() => {
    set_attribute(div, "data-tidy-sheet-part", CONSTANTS.SHEET_PARTS.NAME_HEADER_ROW), set_attribute(h1, "data-tidy-sheet-part", CONSTANTS.SHEET_PARTS.NAME_CONTAINER), set_text(text2, get(context).itemType ?? ""), set_text(text_1, get(context).itemStatus ?? "");
  }), append($$anchor, fragment), pop();
}
__name(SpeciesSheet, "SpeciesSheet");
class ItemSheetRuntime {
  static {
    __name(this, "ItemSheetRuntime");
  }
  static _content = [];
  static _customTabs = [];
  static _customItemEquipmentTypeGroups = [];
  static async getContent(context) {
    return await CustomContentManager.prepareContentForRender(
      context,
      ItemSheetRuntime._content
    );
  }
  static registerContent(registeredContent) {
    this._content.push(registeredContent);
  }
  static registerTab(tab) {
    ItemSheetRuntime._customTabs.push(tab);
  }
  static getCustomItemTabs(context) {
    return ItemSheetRuntime._customTabs.filter(
      (s2) => s2.enabled === void 0 || s2.enabled(context)
    );
  }
  static sheets = {
    [CONSTANTS.ITEM_TYPE_BACKGROUND]: {
      Sheet: BackgroundSheet,
      defaultTabs: /* @__PURE__ */ __name(() => [
        itemSheetTabs.description,
        itemSheetTabs.backgroundDetails,
        itemSheetTabs.advancement
      ], "defaultTabs")
    },
    [CONSTANTS.ITEM_TYPE_CLASS]: {
      Sheet: ClassSheet,
      defaultTabs: /* @__PURE__ */ __name(() => [
        itemSheetTabs.description,
        itemSheetTabs.classDetails,
        itemSheetTabs.advancement
      ], "defaultTabs")
    },
    [CONSTANTS.ITEM_TYPE_CONSUMABLE]: {
      Sheet: ConsumableSheet,
      defaultTabs: /* @__PURE__ */ __name(() => [
        itemSheetTabs.descriptionWithSidebar,
        itemSheetTabs.consumableDetails,
        itemSheetTabs.activities,
        itemSheetTabs.effects
      ], "defaultTabs")
    },
    [CONSTANTS.ITEM_TYPE_CONTAINER]: {
      Sheet: ContainerSheet$1,
      defaultTabs: /* @__PURE__ */ __name(() => [
        itemSheetTabs.containerContents,
        itemSheetTabs.descriptionWithSidebar,
        itemSheetTabs.containerDetails
      ], "defaultTabs"),
      tempHightouchTabs: /* @__PURE__ */ __name(() => [
        itemSheetTabs.hightouchContainerContents,
        itemSheetTabs.hightouchDescription,
        // TODO: Only show to GMs and users when identified
        itemSheetTabs.hightouchContainerDetails
      ], "tempHightouchTabs")
    },
    [CONSTANTS.ITEM_TYPE_EQUIPMENT]: {
      Sheet: EquipmentSheet,
      defaultTabs: /* @__PURE__ */ __name(() => [
        itemSheetTabs.descriptionWithSidebar,
        itemSheetTabs.equipmentDetails,
        itemSheetTabs.activities,
        itemSheetTabs.effects
      ], "defaultTabs")
    },
    [CONSTANTS.ITEM_TYPE_FACILITY]: {
      Sheet: FacilitySheet,
      defaultTabs: /* @__PURE__ */ __name(() => [
        itemSheetTabs.description,
        itemSheetTabs.facilityDetails,
        itemSheetTabs.activities
      ], "defaultTabs")
    },
    [CONSTANTS.ITEM_TYPE_FEAT]: {
      Sheet: FeatSheet,
      defaultTabs: /* @__PURE__ */ __name(() => [
        itemSheetTabs.descriptionWithSidebar,
        itemSheetTabs.featDetails,
        itemSheetTabs.activities,
        itemSheetTabs.effects
      ], "defaultTabs")
    },
    [CONSTANTS.ITEM_TYPE_LOOT]: {
      Sheet: LootSheet,
      defaultTabs: /* @__PURE__ */ __name(() => [
        itemSheetTabs.descriptionWithSidebar,
        itemSheetTabs.lootDetails
      ], "defaultTabs")
    },
    [CONSTANTS.ITEM_TYPE_SPELL]: {
      Sheet: SpellSheet,
      defaultTabs: /* @__PURE__ */ __name(() => [
        itemSheetTabs.descriptionWithSidebar,
        itemSheetTabs.spellDetails,
        itemSheetTabs.activities,
        itemSheetTabs.effects
      ], "defaultTabs")
    },
    [CONSTANTS.ITEM_TYPE_SUBCLASS]: {
      Sheet: SubclassSheet,
      defaultTabs: /* @__PURE__ */ __name(() => [
        itemSheetTabs.description,
        itemSheetTabs.subclassDetails,
        itemSheetTabs.advancement
      ], "defaultTabs")
    },
    [CONSTANTS.ITEM_TYPE_TOOL]: {
      Sheet: ToolSheet,
      defaultTabs: /* @__PURE__ */ __name(() => [
        itemSheetTabs.descriptionWithSidebar,
        itemSheetTabs.toolDetails,
        itemSheetTabs.activities,
        itemSheetTabs.effects
      ], "defaultTabs")
    },
    [CONSTANTS.ITEM_TYPE_WEAPON]: {
      Sheet: WeaponSheet,
      defaultTabs: /* @__PURE__ */ __name(() => [
        itemSheetTabs.descriptionWithSidebar,
        itemSheetTabs.weaponDetails,
        itemSheetTabs.activities,
        itemSheetTabs.effects
      ], "defaultTabs")
    },
    [CONSTANTS.ITEM_TYPE_RACE]: {
      Sheet: SpeciesSheet,
      defaultTabs: /* @__PURE__ */ __name(() => [
        itemSheetTabs.speciesDescription,
        itemSheetTabs.speciesDetails,
        itemSheetTabs.advancement
      ], "defaultTabs")
    }
  };
  static registerCustomEquipmentTypeGroup(group) {
    this._customItemEquipmentTypeGroups.push(group);
  }
  static getCustomEquipmentTypeGroups() {
    return [...this._customItemEquipmentTypeGroups];
  }
  static getTabTitle(tabId) {
    try {
      let tabTitle = [...this._customTabs, ...Object.values(itemSheetTabs)].find((t2) => t2.id === tabId)?.title;
      return typeof tabTitle == "function" && (tabTitle = tabTitle()), tabTitle ? FoundryAdapter.localize(tabTitle) : tabId;
    } catch (e2) {
      error("An error occurred while searching for a tab title.", !1, e2), debug("Tab title error troubleshooting information", { tabId });
    }
  }
}
class ItemConfigApi {
  static {
    __name(this, "ItemConfigApi");
  }
  /**
   * Registers a custom group of equipment types, to be rendered on the item sheet as their own section of options within the Equipment Type input.
   *
   * @param group the group to add
   *
   * @example Registering custom helmets
   * ```js
   * Hooks.once('tidy5e-sheet.ready', (api) => {
   *   api.config.item.registerCustomEquipmentTypeGroup({
   *     label: 'Helmet',
   *     types: {
   *       clothhat: 'Clothings Helmet',
   *       lighthat: 'Light Helmet',
   *       mediumhat: 'Medium Helmet',
   *       heavyhat: 'Heavy Helmet',
   *     },
   *   });
   * });
   * ```
   */
  registerCustomEquipmentTypeGroup(group) {
    ItemSheetRuntime.registerCustomEquipmentTypeGroup(group);
  }
}
class ConfigApi {
  static {
    __name(this, "ConfigApi");
  }
  /** {@inheritDoc ActionListApi} */
  actionList = new ActionListApi();
  /** {@inheritDoc ActorItemApi} */
  actorItem = new ActorItemApi();
  /** {@inheritDoc ActorPortraitApi} */
  actorPortrait = new ActorPortraitApi();
  /** {@inheritDoc ActorTraitsApi} */
  actorTraits = new ActorTraitsApi();
  /** {@inheritDoc ExhaustionApi} */
  exhaustion = new ExhaustionApi();
  /** {@inheritDoc ItemConfigApi} */
  item = new ItemConfigApi();
  /** {@inheritDoc ItemSummaryApi} */
  itemSummary = new ItemSummaryApi();
  /**{@inheritDoc SpellSchoolApi} */
  spellSchool = new SpellSchoolApi();
}
class HtmlContent extends CustomContentBase {
  static {
    __name(this, "HtmlContent");
  }
  injectParams;
  /**
   * The HTML to be injected into the sheet.
   */
  html = "";
  renderScheme = "handlebars";
  _activateDefaultSheetListeners = !1;
  get activateDefaultSheetListeners() {
    return this._activateDefaultSheetListeners;
  }
  set activateDefaultSheetListeners(value) {
    warn(
      "Tidy is moving to Application V2, and there will no longer be any default sheet listeners. Be sure to provide your own event handling for the content that is injected."
    ), this._activateDefaultSheetListeners = value;
  }
  constructor(props) {
    super();
    const merged = foundry.utils.mergeObject(this, props);
    Object.assign(this, merged);
  }
  onContentReady;
  enabled;
  onRender;
}
var on_click$t = /* @__PURE__ */ __name((_, context, $$props) => get(context).actor.system.removeMember($$props.member.id), "on_click$t"), root$19 = /* @__PURE__ */ template('<button type="button" class="inline-icon-button"><i class="fas fa-xmark"></i></button>');
function RemoveMemberControl($$anchor, $$props) {
  push($$props, !0);
  const context = /* @__PURE__ */ derived(getGroupSheetClassicContext), localize = FoundryAdapter.localize;
  var button = root$19();
  button.__click = [on_click$t, context, $$props], template_effect(() => set_attribute(button, "title", localize("TIDY5E.Group.RemoveMemberFromGroup"))), template_effect(() => set_attribute(button, "tabindex", settings.value.useAccessibleKeyboardSupport ? 0 : -1)), append($$anchor, button), pop();
}
__name(RemoveMemberControl, "RemoveMemberControl");
delegate(["click"]);
var root$18 = /* @__PURE__ */ template(`<div><div class="ac-shield svelte-14lgvaq"><svg version="1.1" x="0px" y="0px" viewBox="0 0 90 100" xml:space="preserve" class="svelte-14lgvaq"><path d="M45,100C-2.6,79.3,0,12.6,0,12.6c0-2.2,1.8-4,4.4-4.6l39.1-7.9C44,0,44.5,0,45,0c0.5,0,1,0,1.4,0.1L85.5,8
                  c2.6,0.5,4.4,2.4,4.4,4.6C90,12.6,92.6,79.3,45,100L45,100z" class="svelte-14lgvaq"></path></svg></div> <!></div>`);
function AcShieldBase($$anchor, $$props) {
  push($$props, !0);
  let cssClass = prop($$props, "cssClass", 3, "");
  var div = root$18(), node = sibling(child(div), 2);
  snippet(node, () => $$props.children ?? noop), template_effect(() => set_class(div, `ac-display ${cssClass() ?? ""} svelte-14lgvaq`)), append($$anchor, div), pop();
}
__name(AcShieldBase, "AcShieldBase");
var on_click$s = /* @__PURE__ */ __name((_, $$props) => FoundryAdapter.renderImagePopout($$props.member.img, {
  title: FoundryAdapter.localize("TIDY5E.PortraitTitle", { subject: $$props.member.name }),
  shareable: !0,
  uuid: $$props.member.uuid
}), "on_click$s"), root_1$G = /* @__PURE__ */ template('<div class="member-list-item-hp-bar"><!></div>'), root$17 = /* @__PURE__ */ template('<div role="presentation" class="member-list-item-image-wrapper"><button class="transparent-button" type="button"><img class="member-list-item-image"></button> <!></div>');
function GroupMemberListItemProfile($$anchor, $$props) {
  push($$props, !0);
  const localize = FoundryAdapter.localize;
  var div = root$17(), button = child(div);
  button.__click = [on_click$s, $$props];
  var img = child(button), node = sibling(button, 2);
  {
    var consequent = /* @__PURE__ */ __name(($$anchor2) => {
      var div_1 = root_1$G(), node_1 = child(div_1), valueTitle = /* @__PURE__ */ derived(() => localize("DND5E.HitPointsCurrent")), maxTitle = /* @__PURE__ */ derived(() => localize("DND5E.HitPointsMax")), percentage = /* @__PURE__ */ derived(() => getPercentage($$props.member.system.attributes.hp.value, $$props.member.system.attributes.hp.max));
      ResourceWithBar(node_1, {
        get document() {
          return $$props.member;
        },
        get value() {
          return $$props.member.system.attributes.hp.value;
        },
        valueField: "system.attributes.hp.value",
        get valueTitle() {
          return get(valueTitle);
        },
        valueDisabled: !0,
        get max() {
          return $$props.member.system.attributes.hp.max;
        },
        maxField: "system.attributes.hp.max",
        get maxTitle() {
          return get(maxTitle);
        },
        maxDisabled: !0,
        get percentage() {
          return get(percentage);
        },
        Bar: HpBar
      }), append($$anchor2, div_1);
    }, "consequent");
    if_block(node, ($$render) => {
      $$props.showHp && $$render(consequent);
    });
  }
  template_effect(() => {
    set_attribute(button, "tabindex", settings.value.useAccessibleKeyboardSupport ? 0 : -1), set_attribute(img, "src", $$props.member.img), set_attribute(img, "alt", $$props.member.name), set_attribute(img, "data-tidy-sheet-part", CONSTANTS.SHEET_PARTS.GROUP_MEMBER_PORTRAIT);
  }), append($$anchor, div), pop();
}
__name(GroupMemberListItemProfile, "GroupMemberListItemProfile");
delegate(["click"]);
var on_click$r = /* @__PURE__ */ __name((_, $$props) => $$props.member.sheet.render(!0), "on_click$r"), root_3$h = /* @__PURE__ */ template('<span class="ac-value"> </span>'), root_5$b = /* @__PURE__ */ template("<i> </i>"), root_6$4 = /* @__PURE__ */ template('<div class="flex-row extra-small-gap"><span><i class="fas fa-shield-virus fa-fw text-body-secondary"></i></span> <span> </span></div>'), on_click_1$d = /* @__PURE__ */ __name((event2, onPerceptionClicked) => onPerceptionClicked(event2), "on_click_1$d"), root_7$8 = /* @__PURE__ */ template('<button type="button" class="skill"> </button>'), root_8$9 = /* @__PURE__ */ template('<span class="skill"> </span>'), root_2$i = /* @__PURE__ */ template('<div class="flex-row extra-small-gap"><!> <div class="flex-1"><div class="flex-row extra-small-gap"><span><i class="fas fa-eye fa-fw text-body-secondary"></i></span> <span><!></span></div> <!></div></div> <div class="flex-row flex-wrap skills"><!> <!></div>', 1), root$16 = /* @__PURE__ */ template('<div class="group-member-list-item flex-row small-gap align-items-flex-start" data-member-drag=""><!> <div class="flex-column extra-small-gap flex-1 align-self-center"><div class="flex-row small-gap align-items-center justify-content-space-between"><button type="button" class="inline-transparent-button highlight-on-hover ff-title fs-lg"> </button> <!></div> <!></div></div>');
function GroupMemberListItem($$anchor, $$props) {
  push($$props, !0);
  const context = /* @__PURE__ */ derived(getGroupSheetClassicContext), localize = FoundryAdapter.localize;
  function onPerceptionClicked(event2) {
    $$props.ctx.perception && $$props.member.rollSkill({ skill: $$props.ctx.perception.key, event: event2 }, {
      options: {
        default: { rollMode: CONST.DICE_ROLL_MODES.BLIND }
      }
    });
  }
  __name(onPerceptionClicked, "onPerceptionClicked");
  var div = root$16(), node = child(div);
  GroupMemberListItemProfile(node, {
    get member() {
      return $$props.member;
    },
    get showHp() {
      return $$props.ctx.canObserve;
    }
  });
  var div_1 = sibling(node, 2), div_2 = child(div_1), button = child(div_2);
  button.__click = [on_click$r, $$props];
  var text$1 = child(button), node_1 = sibling(button, 2);
  {
    var consequent = /* @__PURE__ */ __name(($$anchor2) => {
      RemoveMemberControl($$anchor2, {
        get member() {
          return $$props.member;
        }
      });
    }, "consequent");
    if_block(node_1, ($$render) => {
      get(context).unlocked && $$render(consequent);
    });
  }
  var node_2 = sibling(div_2, 2);
  {
    var consequent_4 = /* @__PURE__ */ __name(($$anchor2) => {
      var fragment_1 = root_2$i(), div_3 = first_child(fragment_1), node_3 = child(div_3);
      AcShieldBase(node_3, {
        cssClass: "group-ac-shield",
        children: /* @__PURE__ */ __name(($$anchor3, $$slotProps) => {
          var span = root_3$h(), text_1 = child(span);
          template_effect(() => set_text(text_1, $$props.member.system.attributes.ac.value)), append($$anchor3, span);
        }, "children"),
        $$slots: { default: !0 }
      });
      var div_4 = sibling(node_3, 2), div_5 = child(div_4), span_1 = child(div_5), i2 = child(span_1);
      template_effect(() => set_attribute(i2, "title", localize("DND5E.Senses")));
      var span_2 = sibling(span_1, 2), node_4 = child(span_2);
      {
        var consequent_1 = /* @__PURE__ */ __name(($$anchor3) => {
          var text_2 = text();
          template_effect(() => set_text(text_2, $$props.ctx.senses.join(", "))), append($$anchor3, text_2);
        }, "consequent_1"), alternate = /* @__PURE__ */ __name(($$anchor3) => {
          var i_1 = root_5$b(), text_3 = child(i_1);
          template_effect(() => set_text(text_3, localize("TIDY5E.NoSpecialSenses"))), append($$anchor3, i_1);
        }, "alternate");
        if_block(node_4, ($$render) => {
          $$props.ctx.senses.length ? $$render(consequent_1) : $$render(alternate, !1);
        });
      }
      var node_5 = sibling(div_5, 2);
      {
        var consequent_2 = /* @__PURE__ */ __name(($$anchor3) => {
          var div_6 = root_6$4(), span_3 = child(div_6), i_2 = child(span_3);
          template_effect(() => set_attribute(i_2, "title", localize("DND5E.ConImm")));
          var span_4 = sibling(span_3, 2), text_4 = child(span_4);
          template_effect(() => set_text(text_4, $$props.ctx.conditionImmunities.join(", "))), append($$anchor3, div_6);
        }, "consequent_2");
        if_block(node_5, ($$render) => {
          $$props.ctx.conditionImmunities.length && $$render(consequent_2);
        });
      }
      var div_7 = sibling(div_3, 2), node_6 = child(div_7);
      {
        var consequent_3 = /* @__PURE__ */ __name(($$anchor3) => {
          var button_1 = root_7$8();
          button_1.__click = [on_click_1$d, onPerceptionClicked];
          var text_5 = child(button_1);
          template_effect(() => set_text(text_5, `${localize($$props.ctx.perception?.label ?? "") ?? ""}
            ${$$props.ctx.perception?.formattedTotal ?? ""} (${$$props.ctx.perception?.passive ?? ""})`)), template_effect(() => {
            button_1.disabled = !get(context).isGM, set_attribute(button_1, "tabindex", settings.value.useAccessibleKeyboardSupport ? 0 : -1);
          }), append($$anchor3, button_1);
        }, "consequent_3");
        if_block(node_6, ($$render) => {
          $$props.ctx.perception && $$render(consequent_3);
        });
      }
      var node_7 = sibling(node_6, 2);
      each(node_7, 17, () => $$props.ctx.topSkills, (skill) => skill.key, ($$anchor3, skill) => {
        var span_5 = root_8$9(), text_6 = child(span_5);
        template_effect(() => set_text(text_6, `${localize(get(skill)?.label ?? "") ?? ""}
            ${get(skill)?.formattedTotal ?? ""}`)), append($$anchor3, span_5);
      }), append($$anchor2, fragment_1);
    }, "consequent_4");
    if_block(node_2, ($$render) => {
      $$props.ctx.canObserve && $$render(consequent_4);
    });
  }
  template_effect(() => {
    set_attribute(div, "data-member-id", $$props.member.id), set_attribute(div, "data-context-menu", CONSTANTS.CONTEXT_MENU_TYPE_GROUP_MEMBER), button.disabled = !$$props.ctx.canObserve, set_attribute(button, "tabindex", settings.value.useAccessibleKeyboardSupport ? 0 : -1), set_text(text$1, $$props.member.name);
  }), append($$anchor, div), pop();
}
__name(GroupMemberListItem, "GroupMemberListItem");
delegate(["click"]);
var root_6$3 = /* @__PURE__ */ template("<!> <!>", 1), root_4$9 = /* @__PURE__ */ template('<div class="flex-column small-gap mt-2"></div>');
function GroupMemberList($$anchor, $$props) {
  push($$props, !0);
  const searchResults = getSearchResultsContext(), context = /* @__PURE__ */ derived(getGroupSheetClassicContext), memberEntries = /* @__PURE__ */ derived(() => $$props.section.members.map((member) => ({ member }))), localize = FoundryAdapter.localize;
  var data_custom_section = /* @__PURE__ */ derived(() => $$props.section.custom ? !0 : null);
  TidyTable($$anchor, {
    get key() {
      return $$props.section.key;
    },
    get "data-custom-section"() {
      return get(data_custom_section);
    },
    header: /* @__PURE__ */ __name(($$anchor2) => {
      TidyTableHeaderRow($$anchor2, {
        children: /* @__PURE__ */ __name(($$anchor3, $$slotProps) => {
          TidyTableHeaderCell($$anchor3, {
            primary: !0,
            children: /* @__PURE__ */ __name(($$anchor4, $$slotProps2) => {
              var text$1 = text();
              template_effect(() => set_text(text$1, localize($$props.section.label))), append($$anchor4, text$1);
            }, "children"),
            $$slots: { default: !0 }
          });
        }, "children"),
        $$slots: { default: !0 }
      });
    }, "header"),
    body: /* @__PURE__ */ __name(($$anchor2) => {
      var div = root_4$9();
      each(div, 23, () => get(memberEntries), ({ member }) => member.uuid, ($$anchor3, $$item, index2) => {
        let member = /* @__PURE__ */ __name(() => get($$item).member, "member");
        var fragment_4 = comment(), node = first_child(fragment_4);
        {
          var consequent_1 = /* @__PURE__ */ __name(($$anchor4) => {
            var fragment_5 = root_6$3(), node_1 = first_child(fragment_5);
            GroupMemberListItem(node_1, {
              get member() {
                return member();
              },
              get ctx() {
                return get(context).memberContext[member().id];
              }
            });
            var node_2 = sibling(node_1, 2);
            {
              var consequent = /* @__PURE__ */ __name(($$anchor5) => {
                HorizontalLineSeparator($$anchor5, { class: "mx-1", borderColor: "separator" });
              }, "consequent");
              if_block(node_2, ($$render) => {
                $$props.section.members.length > 1 && get(index2) !== $$props.section.members.length - 1 && $$render(consequent);
              });
            }
            append($$anchor4, fragment_5);
          }, "consequent_1");
          if_block(node, ($$render) => {
            searchResults.show(member().uuid) && $$render(consequent_1);
          });
        }
        append($$anchor3, fragment_4);
      }), append($$anchor2, div);
    }, "body"),
    $$slots: { header: !0, body: !0 }
  }), pop();
}
__name(GroupMemberList, "GroupMemberList");
class GroupSheetSections {
  static {
    __name(this, "GroupSheetSections");
  }
  static configureMemberSections(sections, tabId, sheetPreferences) {
    try {
      const sortMode = sheetPreferences.tabs?.[tabId]?.sort ?? "m";
      sortMode === "a" && sections.forEach((section) => {
        ItemUtils.sortItems(section.members, sortMode);
      });
    } catch (e2) {
      error("An error occurred while configuring group members", !1, e2);
    }
    return sections;
  }
}
var on_click$q = /* @__PURE__ */ __name((_, context) => get(context).actor.system.rollQuantities(), "on_click$q"), root_4$8 = /* @__PURE__ */ template('<span> </span>&nbsp; <button type="button" class="inline-icon-button"><i class="fas fa-dice"></i></button>', 1), root_2$h = /* @__PURE__ */ template("<!> <!> <!> <!> <!>", 1), on_click_1$c = /* @__PURE__ */ __name((__1, member) => FoundryAdapter.renderImagePopout(member().img, {
  title: FoundryAdapter.localize("TIDY5E.PortraitTitle", { subject: member().name }),
  shareable: !0,
  uuid: member().uuid
}), "on_click_1$c"), on_click_2$4 = /* @__PURE__ */ __name((__2, member) => member().sheet.render(!0), "on_click_2$4"), root_11$3 = /* @__PURE__ */ template('<button type="button" class="inline-transparent-button"><img class="encounter-member-list-item-image"></button> <button type="button" class="encounter-member-name transparent-button highlight-on-hover"> </button>', 1), root_17 = /* @__PURE__ */ template('&nbsp;—&nbsp; <span class="text-body semibold"> </span>&nbsp; <abbr> </abbr>', 1), root_16 = /* @__PURE__ */ template('<abbr class="text-body-secondary"> </abbr>&nbsp; <span class="text-body semibold"> </span> <!>', 1), root_10$4 = /* @__PURE__ */ template("<!> <!> <!> <!> <!>", 1), root_7$7 = /* @__PURE__ */ template('<div class="flex-column no-gap"></div>'), root$15 = /* @__PURE__ */ template('<section class="encounter-member-list-section"><!></section>');
function EncounterMemberList($$anchor, $$props) {
  push($$props, !0);
  const searchResults = getSearchResultsContext(), context = /* @__PURE__ */ derived(getGroupSheetClassicContext), memberEntries = /* @__PURE__ */ derived(() => $$props.section.members.map((member) => ({ member }))), localize = FoundryAdapter.localize, classicControlWidthRems = 1.5, classicControls = [
    {
      component: RemoveMemberControl,
      getProps: /* @__PURE__ */ __name((member) => ({ member }), "getProps")
    }
  ];
  let useClassicControls = /* @__PURE__ */ derived(() => FoundryAdapter.useClassicControls(get(context).actor)), classicControlsWidth = /* @__PURE__ */ derived(() => get(useClassicControls) ? `/* Controls */ ${classicControlWidthRems * classicControls.length}rem` : "");
  const crColumnDef = $$props.section.showCrColumn ? "/* CR */ 7rem" : "";
  let gridTemplateColumns = /* @__PURE__ */ derived(() => `
    /* Image and name */ 1fr 
    /* Quantity */ 5rem 
    /* Formula */ 7rem 
    ${crColumnDef} 
    ${get(classicControlsWidth)}`);
  function saveQuantityChange(context2, ev, memberActorId) {
    return context2.actor.sheet.updateMemberQuantity(memberActorId, ev), !1;
  }
  __name(saveQuantityChange, "saveQuantityChange");
  function saveFormulaChange(context2, ev, memberActorId) {
    return context2.actor.sheet.updateMemberFormula(memberActorId, ev), !1;
  }
  __name(saveFormulaChange, "saveFormulaChange");
  var section_1 = root$15(), node = child(section_1), data_custom_section = /* @__PURE__ */ derived(() => $$props.section.custom ? !0 : null);
  TidyTable(node, {
    get key() {
      return $$props.section.key;
    },
    get "data-custom-section"() {
      return get(data_custom_section);
    },
    get gridTemplateColumns() {
      return get(gridTemplateColumns);
    },
    header: /* @__PURE__ */ __name(($$anchor2) => {
      TidyTableHeaderRow($$anchor2, {
        children: /* @__PURE__ */ __name(($$anchor3, $$slotProps) => {
          var fragment_1 = root_2$h(), node_1 = first_child(fragment_1);
          TidyTableHeaderCell(node_1, {
            primary: !0,
            children: /* @__PURE__ */ __name(($$anchor4, $$slotProps2) => {
              var text$1 = text();
              template_effect(() => set_text(text$1, localize($$props.section.label))), append($$anchor4, text$1);
            }, "children"),
            $$slots: { default: !0 }
          });
          var node_2 = sibling(node_1, 2);
          TidyTableHeaderCell(node_2, {
            children: /* @__PURE__ */ __name(($$anchor4, $$slotProps2) => {
              var fragment_3 = root_4$8(), span = first_child(fragment_3), text_1 = child(span);
              template_effect(() => set_text(text_1, localize("DND5E.QuantityAbbr")));
              var button = sibling(span, 2);
              template_effect(() => set_attribute(button, "title", localize("DND5E.QuantityRoll"))), button.__click = [on_click$q, context], template_effect(() => set_attribute(button, "tabindex", settings.value.useAccessibleKeyboardSupport ? 0 : -1)), append($$anchor4, fragment_3);
            }, "children"),
            $$slots: { default: !0 }
          });
          var node_3 = sibling(node_2, 2);
          TidyTableHeaderCell(node_3, {});
          var node_4 = sibling(node_3, 2);
          {
            var consequent = /* @__PURE__ */ __name(($$anchor4) => {
              TidyTableHeaderCell($$anchor4, {
                children: /* @__PURE__ */ __name(($$anchor5, $$slotProps2) => {
                  var text_2 = text();
                  template_effect(() => set_text(text_2, localize("DND5E.Group.Challenge"))), append($$anchor5, text_2);
                }, "children"),
                $$slots: { default: !0 }
              });
            }, "consequent");
            if_block(node_4, ($$render) => {
              $$props.section.showCrColumn && $$render(consequent);
            });
          }
          var node_5 = sibling(node_4, 2);
          TidyTableHeaderCell(node_5, {}), append($$anchor3, fragment_1);
        }, "children"),
        $$slots: { default: !0 }
      });
    }, "header"),
    body: /* @__PURE__ */ __name(($$anchor2) => {
      var div = root_7$7();
      each(div, 23, () => get(memberEntries), ({ member }) => member.uuid, ($$anchor3, $$item) => {
        let member = /* @__PURE__ */ __name(() => get($$item).member, "member");
        var fragment_6 = comment();
        const ctx = /* @__PURE__ */ derived(() => get(context).memberContext[member().id]);
        var node_6 = first_child(fragment_6);
        {
          var consequent_5 = /* @__PURE__ */ __name(($$anchor4) => {
            var rowContainerAttributes = /* @__PURE__ */ derived(() => ({
              "data-member-drag": "",
              "data-context-menu": CONSTANTS.CONTEXT_MENU_TYPE_GROUP_MEMBER,
              "data-member-id": member().id
            }));
            TidyTableRow($$anchor4, {
              get rowContainerAttributes() {
                return get(rowContainerAttributes);
              },
              children: /* @__PURE__ */ __name(($$anchor5, $$slotProps) => {
                var fragment_8 = root_10$4(), node_7 = first_child(fragment_8);
                TidyTableCell(node_7, {
                  class: "flex-row small-gap",
                  primary: !0,
                  children: /* @__PURE__ */ __name(($$anchor6, $$slotProps2) => {
                    var fragment_9 = root_11$3(), button_1 = first_child(fragment_9);
                    button_1.__click = [on_click_1$c, member];
                    var img = child(button_1), button_2 = sibling(button_1, 2);
                    button_2.__click = [on_click_2$4, member];
                    var text_3 = child(button_2);
                    template_effect(() => {
                      button_1.disabled = !get(ctx).canObserve, set_attribute(button_1, "tabindex", settings.value.useAccessibleKeyboardSupport ? 0 : -1), set_attribute(img, "alt", member().name), set_attribute(img, "src", member().img), set_attribute(img, "data-tidy-sheet-part", CONSTANTS.SHEET_PARTS.GROUP_MEMBER_PORTRAIT), set_attribute(button_2, "tabindex", settings.value.useAccessibleKeyboardSupport ? 0 : -1), set_text(text_3, member().name);
                    }), append($$anchor6, fragment_9);
                  }, "children"),
                  $$slots: { default: !0 }
                });
                var node_8 = sibling(node_7, 2);
                TidyTableCell(node_8, {
                  children: /* @__PURE__ */ __name(($$anchor6, $$slotProps2) => {
                    TextInput($$anchor6, {
                      get document() {
                        return get(context).actor;
                      },
                      get field() {
                        return `system.members.${get(ctx).index ?? ""}.quantity.value`;
                      },
                      get value() {
                        return get(context).system.members[get(ctx).index].quantity.value;
                      },
                      allowDeltaChanges: !0,
                      selectOnFocus: !0,
                      onSaveChange: /* @__PURE__ */ __name((ev) => saveQuantityChange(get(context), ev, member().id), "onSaveChange"),
                      placeholder: "1"
                    });
                  }, "children"),
                  $$slots: { default: !0 }
                });
                var node_9 = sibling(node_8, 2);
                TidyTableCell(node_9, {
                  children: /* @__PURE__ */ __name(($$anchor6, $$slotProps2) => {
                    var placeholder = /* @__PURE__ */ derived(() => localize("DND5E.Formula"));
                    TextInput($$anchor6, {
                      get document() {
                        return get(context).actor;
                      },
                      get field() {
                        return `system.members.${get(ctx).index ?? ""}.quantity.formula`;
                      },
                      get value() {
                        return get(context).system.members[get(ctx).index].quantity.formula;
                      },
                      allowDeltaChanges: !0,
                      selectOnFocus: !0,
                      onSaveChange: /* @__PURE__ */ __name((ev) => saveFormulaChange(get(context), ev, member().id), "onSaveChange"),
                      get placeholder() {
                        return get(placeholder);
                      }
                    });
                  }, "children"),
                  $$slots: { default: !0 }
                });
                var node_10 = sibling(node_9, 2);
                {
                  var consequent_3 = /* @__PURE__ */ __name(($$anchor6) => {
                    TidyTableCell($$anchor6, {
                      children: /* @__PURE__ */ __name(($$anchor7, $$slotProps2) => {
                        var fragment_13 = comment(), node_11 = first_child(fragment_13);
                        {
                          var consequent_2 = /* @__PURE__ */ __name(($$anchor8) => {
                            var fragment_14 = root_16(), abbr = first_child(fragment_14), text_4 = child(abbr);
                            template_effect(() => set_text(text_4, localize("DND5E.AbbreviationCR")));
                            var span_1 = sibling(abbr, 2), text_5 = child(span_1);
                            template_effect(() => set_text(text_5, FoundryAdapter.formatCr(member().system.details.cr)));
                            var node_12 = sibling(span_1, 2);
                            {
                              var consequent_1 = /* @__PURE__ */ __name(($$anchor9) => {
                                var fragment_15 = root_17(), span_2 = sibling(first_child(fragment_15)), text_6 = child(span_2);
                                template_effect(() => set_text(text_6, FoundryAdapter.formatNumber(member().system.details.xp.value * (get(ctx).quantity?.value ?? 1))));
                                var abbr_1 = sibling(span_2, 2), text_7 = child(abbr_1);
                                template_effect(() => set_text(text_7, localize("DND5E.ExperiencePointsAbbr"))), append($$anchor9, fragment_15);
                              }, "consequent_1");
                              if_block(node_12, ($$render) => {
                                get(context).disableExperience || $$render(consequent_1);
                              });
                            }
                            append($$anchor8, fragment_14);
                          }, "consequent_2");
                          if_block(node_11, ($$render) => {
                            member().type === CONSTANTS.SHEET_TYPE_NPC && $$render(consequent_2);
                          });
                        }
                        append($$anchor7, fragment_13);
                      }, "children"),
                      $$slots: { default: !0 }
                    });
                  }, "consequent_3");
                  if_block(node_10, ($$render) => {
                    $$props.section.showCrColumn && $$render(consequent_3);
                  });
                }
                var node_13 = sibling(node_10, 2);
                TidyTableCell(node_13, {
                  children: /* @__PURE__ */ __name(($$anchor6, $$slotProps2) => {
                    var fragment_16 = comment(), node_14 = first_child(fragment_16);
                    {
                      var consequent_4 = /* @__PURE__ */ __name(($$anchor7) => {
                        RemoveMemberControl($$anchor7, {
                          get member() {
                            return member();
                          }
                        });
                      }, "consequent_4");
                      if_block(node_14, ($$render) => {
                        get(context).unlocked && $$render(consequent_4);
                      });
                    }
                    append($$anchor6, fragment_16);
                  }, "children"),
                  $$slots: { default: !0 }
                }), append($$anchor5, fragment_8);
              }, "children"),
              $$slots: { default: !0 }
            });
          }, "consequent_5");
          if_block(node_6, ($$render) => {
            searchResults.show(member().uuid) && $$render(consequent_5);
          });
        }
        append($$anchor3, fragment_6);
      }), append($$anchor2, div);
    }, "body"),
    $$slots: { header: !0, body: !0 }
  }), append($$anchor, section_1), pop();
}
__name(EncounterMemberList, "EncounterMemberList");
delegate(["click"]);
var root_1$F = /* @__PURE__ */ template('<li class="flex-row extra-small-gap align-items-center"><div class="item-image"></div> <div class="item-name truncate"> </div></li>'), root$14 = /* @__PURE__ */ template('<div class="document-list-summary-tooltip"><h3> </h3> <hr> <ul></ul></div>');
function GroupLanguageTooltip($$anchor, $$props) {
  push($$props, !0);
  let tooltip;
  function getMarkup() {
    return tooltip.outerHTML;
  }
  __name(getMarkup, "getMarkup");
  var div = root$14(), h3 = child(div), text2 = child(h3), ul = sibling(h3, 4);
  return each(ul, 21, () => $$props.members, index, ($$anchor2, member) => {
    var li = root_1$F(), div_1 = child(li), div_2 = sibling(div_1, 2), text_1 = child(div_2);
    template_effect(() => {
      set_attribute(div_1, "style", `background-image: url('${get(member).img ?? ""}')`), set_text(text_1, get(member).name);
    }), append($$anchor2, li);
  }), bind_this(div, ($$value) => tooltip = $$value, () => tooltip), template_effect(() => set_text(text2, $$props.language)), append($$anchor, div), pop({ getMarkup });
}
__name(GroupLanguageTooltip, "GroupLanguageTooltip");
var on_mouseover$1 = /* @__PURE__ */ __name((ev, showGroupLanguageTooltip, groupLanguage) => showGroupLanguageTooltip(ev, get(groupLanguage)), "on_mouseover$1"), root_1$E = /* @__PURE__ */ template('<span data-tooltip-direction="UP" class="tag"> <!></span>'), root$13 = /* @__PURE__ */ template('<div class="flex-row extra-small-gap flex-wrap"></div> <div class="hidden"><!></div>', 1);
function GroupLanguages($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getGroupSheetClassicContext), groupLanguageTooltip, hoveredLanguage = state(""), hoveredMembers = state(proxy([]));
  async function showGroupLanguageTooltip(event2, groupLanguage) {
    if (!groupLanguage.members.length)
      return;
    set(hoveredLanguage, proxy(groupLanguage.label)), set(hoveredMembers, proxy(groupLanguage.members));
    const target = event2?.currentTarget;
    await tick(), Tooltip.show(target, groupLanguageTooltip.getMarkup());
  }
  __name(showGroupLanguageTooltip, "showGroupLanguageTooltip");
  var fragment = root$13(), div = first_child(fragment);
  each(div, 21, () => get(context).groupLanguages, index, ($$anchor2, groupLanguage) => {
    var span = root_1$E();
    span.__mouseover = [
      on_mouseover$1,
      showGroupLanguageTooltip,
      groupLanguage
    ];
    var text$1 = child(span), node = sibling(text$1);
    {
      var consequent = /* @__PURE__ */ __name(($$anchor3) => {
        var text_1 = text();
        template_effect(() => set_text(text_1, `(${get(groupLanguage).members.length ?? ""})`)), append($$anchor3, text_1);
      }, "consequent");
      if_block(node, ($$render) => {
        get(groupLanguage).members.length > 1 && $$render(consequent);
      });
    }
    template_effect(() => set_text(text$1, `${get(groupLanguage).label ?? ""} `)), append($$anchor2, span);
  });
  var div_1 = sibling(div, 2), node_1 = child(div_1);
  bind_this(
    GroupLanguageTooltip(node_1, {
      get language() {
        return get(hoveredLanguage);
      },
      get members() {
        return get(hoveredMembers);
      }
    }),
    ($$value) => groupLanguageTooltip = $$value,
    () => groupLanguageTooltip
  ), append($$anchor, fragment), pop();
}
__name(GroupLanguages, "GroupLanguages");
delegate(["mouseover"]);
var root_1$D = /* @__PURE__ */ template('<li class="group-skill-grid"><div class="item-image"></div> <div class="item-name truncate"> </div> <div class="text-align-center"> </div> <div class="text-align-center"> </div> <div class="text-align-center"><i></i></div></li>'), root$12 = /* @__PURE__ */ template('<div class="document-list-summary-tooltip"><h3> </h3> <hr> <ul></ul></div>');
function GroupSkillTooltip($$anchor, $$props) {
  push($$props, !0);
  let tooltip;
  function getMarkup() {
    return tooltip.outerHTML;
  }
  __name(getMarkup, "getMarkup");
  var div = root$12(), h3 = child(div), text2 = child(h3), ul = sibling(h3, 4);
  return each(ul, 21, () => $$props.skill.members, index, ($$anchor2, member) => {
    var li = root_1$D(), div_1 = child(li), div_2 = sibling(div_1, 2), text_1 = child(div_2), div_3 = sibling(div_2, 2), text_2 = child(div_3);
    template_effect(() => set_text(text_2, formatAsModifier(get(member).system.skills[$$props.skill.key]?.total)));
    var div_4 = sibling(div_3, 2), text_3 = child(div_4), div_5 = sibling(div_4, 2), i2 = child(div_5);
    const class_derived = /* @__PURE__ */ derived(() => `${FoundryAdapter.getProficiencyIconClass(get(member).system.skills[$$props.skill.key]?.proficient)} fa-fw`);
    template_effect(() => {
      set_attribute(div_1, "style", `background-image: url('${get(member).img ?? ""}')`), set_text(text_1, get(member).name), set_text(text_3, `(${get(member).system.skills[$$props.skill.key]?.passive ?? ""})`), set_class(i2, get(class_derived));
    }), append($$anchor2, li);
  }), bind_this(div, ($$value) => tooltip = $$value, () => tooltip), template_effect(() => set_text(text2, $$props.skill.label)), append($$anchor, div), pop({ getMarkup });
}
__name(GroupSkillTooltip, "GroupSkillTooltip");
var on_mouseover = /* @__PURE__ */ __name((ev, showGroupLanguageTooltip, groupSkill) => showGroupLanguageTooltip(ev, get(groupSkill)), "on_mouseover"), root_1$C = /* @__PURE__ */ template('<span class="tag" data-tooltip-direction="UP"> </span>'), root$11 = /* @__PURE__ */ template('<div class="flex-row extra-small-gap flex-wrap"></div> <div class="hidden"><!></div>', 1);
function GroupSkills($$anchor, $$props) {
  push($$props, !0);
  const context = /* @__PURE__ */ derived(getGroupSheetClassicContext);
  let groupSkillTooltip, hoveredSkill = state(proxy({
    key: "",
    label: "",
    members: [],
    total: Number.NEGATIVE_INFINITY
  }));
  async function showGroupLanguageTooltip(event2, groupSkill) {
    if (!groupSkill.members.length)
      return;
    set(hoveredSkill, proxy(groupSkill));
    const target = event2?.currentTarget;
    await tick(), Tooltip.show(target, groupSkillTooltip.getMarkup());
  }
  __name(showGroupLanguageTooltip, "showGroupLanguageTooltip");
  var fragment = root$11(), div = first_child(fragment);
  each(div, 21, () => get(context).groupSkills, index, ($$anchor2, groupSkill) => {
    var span = root_1$C();
    span.__mouseover = [
      on_mouseover,
      showGroupLanguageTooltip,
      groupSkill
    ];
    var text2 = child(span);
    template_effect(() => set_text(text2, `${get(groupSkill).label ?? ""}
      ${formatAsModifier(get(groupSkill).total) ?? ""}`)), append($$anchor2, span);
  });
  var div_1 = sibling(div, 2), node = child(div_1);
  bind_this(
    GroupSkillTooltip(node, {
      get skill() {
        return get(hoveredSkill);
      }
    }),
    ($$value) => groupSkillTooltip = $$value,
    () => groupSkillTooltip
  ), append($$anchor, fragment), pop();
}
__name(GroupSkills, "GroupSkills");
delegate(["mouseover"]);
var on_click$p = /* @__PURE__ */ __name((_, selected, tab) => selected(tab), "on_click$p"), root_1$B = /* @__PURE__ */ template('<button type="button" class="underlined-tab"> </button>'), root$10 = /* @__PURE__ */ template("<div></div>");
function UnderlinedTabStrip($$anchor, $$props) {
  push($$props, !0);
  let selected = prop($$props, "selected", 15);
  var div = root$10();
  each(div, 20, () => $$props.tabs, (tab) => tab, ($$anchor2, tab) => {
    var button = root_1$B();
    button.__click = [on_click$p, selected, tab];
    var text2 = child(button);
    template_effect(() => {
      set_attribute(button, "tabindex", settings.value.useAccessibleKeyboardSupport ? 0 : -1), toggle_class(button, "active", selected() === tab), set_text(text2, tab);
    }), append($$anchor2, button);
  }), template_effect(() => set_class(div, `underlined-tab-strip flex-row no-gap ${$$props.class ?? "" ?? ""}`)), append($$anchor, div), pop();
}
__name(UnderlinedTabStrip, "UnderlinedTabStrip");
delegate(["click"]);
var root_1$A = /* @__PURE__ */ template("<!> <!>", 1), root_5$a = /* @__PURE__ */ template('<!> <div class="group-member-info-panel"><div><!></div> <div><!></div></div>', 1), root_3$g = /* @__PURE__ */ template("<!> <!>", 1), root_10$3 = /* @__PURE__ */ template('<div class="drop-zone full-height"> </div>'), root$$ = /* @__PURE__ */ template('<!> <section class="scroll-container flex-column small-gap" data-tidy-track-scroll-y=""><!></section>', 1);
function GroupMembersTab($$anchor, $$props) {
  push($$props, !0);
  const tabId = getContext(CONSTANTS.SVELTE_CONTEXT.TAB_ID), context = /* @__PURE__ */ derived(getGroupSheetClassicContext), localize = FoundryAdapter.localize;
  let searchCriteria = state(""), utilityBarCommands = /* @__PURE__ */ derived(() => get(context).utilities[tabId]?.utilityToolbarCommands ?? []), searchResults = createSearchResultsState();
  setSearchResultsContext(searchResults), user_effect(() => {
    searchResults.uuids = FoundryAdapter.searchActors(get(searchCriteria), get(context).system.members.map((m2) => m2.actor));
  });
  let memberSections = /* @__PURE__ */ derived(() => GroupSheetSections.configureMemberSections(get(context).memberSections, tabId, SheetPreferencesService.getByType(get(context).actor.type))), aggregateTabs = {
    languages: localize("DND5E.Languages"),
    skills: localize("DND5E.Skills")
  }, selectedAggregateTab = state(proxy(aggregateTabs.languages));
  var fragment = root$$(), node = first_child(fragment);
  UtilityToolbar(node, {
    children: /* @__PURE__ */ __name(($$anchor2, $$slotProps) => {
      var fragment_1 = root_1$A(), node_1 = first_child(fragment_1);
      Search$1(node_1, {
        get value() {
          return get(searchCriteria);
        },
        set value($$value) {
          set(searchCriteria, proxy($$value));
        }
      });
      var node_2 = sibling(node_1, 2);
      each(node_2, 17, () => get(utilityBarCommands), (command) => command.title, ($$anchor3, command) => {
        var visible = /* @__PURE__ */ derived(() => get(command).visible ?? !0);
        UtilityToolbarCommand($$anchor3, {
          get title() {
            return get(command).title;
          },
          get iconClass() {
            return get(command).iconClass;
          },
          get text() {
            return get(command).text;
          },
          get visible() {
            return get(visible);
          },
          onExecute: /* @__PURE__ */ __name((ev) => get(command).execute?.(ev), "onExecute"),
          get sections() {
            return get(memberSections);
          }
        });
      }), append($$anchor2, fragment_1);
    }, "children"),
    $$slots: { default: !0 }
  });
  var section_1 = sibling(node, 2), node_3 = child(section_1);
  {
    var consequent_2 = /* @__PURE__ */ __name(($$anchor2) => {
      var fragment_3 = root_3$g(), node_4 = first_child(fragment_3);
      {
        var consequent = /* @__PURE__ */ __name(($$anchor3) => {
          ExpandableContainer($$anchor3, {
            get expanded() {
              return get(context).showGroupMemberTabInfoPanel;
            },
            children: /* @__PURE__ */ __name(($$anchor4, $$slotProps) => {
              var fragment_5 = root_5$a(), node_5 = first_child(fragment_5), tabs = /* @__PURE__ */ derived(() => Object.values(aggregateTabs));
              UnderlinedTabStrip(node_5, {
                get tabs() {
                  return get(tabs);
                },
                get selected() {
                  return get(selectedAggregateTab);
                },
                set selected($$value) {
                  set(selectedAggregateTab, proxy($$value));
                }
              });
              var div = sibling(node_5, 2), div_1 = child(div), node_6 = child(div_1);
              GroupLanguages(node_6, {});
              var div_2 = sibling(div_1, 2), node_7 = child(div_2);
              GroupSkills(node_7, {}), template_effect(() => {
                toggle_class(div_1, "hidden", get(selectedAggregateTab) !== aggregateTabs.languages), toggle_class(div_2, "hidden", get(selectedAggregateTab) !== aggregateTabs.skills);
              }), append($$anchor4, fragment_5);
            }, "children"),
            $$slots: { default: !0 }
          });
        }, "consequent");
        if_block(node_4, ($$render) => {
          get(context).isGM && $$render(consequent);
        });
      }
      var node_8 = sibling(node_4, 2);
      {
        var consequent_1 = /* @__PURE__ */ __name(($$anchor3) => {
          var fragment_6 = comment(), node_9 = first_child(fragment_6);
          each(node_9, 17, () => get(memberSections), (section) => section.key, ($$anchor4, section) => {
            GroupMemberList($$anchor4, {
              get section() {
                return get(section);
              }
            });
          }), append($$anchor3, fragment_6);
        }, "consequent_1"), alternate = /* @__PURE__ */ __name(($$anchor3) => {
          var fragment_8 = comment(), node_10 = first_child(fragment_8);
          each(node_10, 17, () => get(memberSections), (section) => section.key, ($$anchor4, section) => {
            EncounterMemberList($$anchor4, {
              get section() {
                return get(section);
              }
            });
          }), append($$anchor3, fragment_8);
        }, "alternate");
        if_block(node_8, ($$render) => {
          get(context).actor.system.type.value !== CONSTANTS.GROUP_TYPE_ENCOUNTER ? $$render(consequent_1) : $$render(alternate, !1);
        });
      }
      append($$anchor2, fragment_3);
    }, "consequent_2"), alternate_1 = /* @__PURE__ */ __name(($$anchor2) => {
      var div_3 = root_10$3(), text2 = child(div_3);
      template_effect(() => set_text(text2, localize("TIDY5E.Group.EmptyMembersTabHint"))), append($$anchor2, div_3);
    }, "alternate_1");
    if_block(node_3, ($$render) => {
      get(context).memberSections.length > 0 ? $$render(consequent_2) : $$render(alternate_1, !1);
    });
  }
  append($$anchor, fragment), pop();
}
__name(GroupMembersTab, "GroupMembersTab");
var root_1$z = /* @__PURE__ */ template("<!> <!> <!> <!>", 1), root_5$9 = /* @__PURE__ */ template("<!> <!>", 1), root$_ = /* @__PURE__ */ template('<!> <div class="tidy-inventory-container scroll-container flex-column small-gap"><!> <!></div>', 1);
function GroupInventoryTab($$anchor, $$props) {
  push($$props, !0);
  let tabId = getContext(CONSTANTS.SVELTE_CONTEXT.TAB_ID);
  const context = /* @__PURE__ */ derived(getGroupSheetClassicContext);
  let inventory = /* @__PURE__ */ derived(() => SheetSections.configureInventory(get(context).inventory, tabId, SheetPreferencesService.getByType(get(context).actor.type), TidyFlags.sectionConfig.get(get(context).actor)?.[tabId])), searchCriteria = state("");
  const searchResults = createSearchResultsState();
  setSearchResultsContext(searchResults), user_effect(() => {
    searchResults.uuids = ItemVisibility.getItemsToShowAtDepth({
      criteria: get(searchCriteria),
      itemContext: get(context).itemContext,
      sections: get(inventory),
      tabId
    });
  });
  const localize = FoundryAdapter.localize;
  let layoutMode = /* @__PURE__ */ derived(() => TidyFlags.inventoryGrid.get(get(context).actor) ? "grid" : "list"), noItems = /* @__PURE__ */ derived(() => get(inventory).some((section) => section.items.length > 0) === !1), utilityBarCommands = /* @__PURE__ */ derived(() => get(context).utilities[tabId]?.utilityToolbarCommands ?? []);
  var fragment = root$_(), node = first_child(fragment);
  UtilityToolbar(node, {
    children: /* @__PURE__ */ __name(($$anchor2, $$slotProps) => {
      var fragment_1 = root_1$z(), node_1 = first_child(fragment_1);
      Search$1(node_1, {
        get value() {
          return get(searchCriteria);
        },
        set value($$value) {
          set(searchCriteria, proxy($$value));
        }
      });
      var node_2 = sibling(node_1, 2), filters = /* @__PURE__ */ derived(() => ItemFilterRuntime.getPinnedFiltersForTab(get(context).filterPins, get(context).filterData, tabId));
      PinnedFilterToggles(node_2, {
        filterGroupName: tabId,
        get filters() {
          return get(filters);
        }
      });
      var node_3 = sibling(node_2, 2);
      FilterMenu(node_3, { tabId });
      var node_4 = sibling(node_3, 2);
      each(node_4, 17, () => get(utilityBarCommands), (command) => command.title, ($$anchor3, command) => {
        var visible = /* @__PURE__ */ derived(() => get(command).visible ?? !0);
        UtilityToolbarCommand($$anchor3, {
          get title() {
            return get(command).title;
          },
          get iconClass() {
            return get(command).iconClass;
          },
          get text() {
            return get(command).text;
          },
          get visible() {
            return get(visible);
          },
          onExecute: /* @__PURE__ */ __name((ev) => get(command).execute?.(ev), "onExecute"),
          get sections() {
            return get(inventory);
          }
        });
      }), append($$anchor2, fragment_1);
    }, "children"),
    $$slots: { default: !0 }
  });
  var div = sibling(node, 2), node_5 = child(div);
  Currency(node_5, {
    get document() {
      return get(context).actor;
    }
  });
  var node_6 = sibling(node_5, 2);
  {
    var consequent = /* @__PURE__ */ __name(($$anchor2) => {
      Notice($$anchor2, {
        children: /* @__PURE__ */ __name(($$anchor3, $$slotProps) => {
          var text$1 = text();
          template_effect(() => set_text(text$1, localize("TIDY5E.EmptySection"))), append($$anchor3, text$1);
        }, "children"),
        $$slots: { default: !0 }
      });
    }, "consequent"), alternate_1 = /* @__PURE__ */ __name(($$anchor2) => {
      var fragment_5 = root_5$9();
      const containerPanelExpanded = /* @__PURE__ */ derived(() => get(context).showContainerPanel && !!get(context).containerPanelItems.length);
      var node_7 = first_child(fragment_5), class_1 = /* @__PURE__ */ derived(() => `container-panel-wrapper ${(get(containerPanelExpanded) ? "container-panel-expanded" : "") ?? ""}`);
      ExpandableContainer(node_7, {
        get expanded() {
          return get(containerPanelExpanded);
        },
        get class() {
          return get(class_1);
        },
        children: /* @__PURE__ */ __name(($$anchor3, $$slotProps) => {
          ContainerPanel($$anchor3, {
            get containerPanelItems() {
              return get(context).containerPanelItems;
            }
          });
        }, "children"),
        $$slots: { default: !0 }
      });
      var node_8 = sibling(node_7, 2);
      each(node_8, 17, () => get(inventory), (section) => section.key, ($$anchor3, section) => {
        var fragment_7 = comment();
        const visibleItemCount = /* @__PURE__ */ derived(() => ItemVisibility.countVisibleItems(get(section).items, searchResults.uuids));
        var node_9 = first_child(fragment_7);
        {
          var consequent_3 = /* @__PURE__ */ __name(($$anchor4) => {
            var fragment_8 = comment(), node_10 = first_child(fragment_8);
            {
              var consequent_2 = /* @__PURE__ */ __name(($$anchor5) => {
                var fragment_9 = comment(), node_11 = first_child(fragment_9);
                {
                  var consequent_1 = /* @__PURE__ */ __name(($$anchor6) => {
                    var primaryColumnName = /* @__PURE__ */ derived(() => `${localize(get(section).label) ?? ""} (${get(visibleItemCount) ?? ""})`);
                    InventoryList($$anchor6, {
                      get primaryColumnName() {
                        return get(primaryColumnName);
                      },
                      get section() {
                        return get(section);
                      },
                      allowAttuneControl: !1,
                      allowFavoriteIconNextToName: !1,
                      allowEquipControl: !1
                    });
                  }, "consequent_1"), alternate = /* @__PURE__ */ __name(($$anchor6) => {
                    InventoryGrid($$anchor6, {
                      get section() {
                        return get(section);
                      }
                    });
                  }, "alternate");
                  if_block(node_11, ($$render) => {
                    get(layoutMode) === "list" ? $$render(consequent_1) : $$render(alternate, !1);
                  });
                }
                append($$anchor5, fragment_9);
              }, "consequent_2");
              if_block(node_10, ($$render) => {
                (get(searchCriteria).trim() === "" && get(context).unlocked || get(visibleItemCount) > 0) && $$render(consequent_2);
              });
            }
            append($$anchor4, fragment_8);
          }, "consequent_3");
          if_block(node_9, ($$render) => {
            get(section).show && $$render(consequent_3);
          });
        }
        append($$anchor3, fragment_7);
      }), append($$anchor2, fragment_5);
    }, "alternate_1");
    if_block(node_6, ($$render) => {
      get(noItems) && !get(context).unlocked ? $$render(consequent) : $$render(alternate_1, !1);
    });
  }
  template_effect(() => set_attribute(div, "data-tidy-sheet-part", CONSTANTS.SHEET_PARTS.ITEMS_CONTAINER)), append($$anchor, fragment), pop();
}
__name(GroupInventoryTab, "GroupInventoryTab");
var root_1$y = /* @__PURE__ */ template('<article class="editor-container mt-3"><!></article>'), root$Z = /* @__PURE__ */ template('<div class="flex-1 full-height flex-column me-1"><!></div>');
function GroupDescriptionTab($$anchor, $$props) {
  push($$props, !0);
  const context = /* @__PURE__ */ derived(getGroupSheetClassicContext);
  var div = root$Z(), node = child(div);
  key_block(node, () => get(context).actor.system.description.full, ($$anchor2) => {
    var article = root_1$y(), node_1 = child(article), editorOptions = /* @__PURE__ */ derived(() => ({ editable: get(context).editable }));
    SheetEditorV2(node_1, {
      get content() {
        return get(context).system.description.full;
      },
      get enriched() {
        return get(context).descriptionFullEnrichedHtml;
      },
      field: "system.description.full",
      get editorOptions() {
        return get(editorOptions);
      },
      get documentUuid() {
        return get(context).actor.uuid;
      },
      get manageSecrets() {
        return get(context).document.isOwner;
      }
    }), append($$anchor2, article);
  }), append($$anchor, div), pop();
}
__name(GroupDescriptionTab, "GroupDescriptionTab");
class GroupSheetRuntime {
  static {
    __name(this, "GroupSheetRuntime");
  }
  static _content = [];
  static _tabs = [
    {
      id: CONSTANTS.TAB_GROUP_MEMBERS,
      title: "DND5E.Group.Member.other",
      content: {
        component: GroupMembersTab,
        type: "svelte"
      },
      layout: "classic"
    },
    {
      id: CONSTANTS.TAB_ACTOR_INVENTORY,
      title: "DND5E.Inventory",
      content: {
        component: GroupInventoryTab,
        type: "svelte"
      },
      layout: "classic"
    },
    {
      id: CONSTANTS.TAB_GROUP_DESCRIPTION,
      title: "DND5E.Description",
      content: {
        component: GroupDescriptionTab,
        type: "svelte"
      },
      layout: "classic"
    }
  ];
  static get content() {
    return this._content;
  }
  static async getTabs(context) {
    return await TabManager.prepareTabsForRender(
      context,
      GroupSheetRuntime._tabs
    );
  }
  static getAllRegisteredTabs() {
    return [...GroupSheetRuntime._tabs];
  }
  static registerContent(registeredContent) {
    this._content.push(registeredContent);
  }
  static registerTab(tab, options) {
    const tabExists = GroupSheetRuntime._tabs.some((t2) => t2.id === tab.id);
    if (tabExists && !options?.overrideExisting) {
      warn(`Tab with id ${tab.id} already exists.`);
      return;
    }
    if (tabExists && options?.overrideExisting) {
      const index2 = GroupSheetRuntime._tabs.findIndex((t2) => t2.id === tab.id);
      index2 >= 0 && GroupSheetRuntime._tabs.splice(index2, 1);
    }
    GroupSheetRuntime._tabs.push(tab);
  }
  static getTabTitle(tabId) {
    try {
      let tabTitle = this._tabs.find((t2) => t2.id === tabId)?.title;
      return typeof tabTitle == "function" && (tabTitle = tabTitle()), tabTitle ? FoundryAdapter.localize(tabTitle) : tabId;
    } catch (e2) {
      error("An error occurred while searching for a tab title.", !1, e2), debug("Tab title error troubleshooting information", { tabId });
    }
  }
  // TODO: Move this to a world setting
  static getDefaultTabs() {
    return [
      CONSTANTS.TAB_GROUP_MEMBERS,
      CONSTANTS.TAB_ACTOR_INVENTORY,
      CONSTANTS.TAB_GROUP_DESCRIPTION
    ];
  }
}
class HeaderControlsRuntime {
  static {
    __name(this, "HeaderControlsRuntime");
  }
  static _headerControls = [];
  static registerHeaderControls(controls) {
    this._headerControls.push(...controls);
  }
  static getHeaderControls(params) {
    return this._headerControls.filter(
      (c2) => (!c2.documentTypes || c2.documentTypes.includes(params.documentType)) && (!c2.supportedDocuments || c2.supportedDocuments.includes(params.documentName))
    );
  }
}
class Tidy5eSheetsApi {
  static {
    __name(this, "Tidy5eSheetsApi");
  }
  static _instance;
  constructor() {
  }
  /**
   * Gets an instance of the Tidy 5e Sheets API
   * @returns instance of the Tidy 5e Sheets API
   * @internal
   */
  static _getApi() {
    return Tidy5eSheetsApi._instance ??= new Tidy5eSheetsApi(), this._instance;
  }
  /** {@inheritDoc ActionListApi} */
  /** @deprecated api.actionList API has been moved to api.config.actionList */
  get actionList() {
    return warn("api.actionList API has been moved to api.config.actionList"), this.config.actionList;
  }
  /** {@inheritDoc ActorItemApi} */
  /** @deprecated api.actorItem API has been moved to api.config.actorItem */
  get actorItem() {
    return warn("api.actorItem API has been moved to api.config.actorItem"), this.config.actorItem;
  }
  /** {@inheritDoc ActorPortraitApi} */
  /** @deprecated api.actorPortrait API has been moved to api.config.actorPortrait */
  get actorPortrait() {
    return warn("api.actorPortrait API has been moved to api.config.actorPortrait"), this.config.actorPortrait;
  }
  /** {@inheritDoc ConfigApi} */
  config = new ConfigApi();
  /**
   * Constants for a variety of uses.
   *
   * @remarks
   * When APIs call for specific IDs or selectors related to Tidy 5e Sheets,
   * using the related constant when available will insulate against breakage
   * when Tidy has internal changes.
   */
  constants = ApiConstants;
  /**
   * Creates a selector which allows for locating a part of a given sheet.
   * @param sheetPart a part of the sheet as found in `api.constants.SHEET_PARTS`
   * @returns an HTML selector valid for use with JavaScript query selectors
   */
  getSheetPartSelector(sheetPart) {
    return `[${CONSTANTS.SHEET_PART_ATTRIBUTE}="${sheetPart}"]`;
  }
  /** {@inheritDoc ExhaustionApi} */
  /** @deprecated api.exhaustion API has been moved to api.config.exhaustion */
  get exhaustion() {
    return warn("api.exhaustion API has been moved to api.config.exhaustion"), this.config.exhaustion;
  }
  /**
   * Determines whether the provided sheet is a Tidy 5e Character sheet.
   * @param app an actor sheet
   * @returns boolean indicating if the sheet is a Tidy 5e Character sheet
   */
  isTidy5eCharacterSheet(app) {
    return !!FoundryAdapter.getElementFromAppV1OrV2(app.element)?.matches(".tidy5e-sheet.sheet.character");
  }
  /**
   * Determines whether the provided sheet is a Tidy 5e Container sheet.
   * @param app a container sheet
   * @returns boolean indicating if the sheet is a Tidy 5e Container sheet
   */
  isTidy5eContainerSheet(app) {
    return !!FoundryAdapter.getElementFromAppV1OrV2(app.element)?.matches(".tidy5e-sheet.sheet.container");
  }
  /**
   * Determines whether the provided sheet is a Tidy 5e Group sheet.
   * @param app a group sheet
   * @returns boolean indicating if the sheet is a Tidy 5e Group sheet
   */
  isTidy5eGroupSheet(app) {
    return !!FoundryAdapter.getElementFromAppV1OrV2(app.element)?.matches(".tidy5e-sheet.sheet.group");
  }
  /**
   * Determines whether the provided sheet is a Tidy 5e Item sheet.
   * @param app an item sheet
   * @returns boolean indicating if the sheet is a Tidy 5e Item sheet
   */
  isTidy5eItemSheet(app) {
    return !!FoundryAdapter.getElementFromAppV1OrV2(app.element)?.matches(".tidy5e-sheet.sheet.item");
  }
  /**
   * Determines whether the provided sheet is a Tidy 5e NPC sheet.
   * @param app an actor sheet
   * @returns boolean indicating if the sheet is a Tidy 5e NPC sheet
   */
  isTidy5eNpcSheet(app) {
    return !!FoundryAdapter.getElementFromAppV1OrV2(app.element)?.matches(".tidy5e-sheet.sheet.npc");
  }
  /**
   * Determines whether the provided sheet is any Tidy 5e sheet.
   * @param app an actor sheet
   * @returns boolean indicating if the sheet is any Tidy 5e sheet
   */
  isTidy5eSheet(app) {
    return !!FoundryAdapter.getElementFromAppV1OrV2(app.element)?.matches(".tidy5e-sheet.sheet");
  }
  /**
   * Determines whether the provided sheet is a Tidy 5e Vehicle sheet.
   * @param app an actor sheet
   * @returns boolean indicating if the sheet is a Tidy 5e Vehicle sheet
   */
  isTidy5eVehicleSheet(app) {
    return !!FoundryAdapter.getElementFromAppV1OrV2(app.element)?.matches(".tidy5e-sheet.sheet.vehicle");
  }
  /**{@inheritDoc ItemSummaryApi} */
  /** @deprecated api.itemSummary API has been moved to api.config.actorPortrait */
  get itemSummary() {
    return warn("api.itemSummary API has been moved to api.config.actorPortrait"), this.config.itemSummary;
  }
  /**
   * Various models can be used for API calls.
   */
  models = {
    HandlebarsTab,
    HtmlTab,
    SvelteTab,
    HandlebarsContent,
    HtmlContent
  };
  /**
   * Adds a tab to the available sheet tabs for all actor types that Tidy 5e supports.
   * @param {SupportedTab} tab the information necessary to render a tab
   * @param {object} [options] sheet registration options
   * @param {string} [options.layout] an optional sheet layout or layouts (default: 'all')
   * @param {string} [options.overrideExisting] if a tab with this ID already exists, override it
   * @returns void
   */
  registerActorTab(tab, options) {
    this.registerCharacterTab(tab, options), this.registerGroupTab(tab, options), this.registerNpcTab(tab, options), this.registerVehicleTab(tab, options);
  }
  /**
   * Adds a tab to the available Character sheet tabs.
   * @param {SupportedTab} tab the information necessary to render a tab
   * @param {object} [options] sheet registration options
   * @param {string} [options.layout] an optional sheet layout or layouts (default: 'all')
   * @param {string} [options.overrideExisting] if a tab with this ID already exists, override it
   * @returns void
   *
   * @example Registering a handlebars-based character sheet tab
   * ```js
   * Hooks.once('tidy5e-sheet.ready', (api) => {
   *   api.registerCharacterTab(
   *     new api.models.HandlebarsTab({
   *       title: 'My Tab',
   *       path: '/modules/my-module-id/templates/my-handlebars-template.hbs',
   *       tabId: 'my-module-id-registered-character-tab',
   *       getData: async (data) => {
   *         data['my-message'] = 'Hello, world! 🌊🏄‍♂️';
   *         return Promise.resolve(data);
   *       },
   *       onRender(params) {
   *         const myTab = $(params.tabContentsElement);
   *         myTab.find('.my-control').click(_myHandler.bind(params.app));
   *       },
   *     })
   *   );
   * });
   * ```
   *
   * @example Overriding an existing sheet tab
   * ```js
   * Hooks.once('tidy5e-sheet.ready', (api) => {
   *   api.registerCharacterTab(
   *     new api.models.HandlebarsTab({
   *       title: 'The New Inventory Tab',
   *       path: '/modules/my-module-id/templates/my-handlebars-template.hbs',
   *       tabId: api.constants.TAB_ID_CHARACTER_INVENTORY,
   *       getData: async (data) => {
   *         data['my-message'] = 'Hello, world! 🌊🏄‍♂️';
   *         return Promise.resolve(data);
   *       },
   *       onRender(params) {
   *         const myTab = $(params.tabContentsElement);
   *         myTab.find('.my-control').click(_myHandler.bind(params.app));
   *       },
   *     }),
   *     {
   *       overrideExisting: true,
   *     }
   *   );
   * });
   * ```
   *
   * @remarks
   * A tab ID is always required (see {@link TabId}).
   */
  registerCharacterTab(tab, options) {
    if (!TabManager.validateTab(tab))
      return;
    const registeredTab = TabManager.mapCustomTabToRegisteredTab(
      tab,
      options?.layout
    );
    if (!registeredTab) {
      warn("Unable to register tab. Tab type not supported");
      return;
    }
    CharacterSheetRuntime.registerTab(registeredTab, options);
  }
  /**
   * Adds a tab to the available Group sheet tabs.
   * @param {SupportedTab} tab the information necessary to render a tab
   * @param {object} [options] sheet registration options
   * @param {string} [options.layout] an optional sheet layout or layouts (default: 'all')
   * @param {string} [options.overrideExisting] if a tab with this ID already exists, override it
   * @returns void
   *
   * @example Registering a handlebars-based group sheet tab
   * ```js
   * Hooks.once('tidy5e-sheet.ready', (api) => {
   *   api.registerGroupTab(
   *     new api.models.HandlebarsTab({
   *       title: 'My Tab',
   *       path: '/modules/my-module-id/templates/my-handlebars-template.hbs',
   *       tabId: 'my-module-id-registered-group-tab',
   *       getData: async (data) => {
   *         data['my-message'] = 'Hello, world! 🌊🏄‍♂️';
   *         return Promise.resolve(data);
   *       },
   *       onRender(params) {
   *         const myTab = $(params.tabContentsElement);
   *         myTab.find('.my-control').click(_myHandler.bind(params.app));
   *       },
   *     })
   *   );
   * });
   * ```
   *
   * @example Overriding an existing sheet tab
   * ```js
   * Hooks.once('tidy5e-sheet.ready', (api) => {
   *   api.registerGroupTab(
   *     new api.models.HandlebarsTab({
   *       title: 'The New Inventory Tab',
   *       path: '/modules/my-module-id/templates/my-handlebars-template.hbs',
   *       tabId: api.constants.TAB_ID_GROUP_INVENTORY,
   *       getData: async (data) => {
   *         data['my-message'] = 'Hello, world! 🌊🏄‍♂️';
   *         return Promise.resolve(data);
   *       },
   *       onRender(params) {
   *         const myTab = $(params.tabContentsElement);
   *         myTab.find('.my-control').click(_myHandler.bind(params.app));
   *       },
   *     }),
   *     {
   *       overrideExisting: true,
   *     }
   *   );
   * });
   * ```
   *
   * @remarks
   * A tab ID is always required (see {@link TabId}).
   */
  registerGroupTab(tab, options) {
    if (!TabManager.validateTab(tab))
      return;
    const registeredTab = TabManager.mapCustomTabToRegisteredTab(
      tab,
      options?.layout
    );
    if (!registeredTab) {
      warn("Unable to register tab. Tab type not supported");
      return;
    }
    GroupSheetRuntime.registerTab(registeredTab, options);
  }
  /**
   * Adds custom content to all actor sheets at `position` relative to `selector`.
   *
   * @param content the information necessary to render custom content
   * @param options custom content registration options
   * @returns void
   *
   * @example registering an icon next to the actor sheet name
   * ```js
   * Hooks.once("tidy5e-sheet.ready", (api) => {
   *   api.registerActorContent(
   *     new api.models.HtmlContent({
   *       html: `<a title="Example Button" class="my-custom-icon"><i class="fas fa-user"></i></a>`,
   *       injectParams: {
   *         selector: `[data-tidy-sheet-part="${api.constants.SHEET_PARTS.NAME_CONTAINER}"]`
   *         position: "beforebegin",
   *       },
   *       onContentReady: (params) => {
   *         console.log("content ready to render", params);
   *         console.log("my content", params.content);
   *       },
   *       onRender: (params) => {
   *         params.element
   *           .querySelector(".my-custom-icon")
   *           .addEventListener("click", () => alert("Clicked custom actor icon"));
   *       },
   *     })
   *   );
   * });
   * ```
   */
  registerActorContent(content, options) {
    const registeredContent = CustomContentManager.mapToRegisteredContent(
      content,
      options?.layout
    );
    if (!registeredContent) {
      warn("Unable to register content. Content type not supported.");
      return;
    }
    CharacterSheetRuntime.registerContent(registeredContent), NpcSheetRuntime.registerContent(registeredContent), VehicleSheetRuntime.registerContent(registeredContent);
  }
  /**
   * Adds custom content to player character sheets at `position` relative to `selector`.
   *
   * @param content the information necessary to render custom content
   * @param options custom content registration options
   * @returns void
   *
   * @example registering an icon next to the character sheet name
   * ```js
   * Hooks.once("tidy5e-sheet.ready", (api) => {
   *   api.registerCharacterContent(
   *     new api.models.HtmlContent({
   *       html: `<a title="Example Button" class="my-custom-icon"><i class="fas fa-user"></i></a>`,
   *       injectParams: {
   *         selector: `[data-tidy-sheet-part="${api.constants.SHEET_PARTS.NAME_CONTAINER}"]`
   *         position: "beforebegin",
   *       },
   *       onContentReady: (params) => {
   *         console.log("content ready to render", params);
   *         console.log("my content", params.content);
   *       },
   *       onRender: (params) => {
   *         params.element
   *           .querySelector(".my-custom-icon")
   *           .addEventListener("click", () => alert("Clicked custom PC icon"));
   *       },
   *     })
   *   );
   * });
   * ```
   */
  registerCharacterContent(content, options) {
    const registeredContent = CustomContentManager.mapToRegisteredContent(
      content,
      options?.layout
    );
    if (!registeredContent) {
      warn("Unable to register content. Content type not supported.");
      return;
    }
    CharacterSheetRuntime.registerContent(registeredContent);
  }
  /**
   * Adds custom content to group sheets at `position` relative to `selector`.
   *
   * @param content the information necessary to render custom content
   * @param options custom content registration options
   * @returns void
   *
   * @example registering an icon next to the group sheet name
   * ```js
   * Hooks.once("tidy5e-sheet.ready", (api) => {
   *   api.registerGroupContent(
   *     new api.models.HtmlContent({
   *       html: `<a title="Example Button" class="my-custom-icon"><i class="fas fa-user"></i></a>`,
   *       injectParams: {
   *         selector: `[data-tidy-sheet-part="${api.constants.SHEET_PARTS.NAME_CONTAINER}"]`
   *         position: "beforebegin",
   *       },
   *       onContentReady: (params) => {
   *         console.log("content ready to render", params);
   *         console.log("my content", params.content);
   *       },
   *       onRender: (params) => {
   *         params.element
   *           .querySelector(".my-custom-icon")
   *           .addEventListener("click", () => alert("Clicked custom PC icon"));
   *       },
   *     })
   *   );
   * });
   * ```
   */
  registerGroupContent(content, options) {
    const registeredContent = CustomContentManager.mapToRegisteredContent(
      content,
      options?.layout
    );
    if (!registeredContent) {
      warn("Unable to register content. Content type not supported.");
      return;
    }
    GroupSheetRuntime.registerContent(registeredContent);
  }
  /**
   * Adds custom content to item sheets at `position` relative to `selector`.
   *
   * @param content the information necessary to render custom content
   * @param options custom content registration options
   * @returns void
   *
   * @example registering an icon next to the item sheet name
   * ```js
   * Hooks.once("tidy5e-sheet.ready", (api) => {
   *   api.registerItemContent(
   *     new api.models.HtmlContent({
   *       html: `<a title="Example Button" class="my-custom-icon"><i class="fas fa-flask"></i></a>`,
   *       injectParams: {
   *         selector: `[data-tidy-sheet-part="${api.constants.SHEET_PARTS.NAME_CONTAINER}"]`
   *         position: "beforebegin",
   *       },
   *       onContentReady: (params) => {
   *         console.log("content ready to render", params);
   *         console.log("my content", params.content);
   *       },
   *       onRender: (params) => {
   *         params.element
   *           .querySelector(".my-custom-icon")
   *           .addEventListener("click", () => alert("Clicked custom item icon"));
   *       },
   *     })
   *   );
   * });
   * ```
   */
  registerItemContent(content, options) {
    const registeredContent = CustomContentManager.mapToRegisteredContent(
      content,
      options?.layout
    );
    if (!registeredContent) {
      warn("Unable to register content. Content type not supported.");
      return;
    }
    ItemSheetRuntime.registerContent(registeredContent);
  }
  /**
   * Adds custom content to NPC sheets at `position` relative to `selector`.
   *
   * @param content the information necessary to render custom content
   * @param options custom content registration options
   * @returns void
   *
   * @example registering an icon next to the NPC sheet name
   * ```js
   * Hooks.once("tidy5e-sheet.ready", (api) => {
   *   api.registerNpcContent(
   *     new api.models.HtmlContent({
   *       html: `<a title="Example Button" class="my-custom-icon"><i class="fas fa-user"></i></a>`,
   *       injectParams: {
   *         selector: `[data-tidy-sheet-part="${api.constants.SHEET_PARTS.NAME_CONTAINER}"]`
   *         position: "beforebegin",
   *       },
   *       onContentReady: (params) => {
   *         console.log("content ready to render", params);
   *         console.log("my content", params.content);
   *       },
   *       onRender: (params) => {
   *         params.element
   *           .querySelector(".my-custom-icon")
   *           .addEventListener("click", () => alert("Clicked custom NPC icon"));
   *       },
   *     })
   *   );
   * });
   * ```
   */
  registerNpcContent(content, options) {
    const registeredContent = CustomContentManager.mapToRegisteredContent(
      content,
      options?.layout
    );
    if (!registeredContent) {
      warn("Unable to register content. Content type not supported.");
      return;
    }
    NpcSheetRuntime.registerContent(registeredContent);
  }
  /**
   * Adds custom content to vehicle sheets at `position` relative to `selector`.
   *
   * @param content the information necessary to render custom content
   * @param options custom content registration options
   * @returns void
   *
   * @example registering an icon next to the vehicle sheet name
   * ```js
   * Hooks.once("tidy5e-sheet.ready", (api) => {
   *   api.registerVehicleContent(
   *     new api.models.HtmlContent({
   *       html: `<a title="Example Button" class="my-custom-icon"><i class="fas fa-user"></i></a>`,
   *       injectParams: {
   *         selector: `[data-tidy-sheet-part="${api.constants.SHEET_PARTS.NAME_CONTAINER}"]`
   *         position: "beforebegin",
   *       },
   *       onContentReady: (params) => {
   *         console.log("content ready to render", params);
   *         console.log("my content", params.content);
   *       },
   *       onRender: (params) => {
   *         params.element
   *           .querySelector(".my-custom-icon")
   *           .addEventListener("click", () => alert("Clicked Vehicle custom icon"));
   *       },
   *     })
   *   );
   * });
   * ```
   */
  registerVehicleContent(content, options) {
    const registeredContent = CustomContentManager.mapToRegisteredContent(
      content,
      options?.layout
    );
    if (!registeredContent) {
      warn("Unable to register content. Content type not supported.");
      return;
    }
    VehicleSheetRuntime.registerContent(registeredContent);
  }
  /**
   * Adds a tab to all relevant item sheets.
   * @see {@link CustomTabBase} for options related to all tabs.
   * @param tab the custom tab settings to use when incorporating this tab.
   * @example Register an item tab for spell items only, adding some custom data to the Item Sheet Context object before rendering my handlebars template
   * ```js
   * Hooks.once('tidy5e-sheet.ready', (api) => {
   *   api.registerItemTab(
   *     new api.models.HandlebarsTab({
   *       title: 'My Item Tab',
   *       tabId: 'my-module-id-my-item-tab',
   *       path: '/modules/my-module-id/my-item-tab.hbs',
   *       enabled: (data) => data.item.type === 'spell',
   *       getData: (data) => {
   *         data['my-extra-data'] = 'Hello, world! 👋';
   *         return data;
   *       },
   *       onRender(params) {
   *         const myTab = $(params.tabContentsElement);
   *         myTab.find('.my-control').click(_myHandler.bind(params.app));
   *       },
   *     }));
   * });
   * ```
   *
   * @example Register an item tab with autoHeight, similar to how Details item tabs work.
   * ```js
   * Hooks.once("tidy5e-sheet.ready", (api) => {
   *   api.registerItemTab(
   *     new api.models.HtmlTab({
   *       title: "My Item Tab",
   *       tabId: "my-module-id-my-item-tab",
   *       html: "<h1>LOREM! IPSUM! FIREBALLLLLL!!</h1><h1>LOREM! IPSUM! FIREBALLLLLL!!</h1><h1>LOREM! IPSUM! FIREBALLLLLL!!</h1><h1>LOREM! IPSUM! FIREBALLLLLL!!</h1><h1>LOREM! IPSUM! FIREBALLLLLL!!</h1><h1>LOREM! IPSUM! FIREBALLLLLL!!</h1><h1>LOREM! IPSUM! FIREBALLLLLL!!</h1><h1>LOREM! IPSUM! FIREBALLLLLL!!</h1><h1>LOREM! IPSUM! FIREBALLLLLL!!</h1><h1>LOREM! IPSUM! FIREBALLLLLL!!</h1><h1>LOREM! IPSUM! FIREBALLLLLL!!</h1><h1>LOREM! IPSUM! FIREBALLLLLL!!</h1><h1>LOREM! IPSUM! FIREBALLLLLL!!</h1><h1>LOREM! IPSUM! FIREBALLLLLL!!</h1><h1>LOREM! IPSUM! FIREBALLLLLL!!</h1><h1>LOREM! IPSUM! FIREBALLLLLL!!</h1><h1>LOREM! IPSUM! FIREBALLLLLL!!</h1><h2>🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥</h2>",
   *     }),
   *     { autoHeight: true } // 👈 With Auto Height set to `true`, the item window will stretch as tall as it can to match the content height when this tab is viewed.
   *   );
   * });
   * ```
   *
   * @remarks
   * A tab ID is always required (see {@link TabId}).
   */
  registerItemTab(tab, options) {
    if (!TabManager.validateTab(tab))
      return;
    const registeredTab = TabManager.mapCustomTabToRegisteredTab(tab);
    if (!registeredTab) {
      warn("Unable to register tab. Tab type not supported");
      return;
    }
    options?.autoHeight && (registeredTab.autoHeight = options.autoHeight), ItemSheetRuntime.registerTab(registeredTab);
  }
  /**
   * Adds a tab to the available NPC sheet tabs.
   * @param {SupportedTab} tab the information necessary to render a tab
   * @param {object} [options] sheet registration options
   * @param {string} [options.layout] an optional sheet layout or layouts (default: 'all')
   * @param {string} [options.overrideExisting] if a tab with this ID already exists, override it
   * @returns void
   * @example Registering a handlebars-based NPC sheet tab
   * ```js
   * Hooks.once('tidy5e-sheet.ready', (api) => {
   *   api.registerNpcTab(
   *     new api.models.HandlebarsTab({
   *       title: 'My Tab',
   *       path: '/modules/my-module-id/templates/my-handlebars-template.hbs',
   *       tabId: 'my-module-id-registered-npc-tab',
   *       getData: async (data) => {
   *         data['my-message'] = 'Hello, world! 🌊🏄‍♂️';
   *         return Promise.resolve(data);
   *       },
   *       onRender(params) {
   *         const myTab = $(params.tabContentsElement);
   *         myTab.find('.my-control').click(_myHandler.bind(params.app));
   *       },
   *     })
   *   );
   * });
   * ```
   *
   * @remarks
   * A tab ID is always required (see {@link TabId}).
   */
  registerNpcTab(tab, options) {
    if (!TabManager.validateTab(tab))
      return;
    const registeredTab = TabManager.mapCustomTabToRegisteredTab(
      tab,
      options?.layout
    );
    if (!registeredTab) {
      warn("Unable to register tab. Tab type not supported");
      return;
    }
    NpcSheetRuntime.registerTab(registeredTab);
  }
  /**
   * Adds a tab to the available Vehicle sheet tabs.
   * @param {SupportedTab} tab the information necessary to render a tab
   * @param {object} [options] sheet registration options
   * @param {string} [options.layout] an optional sheet layout or layouts (default: 'all')
   * @param {string} [options.overrideExisting] if a tab with this ID already exists, override it
   * @returns void
   * @example Registering a handlebars-based vehicle sheet tab
   * ```js
   * Hooks.once('tidy5e-sheet.ready', (api) => {
   *   api.registerVehicleTab(
   *     new api.models.HandlebarsTab({
   *       title: 'My Tab',
   *       path: '/modules/my-module-id/templates/my-handlebars-template.hbs',
   *       tabId: 'my-module-id-registered-vehicle-tab',
   *       getData: async (data) => {
   *         data['my-message'] = 'Hello, world! 🌊🏄‍♂️';
   *         return Promise.resolve(data);
   *       },
   *       onRender(params) {
   *         const myTab = $(params.tabContentsElement);
   *         myTab.find('.my-control').click(_myHandler.bind(params.app));
   *       },
   *     })
   *   );
   * });
   * ```
   *
   * @remarks
   * A tab ID is always required (see {@link TabId}).
   */
  registerVehicleTab(tab, options) {
    if (!TabManager.validateTab(tab))
      return;
    const registeredTab = TabManager.mapCustomTabToRegisteredTab(
      tab,
      options?.layout
    );
    if (!registeredTab) {
      warn("Unable to register tab. Tab type not supported");
      return;
    }
    VehicleSheetRuntime.registerTab(registeredTab);
  }
  /**
   * Registers header controls for all Tidy Application V2 Actor sheets.
   *
   * @param params parameters for registering header controls
   *
   * @example Registering a header with an icon, a label, and a handler
   *
   * ```js
   * Hooks.once('tidy5e-sheet.ready', (api) => {
   *   api.registerActorHeaderControls({
   *     controls: [
   *       {
   *         icon: 'fas fa-hand-sparkles',
   *         label: 'Say Hello',
   *         async onClickAction() {
   *           ui.notifications.info(`Hello, Foundry!`);
   *         },
   *       },
   *     ],
   *   });
   * });
   * ```
   *
   * @example Registering a header control with a lot of settings.
   *
   * ```js
   * Hooks.once('tidy5e-sheet.ready', (api) => {
   *   api.registerActorHeaderControls({
   *     controls: [
   *       {
   *         icon: 'fas fa-broom',
   *         label: 'Debug Button',
   *         visible() {
   *           return !this.document.compendium?.locked;
   *         },
   *         async onClickAction(event) {
   *           ui.notifications.info(
   *             `Logged document data for ${this.document.name} to console for review.`
   *           );
   *           console.log(this.document);
   *           console.log(await this.document.sheet._prepareContext());
   *         },
   *         ownership: CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER,
   *       },
   *     ],
   *   });
   * });
   * ```
   */
  registerActorHeaderControls(params) {
    HeaderControlsRuntime.registerHeaderControls(
      params.controls.map((c2) => ({
        ...c2,
        supportedDocuments: ["Actor"]
      }))
    );
  }
  /**
   * Registers header controls for all Tidy Application V2 Character sheets.
   *
   * @param params parameters for registering header controls
   *
   * @example Registering a header control with a lot of settings.
   *
   * ```js
   * Hooks.once('tidy5e-sheet.ready', (api) => {
   *   api.registerCharacterHeaderControls({
   *     controls: [
   *       {
   *         icon: 'fas fa-broom',
   *         label: 'Debug Button',
   *         visible() {
   *           return !this.document.compendium?.locked;
   *         },
   *         async onClickAction(event) {
   *           ui.notifications.info(
   *             `Logged document data for ${this.document.name} to console for review.`
   *           );
   *           console.log(this.document);
   *           console.log(await this.document.sheet._prepareContext());
   *         },
   *         ownership: CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER,
   *       },
   *     ],
   *   });
   * });
   * ```
   */
  registerCharacterHeaderControls(params) {
    HeaderControlsRuntime.registerHeaderControls(
      params.controls.map((c2) => ({
        ...c2,
        supportedDocuments: ["Actor"],
        documentTypes: [CONSTANTS.SHEET_TYPE_CHARACTER]
      }))
    );
  }
  /**
   * Registers header controls for all Tidy Application V2 Group sheets.
   *
   * @param params parameters for registering header controls
   *
   * @example Registering a header control with a lot of settings.
   *
   * ```js
   * Hooks.once('tidy5e-sheet.ready', (api) => {
   *   api.registerGroupHeaderControls({
   *     controls: [
   *       {
   *         icon: 'fas fa-broom',
   *         label: 'Debug Button',
   *         visible() {
   *           return !this.document.compendium?.locked;
   *         },
   *         async onClickAction(event) {
   *           ui.notifications.info(
   *             `Logged document data for ${this.document.name} to console for review.`
   *           );
   *           console.log(this.document);
   *           console.log(await this.document.sheet._prepareContext());
   *         },
   *         ownership: CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER,
   *       },
   *     ],
   *   });
   * });
   * ```
   */
  registerGroupHeaderControls(params) {
    HeaderControlsRuntime.registerHeaderControls(
      params.controls.map((c2) => ({
        ...c2,
        supportedDocuments: ["Actor"],
        documentTypes: [CONSTANTS.SHEET_TYPE_GROUP]
      }))
    );
  }
  /**
   * Registers header controls for all Tidy Application V2 Item sheets.
   *
   * @param params parameters for registering header controls
   *
   * @example Registering a header control for containers only and with fairly involved usage of the parameters.
   *
   * ```js
   * Hooks.once('tidy5e-sheet.ready', (api) => {
   *   api.registerItemHeaderControls({
   *     controls: [
   *       {
   *         icon: 'fas fa-coins',
   *         label: 'Take all the coin!',
   *         visible() {
   *           return (
   *             this.document.type === 'container' &&
   *             this.document.actor &&
   *             this.document.isOwner
   *           );
   *         },
   *         async onClickAction(event) {
   *           ui.notifications.info(`Taking all the money out of the bag!`);
   *           const actorCurrency = this.actor.toObject().system.currency;
   *           const containerCurrency = this.document.toObject().system.currency;
   *           for (let [key, value] of Object.entries(containerCurrency)) {
   *             actorCurrency[key] += containerCurrency[key];
   *             containerCurrency[key] = 0;
   *           }
   *           this.actor.update({
   *             system: {
   *               currency: actorCurrency,
   *             },
   *           });
   *           this.document.update({
   *             system: {
   *               currency: containerCurrency,
   *             },
   *           });
   *         },
   *         ownership: CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER,
   *       },
   *     ],
   *   });
   * });
   * ```
   */
  registerItemHeaderControls(params) {
    HeaderControlsRuntime.registerHeaderControls(
      params.controls.map((c2) => ({
        ...c2,
        supportedDocuments: ["Item"]
      }))
    );
  }
  /**
   * Registers header controls for all Tidy Application V2 NPC sheets.
   *
   * @param params parameters for registering header controls
   *
   * @example Registering a header control with a lot of settings.
   *
   * ```js
   * Hooks.once('tidy5e-sheet.ready', (api) => {
   *   api.registerNpcHeaderControls({
   *     controls: [
   *       {
   *         icon: 'fas fa-broom',
   *         label: 'Debug Button',
   *         visible() {
   *           return !this.document.compendium?.locked;
   *         },
   *         async onClickAction(event) {
   *           ui.notifications.info(
   *             `Logged document data for ${this.document.name} to console for review.`
   *           );
   *           console.log(this.document);
   *           console.log(await this.document.sheet._prepareContext());
   *         },
   *         ownership: CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER,
   *       },
   *     ],
   *   });
   * });
   * ```
   */
  registerNpcHeaderControls(params) {
    HeaderControlsRuntime.registerHeaderControls(
      params.controls.map((c2) => ({
        ...c2,
        supportedDocuments: ["Actor"],
        documentTypes: [CONSTANTS.SHEET_TYPE_NPC]
      }))
    );
  }
  /**
   * Registers header controls for all Tidy Application V2 Vehicle sheets.
   *
   * @param params parameters for registering header controls
   *
   * @example Registering a header control with a lot of settings.
   *
   * ```js
   * Hooks.once('tidy5e-sheet.ready', (api) => {
   *   api.registerVehicleHeaderControls({
   *     controls: [
   *       {
   *         icon: 'fas fa-broom',
   *         label: 'Debug Button',
   *         visible() {
   *           return !this.document.compendium?.locked;
   *         },
   *         async onClickAction(event) {
   *           ui.notifications.info(
   *             `Logged document data for ${this.document.name} to console for review.`
   *           );
   *           console.log(this.document);
   *           console.log(await this.document.sheet._prepareContext());
   *         },
   *         ownership: CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER,
   *       },
   *     ],
   *   });
   * });
   * ```
   */
  registerVehicleHeaderControls(params) {
    HeaderControlsRuntime.registerHeaderControls(
      params.controls.map((c2) => ({
        ...c2,
        supportedDocuments: ["Actor"],
        documentTypes: [CONSTANTS.SHEET_TYPE_VEHICLE]
      }))
    );
  }
  /**
   * Wraps the provided HTML so that Tidy will remove the content when handling document changes.
   * @param html any HTML string that needs to be re-rendered in the style of Foundry Handlebars (usually, this is any time the target document or its embedded documents change).
   * @returns the original HTML with a transparent element wrapped around which indicates to Tidy that this should be removed and re-rendered.
   *
   * @remarks
   * The intended use of this function is to accompany the use of the `tidy5e-sheet.renderActorSheet` or `tidy5e-sheet.renderItemSheet` hook.
   * Any content injected through those hooks needs to be wrapped in this way so that the old version
   * of the HTML can be removed before adding it back in.
   * Handlebars refreshes content in this way, but for Tidy purposes, the module needs to know when an arbitrary
   * segment of HTML is meant to be removed. This function provides that information to Tidy for your HTML.
   *
   * @example Injecting dynamic HTML through Tidy actor sheet render hook
   * ```js
   * Hooks.on('tidy5e-sheet.renderActorSheet', (app, element, data) => {
   *   const api = game.modules.get('tidy5e-sheet').api;
   *   const actorEmoji = data.actor.system.currency.pp > 0 ? '💹' : '📉';
   *   let iconHtml = api.useHandlebarsRendering(`<h1>${actorEmoji}</h1>`);
   *   // 👆 This HTML looks like `<div style="display: contents;" data-tidy-render-scheme="handlebars"><h1>📉</h1></div>`
   *   // if the actor doesn't have at least 1 platinum.
   *   // Tidy will remove this each time the sheet would normally re-render, and it will add it back.
   *   // When the actor have more than 0 platinum, stonks will rise.
   *
   *   let actorNameElement = element.querySelector(`[data-tidy-field="name"]`);
   *   actorNameElement?.insertAdjacentHTML('afterend', iconHtml);
   * });
   * ```
   */
  useHandlebarsRendering(html2) {
    return `<div style="display: contents;" ${CONSTANTS.HTML_DYNAMIC_RENDERING_ATTRIBUTE}>${html2}</div>`;
  }
}
const tidyFlagIdeal = "ideal", tidyFlagBond = "bond", tidyFlagFlaw = "flaw";
async function migrateBondsIdealsFlawsToSystem({
  npc,
  clearFlagData,
  overwrite
}) {
  if (npc)
    try {
      let updates = {};
      ((npc.system.details.bond ?? "").trim() === "" || overwrite) && (updates["system.details.bond"] = TidyFlags.tryGetFlag(npc, tidyFlagBond) ?? ""), ((npc.system.details.ideal ?? "").trim() === "" || overwrite) && (updates["system.details.ideal"] = TidyFlags.tryGetFlag(npc, tidyFlagIdeal) ?? ""), ((npc.system.details.flaw ?? "").trim() === "" || overwrite) && (updates["system.details.flaw"] = TidyFlags.tryGetFlag(npc, tidyFlagFlaw) ?? ""), Object.keys(updates).length > 0 && await npc.update(updates), clearFlagData && (await TidyFlags.unsetFlag(npc, tidyFlagIdeal), await TidyFlags.unsetFlag(npc, tidyFlagBond), await TidyFlags.unsetFlag(npc, tidyFlagFlaw));
    } catch (e2) {
      error("An error occurred while migrating an NPC's bonds, ideals, and flaws", !1, {
        error: e2,
        actor: npc,
        clearFlagData,
        overwrite
      }), error(
        FoundryAdapter.localize(
          "TIDY5E.Settings.Migrations.migrationErrorMessage"
        ),
        !0
      );
    }
}
__name(migrateBondsIdealsFlawsToSystem, "migrateBondsIdealsFlawsToSystem");
var on_click$o = /* @__PURE__ */ __name((ev, migrateCompendia) => migrateCompendia(), "on_click$o"), on_click_1$b = /* @__PURE__ */ __name((ev, migrate) => migrate(), "on_click_1$b"), root$Y = /* @__PURE__ */ template('<section class="svelte-1fnhfkf"><h2> </h2> <h3> </h3> <div class="options grid-auto-columns svelte-1fnhfkf"><label class="green-checkbox"><input type="checkbox"> </label> <label class="green-checkbox"><input type="checkbox"> </label></div> <footer class="flex-row extra-small-gap svelte-1fnhfkf"><button type="button"> </button> <button type="button"> </button></footer></section>');
function BondsIdealsFlawsToSystemMigration($$anchor, $$props) {
  push($$props, !0);
  let migrating = state(!1), deleteFlags = state(!1), overwrite = state(!1);
  const localize = FoundryAdapter.localize;
  async function migrate() {
    const actorsToMigrate = Array.from(game.actors).filter((a2) => a2.isOwner && a2.type === CONSTANTS.SHEET_TYPE_NPC);
    new MigrationSelectionApplication({
      onConfirm: /* @__PURE__ */ __name(async (selected) => {
        set(migrating, !0), ui.notifications.info(localize("TIDY5E.Settings.Migrations.migrationBeginningMessage"));
        for (let choice of selected)
          await migrateBondsIdealsFlawsToSystem({
            npc: choice,
            clearFlagData: get(deleteFlags),
            overwrite: get(overwrite)
          });
        ui.notifications.info(localize("TIDY5E.Settings.Migrations.migrationCompleteMessage")), resetOptions(), set(migrating, !1);
      }, "onConfirm"),
      columns: [
        {
          cellWidth: "primary",
          field: {
            type: "simple",
            propPath: "name",
            onClick: /* @__PURE__ */ __name((target) => target.sheet.render(!0), "onClick")
          },
          name: localize("TIDY5E.Settings.Migrations.Selection.ToMigrate")
        }
      ],
      documents: actorsToMigrate,
      title: FoundryAdapter.localize("TIDY5E.Settings.Migrations.BondsIdealsFlawsToSystem.selectionDialogTitle")
    }).render(!0);
  }
  __name(migrate, "migrate");
  async function migrateCompendia() {
    const compendiaForMigrating = Array.from(game.packs.values()).filter((c2) => !c2.locked && c2.documentName === "Actor").map((c2) => ({
      label: c2.metadata.label,
      type: c2.metadata.type,
      id: c2.metadata.id,
      size: c2.index.size
    }));
    new MigrationSelectionApplication({
      onConfirm: /* @__PURE__ */ __name(async (selected) => {
        ui.notifications.info(localize("TIDY5E.Settings.Migrations.migrationBeginningMessage"));
        for (const compendium of selected) {
          debug(`Migrating compendium "${compendium.label}"...`);
          try {
            const actors = await game.packs.get(compendium.id).getDocuments();
            for (const actor of actors)
              actor.type === CONSTANTS.SHEET_TYPE_NPC && await migrateBondsIdealsFlawsToSystem({
                npc: actor,
                overwrite: get(overwrite),
                clearFlagData: get(deleteFlags)
              });
            debug(`Compendium "${compendium.label}" migration successful.`);
          } catch (e2) {
            error(localize("TIDY5E.Settings.Migrations.migrationErrorMessage"), !0), error(`Error while migrating compendium "${compendium.label}"`, !1, e2);
          }
        }
        ui.notifications.info(localize("TIDY5E.Settings.Migrations.migrationCompleteMessage"));
      }, "onConfirm"),
      columns: [
        {
          cellWidth: "primary",
          field: {
            type: "simple",
            propPath: "label",
            onClick: /* @__PURE__ */ __name((target) => game.packs.get(target.id).render(!0), "onClick")
          },
          name: localize("TIDY5E.Settings.Migrations.MigrateCompendia.CompendiumLabel")
        },
        {
          cellWidth: "5rem",
          field: {
            type: "contextual",
            getText: /* @__PURE__ */ __name((c2) => localize(`DOCUMENT.${c2.type}`), "getText")
          },
          name: localize("Type")
        },
        {
          cellWidth: "10rem",
          field: { type: "simple", propPath: "size" },
          name: localize("TIDY5E.Settings.Migrations.MigrateCompendia.TotalEntriesLabel")
        }
      ],
      documents: compendiaForMigrating,
      title: localize("TIDY5E.Settings.Migrations.MigrateCompendia.SelectionDialogTitle")
    }).render(!0);
  }
  __name(migrateCompendia, "migrateCompendia");
  function resetOptions() {
    set(deleteFlags, !1), set(overwrite, !1);
  }
  __name(resetOptions, "resetOptions");
  var section = root$Y(), h2 = child(section), text2 = child(h2);
  template_effect(() => set_text(text2, localize("TIDY5E.Settings.Migrations.BondsIdealsFlawsToSystem.sectionTitle")));
  var h3 = sibling(h2, 2), text_1 = child(h3);
  template_effect(() => set_text(text_1, localize("TIDY5E.Settings.Migrations.OptionsHeader")));
  var div = sibling(h3, 2), label = child(div);
  template_effect(() => set_attribute(label, "data-tooltip", localize("TIDY5E.Settings.Migrations.OptionOverwrite.Tooltip")));
  var input = child(label), text_2 = sibling(input);
  template_effect(() => set_text(text_2, ` ${localize("TIDY5E.Settings.Migrations.OptionOverwrite.Text") ?? ""}`));
  var label_1 = sibling(label, 2);
  template_effect(() => set_attribute(label_1, "data-tooltip", localize("TIDY5E.Settings.Migrations.OptionDeleteFlags.Tooltip")));
  var input_1 = child(label_1), text_3 = sibling(input_1);
  template_effect(() => set_text(text_3, ` ${localize("TIDY5E.Settings.Migrations.OptionDeleteFlags.Text") ?? ""}`));
  var footer = sibling(div, 2), button = child(footer);
  button.__click = [on_click$o, migrateCompendia];
  var text_4 = child(button);
  template_effect(() => set_text(text_4, localize("TIDY5E.Settings.Migrations.MigrateCompendia.Title")));
  var button_1 = sibling(button, 2);
  button_1.__click = [on_click_1$b, migrate];
  var text_5 = child(button_1);
  template_effect(() => set_text(text_5, localize("TIDY5E.Settings.Migrations.ButtonMigration.Text"))), template_effect(() => {
    input.disabled = get(migrating), input_1.disabled = get(migrating), button.disabled = get(migrating), button_1.disabled = get(migrating);
  }), bind_checked(input, () => get(overwrite), ($$value) => set(overwrite, $$value)), bind_checked(input_1, () => get(deleteFlags), ($$value) => set(deleteFlags, $$value)), append($$anchor, section), pop();
}
__name(BondsIdealsFlawsToSystemMigration, "BondsIdealsFlawsToSystemMigration");
delegate(["click"]);
const tidyFlagParentClass = "parentClass";
async function migrateSpellClassToSourceClass({
  item,
  clearFlagData,
  overwrite
}) {
  if (item)
    try {
      let updates = {};
      ((item.system.sourceClass ?? "").trim() === "" || overwrite) && (updates["system.sourceClass"] = TidyFlags.tryGetFlag(item, tidyFlagParentClass) ?? ""), Object.keys(updates).length > 0 && await item.update(updates), clearFlagData && await TidyFlags.unsetFlag(item, tidyFlagParentClass);
    } catch (e2) {
      error("An error occurred while migrating an item's parent class", !1, {
        error: e2,
        item,
        clearFlagData,
        overwrite
      }), error(
        FoundryAdapter.localize(
          "TIDY5E.Settings.Migrations.migrationErrorMessage"
        ),
        !0
      );
    }
}
__name(migrateSpellClassToSourceClass, "migrateSpellClassToSourceClass");
var on_click$n = /* @__PURE__ */ __name((ev, migrateCompendia) => migrateCompendia(), "on_click$n"), on_click_1$a = /* @__PURE__ */ __name((ev, migrate) => migrate(), "on_click_1$a"), root$X = /* @__PURE__ */ template('<section class="svelte-1fnhfkf"><h2> </h2> <h3> </h3> <div class="options grid-auto-columns svelte-1fnhfkf"><label class="green-checkbox"><input type="checkbox"> </label> <label class="green-checkbox"><input type="checkbox"> </label></div> <footer class="flex-row extra-small-gap svelte-1fnhfkf"><button type="button"> </button> <button type="button"> </button></footer></section>');
function SpellClassToSourceClassMigration($$anchor, $$props) {
  push($$props, !0);
  let migrating = state(!1), deleteFlags = state(!1), overwrite = state(!1);
  const localize = FoundryAdapter.localize;
  async function migrate() {
    const actorItemsToMigrate = Array.from(game.actors).filter((a2) => a2.isOwner).map((a2) => ({ actor: a2, unlinked: !1 })).flatMap((value) => Array.from(value.actor.items).filter((item) => item.type === CONSTANTS.ITEM_TYPE_SPELL).map((item) => ({ item, unlinked: value.unlinked }))), worldItemsToMigrate = Array.from(game.items).map((item) => ({ item, unlinked: !0 })), itemsToMigrate = [
      ...actorItemsToMigrate,
      ...worldItemsToMigrate
    ];
    new MigrationSelectionApplication({
      onConfirm: /* @__PURE__ */ __name(async (selected) => {
        set(migrating, !0), ui.notifications.info(localize("TIDY5E.Settings.Migrations.migrationBeginningMessage"));
        for (let choice of selected)
          await migrateSpellClassToSourceClass({
            item: choice.item,
            clearFlagData: get(deleteFlags),
            overwrite: get(overwrite)
          });
        ui.notifications.info(localize("TIDY5E.Settings.Migrations.migrationCompleteMessage")), resetOptions(), set(migrating, !1);
      }, "onConfirm"),
      columns: [
        {
          cellWidth: "primary",
          field: {
            type: "simple",
            propPath: "item.name",
            onClick: /* @__PURE__ */ __name((target) => target.item.sheet.render(!0), "onClick")
          },
          name: localize("TIDY5E.Settings.Migrations.Selection.ToMigrate")
        },
        {
          cellWidth: "10rem",
          field: {
            type: "simple",
            propPath: "item.parent.name",
            onClick: /* @__PURE__ */ __name((target) => target.item.parent?.sheet?.render(!0), "onClick")
          },
          name: localize("TIDY5E.Settings.Migrations.Parent")
        },
        {
          cellWidth: "10rem",
          name: "",
          field: {
            type: "contextual",
            getText: /* @__PURE__ */ __name(({ unlinked }) => unlinked ? FoundryAdapter.localize("TIDY5E.TokenUnlinked") : FoundryAdapter.localize("DOCUMENT.Actor"), "getText")
          }
        }
      ],
      documents: itemsToMigrate,
      title: FoundryAdapter.localize("TIDY5E.Settings.Migrations.SpellClassToSourceClass.selectionDialogTitle")
    }).render(!0);
  }
  __name(migrate, "migrate");
  async function migrateCompendia() {
    const compendiaForMigrating = Array.from(game.packs.values()).filter((c2) => !c2.locked && c2.documentName === "Item").map((c2) => ({
      label: c2.metadata.label,
      type: c2.metadata.type,
      id: c2.metadata.id,
      size: c2.index.size
    }));
    new MigrationSelectionApplication({
      onConfirm: /* @__PURE__ */ __name(async (selected) => {
        ui.notifications.info(localize("TIDY5E.Settings.Migrations.migrationBeginningMessage"));
        for (const compendium of selected) {
          debug(`Migrating compendium "${compendium.label}"...`);
          try {
            const items = await game.packs.get(compendium.id).getDocuments();
            for (const item of items)
              item.type === CONSTANTS.ITEM_TYPE_SPELL && await migrateSpellClassToSourceClass({
                item,
                overwrite: get(overwrite),
                clearFlagData: get(deleteFlags)
              });
            debug(`Compendium "${compendium.label}" migration successful.`);
          } catch (e2) {
            error(localize("TIDY5E.Settings.Migrations.migrationErrorMessage"), !0), error(`Error while migrating compendium "${compendium.label}"`, !1, e2);
          }
        }
        ui.notifications.info(localize("TIDY5E.Settings.Migrations.migrationCompleteMessage"));
      }, "onConfirm"),
      columns: [
        {
          cellWidth: "primary",
          field: {
            type: "simple",
            propPath: "label",
            onClick: /* @__PURE__ */ __name((target) => game.packs.get(target.id).render(!0), "onClick")
          },
          name: localize("TIDY5E.Settings.Migrations.MigrateCompendia.CompendiumLabel")
        },
        {
          cellWidth: "5rem",
          field: {
            type: "contextual",
            getText: /* @__PURE__ */ __name((c2) => localize(`DOCUMENT.${c2.type}`), "getText")
          },
          name: localize("Type")
        },
        {
          cellWidth: "10rem",
          field: { type: "simple", propPath: "size" },
          name: localize("TIDY5E.Settings.Migrations.MigrateCompendia.TotalEntriesLabel")
        }
      ],
      documents: compendiaForMigrating,
      title: localize("TIDY5E.Settings.Migrations.MigrateCompendia.SelectionDialogTitle")
    }).render(!0);
  }
  __name(migrateCompendia, "migrateCompendia");
  function resetOptions() {
    set(deleteFlags, !1), set(overwrite, !1);
  }
  __name(resetOptions, "resetOptions");
  var section = root$X(), h2 = child(section), text2 = child(h2);
  template_effect(() => set_text(text2, localize("TIDY5E.Settings.Migrations.SpellClassToSourceClass.sectionTitle")));
  var h3 = sibling(h2, 2), text_1 = child(h3);
  template_effect(() => set_text(text_1, localize("TIDY5E.Settings.Migrations.OptionsHeader")));
  var div = sibling(h3, 2), label = child(div);
  template_effect(() => set_attribute(label, "data-tooltip", localize("TIDY5E.Settings.Migrations.OptionOverwrite.Tooltip")));
  var input = child(label), text_2 = sibling(input);
  template_effect(() => set_text(text_2, ` ${localize("TIDY5E.Settings.Migrations.OptionOverwrite.Text") ?? ""}`));
  var label_1 = sibling(label, 2);
  template_effect(() => set_attribute(label_1, "data-tooltip", localize("TIDY5E.Settings.Migrations.OptionDeleteFlags.Tooltip")));
  var input_1 = child(label_1), text_3 = sibling(input_1);
  template_effect(() => set_text(text_3, ` ${localize("TIDY5E.Settings.Migrations.OptionDeleteFlags.Text") ?? ""}`));
  var footer = sibling(div, 2), button = child(footer);
  button.__click = [on_click$n, migrateCompendia];
  var text_4 = child(button);
  template_effect(() => set_text(text_4, localize("TIDY5E.Settings.Migrations.MigrateCompendia.Title")));
  var button_1 = sibling(button, 2);
  button_1.__click = [on_click_1$a, migrate];
  var text_5 = child(button_1);
  template_effect(() => set_text(text_5, localize("TIDY5E.Settings.Migrations.ButtonMigration.Text"))), template_effect(() => {
    input.disabled = get(migrating), input_1.disabled = get(migrating), button.disabled = get(migrating), button_1.disabled = get(migrating);
  }), bind_checked(input, () => get(overwrite), ($$value) => set(overwrite, $$value)), bind_checked(input_1, () => get(deleteFlags), ($$value) => set(deleteFlags, $$value)), append($$anchor, section), pop();
}
__name(SpellClassToSourceClassMigration, "SpellClassToSourceClassMigration");
delegate(["click"]);
const exhaustionFlag = "exhaustion";
async function migrateNpcExhaustionToSystem({
  npc,
  clearFlagData
}) {
  const tidyExhaustion = TidyFlags.tryGetFlag(
    npc,
    exhaustionFlag
  );
  tidyExhaustion != null && (await npc.update({
    "system.attributes.exhaustion": tidyExhaustion
  }), clearFlagData && TidyFlags.unsetFlag(npc, exhaustionFlag));
}
__name(migrateNpcExhaustionToSystem, "migrateNpcExhaustionToSystem");
var on_click$m = /* @__PURE__ */ __name((ev, migrate) => migrate(), "on_click$m"), root$W = /* @__PURE__ */ template('<section class="svelte-f3txbi"><h2> </h2> <p> </p> <h3> </h3> <div class="options grid-auto-columns svelte-f3txbi"><label class="green-checkbox"><input type="checkbox"> </label></div> <button type="button" class="svelte-f3txbi"> </button></section>');
function NpcExhaustionToSystemMigration($$anchor, $$props) {
  push($$props, !0);
  let migrating = state(!1), deleteFlags = state(!1);
  async function migrate() {
    try {
      const actorsToMigrate = Array.from(game.actors).filter((a2) => a2.type === CONSTANTS.SHEET_TYPE_NPC && a2.isOwner).map((a2) => ({ actor: a2, unlinked: !1 })), tokenActors = Array.from(canvas?.scene?.tokens ?? []).filter((t2) => t2.actor?.type === CONSTANTS.SHEET_TYPE_NPC && !t2.actor.prototypeToken?.actorLink && t2.actor.isOwner).map((t2) => ({ actor: t2.actor, unlinked: !0 }));
      actorsToMigrate.push(...tokenActors), new MigrationSelectionApplication(
        {
          onConfirm: /* @__PURE__ */ __name(async (selected) => {
            set(migrating, !0), ui.notifications.info(localize("TIDY5E.Settings.Migrations.migrationBeginningMessage")), migrateActors(selected.map((s2) => s2.actor));
          }, "onConfirm"),
          columns: [
            {
              cellWidth: "primary",
              field: {
                type: "simple",
                propPath: "actor.name",
                onClick: /* @__PURE__ */ __name((target) => target.actor.sheet.render(!0), "onClick")
              },
              name: localize("TIDY5E.Settings.Migrations.Selection.ToMigrate")
            },
            {
              cellWidth: "5rem",
              field: {
                type: "simple",
                propPath: `actor.flags.${CONSTANTS.MODULE_ID}.exhaustion`
              },
              name: localize("DND5E.Exhaustion")
            },
            {
              cellWidth: "10rem",
              name: "",
              field: {
                type: "contextual",
                getText: /* @__PURE__ */ __name(({ unlinked }) => unlinked ? FoundryAdapter.localize("TIDY5E.TokenUnlinked") : FoundryAdapter.localize("DOCUMENT.Actor"), "getText")
              }
            }
          ],
          documents: actorsToMigrate,
          title: FoundryAdapter.localize("TIDY5E.Settings.Migrations.NpcExhaustion.selectionDialogTitle")
        },
        () => {
          set(migrating, !1);
        }
      ).render(!0);
    } catch (e2) {
      error("An error occurred while preparing a bulk migration", !1, e2);
    }
  }
  __name(migrate, "migrate");
  async function migrateActors(actors) {
    try {
      for (let actorToMigrate of actors)
        await migrateActor(actorToMigrate);
    } finally {
      set(migrating, !1), ui.notifications.info(FoundryAdapter.localize("TIDY5E.Settings.Migrations.migrationCompleteMessage")), resetOptions();
    }
  }
  __name(migrateActors, "migrateActors");
  function resetOptions() {
    set(deleteFlags, !1);
  }
  __name(resetOptions, "resetOptions");
  async function migrateActor(actor) {
    try {
      debug(`Migrating actor ${actor?.name}...`), migrateNpcExhaustionToSystem({
        npc: actor,
        clearFlagData: get(deleteFlags)
      }), debug(`Actor ${actor?.name} migration successful!`);
    } catch (e2) {
      error(`An error occurred while migrating NPC exhaustion data for ${actor?.name}`, !1, e2), ui.notifications.error(FoundryAdapter.localize("TIDY5E.Settings.Migrations.migrationErrorMessage"), { permanent: !0 });
    }
  }
  __name(migrateActor, "migrateActor");
  const localize = FoundryAdapter.localize;
  var section = root$W(), h2 = child(section), text2 = child(h2);
  template_effect(() => set_text(text2, localize("TIDY5E.Settings.Migrations.NpcExhaustion.sectionTitle")));
  var p2 = sibling(h2, 2), text_1 = child(p2);
  template_effect(() => set_text(text_1, localize("TIDY5E.Settings.Migrations.UnlinkedExplanation")));
  var h3 = sibling(p2, 2), text_2 = child(h3);
  template_effect(() => set_text(text_2, localize("TIDY5E.Settings.Migrations.OptionsHeader")));
  var div = sibling(h3, 2), label = child(div);
  template_effect(() => set_attribute(label, "data-tooltip", localize("TIDY5E.Settings.Migrations.OptionDeleteFlags.Tooltip")));
  var input = child(label), text_3 = sibling(input);
  template_effect(() => set_text(text_3, ` ${localize("TIDY5E.Settings.Migrations.OptionDeleteFlags.Text") ?? ""}`));
  var button = sibling(div, 2);
  button.__click = [on_click$m, migrate];
  var text_4 = child(button);
  template_effect(() => set_text(text_4, localize("TIDY5E.Settings.Migrations.ButtonMigration.Text"))), template_effect(() => {
    input.disabled = get(migrating), button.disabled = get(migrating);
  }), bind_checked(input, () => get(deleteFlags), ($$value) => set(deleteFlags, $$value)), append($$anchor, section), pop();
}
__name(NpcExhaustionToSystemMigration, "NpcExhaustionToSystemMigration");
delegate(["click"]);
var root$V = /* @__PURE__ */ template('<div class="bulk-migrations-container svelte-1b575i"><div role="presentation" class="vertical-tab-container flex-column no-gap svelte-1b575i"><!> <div role="presentation" class="remaining-vertical-space svelte-1b575i"></div> <!></div> <!></div>');
function BulkMigrations($$anchor, $$props) {
  push($$props, !0);
  let selectedTabId = prop($$props, "selectedTabId", 31, () => proxy(CONSTANTS.TAB_MIGRATIONS_NPC_EXHAUSTION));
  const localize = FoundryAdapter.localize, tabs = [
    {
      id: CONSTANTS.TAB_MIGRATIONS_NPC_EXHAUSTION,
      title: "TIDY5E.Settings.Migrations.NpcExhaustion.sectionTitle",
      content: {
        component: NpcExhaustionToSystemMigration,
        type: "svelte"
      }
    },
    {
      id: CONSTANTS.TAB_MIGRATIONS_SPELL_CLASS_TO_SOURCE_CLASS,
      title: "TIDY5E.Settings.Migrations.SpellClassToSourceClass.sectionTitle",
      content: {
        component: SpellClassToSourceClassMigration,
        type: "svelte"
      }
    },
    {
      id: CONSTANTS.TAB_MIGRATIONS_BONDS_IDEALS_FLAWS_TO_SYSTEM,
      title: "TIDY5E.Settings.Migrations.BondsIdealsFlawsToSystem.sectionTitle",
      content: {
        component: BondsIdealsFlawsToSystemMigration,
        type: "svelte"
      }
    },
    {
      id: CONSTANTS.TAB_MIGRATIONS_FAVORITES_TO_SYSTEM,
      title: "TIDY5E.Settings.Migrations.FavoritesToSystem.sectionTitle",
      content: {
        component: FavoritesToSystemMigration,
        type: "svelte"
      }
    },
    {
      id: CONSTANTS.TAB_MIGRATIONS_CCSS_TO_TIDY,
      title: "TIDY5E.Settings.Migrations.CcssToTidy.sectionTitle",
      content: {
        component: CcssToTidyMigration,
        type: "svelte"
      }
    },
    {
      id: CONSTANTS.TAB_MIGRATIONS_NPC_DEATH,
      title: "TIDY5E.Settings.Migrations.NpcDeathSaves.sectionTitle",
      content: {
        component: NpcDeathSavesMigration,
        type: "svelte"
      }
    },
    {
      id: CONSTANTS.TAB_MIGRATIONS_CHARACTER_BIOGRAPHY,
      title: "TIDY5E.Settings.Migrations.CharacterBiography.sectionTitle",
      content: {
        component: CharacterBiographyMigration,
        type: "svelte"
      }
    }
  ];
  var div = root$V(), div_1 = child(div), node = child(div_1);
  Tabs(node, {
    tabs,
    orientation: "vertical",
    get selectedTabId() {
      return selectedTabId();
    },
    set selectedTabId($$value) {
      selectedTabId($$value);
    }
  });
  var node_1 = sibling(node, 4);
  Notice(node_1, {
    children: /* @__PURE__ */ __name(($$anchor2, $$slotProps) => {
      var text$1 = text();
      template_effect(() => set_text(text$1, localize("TIDY5E.ReminderToBackUp"))), append($$anchor2, text$1);
    }, "children"),
    $$slots: { default: !0 }
  });
  var node_2 = sibling(div_1, 2);
  TabContents(node_2, {
    tabs,
    get selectedTabId() {
      return selectedTabId();
    },
    cssClass: "tidy-sheet-body"
  }), append($$anchor, div), pop();
}
__name(BulkMigrations, "BulkMigrations");
class BulkMigrationsApplication extends SvelteFormApplicationBase {
  static {
    __name(this, "BulkMigrationsApplication");
  }
  _selectedTabId;
  constructor(selectedTabId) {
    super(), this._selectedTabId = selectedTabId;
  }
  static get defaultOptions() {
    return FoundryAdapter.mergeObject(super.defaultOptions, {
      title: FoundryAdapter.localize("TIDY5E.Settings.Migrations.dialogTitle"),
      width: 650,
      height: 500,
      id: "tidy-5e-sheets-bulk-migrations",
      popOut: !0
    });
  }
  createComponent(node) {
    return mount(BulkMigrations, {
      target: node,
      context: /* @__PURE__ */ new Map([["confirm", this.confirm]]),
      props: {
        selectedTabId: this._selectedTabId
      }
    });
  }
  confirm(onYes) {
    new Dialog({
      title: FoundryAdapter.localize(
        "TIDY5E.Settings.Migrations.migrateConfirmTitle"
      ),
      content: `
        <p>${FoundryAdapter.localize(
        "TIDY5E.Settings.Migrations.migrateConfirmMessage1"
      )}</p>
        <p><em>${FoundryAdapter.localize(
        "TIDY5E.Settings.Migrations.migrateConfirmMessage2",
        { boldStart: "<strong>", boldEnd: "</strong>" }
      )}</em></p>
      `,
      buttons: {
        yes: {
          icon: '<i class="fas fa-right-left"></i>',
          label: FoundryAdapter.localize(
            "TIDY5E.Settings.Migrations.migrateConfirmButtonYes"
          ),
          callback: /* @__PURE__ */ __name(() => {
            onYes();
          }, "callback")
        },
        cancel: {
          icon: '<i class="fas fa-times"></i>',
          label: FoundryAdapter.localize(
            "TIDY5E.Settings.Migrations.migrateConfirmButtonNo"
          )
        }
      },
      default: "yes",
      close: /* @__PURE__ */ __name(() => {
      }, "close")
    }).render(!0);
  }
}
var root$U = /* @__PURE__ */ template('<div class="tidy-info-banner svelte-1nrgzlj"><a href="https://foundryvtt.com/packages/tidy5e-sheet/" target="_blank" class="svelte-1nrgzlj"><img class="logo svelte-1nrgzlj" src="../modules/tidy5e-sheet/images/tidy-5e-logo.svg"></a> <p class="banner-text svelte-1nrgzlj"><!></p></div> <p class="svelte-1nrgzlj"><!></p> <h3 class="svelte-1nrgzlj"> </h3> <p class="svelte-1nrgzlj"><!></p> <p class="svelte-1nrgzlj"><!></p> <p class="svelte-1nrgzlj"> </p> <ul class="svelte-1nrgzlj"><li class="svelte-1nrgzlj"><!></li> <li class="svelte-1nrgzlj"><!></li> <li class="svelte-1nrgzlj"><!></li></ul>', 1);
function About($$anchor, $$props) {
  push($$props, !1);
  const localize = FoundryAdapter.localize;
  init();
  var fragment = root$U(), div = first_child(fragment), a2 = child(div), img = child(a2);
  template_effect(() => set_attribute(img, "alt", localize("TIDY5E.Settings.About.logoAltText")));
  var p2 = sibling(a2, 2), node = child(p2);
  html(
    node,
    () => localize("TIDY5E.Settings.About.MaintainerParagraph", {
      urlStart: '<a href="https://github.com/kgar" target="_blank">',
      urlEnd: "</a>"
    })
  );
  var p_1 = sibling(div, 2), node_1 = child(p_1);
  html(
    node_1,
    () => localize("TIDY5E.Settings.About.GithubParagraph", {
      urlStart: '<a href="https://github.com/kgar/foundry-vtt-tidy-5e-sheets/issues" target="_blank">',
      urlEnd: "</a>"
    })
  );
  var h3 = sibling(p_1, 2), text2 = child(h3);
  template_effect(() => set_text(text2, localize("TIDY5E.Settings.About.FinancialSupportHeader")));
  var p_2 = sibling(h3, 2), node_2 = child(p_2);
  html(
    node_2,
    () => localize("TIDY5E.Settings.About.DiscordParagraph", {
      urlStart: '<a href="https://discord.gg/kdqbcWJrYU" target="_blank">',
      urlEnd: "</a>"
    })
  );
  var p_3 = sibling(p_2, 2), node_3 = child(p_3);
  html(
    node_3,
    () => localize("TIDY5E.Settings.About.LocalizationParagraph", {
      urlStart: '<a href="https://hosted.weblate.org/projects/foundry-vtt-tidy-5e-sheets/" target="_blank">',
      urlEnd: "</a>"
    })
  );
  var p_4 = sibling(p_3, 2), text_1 = child(p_4);
  template_effect(() => set_text(text_1, localize("TIDY5E.Settings.About.FinancialSupportParagraph")));
  var ul = sibling(p_4, 2), li = child(ul), node_4 = child(li);
  html(
    node_4,
    () => localize("TIDY5E.Settings.About.BuyMeACoffeeLink", {
      urlStart: '<a href="https://www.buymeacoffee.com/kgar" target="_blank">',
      urlEnd: "</a>"
    })
  );
  var li_1 = sibling(li, 2), node_5 = child(li_1);
  html(
    node_5,
    () => localize("TIDY5E.Settings.About.KoFiLink", {
      urlStart: '<a href="https://ko-fi.com/iamkgar" target="_blank">',
      urlEnd: "</a>"
    })
  );
  var li_2 = sibling(li_1, 2), node_6 = child(li_2);
  html(
    node_6,
    () => localize("TIDY5E.Settings.About.PatreonLink", {
      urlStart: '<a href="https://www.patreon.com/iamkgar" target="_blank">',
      urlEnd: "</a>"
    })
  ), append($$anchor, fragment), pop();
}
__name(About, "About");
class AboutApplication extends SvelteFormApplicationBase {
  static {
    __name(this, "AboutApplication");
  }
  static get defaultOptions() {
    return FoundryAdapter.mergeObject(super.defaultOptions, {
      width: 450,
      height: "auto",
      sheetConfig: !1,
      id: "tidy-5e-sheets-about-window",
      popOut: !0
    });
  }
  get title() {
    return FoundryAdapter.localize("TIDY5E.Settings.About.dialogTitle");
  }
  createComponent(node) {
    return mount(About, {
      target: node
    });
  }
}
var on_click$l = /* @__PURE__ */ __name((_, toggleAll) => toggleAll(), "on_click$l"), root_3$f = /* @__PURE__ */ template('<input type="checkbox" class="svelte-ehntvq">'), root_2$g = /* @__PURE__ */ template("<!> <!>", 1), root_8$8 = /* @__PURE__ */ template('<input type="checkbox" class="svelte-ehntvq">'), root_9$6 = /* @__PURE__ */ template('<label class="svelte-ehntvq"> </label>'), root_7$6 = /* @__PURE__ */ template("<!> <!>", 1), on_click_1$9 = /* @__PURE__ */ __name((__1, $$props) => $$props.onConfirm(), "on_click_1$9"), root$T = /* @__PURE__ */ template('<div class="sheet-preferences-container svelte-ehntvq"><div class="p"> </div> <div class="scroll-container svelte-ehntvq"><!></div> <footer class="svelte-ehntvq"><p> </p> <button type="button"> </button></footer></div>');
function ApplyTidySheetPreferences($$anchor, $$props) {
  push($$props, !0);
  const localize = FoundryAdapter.localize, gridTemplateColumns = `
    /* Select */ 2.5rem 
    /* Label */ 1fr`;
  let totalSelected = /* @__PURE__ */ derived(() => $$props.options.filter((t2) => t2.selected).length), allSelected = /* @__PURE__ */ derived(() => get(totalSelected) >= $$props.options.length);
  function toggleAll() {
    const targetState = !get(allSelected);
    $$props.options.forEach((o2) => o2.selected = targetState);
  }
  __name(toggleAll, "toggleAll");
  function getRandomId() {
    return foundry.utils.randomID();
  }
  __name(getRandomId, "getRandomId");
  var div = root$T(), div_1 = child(div), text$1 = child(div_1);
  template_effect(() => set_text(text$1, localize("TIDY5E.Settings.SheetPreferences.explanation")));
  var div_2 = sibling(div_1, 2), node = child(div_2);
  TidyTable(node, {
    key: "default-sheet-preferences",
    toggleable: !1,
    gridTemplateColumns,
    header: /* @__PURE__ */ __name(($$anchor2) => {
      TidyTableHeaderRow($$anchor2, {
        children: /* @__PURE__ */ __name(($$anchor3, $$slotProps) => {
          var fragment_1 = root_2$g(), node_1 = first_child(fragment_1);
          TidyTableHeaderCell(node_1, {
            children: /* @__PURE__ */ __name(($$anchor4, $$slotProps2) => {
              var input = root_3$f();
              input.__click = [on_click$l, toggleAll], template_effect(() => set_attribute(input, "title", localize("TIDY5E.Settings.Migrations.Selection.SelectAllNoneTooltip"))), template_effect(() => set_checked(input, get(allSelected))), append($$anchor4, input);
            }, "children"),
            $$slots: { default: !0 }
          });
          var node_2 = sibling(node_1, 2);
          TidyTableHeaderCell(node_2, {
            primary: !0,
            children: /* @__PURE__ */ __name(($$anchor4, $$slotProps2) => {
              var text_1 = text();
              template_effect(() => set_text(text_1, localize("Sheet"))), append($$anchor4, text_1);
            }, "children"),
            $$slots: { default: !0 }
          }), append($$anchor3, fragment_1);
        }, "children"),
        $$slots: { default: !0 }
      });
    }, "header"),
    body: /* @__PURE__ */ __name(($$anchor2) => {
      var fragment_3 = comment(), node_3 = first_child(fragment_3);
      each(node_3, 17, () => $$props.options, index, ($$anchor3, option, $$index) => {
        const checkboxId = /* @__PURE__ */ derived(getRandomId);
        TidyTableRow($$anchor3, {
          children: /* @__PURE__ */ __name(($$anchor4, $$slotProps) => {
            var fragment_5 = root_7$6(), node_4 = first_child(fragment_5);
            TidyTableCell(node_4, {
              children: /* @__PURE__ */ __name(($$anchor5, $$slotProps2) => {
                var input_1 = root_8$8();
                template_effect(() => set_attribute(input_1, "id", get(checkboxId))), bind_checked(input_1, () => get(option).selected, ($$value) => get(option).selected = $$value), append($$anchor5, input_1);
              }, "children"),
              $$slots: { default: !0 }
            });
            var node_5 = sibling(node_4, 2);
            TidyTableCell(node_5, {
              primary: !0,
              children: /* @__PURE__ */ __name(($$anchor5, $$slotProps2) => {
                var label = root_9$6(), text_2 = child(label);
                template_effect(() => {
                  set_attribute(label, "for", get(checkboxId)), set_text(text_2, get(option).label);
                }), append($$anchor5, label);
              }, "children"),
              $$slots: { default: !0 }
            }), append($$anchor4, fragment_5);
          }, "children"),
          $$slots: { default: !0 }
        });
      }), append($$anchor2, fragment_3);
    }, "body"),
    $$slots: { header: !0, body: !0 }
  });
  var footer = sibling(div_2, 2), p2 = child(footer), text_3 = child(p2);
  template_effect(() => set_text(text_3, localize("TIDY5E.Settings.Migrations.Selection.TotalSelectedLabel", { total: get(totalSelected) })));
  var button = sibling(p2, 2);
  button.__click = [on_click_1$9, $$props];
  var text_4 = child(button);
  template_effect(() => set_text(text_4, localize("TIDY5E.ButtonConfirm.Text"))), append($$anchor, div), pop();
}
__name(ApplyTidySheetPreferences, "ApplyTidySheetPreferences");
delegate(["click"]);
var root_1$x = /* @__PURE__ */ template('<li class="svelte-1uoipp1"><button type="button" class="exhaustion-level-option transparent-button svelte-1uoipp1"></button></li>'), root$S = /* @__PURE__ */ template('<div><div><div class="exhaustion-icon colorized svelte-1uoipp1"><i></i></div> <ul class="exhaustion-levels svelte-1uoipp1"></ul></div> <div class="level-display svelte-1uoipp1"> </div></div>');
function ExhaustionTracker($$anchor, $$props) {
  push($$props, !0);
  let cssClass = prop($$props, "cssClass", 3, ""), onlyShowOnHover = prop($$props, "onlyShowOnHover", 3, !1);
  const localize = FoundryAdapter.localize;
  let iconsWithSeverities = /* @__PURE__ */ derived(() => getExhaustionIconsWithSeverity($$props.exhaustionConfig.levels)), selectedLevel = /* @__PURE__ */ derived(() => get(iconsWithSeverities)[$$props.level] ?? get(iconsWithSeverities).at(-1)), severityClass = /* @__PURE__ */ derived(() => `severity-${get(selectedLevel)?.severity ?? 0}`), context = /* @__PURE__ */ derived(getSheetContext), exhaustionOptionWidthRems = 1.25, exhaustionExpandedWidth = /* @__PURE__ */ derived(() => `${exhaustionOptionWidthRems * ($$props.exhaustionConfig.levels + 1) + 2.125}rem`);
  var div = root$S(), div_1 = child(div), div_2 = child(div_1);
  template_effect(() => set_attribute(div_2, "title", $$props.exhaustionConfig.hints[$$props.level] ?? localize("TIDY5E.ExhaustionLevelTooltip", { level: $$props.level })));
  var i_1 = child(div_2), ul = sibling(div_2, 2);
  each(ul, 21, () => get(iconsWithSeverities), index, ($$anchor2, _, i2) => {
    var li = root_1$x(), button = child(li);
    template_effect(() => set_attribute(button, "title", localize(coalesce($$props.exhaustionConfig.hints[i2], "TIDY5E.ExhaustionLevelTooltip"), { level: i2 }))), button.__click = () => $$props.onLevelSelected?.(i2), template_effect(() => set_attribute(button, "data-tooltip", $$props.isActiveEffectApplied ? localize("DND5E.ActiveEffectOverrideWarning") : null)), button.textContent = i2, template_effect(() => {
      button.disabled = !get(context).editable || $$props.isActiveEffectApplied, set_attribute(button, "tabindex", settings.value.useAccessibleKeyboardSupport ? 0 : -1), toggle_class(button, "colorized", i2 <= $$props.level);
    }), append($$anchor2, li);
  });
  var div_3 = sibling(div_1, 2), text2 = child(div_3);
  template_effect(() => {
    set_class(div, `exhaustion-container ${get(severityClass) ?? ""} ${cssClass() ?? ""} svelte-1uoipp1`), set_attribute(div, "style", `--t5e-exhaustion-expanded-width: ${get(exhaustionExpandedWidth) ?? ""}`), toggle_class(div, "only-show-on-hover", onlyShowOnHover()), set_class(div_1, `exhaustion-wrap ${$$props.radiusClass ?? ""} svelte-1uoipp1`), set_class(i_1, clsx(get(selectedLevel).iconCssClass ?? ""), "svelte-1uoipp1"), toggle_class(div_3, "colorized", $$props.level > 0), set_text(text2, $$props.level);
  }), append($$anchor, div), pop();
}
__name(ExhaustionTracker, "ExhaustionTracker");
delegate(["click"]);
var root_1$w = /* @__PURE__ */ template('<i class="inspiration-icon fas fa-dice-d20 svelte-6apbu6"></i>'), root$R = /* @__PURE__ */ template("<div><!></div>");
function Inspiration($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getCharacterSheetContext), cssClass = prop($$props, "cssClass", 3, ""), onlyShowOnHover = prop($$props, "onlyShowOnHover", 3, !1), animate2 = prop($$props, "animate", 3, !0);
  const localize = FoundryAdapter.localize;
  var div = root$R();
  template_effect(() => set_attribute(div, "title", localize("DND5E.Inspiration")));
  var node = child(div), labelCssClass = /* @__PURE__ */ derived(() => `${($$props.inspired ? "inspired" : "") ?? ""} ${$$props.radiusClass ?? ""} ${(get(context).editable ? "pointer" : "") ?? ""}`), disabled = /* @__PURE__ */ derived(() => !get(context).editable);
  Checkbox(node, {
    checkboxCssClass: "inspiration-toggle",
    get labelCssClass() {
      return get(labelCssClass);
    },
    get document() {
      return get(context).actor;
    },
    field: "system.attributes.inspiration",
    get checked() {
      return $$props.inspired;
    },
    get disabled() {
      return get(disabled);
    },
    children: /* @__PURE__ */ __name(($$anchor2, $$slotProps) => {
      var i2 = root_1$w();
      template_effect(() => toggle_class(i2, "animate", animate2())), append($$anchor2, i2);
    }, "children"),
    $$slots: { default: !0 }
  }), template_effect(() => {
    set_class(div, `inspiration inspiration-${($$props.inspired ? 1 : 0) ?? ""} ${cssClass() ?? ""} svelte-6apbu6`), toggle_class(div, "only-show-on-hover", onlyShowOnHover());
  }), append($$anchor, div), pop();
}
__name(Inspiration, "Inspiration");
var on_click$k = /* @__PURE__ */ __name((event2, rollDeathSave) => rollDeathSave(event2), "on_click$k"), root$Q = /* @__PURE__ */ template('<div class="death-saves svelte-19mjonj"><div class="death-save-counters svelte-19mjonj"><i class="fas fa-check"></i> <!> <button type="button" class="death-save rollable"><i class="fas fa-skull"></i></button> <!> <i class="fas fa-times"></i></div></div>');
function DeathSaves($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getSheetContext), hideDeathSaves = /* @__PURE__ */ derived(() => settings.value.hideDeathSavesFromPlayers && !FoundryAdapter.userIsGm());
  function rollDeathSave(event2) {
    get(context).actor.rollDeathSave({ event: event2, legacy: !1 }, {
      options: {
        default: { rollMode: settings.value.defaultDeathSaveRoll }
      }
    });
  }
  __name(rollDeathSave, "rollDeathSave");
  const localize = FoundryAdapter.localize;
  var div = root$Q(), div_1 = child(div), i2 = child(div_1), node = sibling(i2, 2), class_1 = /* @__PURE__ */ derived(() => `death-save-result ${(get(hideDeathSaves) ? "hidden" : "") ?? ""}`), title = /* @__PURE__ */ derived(() => localize("DND5E.DeathSaveSuccesses")), disabled = /* @__PURE__ */ derived(() => !get(context).editable), attributes = /* @__PURE__ */ derived(() => ({
    "data-tidy-sheet-part": CONSTANTS.SHEET_PARTS.DEATH_SAVE_SUCCESSES
  }));
  TextInput(node, {
    get document() {
      return get(context).actor;
    },
    field: "system.attributes.death.success",
    get class() {
      return get(class_1);
    },
    selectOnFocus: !0,
    allowDeltaChanges: !0,
    placeholder: "0",
    get value() {
      return get(context).system.attributes.death.success;
    },
    maxlength: 1,
    get title() {
      return get(title);
    },
    get disabled() {
      return get(disabled);
    },
    get attributes() {
      return get(attributes);
    }
  });
  var button = sibling(node, 2);
  button.__click = [on_click$k, rollDeathSave];
  var node_1 = sibling(button, 2), class_2 = /* @__PURE__ */ derived(() => `death-save-result ${(get(hideDeathSaves) ? "hidden" : "") ?? ""}`), disabled_1 = /* @__PURE__ */ derived(() => !get(context).editable), title_1 = /* @__PURE__ */ derived(() => localize("DND5E.DeathSaveFailures")), attributes_1 = /* @__PURE__ */ derived(() => ({
    "data-tidy-sheet-part": CONSTANTS.SHEET_PARTS.DEATH_SAVE_FAILURES
  }));
  TextInput(node_1, {
    get document() {
      return get(context).actor;
    },
    field: "system.attributes.death.failure",
    get class() {
      return get(class_2);
    },
    selectOnFocus: !0,
    allowDeltaChanges: !0,
    placeholder: "0",
    get value() {
      return get(context).system.attributes.death.failure;
    },
    maxlength: 1,
    get disabled() {
      return get(disabled_1);
    },
    get "data-tidy-sheet-part"() {
      return CONSTANTS.SHEET_PARTS.DEATH_SAVE_FAILURES;
    },
    get title() {
      return get(title_1);
    },
    get attributes() {
      return get(attributes_1);
    }
  });
  var i_1 = sibling(node_1, 2);
  template_effect(() => {
    toggle_class(div, "rounded", get(context).useRoundedPortraitStyle), toggle_class(div_1, "show-backdrop", !$$props.hasHpOverlay), toggle_class(i2, "hidden", get(hideDeathSaves)), set_attribute(button, "data-tidy-sheet-part", CONSTANTS.SHEET_PARTS.DEATH_SAVE_ROLLER), set_attribute(button, "tabindex", settings.value.useAccessibleKeyboardSupport ? 0 : -1), toggle_class(i_1, "hidden", get(hideDeathSaves));
  }), append($$anchor, div), pop();
}
__name(DeathSaves, "DeathSaves");
delegate(["click"]);
var on_click$j = /* @__PURE__ */ __name((event2, context) => get(context).actor.sheet.onShortRest(event2), "on_click$j"), on_click_1$8 = /* @__PURE__ */ __name((event2, context) => get(context).actor.sheet.onLongRest(event2), "on_click_1$8"), root$P = /* @__PURE__ */ template('<div class="rest-container svelte-9xc2qg"><div class="resting svelte-9xc2qg"><span class="resting-icon svelte-9xc2qg"><i class="rest-icon fas fa-bed"></i></span> <button type="button" class="rest icon-button svelte-9xc2qg"><i class="fas fa-hourglass-half"></i></button> <button type="button" class="rest icon-button svelte-9xc2qg"><i class="fas fa-hourglass-end"></i></button></div></div>');
function Rest($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getCharacterSheetContext);
  const localize = FoundryAdapter.localize;
  var div = root$P(), div_1 = child(div), span = child(div_1);
  template_effect(() => set_attribute(span, "title", localize("TIDY5E.RestHint")));
  var button = sibling(span, 2);
  template_effect(() => set_attribute(button, "title", localize("TIDY5E.ShortRest"))), button.__click = [on_click$j, context];
  var button_1 = sibling(button, 2);
  template_effect(() => set_attribute(button_1, "title", localize("TIDY5E.LongRest"))), button_1.__click = [on_click_1$8, context], template_effect(() => {
    toggle_class(div, "rounded", get(context).useRoundedPortraitStyle), button.disabled = !get(context).editable, set_attribute(button, "tabindex", !settings.value.useDefaultSheetHpTabbing && settings.value.useAccessibleKeyboardSupport ? 0 : -1), button_1.disabled = !get(context).editable, set_attribute(button_1, "tabindex", !settings.value.useDefaultSheetHpTabbing && settings.value.useAccessibleKeyboardSupport ? 0 : -1);
  }), append($$anchor, div), pop();
}
__name(Rest, "Rest");
delegate(["click"]);
var root$O = /* @__PURE__ */ template('<div class="portrait-hd svelte-qi1nr4"><button type="button" class="current-hd config-button transparent-button svelte-qi1nr4"> </button></div>');
function HitDice($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getCharacterSheetContext), hitDice = /* @__PURE__ */ derived(() => get(context).system.attributes.hd), actorLevel = /* @__PURE__ */ derived(() => get(context).system.details.level);
  const localize = FoundryAdapter.localize;
  var div = root$O();
  const stringified_text = /* @__PURE__ */ derived(() => localize("DND5E.HitDice") ?? ""), stringified_text_1 = /* @__PURE__ */ derived(() => get(hitDice) ?? ""), stringified_text_2 = /* @__PURE__ */ derived(() => get(actorLevel) ?? ""), stringified_text_3 = /* @__PURE__ */ derived(() => localize("DND5E.HitDiceConfig") ?? "");
  template_effect(() => set_attribute(div, "title", `${get(stringified_text)}: ${get(stringified_text_1)}/${get(stringified_text_2)} ${get(stringified_text_3)}`));
  var button = child(div), event_handler = /* @__PURE__ */ derived(() => get(context).editable && FoundryAdapter.renderHitDiceConfig(get(context).actor));
  button.__click = function(...$$args) {
    get(event_handler)?.apply(this, $$args);
  };
  var text2 = child(button);
  template_effect(() => {
    toggle_class(div, "rounded", get(context).useRoundedPortraitStyle), button.disabled = !get(context).editable, set_attribute(button, "tabindex", !settings.value.useDefaultSheetHpTabbing && settings.value.useAccessibleKeyboardSupport ? 0 : -1), set_text(text2, get(hitDice));
  }), append($$anchor, div), pop();
}
__name(HitDice, "HitDice");
delegate(["click"]);
var root$N = /* @__PURE__ */ template('<div class="portrait-hp svelte-1etkvgb"><!></div>');
function CharacterHitPoints($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getCharacterSheetContext);
  const localize = FoundryAdapter.localize;
  var div = root$N();
  template_effect(() => set_attribute(div, "title", localize("DND5E.HitPoints")));
  var node = child(div), valueTitle = /* @__PURE__ */ derived(() => localize("DND5E.HitPointsCurrent")), valueDisabled = /* @__PURE__ */ derived(() => !get(context).editable), maxTitle = /* @__PURE__ */ derived(() => localize("DND5E.HitPointsMax")), maxDisabled = /* @__PURE__ */ derived(() => !get(context).allowMaxHpOverride || !get(context).editable || get(context).lockHpMaxChanges || get(context).lockSensitiveFields), Bar2 = /* @__PURE__ */ derived(() => settings.value.useHpBar ? HpBar : null);
  ResourceWithBar(node, {
    get document() {
      return $$props.actor;
    },
    get value() {
      return $$props.value;
    },
    valueField: "system.attributes.hp.value",
    get valueTitle() {
      return get(valueTitle);
    },
    get valueDisabled() {
      return get(valueDisabled);
    },
    get max() {
      return $$props.max;
    },
    maxField: "system.attributes.hp.max",
    get maxTitle() {
      return get(maxTitle);
    },
    get maxDisabled() {
      return get(maxDisabled);
    },
    get percentage() {
      return get(context).healthPercentage;
    },
    get Bar() {
      return get(Bar2);
    }
  }), template_effect(() => {
    toggle_class(div, "incapacitated", $$props.incapacitated), toggle_class(div, "widen-for-rounded-portrait", get(context).useRoundedPortraitStyle);
  }), append($$anchor, div), pop();
}
__name(CharacterHitPoints, "CharacterHitPoints");
var on_click$i = /* @__PURE__ */ __name((event2, context) => {
  event2.preventDefault(), event2.stopPropagation(), FoundryAdapter.renderHitPointsDialog(get(context).actor);
}, "on_click$i"), root_1$v = /* @__PURE__ */ template('<button type="button" class="inline-icon-button"><i class="fas fa-cog"></i></button>'), root$M = /* @__PURE__ */ template('<div class="profile-temp svelte-19rf4j3"><!> <!> <!></div>');
function TempHp($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getSheetContext);
  const localize = FoundryAdapter.localize;
  var div = root$M(), node = child(div), placeholder = /* @__PURE__ */ derived(() => `+${localize("DND5E.Temp") ?? ""}`), value = /* @__PURE__ */ derived(() => get(context).hp.temp?.toString() ?? ""), title = /* @__PURE__ */ derived(() => localize("DND5E.HitPointsTemp")), disabled = /* @__PURE__ */ derived(() => !get(context).editable);
  TextInput(node, {
    get document() {
      return get(context).actor;
    },
    field: "system.attributes.hp.temp",
    class: "temphp",
    get placeholder() {
      return get(placeholder);
    },
    get value() {
      return get(value);
    },
    allowDeltaChanges: !0,
    get title() {
      return get(title);
    },
    get disabled() {
      return get(disabled);
    },
    selectOnFocus: !0
  });
  var node_1 = sibling(node, 2), placeholder_1 = /* @__PURE__ */ derived(() => `+${localize("DND5E.Max") ?? ""}`), value_1 = /* @__PURE__ */ derived(() => get(context).hp.tempmax?.toString() ?? ""), title_1 = /* @__PURE__ */ derived(() => localize("DND5E.HitPointsTempMax")), disabled_1 = /* @__PURE__ */ derived(() => !get(context).editable);
  TextInput(node_1, {
    get document() {
      return get(context).actor;
    },
    field: "system.attributes.hp.tempmax",
    class: "max-temphp",
    get placeholder() {
      return get(placeholder_1);
    },
    get value() {
      return get(value_1);
    },
    get title() {
      return get(title_1);
    },
    get disabled() {
      return get(disabled_1);
    },
    selectOnFocus: !0
  });
  var node_2 = sibling(node_1, 2);
  {
    var consequent = /* @__PURE__ */ __name(($$anchor2) => {
      var button = root_1$v();
      template_effect(() => set_attribute(button, "title", localize("DND5E.HitPointsConfig"))), button.__click = [on_click$i, context], template_effect(() => set_attribute(button, "tabindex", settings.value.useAccessibleKeyboardSupport ? 0 : -1)), append($$anchor2, button);
    }, "consequent");
    if_block(node_2, ($$render) => {
      get(context).editable && get(context).unlocked && $$render(consequent);
    });
  }
  append($$anchor, div), pop();
}
__name(TempHp, "TempHp");
delegate(["click"]);
function onPortraitClick(event2, context, openPortraitPicker) {
  switch (event2.button) {
    case CONSTANTS.MOUSE_BUTTON_MAIN:
      get(context).unlocked ? openPortraitPicker(event2) : FoundryAdapter.renderImagePopout(get(context).actor.img, {
        title: FoundryAdapter.localize("TIDY5E.PortraitTitle", { subject: get(context).actor.name }),
        shareable: !0,
        uuid: get(context).actor.uuid
      });
      break;
  }
}
__name(onPortraitClick, "onPortraitClick");
var root$L = /* @__PURE__ */ template('<div class="portrait svelte-v7y9y2"><div class="actor-image-wrap svelte-v7y9y2"><img class="actor-image svelte-v7y9y2"></div></div>');
function ActorPortrait($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getSheetContext);
  const localize = FoundryAdapter.localize;
  let actorImageTitle = /* @__PURE__ */ derived(() => get(context).unlocked ? `${localize("TIDY5E.EditSheetImageHint")} / ${localize("TIDY5E.SheetImageOptionsHint")}` : `${localize("TIDY5E.PreviewSheetImageHint")} / ${localize("TIDY5E.SheetImageOptionsHint")}`);
  function openPortraitPicker(event2) {
    if (!TidyHooks.tidy5eSheetsPreOpenActorPortraitFilePicker(get(context), event2))
      return;
    const rect = event2.currentTarget.getBoundingClientRect(), current = $$props.actor.img;
    return new FilePicker({
      type: "image",
      current,
      callback: /* @__PURE__ */ __name((path) => {
        $$props.actor.update({ img: path });
      }, "callback"),
      top: rect.top + 40,
      left: rect.left + 10
    }).browse();
  }
  __name(openPortraitPicker, "openPortraitPicker");
  let portraitContainer, contextMenuOptions = /* @__PURE__ */ derived(() => {
    try {
      return get(context).actorPortraitCommands.map((c2) => ({
        name: c2.label ?? "",
        icon: isNil(c2.iconClass, "") ? "" : `<i class="${c2.iconClass}"></i>`,
        callback: /* @__PURE__ */ __name(() => c2.execute?.({
          actor: $$props.actor,
          context: get(context)
        }), "callback")
      }));
    } catch (e2) {
      error("An error occurred while getting context menu options", !1, e2), debug("Context menu option error troubleshooting info", {
        portraitContainer,
        commands: get(context).actorPortraitCommands
      });
    }
    return [];
  });
  user_effect(() => {
    new FloatingContextMenu(FoundryAdapter.getJqueryWrappedElement(portraitContainer), `[data-tidy-sheet-part=${CONSTANTS.SHEET_PARTS.ACTOR_PORTRAIT_CONTAINER}]`, [], {
      onOpen: /* @__PURE__ */ __name(() => {
        ui.context.menuItems = get(contextMenuOptions);
      }, "onOpen")
    });
  });
  var div = root$L();
  div.__mousedown = [onPortraitClick, context, openPortraitPicker];
  var div_1 = child(div), img = child(div_1);
  bind_this(div, ($$value) => portraitContainer = $$value, () => portraitContainer), template_effect(() => {
    set_attribute(div, "data-tidy-sheet-part", CONSTANTS.SHEET_PARTS.ACTOR_PORTRAIT_CONTAINER), toggle_class(div, "round-portrait", get(context).useRoundedPortraitStyle), set_attribute(div_1, "style", `--overlay-height: calc(100% - ${get(context).healthPercentage ?? ""}%)`), set_attribute(div_1, "data-tidy-sheet-part", CONSTANTS.SHEET_PARTS.ACTOR_PORTRAIT_HEALTH_OVERLAY), toggle_class(div_1, "overlay", $$props.useHpOverlay), set_attribute(img, "src", $$props.actor.img), set_attribute(img, "alt", $$props.actor.name), set_attribute(img, "title", get(actorImageTitle)), set_attribute(img, "data-tidy-sheet-part", CONSTANTS.SHEET_PARTS.ACTOR_PORTRAIT_IMAGE);
  }), append($$anchor, div), pop();
}
__name(ActorPortrait, "ActorPortrait");
delegate(["mousedown"]);
var root$K = /* @__PURE__ */ template('<div class="actor-profile-wrap"><div class="profile"><!> <!></div></div>');
function ActorProfile($$anchor, $$props) {
  push($$props, !0);
  let size = prop($$props, "size", 3, "medium"), context = /* @__PURE__ */ derived(getSheetContext);
  var div = root$K(), div_1 = child(div), node = child(div_1);
  ActorPortrait(node, {
    get actor() {
      return get(context).actor;
    },
    get useHpOverlay() {
      return $$props.useHpOverlay;
    }
  });
  var node_1 = sibling(node, 2);
  snippet(node_1, () => $$props.children ?? noop), template_effect(() => {
    toggle_class(div, "small-profile", size() === "small"), toggle_class(div_1, "round-portrait", get(context).useRoundedPortraitStyle);
  }), append($$anchor, div), pop();
}
__name(ActorProfile, "ActorProfile");
var on_change = /* @__PURE__ */ __name((_, $$props, level) => $$props.onLevelSelected?.(level()), "on_change"), root$J = /* @__PURE__ */ template('<div><div><input type="number" placeholder="0" class="svelte-i4751u"></div></div>');
function ExhaustionInput($$anchor, $$props) {
  push($$props, !0);
  let cssClass = prop($$props, "cssClass", 3, ""), level = prop($$props, "level", 15), onlyShowOnHover = prop($$props, "onlyShowOnHover", 3, !1), isActiveEffectApplied = prop($$props, "isActiveEffectApplied", 3, !1);
  const localize = FoundryAdapter.localize;
  let fontScales = ["1.25rem", "1.125rem", "1rem"], inputFontSize = /* @__PURE__ */ derived(() => !level() || level() < 100 ? fontScales[0] : level() < 1e3 ? fontScales[1] : fontScales[2]);
  var div = root$J();
  template_effect(() => set_attribute(div, "title", localize("TIDY5E.WorldSettings.Exhaustion.Header")));
  var div_1 = child(div), input = child(div_1);
  input.__change = [on_change, $$props, level], template_effect(() => set_attribute(input, "data-tooltip", isActiveEffectApplied() ? localize("DND5E.ActiveEffectOverrideWarning") : null)), template_effect(() => {
    set_class(div, `exhaustion-container ${cssClass() ?? ""} svelte-i4751u`), set_attribute(div, "style", `--t5e-exhaustion-input-font-size: ${get(inputFontSize) ?? ""}`), toggle_class(div, "only-show-on-hover", onlyShowOnHover()), set_class(div_1, `exhaustion-wrap ${$$props.radiusClass ?? ""} svelte-i4751u`), input.disabled = isActiveEffectApplied();
  }), event("focus", input, (ev) => ev.currentTarget.select()), bind_value(input, level), append($$anchor, div), pop();
}
__name(ExhaustionInput, "ExhaustionInput");
delegate(["change"]);
var root_1$u = /* @__PURE__ */ template("<!> <!> <!> <!> <!> <!>", 1), root$I = /* @__PURE__ */ template("<!> <!>", 1);
function CharacterProfile($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getCharacterSheetContext), incapacitated = /* @__PURE__ */ derived(() => (get(context).actor?.system?.attributes?.hp?.value ?? 0) <= 0 && get(context).actor?.system?.attributes?.hp?.max !== 0);
  async function onLevelSelected(level) {
    await get(context).actor.update({ "system.attributes.exhaustion": level });
  }
  __name(onLevelSelected, "onLevelSelected");
  var fragment = root$I(), node = first_child(fragment), useHpOverlay = /* @__PURE__ */ derived(() => settings.value.useHpOverlay && get(context).system.attributes.hp.max > 0);
  ActorProfile(node, {
    get useHpOverlay() {
      return get(useHpOverlay);
    },
    children: /* @__PURE__ */ __name(($$anchor2, $$slotProps) => {
      var fragment_1 = root_1$u(), node_1 = first_child(fragment_1);
      {
        var consequent = /* @__PURE__ */ __name(($$anchor3) => {
          DeathSaves($$anchor3, {
            get hasHpOverlay() {
              return settings.value.useHpOverlay;
            }
          });
        }, "consequent");
        if_block(node_1, ($$render) => {
          get(incapacitated) && get(context).owner && $$render(consequent);
        });
      }
      var node_2 = sibling(node_1, 2);
      {
        var consequent_1 = /* @__PURE__ */ __name(($$anchor3) => {
          var radiusClass = /* @__PURE__ */ derived(() => get(context).useRoundedPortraitStyle ? "rounded" : "top-left"), onlyShowOnHover = /* @__PURE__ */ derived(() => settings.value.showExhaustionOnHover || settings.value.hideIfZero && get(context).system.attributes.exhaustion === 0), isActiveEffectApplied = /* @__PURE__ */ derived(() => ActiveEffectsHelper.isActiveEffectAppliedToField(get(context).actor, "system.attributes.exhaustion"));
          ExhaustionTracker($$anchor3, {
            get level() {
              return get(context).system.attributes.exhaustion;
            },
            get radiusClass() {
              return get(radiusClass);
            },
            onLevelSelected,
            get onlyShowOnHover() {
              return get(onlyShowOnHover);
            },
            get exhaustionConfig() {
              return settings.value.exhaustionConfig;
            },
            get isActiveEffectApplied() {
              return get(isActiveEffectApplied);
            }
          });
        }, "consequent_1"), alternate = /* @__PURE__ */ __name(($$anchor3) => {
          var fragment_4 = comment(), node_3 = first_child(fragment_4);
          {
            var consequent_2 = /* @__PURE__ */ __name(($$anchor4) => {
              var radiusClass_1 = /* @__PURE__ */ derived(() => get(context).useRoundedPortraitStyle ? "rounded" : "top-left"), onlyShowOnHover_1 = /* @__PURE__ */ derived(() => settings.value.showExhaustionOnHover || settings.value.hideIfZero && get(context).system.attributes.exhaustion === 0), isActiveEffectApplied_1 = /* @__PURE__ */ derived(() => ActiveEffectsHelper.isActiveEffectAppliedToField(get(context).actor, "system.attributes.exhaustion"));
              ExhaustionInput($$anchor4, {
                get level() {
                  return get(context).system.attributes.exhaustion;
                },
                get radiusClass() {
                  return get(radiusClass_1);
                },
                onLevelSelected,
                get onlyShowOnHover() {
                  return get(onlyShowOnHover_1);
                },
                get isActiveEffectApplied() {
                  return get(isActiveEffectApplied_1);
                }
              });
            }, "consequent_2");
            if_block(
              node_3,
              ($$render) => {
                settings.value.useExhaustion && settings.value.exhaustionConfig.type === "open" && $$render(consequent_2);
              },
              !0
            );
          }
          append($$anchor3, fragment_4);
        }, "alternate");
        if_block(node_2, ($$render) => {
          settings.value.useExhaustion && settings.value.exhaustionConfig.type === "specific" ? $$render(consequent_1) : $$render(alternate, !1);
        });
      }
      var node_4 = sibling(node_2, 2);
      {
        var consequent_3 = /* @__PURE__ */ __name(($$anchor3) => {
          var radiusClass_2 = /* @__PURE__ */ derived(() => get(context).useRoundedPortraitStyle ? "rounded" : "top-right"), onlyShowOnHover_2 = /* @__PURE__ */ derived(() => settings.value.showInspirationOnHover || settings.value.hideIfZero && !get(context).actor.system.attributes.inspiration);
          Inspiration($$anchor3, {
            get inspired() {
              return get(context).actor.system.attributes.inspiration;
            },
            get radiusClass() {
              return get(radiusClass_2);
            },
            get onlyShowOnHover() {
              return get(onlyShowOnHover_2);
            },
            get animate() {
              return settings.value.animateInspiration;
            }
          });
        }, "consequent_3");
        if_block(node_4, ($$render) => {
          settings.value.useCharacterInspiration && $$render(consequent_3);
        });
      }
      var node_5 = sibling(node_4, 2);
      CharacterHitPoints(node_5, {
        get value() {
          return get(context).system.attributes.hp.value;
        },
        get max() {
          return get(context).system.attributes.hp.max;
        },
        get actor() {
          return get(context).actor;
        },
        get incapacitated() {
          return get(incapacitated);
        }
      });
      var node_6 = sibling(node_5, 2);
      Rest(node_6, {});
      var node_7 = sibling(node_6, 2);
      HitDice(node_7, {}), append($$anchor2, fragment_1);
    }, "children"),
    $$slots: { default: !0 }
  });
  var node_8 = sibling(node, 2);
  TempHp(node_8, {}), append($$anchor, fragment), pop();
}
__name(CharacterProfile, "CharacterProfile");
var on_click$h = /* @__PURE__ */ __name((ev, context) => get(context).actor.sheet._onWarningLink(ev), "on_click$h"), root_2$f = /* @__PURE__ */ template('<button type="button" class="inline-transparent-button svelte-1sgbaws"> </button>'), root_1$t = /* @__PURE__ */ template("<li><!></li>"), root$H = /* @__PURE__ */ template('<ol class="warnings svelte-1sgbaws"></ol>');
function ActorWarnings($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getSheetContext);
  var ol = root$H();
  each(ol, 21, () => $$props.warnings, index, ($$anchor2, warning) => {
    var li = root_1$t(), node = child(li);
    {
      var consequent = /* @__PURE__ */ __name(($$anchor3) => {
        var button = root_2$f();
        button.__click = [on_click$h, context];
        var text2 = child(button);
        template_effect(() => {
          set_attribute(button, "tabindex", settings.value.useAccessibleKeyboardSupport ? 0 : -1), set_attribute(button, "data-target", get(warning).link), set_text(text2, get(warning).message);
        }), append($$anchor3, button);
      }, "consequent"), alternate = /* @__PURE__ */ __name(($$anchor3) => {
        var text_1 = text();
        template_effect(() => set_text(text_1, get(warning).message)), append($$anchor3, text_1);
      }, "alternate");
      if_block(node, ($$render) => {
        get(warning).link ? $$render(consequent) : $$render(alternate, !1);
      });
    }
    template_effect(() => set_class(li, `notification ${get(warning).type ?? ""} svelte-1sgbaws`)), append($$anchor2, li);
  }), append($$anchor, ol), pop();
}
__name(ActorWarnings, "ActorWarnings");
delegate(["click"]);
var on_click$g = /* @__PURE__ */ __name((ev, context) => get(context).actor.rollConcentration({ event: ev, legacy: !1 }), "on_click$g"), on_click_1$7 = /* @__PURE__ */ __name((_, context) => FoundryAdapter.openConcentrationConfig(get(context).actor), "on_click_1$7"), root_2$e = /* @__PURE__ */ template('<button type="button" class="inline-icon-button svelte-19re4qq"><i class="fas fa-cog" style="font-size: var(--icon-size);"></i></button>'), root_1$s = /* @__PURE__ */ template('<span class="special-save svelte-19re4qq"><button type="button" class="inline-transparent-button flex-row extra-small-gap align-items-center highlight-on-hover svelte-19re4qq"><!> <span class="special-save-mod"> </span></button> <!></span>');
function SpecialSaves($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getSheetContext);
  var fragment = comment(), node = first_child(fragment);
  {
    var consequent_1 = /* @__PURE__ */ __name(($$anchor2) => {
      var span = root_1$s();
      const save2 = /* @__PURE__ */ derived(() => get(context).saves.concentration);
      var button = child(span);
      button.__click = [on_click$g, context];
      var node_1 = child(button);
      Dnd5eIcon(node_1, {
        src: "systems/dnd5e/icons/svg/statuses/concentrating.svg"
      });
      var text2 = sibling(node_1), span_1 = sibling(text2), text_1 = child(span_1), node_2 = sibling(button, 2);
      {
        var consequent = /* @__PURE__ */ __name(($$anchor3) => {
          var button_1 = root_2$e();
          button_1.__click = [on_click_1$7, context], append($$anchor3, button_1);
        }, "consequent");
        if_block(node_2, ($$render) => {
          get(context).unlocked && $$render(consequent);
        });
      }
      template_effect(() => {
        set_text(text2, ` ${get(save2).label ?? ""}: `), set_text(text_1, `${get(save2).sign ?? ""}${get(save2).mod ?? ""}`);
      }), append($$anchor2, span);
    }, "consequent_1");
    if_block(node, ($$render) => {
      get(context).saves.concentration && $$render(consequent_1);
    });
  }
  append($$anchor, fragment), pop();
}
__name(SpecialSaves, "SpecialSaves");
delegate(["click"]);
var root$G = /* @__PURE__ */ template('<div><svelte-css-wrapper style="display: contents"><!></svelte-css-wrapper></div>');
function SheetEditModeToggle($$anchor, $$props) {
  push($$props, !0);
  let hint = prop($$props, "hint", 3, null), context = /* @__PURE__ */ derived(getSheetContext);
  async function toggleLock() {
    await TidyFlags.allowEdit.set(get(context).document, !get(allowEdit));
  }
  __name(toggleLock, "toggleLock");
  const localize = FoundryAdapter.localize;
  let allowEdit = /* @__PURE__ */ derived(() => TidyFlags.allowEdit.get(get(context).document)), descriptionVariable = /* @__PURE__ */ derived(() => hint() ?? (settings.value.useTotalSheetLock ? localize("TIDY5E.SheetLock.Description") : localize("TIDY5E.SheetEdit.Description"))), lockHintVariable = /* @__PURE__ */ derived(() => settings.value.useTotalSheetLock ? "TIDY5E.SheetLock.Unlock.Hint" : "TIDY5E.SheetEdit.Enable.Hint"), unlockHintVariable = /* @__PURE__ */ derived(() => settings.value.useTotalSheetLock ? "TIDY5E.SheetLock.Lock.Hint" : "TIDY5E.SheetEdit.Disable.Hint"), unlockTitle = /* @__PURE__ */ derived(() => localize(get(unlockHintVariable), { description: get(descriptionVariable) })), lockTitle = /* @__PURE__ */ derived(() => localize(get(lockHintVariable), { description: get(descriptionVariable) }));
  var div = root$G(), node = child(div), title = /* @__PURE__ */ derived(() => get(allowEdit) ? get(unlockTitle) : get(lockTitle)), thumbIconClass = /* @__PURE__ */ derived(() => `${(get(allowEdit) ? "fas fa-unlock" : "fas fa-lock") ?? ""} fa-fw`);
  css_props(node, () => ({
    "--tidy-switch-scale": "1",
    "--tidy-switch-thumb-transform-duration": "0.15s"
  })), TidySwitch(node.lastChild, {
    get title() {
      return get(title);
    },
    get checked() {
      return get(allowEdit);
    },
    get thumbIconClass() {
      return get(thumbIconClass);
    },
    onChange: /* @__PURE__ */ __name(() => toggleLock(), "onChange")
  }), template_effect(() => {
    set_class(div, `sheet-edit-mode-toggle ${$$props.class ?? "" ?? ""}`), set_attribute(div, "data-tidy-sheet-part", CONSTANTS.SHEET_PARTS.SHEET_LOCK_TOGGLE);
  }), append($$anchor, div), pop();
}
__name(SheetEditModeToggle, "SheetEditModeToggle");
var root_1$r = /* @__PURE__ */ template("<span> </span>"), root_2$d = /* @__PURE__ */ template("| <span> </span>", 1), root_3$e = /* @__PURE__ */ template("| <span> </span>", 1), on_click$f = /* @__PURE__ */ __name((_, context) => FoundryAdapter.renderMovementSensesConfig(get(context).actor, "movement"), "on_click$f"), root_4$7 = /* @__PURE__ */ template('<button type="button" class="configure inline-icon-button"><i class="fas fa-cog"></i></button>'), root$F = /* @__PURE__ */ template("<section><strong> </strong> <!> <!> <!> <!></section>");
function ActorMovement($$anchor, $$props) {
  push($$props, !0);
  let movementLabelKey = prop($$props, "movementLabelKey", 3, "DND5E.Speed"), context = /* @__PURE__ */ derived(getSheetContext);
  const localize = FoundryAdapter.localize;
  var section = root$F(), strong = child(section), text2 = child(strong);
  template_effect(() => set_text(text2, localize(movementLabelKey())));
  var node = sibling(strong, 2);
  {
    var consequent = /* @__PURE__ */ __name(($$anchor2) => {
      var span = root_1$r(), text_1 = child(span);
      template_effect(() => {
        set_attribute(span, "title", get(context).movement.primary), set_text(text_1, get(context).movement.primary);
      }), append($$anchor2, span);
    }, "consequent");
    if_block(node, ($$render) => {
      get(context).movement.primary && $$render(consequent);
    });
  }
  var node_1 = sibling(node, 2);
  {
    var consequent_1 = /* @__PURE__ */ __name(($$anchor2) => {
      var fragment = root_2$d(), span_1 = sibling(first_child(fragment)), text_2 = child(span_1);
      template_effect(() => {
        set_attribute(span_1, "title", get(context).movement.special), set_text(text_2, get(context).movement.special);
      }), append($$anchor2, fragment);
    }, "consequent_1");
    if_block(node_1, ($$render) => {
      get(context).movement.special && $$render(consequent_1);
    });
  }
  var node_2 = sibling(node_1, 2);
  {
    var consequent_2 = /* @__PURE__ */ __name(($$anchor2) => {
      var fragment_1 = root_3$e(), span_2 = sibling(first_child(fragment_1)), text_3 = child(span_2);
      template_effect(() => {
        set_attribute(span_2, "title", get(context).movement.secondary), set_text(text_3, get(context).movement.secondary);
      }), append($$anchor2, fragment_1);
    }, "consequent_2");
    if_block(node_2, ($$render) => {
      get(context).movement.secondary && $$render(consequent_2);
    });
  }
  var node_3 = sibling(node_2, 2);
  {
    var consequent_3 = /* @__PURE__ */ __name(($$anchor2) => {
      var button = root_4$7();
      template_effect(() => set_attribute(button, "title", localize("DND5E.MovementConfig"))), button.__click = [on_click$f, context], template_effect(() => set_attribute(button, "tabindex", settings.value.useAccessibleKeyboardSupport ? 0 : -1)), append($$anchor2, button);
    }, "consequent_3");
    if_block(node_3, ($$render) => {
      get(context).unlocked && $$render(consequent_3);
    });
  }
  template_effect(() => set_class(section, `actor-movement flex-row small-gap ${$$props.class ?? "" ?? ""}`)), append($$anchor, section), pop();
}
__name(ActorMovement, "ActorMovement");
delegate(["click"]);
var root$E = /* @__PURE__ */ template('<button><h4 class="block-title svelte-1hz5i72"> </h4></button>');
function RollableBlockTitle($$anchor, $$props) {
  push($$props, !0);
  let title = prop($$props, "title", 3, null), hideFromTabOrder = prop($$props, "hideFromTabOrder", 3, !1), attributes = prop($$props, "attributes", 19, () => ({})), context = /* @__PURE__ */ derived(getSheetContext);
  var button = root$E(), event_handler = /* @__PURE__ */ __name((ev) => $$props.onRoll?.(ev), "event_handler");
  let attributes_1;
  var h4 = child(button), text_1 = child(h4);
  template_effect(() => {
    attributes_1 = set_attributes(
      button,
      attributes_1,
      {
        type: "button",
        class: "transparent-button",
        title: title(),
        onclick: event_handler,
        disabled: !get(context).editable,
        tabindex: hideFromTabOrder() ? -1 : 0,
        ...attributes()
      },
      "svelte-1hz5i72"
    ), toggle_class(button, "rollable", get(context).editable), set_text(text_1, $$props.text);
  }), append($$anchor, button), pop();
}
__name(RollableBlockTitle, "RollableBlockTitle");
var root$D = /* @__PURE__ */ template('<div class="block-score svelte-yh7889"><!></div>');
function BlockScore($$anchor, $$props) {
  push($$props, !0);
  var div = root$D(), node = child(div);
  snippet(node, () => $$props.children ?? noop), append($$anchor, div), pop();
}
__name(BlockScore, "BlockScore");
var on_click$e = /* @__PURE__ */ __name((event2, context, $$props) => get(context).actor.rollAbilityCheck({ ability: $$props.id, event: event2 }), "on_click$e"), on_click_1$6 = /* @__PURE__ */ __name((event2, context, $$props) => get(context).actor.rollSavingThrow({ ability: $$props.id, event: event2 }), "on_click_1$6"), on_click_2$3 = /* @__PURE__ */ __name((_, context, $$props) => get(context).actor.update({
  [`system.abilities.${$$props.id}.proficient`]: 1 - parseInt($$props.ability.proficient)
}), "on_click_2$3"), root_3$d = /* @__PURE__ */ template('<button type="button" class="proficiency-toggle inline-icon-button"><!></button>'), root_4$6 = /* @__PURE__ */ template('<span class="proficiency-toggle-readonly"><!></span>'), on_click_3$2 = /* @__PURE__ */ __name((__1, context, $$props) => FoundryAdapter.renderAbilityConfig(get(context).actor, $$props.id), "on_click_3$2"), root_5$8 = /* @__PURE__ */ template('<button type="button" class="config-button inline-icon-button"><i class="fas fa-cog"></i></button>'), root$C = /* @__PURE__ */ template('<div class="ability-score-container"><!> <!> <div class="ability-modifiers"><button type="button" class="ability-mod transparent-button"> </button> <button type="button" class="ability-save transparent-button"> </button> <!> <!></div> <span class="mod-label ability-mod-label"> </span> <span class="mod-label save-mod-label"> </span></div>');
function AttributeBlock($$anchor, $$props) {
  push($$props, !0);
  let abbreviation = /* @__PURE__ */ derived(() => CONFIG.DND5E.abilities[$$props.id]?.abbreviation ?? $$props.id), context = /* @__PURE__ */ derived(getSheetContext);
  const localize = FoundryAdapter.localize;
  let activeEffectApplied = /* @__PURE__ */ derived(() => ActiveEffectsHelper.isActiveEffectAppliedToField(get(context).actor, `system.abilities.${$$props.id}.proficient`));
  var div = root$C(), node = child(div), hideFromTabOrder = /* @__PURE__ */ derived(() => settings.value.useDefaultSheetAttributeTabbing || !settings.value.useAccessibleKeyboardSupport), attributes = /* @__PURE__ */ derived(() => ({
    "data-tidy-sheet-part": CONSTANTS.SHEET_PARTS.ABILITY_ROLLER
  }));
  RollableBlockTitle(node, {
    get title() {
      return $$props.ability.label;
    },
    get text() {
      return get(abbreviation);
    },
    onRoll: /* @__PURE__ */ __name((event2) => get(context).actor.rollAbility({ ability: $$props.id, event: event2 }), "onRoll"),
    get hideFromTabOrder() {
      return get(hideFromTabOrder);
    },
    get attributes() {
      return get(attributes);
    }
  });
  var node_1 = sibling(node, 2);
  BlockScore(node_1, {
    children: /* @__PURE__ */ __name(($$anchor2, $$slotProps) => {
      var attributes_1 = /* @__PURE__ */ derived(() => ({
        "data-tidy-sheet-part": CONSTANTS.SHEET_PARTS.ABILITY_SCORE
      }));
      TextInput($$anchor2, {
        get document() {
          return get(context).actor;
        },
        get field() {
          return `system.abilities.${$$props.id ?? ""}.value`;
        },
        get value() {
          return $$props.ability.value;
        },
        placeholder: "10",
        selectOnFocus: !0,
        allowDeltaChanges: !0,
        get disabled() {
          return get(context).lockSensitiveFields;
        },
        get attributes() {
          return get(attributes_1);
        }
      });
    }, "children"),
    $$slots: { default: !0 }
  });
  var div_1 = sibling(node_1, 2), button = child(div_1);
  template_effect(() => set_attribute(button, "title", localize("DND5E.AbilityModifier"))), button.__click = [on_click$e, context, $$props];
  var text2 = child(button);
  template_effect(() => set_text(text2, formatAsModifier($$props.ability.mod)));
  var button_1 = sibling(button, 2);
  template_effect(() => set_attribute(button_1, "title", localize("DND5E.ActionSave"))), button_1.__click = [on_click_1$6, context, $$props];
  var text_1 = child(button_1);
  template_effect(() => set_text(text_1, formatAsModifier($$props.ability.save)));
  var node_2 = sibling(button_1, 2);
  {
    var consequent_1 = /* @__PURE__ */ __name(($$anchor2) => {
      var fragment_1 = comment(), node_3 = first_child(fragment_1);
      {
        var consequent = /* @__PURE__ */ __name(($$anchor3) => {
          var button_2 = root_3$d();
          button_2.__click = [on_click_2$3, context, $$props], template_effect(() => set_attribute(button_2, "data-tooltip", get(activeEffectApplied) ? localize("DND5E.ActiveEffectOverrideWarning") : null));
          var node_4 = child(button_2);
          html(node_4, () => $$props.ability.icon), template_effect(() => {
            set_attribute(button_2, "title", $$props.ability.hover), set_attribute(button_2, "tabindex", !settings.value.useDefaultSheetAttributeTabbing && settings.value.useAccessibleKeyboardSupport ? 0 : -1), set_attribute(button_2, "data-tidy-sheet-part", CONSTANTS.SHEET_PARTS.ABILITY_SAVE_PROFICIENCY_TOGGLE), button_2.disabled = get(activeEffectApplied);
          }), append($$anchor3, button_2);
        }, "consequent"), alternate = /* @__PURE__ */ __name(($$anchor3) => {
          var span = root_4$6();
          template_effect(() => set_attribute(span, "data-tooltip", get(activeEffectApplied) ? localize("DND5E.ActiveEffectOverrideWarning") : null));
          var node_5 = child(span);
          html(node_5, () => $$props.ability.icon), template_effect(() => set_attribute(span, "title", $$props.ability.hover)), append($$anchor3, span);
        }, "alternate");
        if_block(node_3, ($$render) => {
          get(context).unlocked ? $$render(consequent) : $$render(alternate, !1);
        });
      }
      append($$anchor2, fragment_1);
    }, "consequent_1");
    if_block(node_2, ($$render) => {
      $$props.useSavingThrowProficiency && $$render(consequent_1);
    });
  }
  var node_6 = sibling(node_2, 2);
  {
    var consequent_2 = /* @__PURE__ */ __name(($$anchor2) => {
      var button_3 = root_5$8();
      template_effect(() => set_attribute(button_3, "title", localize("DND5E.AbilityConfigure"))), button_3.__click = [on_click_3$2, context, $$props], template_effect(() => {
        set_attribute(button_3, "tabindex", !settings.value.useDefaultSheetAttributeTabbing && settings.value.useAccessibleKeyboardSupport ? 0 : -1), set_attribute(button_3, "data-tidy-sheet-part", CONSTANTS.SHEET_PARTS.ABILITY_CONFIGURATION_CONTROL);
      }), append($$anchor2, button_3);
    }, "consequent_2");
    if_block(node_6, ($$render) => {
      $$props.useConfigurationOption && get(context).editable && get(context).unlocked && $$render(consequent_2);
    });
  }
  var span_1 = sibling(div_1, 2), text_2 = child(span_1);
  template_effect(() => set_text(text_2, localize("TIDY5E.AbbrMod")));
  var span_2 = sibling(span_1, 2), text_3 = child(span_2);
  template_effect(() => set_text(text_3, localize("TIDY5E.AbbrSavingThrow"))), template_effect(() => {
    set_attribute(div, "data-tidy-sheet-part", CONSTANTS.SHEET_PARTS.ABILITY_SCORE_CONTAINER), set_attribute(div, "data-ability", $$props.id), set_attribute(button, "tabindex", !settings.value.useDefaultSheetAttributeTabbing && settings.value.useAccessibleKeyboardSupport ? 0 : -1), button.disabled = !get(context).editable, set_attribute(button, "data-tidy-sheet-part", CONSTANTS.SHEET_PARTS.ABILITY_TEST_ROLLER), toggle_class(button, "rollable", get(context).editable), set_attribute(button_1, "tabindex", !settings.value.useDefaultSheetAttributeTabbing && settings.value.useAccessibleKeyboardSupport ? 0 : -1), button_1.disabled = !get(context).editable, set_attribute(button_1, "data-tidy-sheet-part", CONSTANTS.SHEET_PARTS.ABILITY_SAVE_ROLLER), toggle_class(button_1, "rollable", get(context).editable);
  }), append($$anchor, div), pop();
}
__name(AttributeBlock, "AttributeBlock");
delegate(["click"]);
var root_1$q = /* @__PURE__ */ template("<span> </span>"), on_click$d = /* @__PURE__ */ __name((_, context) => FoundryAdapter.renderInitiativeConfig(get(context).actor), "on_click$d"), root_2$c = /* @__PURE__ */ template('<button type="button" class="config-button icon-button svelte-1d4401o"><i class="fas fa-cog"></i></button>'), root_3$c = /* @__PURE__ */ template('<span class="config-button invisible svelte-1d4401o" role="presentation"><i class="fas fa-cog"></i></span>'), root$B = /* @__PURE__ */ template('<div class="wrapper svelte-1d4401o"><!> <!> <label class="ini-bonus svelte-1d4401o"><span> </span> <!></label> <!></div>');
function InitiativeBlock($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getSheetContext), appId = /* @__PURE__ */ derived(() => get(context).actor.id);
  const localize = FoundryAdapter.localize;
  var div = root$B(), node = child(div), title = /* @__PURE__ */ derived(() => localize("DND5E.Initiative")), text2 = /* @__PURE__ */ derived(() => localize("TIDY5E.AbbrInitiative"));
  RollableBlockTitle(node, {
    get title() {
      return get(title);
    },
    get text() {
      return get(text2);
    },
    onRoll: /* @__PURE__ */ __name((event2) => get(context).actor.rollInitiativeDialog({ event: event2 }), "onRoll")
  });
  var node_1 = sibling(node, 2);
  BlockScore(node_1, {
    children: /* @__PURE__ */ __name(($$anchor2, $$slotProps) => {
      var span = root_1$q(), text_1 = child(span);
      template_effect(() => set_text(text_1, formatAsModifier($$props.initiative.total))), append($$anchor2, span);
    }, "children"),
    $$slots: { default: !0 }
  });
  var label = sibling(node_1, 2), span_1 = child(label), text_2 = child(span_1);
  template_effect(() => set_text(text_2, localize("TIDY5E.AbbrMod")));
  var node_2 = sibling(span_1, 2), disabled = /* @__PURE__ */ derived(() => !get(context).editable || !get(context).unlocked);
  TextInput(node_2, {
    get document() {
      return get(context).actor;
    },
    field: "system.attributes.init.bonus",
    class: "ini-mod",
    placeholder: "0",
    selectOnFocus: !0,
    allowDeltaChanges: !0,
    get value() {
      return $$props.initiative.bonus;
    },
    get disabled() {
      return get(disabled);
    },
    get id() {
      return `${get(appId) ?? ""}-initiative-mod`;
    }
  });
  var node_3 = sibling(label, 2);
  {
    var consequent = /* @__PURE__ */ __name(($$anchor2) => {
      var button = root_2$c();
      template_effect(() => set_attribute(button, "title", localize("DND5E.InitiativeConfig"))), button.__click = [on_click$d, context], template_effect(() => set_attribute(button, "tabindex", settings.value.useAccessibleKeyboardSupport ? 0 : -1)), append($$anchor2, button);
    }, "consequent"), alternate = /* @__PURE__ */ __name(($$anchor2) => {
      var span_2 = root_3$c();
      template_effect(() => set_attribute(span_2, "title", localize("DND5E.InitiativeConfig"))), append($$anchor2, span_2);
    }, "alternate");
    if_block(node_3, ($$render) => {
      get(context).editable && get(context).unlocked ? $$render(consequent) : $$render(alternate, !1);
    });
  }
  template_effect(() => set_attribute(label, "for", `${get(appId) ?? ""}-initiative-mod`)), append($$anchor, div), pop();
}
__name(InitiativeBlock, "InitiativeBlock");
delegate(["click"]);
var on_click$c = /* @__PURE__ */ __name((_, context) => FoundryAdapter.renderArmorConfig(get(context).actor), "on_click$c"), root_1$p = /* @__PURE__ */ template('<button type="button" class="config-button attribute-value transparent-button svelte-35vblg" data-attribution="attributes.ac" data-attribution-caption="DND5E.ArmorClass" data-tooltip-direction="DOWN"> </button>');
function AcShield($$anchor, $$props) {
  push($$props, !0);
  let ac = prop($$props, "ac", 3, "0"), cssClass = prop($$props, "cssClass", 3, ""), context = /* @__PURE__ */ derived(getSheetContext), acShieldButton;
  onMount(() => {
    get(context).actor.sheet._applyAttributionTooltips(acShieldButton);
  }), AcShieldBase($$anchor, {
    get cssClass() {
      return cssClass();
    },
    children: /* @__PURE__ */ __name(($$anchor2, $$slotProps) => {
      var button = root_1$p();
      button.__click = [on_click$c, context];
      var text2 = child(button);
      bind_this(button, ($$value) => acShieldButton = $$value, () => acShieldButton), template_effect(() => {
        button.disabled = !get(context).editable, set_attribute(button, "tabindex", settings.value.useAccessibleKeyboardSupport ? 0 : -1), set_text(text2, ac());
      }), event("focus", button, function(...$$args) {
        $$props.onfocus?.apply(this, $$args);
      }), append($$anchor2, button);
    }, "children"),
    $$slots: { default: !0 }
  }), pop();
}
__name(AcShield, "AcShield");
delegate(["click"]);
var root_1$o = /* @__PURE__ */ template("<!> <div><!></div>", 1), root$A = /* @__PURE__ */ template('<section class="actor-stats"><!> <!> <div><!></div> <!></section>');
function ActorHeaderStats($$anchor, $$props) {
  push($$props, !0);
  var section = root$A(), node = child(section);
  AcShield(node, {
    get ac() {
      return $$props.ac.value;
    }
  });
  var node_1 = sibling(node, 2);
  VerticalLineSeparator(node_1);
  var div = sibling(node_1, 2), node_2 = child(div);
  InitiativeBlock(node_2, {
    get initiative() {
      return $$props.init;
    }
  });
  var node_3 = sibling(div, 2);
  each(node_3, 17, () => $$props.abilities, index, ($$anchor2, $$item) => {
    let id = /* @__PURE__ */ __name(() => get($$item)[0], "id"), ability = /* @__PURE__ */ __name(() => get($$item)[1], "ability");
    var fragment = root_1$o(), node_4 = first_child(fragment);
    VerticalLineSeparator(node_4);
    var div_1 = sibling(node_4, 2), node_5 = child(div_1);
    AttributeBlock(node_5, {
      get id() {
        return id();
      },
      get ability() {
        return ability();
      },
      useSavingThrowProficiency: !0,
      useConfigurationOption: !0
    }), append($$anchor2, fragment);
  }), append($$anchor, section), pop();
}
__name(ActorHeaderStats, "ActorHeaderStats");
var root_1$n = /* @__PURE__ */ template('<h2 class="minimal"> </h2>'), root_2$b = /* @__PURE__ */ template('<h2 class="minimal"> </h2>'), on_click$b = /* @__PURE__ */ __name((ev, useDefault) => useDefault(), "on_click$b"), on_click_1$5 = /* @__PURE__ */ __name((ev, validate) => validate() || ev.preventDefault(), "on_click_1$5"), on_click_2$2 = /* @__PURE__ */ __name((_, validate, apply2) => validate() && apply2(), "on_click_2$2"), root$z = /* @__PURE__ */ template('<section class="tab-selection-container full-height flex-column"><!> <p class="flex-row align-items-center no-gap"><span class="extra-info-icon-container svelte-1pq5yap"><i class="fas fa-info-circle svelte-1pq5yap"></i></span> <span> </span></p> <div class="flex-row small-gap"><button type="button" class="use-default-btn"><i class="fas fa-rotate-right"></i> </button> <button type="submit" class="save-changes-btn"><i class="fas fa-save"></i> </button> <button type="button" class="apply-changes-btn"><i class="fas fa-check"></i> </button></div></section>');
function TabSelection($$anchor, $$props) {
  push($$props, !1);
  let context = mutable_state(getContext(CONSTANTS.SVELTE_CONTEXT.CONTEXT));
  const apply2 = getContext(CONSTANTS.SVELTE_CONTEXT.APPLY), validate = getContext(CONSTANTS.SVELTE_CONTEXT.VALIDATE), useDefault = getContext(CONSTANTS.SVELTE_CONTEXT.USE_DEFAULT), localize = FoundryAdapter.localize;
  init();
  var section = root$z(), node = child(section);
  SelectionListbox(node, {
    labelProp: "label",
    valueProp: "id",
    listboxCssClass: "scroll-container",
    class: "flex-1",
    get leftItems() {
      return get(context).available;
    },
    set leftItems($$value) {
      mutate(context, get(context).available = $$value);
    },
    get rightItems() {
      return get(context).selected;
    },
    set rightItems($$value) {
      mutate(context, get(context).selected = $$value);
    },
    leftHeader: /* @__PURE__ */ __name(($$anchor2) => {
      var h2 = root_1$n(), text2 = child(h2);
      template_effect(() => set_text(text2, localize("TIDY5E.TabSelection.AvailableHeader"))), append($$anchor2, h2);
    }, "leftHeader"),
    rightHeader: /* @__PURE__ */ __name(($$anchor2) => {
      var h2_1 = root_2$b(), text_1 = child(h2_1);
      template_effect(() => set_text(text_1, localize("TIDY5E.TabSelection.SelectedHeader"))), append($$anchor2, h2_1);
    }, "rightHeader"),
    $$slots: { leftHeader: !0, rightHeader: !0 },
    $$legacy: !0
  });
  var p2 = sibling(node, 2), span = sibling(child(p2), 2), text_2 = child(span);
  template_effect(() => set_text(text_2, localize("TIDY5E.TabSelection.Explanation")));
  var div = sibling(p2, 2), button = child(div);
  button.__click = [on_click$b, useDefault];
  var text_3 = sibling(child(button));
  template_effect(() => set_text(text_3, ` ${localize("TIDY5E.UseDefault") ?? ""}`));
  var button_1 = sibling(button, 2);
  button_1.__click = [on_click_1$5, validate];
  var text_4 = sibling(child(button_1));
  template_effect(() => set_text(text_4, ` ${localize("TIDY5E.SaveChanges") ?? ""}`));
  var button_2 = sibling(button_1, 2);
  button_2.__click = [on_click_2$2, validate, apply2];
  var text_5 = sibling(child(button_2));
  template_effect(() => set_text(text_5, ` ${localize("TIDY5E.ApplyChanges") ?? ""}`)), append($$anchor, section), pop();
}
__name(TabSelection, "TabSelection");
delegate(["click"]);
class TabSelectionFormApplication extends SvelteFormApplicationBase {
  static {
    __name(this, "TabSelectionFormApplication");
  }
  actor;
  #context = state(proxy({ available: [], selected: [] }));
  get context() {
    return get(this.#context);
  }
  set context(value) {
    set(this.#context, proxy(value));
  }
  registeredTabs;
  constructor(actor, ...args) {
    super(...args), this.actor = actor, this.registeredTabs = this.getRegisteredTabs(actor);
  }
  getRegisteredTabs(actor) {
    return actor.type === CONSTANTS.SHEET_TYPE_CHARACTER ? CharacterSheetRuntime.getAllRegisteredTabs() : actor.type === CONSTANTS.SHEET_TYPE_NPC ? NpcSheetRuntime.getAllRegisteredTabs() : actor.type === CONSTANTS.SHEET_TYPE_VEHICLE ? VehicleSheetRuntime.getAllRegisteredTabs() : actor.type === CONSTANTS.SHEET_TYPE_GROUP ? GroupSheetRuntime.getAllRegisteredTabs() : (error(FoundryAdapter.localize("TIDY5E.TabSelection.UnsupportedDocumentErrorMessage", { documentType: this.actor.type })), []);
  }
  getDefaultTabIds(actor) {
    return actor.type === CONSTANTS.SHEET_TYPE_CHARACTER ? settings.value.defaultCharacterSheetTabs : actor.type === CONSTANTS.SHEET_TYPE_NPC ? settings.value.defaultNpcSheetTabs : actor.type === CONSTANTS.SHEET_TYPE_VEHICLE ? settings.value.defaultVehicleSheetTabs : actor.type === CONSTANTS.SHEET_TYPE_GROUP ? GroupSheetRuntime.getDefaultTabs() : (error(FoundryAdapter.localize("TIDY5E.TabSelection.UnsupportedDocumentErrorMessage", { documentType: this.actor.type })), []);
  }
  createComponent(node) {
    return mount(TabSelection, {
      target: node,
      context: /* @__PURE__ */ new Map([
        ["context", this.context],
        ["appId", this.appId],
        ["apply", this.apply.bind(this)],
        ["useDefault", this.useDefault.bind(this)],
        ["validate", this.validate.bind(this)]
      ])
    });
  }
  static get defaultOptions() {
    return {
      ...super.defaultOptions,
      height: 550,
      width: 750,
      classes: [
        ...super.defaultOptions.classes,
        "tab-selection",
        "app-v1",
        CONSTANTS.SHEET_LAYOUT_CLASSIC
      ],
      resizable: !1
    };
  }
  get title() {
    return FoundryAdapter.localize("TIDY5E.TabSelection.Title", { documentName: this.actor.name });
  }
  getData() {
    const selectedTabIds = TidyFlags.selectedTabs.get(this.actor) ?? this.getDefaultTabIds(this.actor);
    let availableTabs = this.registeredTabs.filter((t2) => !selectedTabIds.includes(t2.id)).map((t2) => ({
      id: t2.id,
      label: FoundryAdapter.localize(TabManager.getTabTitle(t2))
    })), selectedTabs = this.registeredTabs.filter((t2) => selectedTabIds.includes(t2.id)).map((t2) => ({
      id: t2.id,
      label: FoundryAdapter.localize(TabManager.getTabTitle(t2))
    })).sort((a2, b2) => selectedTabIds.indexOf(a2.id) - selectedTabIds.indexOf(b2.id));
    return {
      available: availableTabs,
      selected: selectedTabs
    };
  }
  async useDefault() {
    await TidyFlags.selectedTabs.unset(this.actor), this.close();
  }
  validate() {
    return this.context.selected.length === 0 ? (error(FoundryAdapter.localize("TIDY5E.TabSelection.AtLeastOneRequiredErrorMessage"), !0), !1) : !0;
  }
  async save() {
    await this.apply(), await this.close();
  }
  async _updateObject() {
    await this.save();
  }
  refreshContext() {
    this.context = this.getData();
  }
  async apply() {
    await TidyFlags.selectedTabs.set(this.actor, this.context.selected.map((t2) => t2.id));
  }
}
class ApplicationsManager {
  static {
    __name(this, "ApplicationsManager");
  }
  static _themeSettings;
  static _userSettings;
  /**
   * Opens the Theme Settings window as a singleton.
   * @returns the form application for theme settings.
   */
  static openThemeSettings() {
    ApplicationsManager._themeSettings ??= new ThemeSettingsFormApplication();
    const rendered = ApplicationsManager._themeSettings.render(!0);
    return setTimeout(() => ApplicationsManager._themeSettings.bringToTop(), 150), rendered;
  }
  /**
   * Opens the Sheet Settings window as a singleton.
   * @param initialTab the initial tab to show
   * @returns the form application for sheet settings
   */
  static openUserSettings(initialTab) {
    ApplicationsManager._userSettings ??= new UserSettingsFormApplication(
      CONSTANTS.TAB_USER_SETTINGS_PLAYERS
    ), initialTab && (ApplicationsManager._userSettings.initialTabId = initialTab);
    const rendered = ApplicationsManager._userSettings.render(!0);
    return setTimeout(() => ApplicationsManager._userSettings.bringToTop(), 150), rendered;
  }
}
var root_1$m = /* @__PURE__ */ template("<!> <!> <!> <!> <!>", 1);
function SheetMenu($$anchor, $$props) {
  push($$props, !0);
  let defaultSettingsTab = prop($$props, "defaultSettingsTab", 3, void 0);
  const localize = FoundryAdapter.localize;
  let context = /* @__PURE__ */ derived(getSheetContext);
  var ariaLabel = /* @__PURE__ */ derived(() => localize("TIDY5E.SheetMenu.label")), title = /* @__PURE__ */ derived(() => localize("TIDY5E.SheetMenu.label"));
  ButtonMenu($$anchor, {
    position: "bottom",
    anchor: "right",
    get ariaLabel() {
      return get(ariaLabel);
    },
    get title() {
      return get(title);
    },
    iconClass: "fas fa-ellipsis-vertical",
    children: /* @__PURE__ */ __name(($$anchor2, $$slotProps) => {
      var fragment_1 = root_1$m(), node = first_child(fragment_1);
      ThemeSelectorButtonMenuCommand(node, {});
      var node_1 = sibling(node, 2);
      ButtonMenuDivider(node_1);
      var node_2 = sibling(node_1, 2);
      ButtonMenuCommand(node_2, {
        onMenuClick: /* @__PURE__ */ __name(() => ApplicationsManager.openUserSettings(defaultSettingsTab()), "onMenuClick"),
        iconClass: "fas fa-cog",
        children: /* @__PURE__ */ __name(($$anchor3, $$slotProps2) => {
          var text$1 = text();
          template_effect(() => set_text(text$1, localize("TIDY5E.UserSettings.Menu.label"))), append($$anchor3, text$1);
        }, "children"),
        $$slots: { default: !0 }
      });
      var node_3 = sibling(node_2, 2);
      ButtonMenuCommand(node_3, {
        onMenuClick: /* @__PURE__ */ __name(() => ApplicationsManager.openThemeSettings(), "onMenuClick"),
        iconClass: "fas fa-palette",
        children: /* @__PURE__ */ __name(($$anchor3, $$slotProps2) => {
          var text_1 = text();
          template_effect(() => set_text(text_1, localize("TIDY5E.ThemeSettings.SheetMenu.buttonLabel"))), append($$anchor3, text_1);
        }, "children"),
        $$slots: { default: !0 }
      });
      var node_4 = sibling(node_3, 2);
      {
        var consequent = /* @__PURE__ */ __name(($$anchor3) => {
          var disabled = /* @__PURE__ */ derived(() => !get(context).editable);
          ButtonMenuCommand($$anchor3, {
            onMenuClick: /* @__PURE__ */ __name(() => new TabSelectionFormApplication(get(context).actor).render(!0), "onMenuClick"),
            iconClass: "fas fa-file-invoice",
            get disabled() {
              return get(disabled);
            },
            children: /* @__PURE__ */ __name(($$anchor4, $$slotProps2) => {
              var text_2 = text();
              template_effect(() => set_text(text_2, localize("TIDY5E.TabSelection.MenuOptionText"))), append($$anchor4, text_2);
            }, "children"),
            $$slots: { default: !0 }
          });
        }, "consequent");
        if_block(node_4, ($$render) => {
          get(context).owner && $$render(consequent);
        });
      }
      append($$anchor2, fragment_1);
    }, "children"),
    $$slots: { default: !0 }
  }), pop();
}
__name(SheetMenu, "SheetMenu");
var on_click$a = /* @__PURE__ */ __name((_, context) => FoundryAdapter.renderCreatureTypeConfig(get(context).actor), "on_click$a"), root_1$l = /* @__PURE__ */ template('<button type="button" class="configure-creature-type inline-transparent-button highlight-on-hover truncate svelte-1glyjit"> </button>'), root_2$a = /* @__PURE__ */ template('<span class="creature-type-label truncate svelte-1glyjit"> </span>');
function InlineCreatureType($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getSheetContext);
  const localize = FoundryAdapter.localize;
  let text2 = /* @__PURE__ */ derived(() => coalesce(get(context).labels.type, localize("DND5E.CreatureType")));
  var fragment = comment(), node = first_child(fragment);
  {
    var consequent = /* @__PURE__ */ __name(($$anchor2) => {
      var button = root_1$l();
      button.__click = [on_click$a, context], template_effect(() => set_attribute(button, "title", localize("DND5E.CreatureType")));
      var text_1 = child(button);
      template_effect(() => {
        set_attribute(button, "tabindex", settings.value.useAccessibleKeyboardSupport ? 0 : -1), set_text(text_1, get(text2));
      }), append($$anchor2, button);
    }, "consequent"), alternate = /* @__PURE__ */ __name(($$anchor2) => {
      var span = root_2$a();
      template_effect(() => set_attribute(span, "title", localize("DND5E.CreatureType")));
      var text_2 = child(span);
      template_effect(() => set_text(text_2, get(text2))), append($$anchor2, span);
    }, "alternate");
    if_block(node, ($$render) => {
      get(context).editable && (get(context).actor.type === "npc" || get(context).system.details?.race?.id) ? $$render(consequent) : $$render(alternate, !1);
    });
  }
  append($$anchor, fragment), pop();
}
__name(InlineCreatureType, "InlineCreatureType");
delegate(["click"]);
var root_2$9 = /* @__PURE__ */ template('<input type="text">'), root_3$b = /* @__PURE__ */ template("<span> </span>"), root_1$k = /* @__PURE__ */ template('<div class="form-field"><label> </label> <!></div> <div class="form-field"><label> </label> <input type="text"></div>', 1), root_5$7 = /* @__PURE__ */ template('<div class="environment form-field"><label> </label> <input type="text"></div> <div class="form-field"><label> </label> <input type="text"></div>', 1), root_7$5 = /* @__PURE__ */ template('<div class="form-field"><label> </label> <textarea rows="4" cols="50" name="dimensions"></textarea></div>'), root$y = /* @__PURE__ */ template('<section class="flex-column"><!> <button type="submit"><i class="far fa-save"></i> </button></section>');
function ActorOriginSummaryConfig($$anchor, $$props) {
  push($$props, !1);
  let context = mutable_state(getContext(CONSTANTS.SVELTE_CONTEXT.CONTEXT)), appId = getContext(CONSTANTS.SVELTE_CONTEXT.APP_ID);
  const localize = FoundryAdapter.localize;
  init();
  var section = root$y(), node = child(section);
  {
    var consequent_1 = /* @__PURE__ */ __name(($$anchor2) => {
      var fragment = root_1$k(), div = first_child(fragment), label = child(div);
      set_attribute(label, "for", `background-edit-${appId ?? ""}`);
      var text2 = child(label);
      template_effect(() => set_text(text2, localize("DND5E.Background")));
      var node_1 = sibling(label, 2);
      {
        var consequent = /* @__PURE__ */ __name(($$anchor3) => {
          var input = root_2$9();
          set_attribute(input, "id", `background-edit-${appId ?? ""}`), template_effect(() => set_attribute(input, "placeholder", localize("DND5E.Background"))), bind_value(input, () => get(context).background, ($$value) => mutate(context, get(context).background = $$value)), append($$anchor3, input);
        }, "consequent"), alternate = /* @__PURE__ */ __name(($$anchor3) => {
          var span = root_3$b(), text_1 = child(span);
          template_effect(() => set_text(text_1, get(context).background)), append($$anchor3, span);
        }, "alternate");
        if_block(node_1, ($$render) => {
          get(context).canEditBackground ? $$render(consequent) : $$render(alternate, !1);
        });
      }
      var div_1 = sibling(div, 2), label_1 = child(div_1);
      set_attribute(label_1, "for", `pc-alignment-edit-${appId ?? ""}`);
      var text_2 = child(label_1);
      template_effect(() => set_text(text_2, localize("DND5E.Alignment")));
      var input_1 = sibling(label_1, 2);
      set_attribute(input_1, "id", `alignment-edit-${appId ?? ""}`), template_effect(() => set_attribute(input_1, "placeholder", localize("DND5E.Alignment"))), bind_value(input_1, () => get(context).alignment, ($$value) => mutate(context, get(context).alignment = $$value)), append($$anchor2, fragment);
    }, "consequent_1"), alternate_2 = /* @__PURE__ */ __name(($$anchor2) => {
      var fragment_1 = comment(), node_2 = first_child(fragment_1);
      {
        var consequent_2 = /* @__PURE__ */ __name(($$anchor3) => {
          var fragment_2 = root_5$7(), div_2 = first_child(fragment_2), label_2 = child(div_2);
          set_attribute(label_2, "for", `environment-edit-${appId ?? ""}`);
          var text_3 = child(label_2);
          template_effect(() => set_text(text_3, localize("TIDY5E.Environment")));
          var input_2 = sibling(label_2, 2);
          set_attribute(input_2, "id", `environment-edit-${appId ?? ""}`), template_effect(() => set_attribute(input_2, "placeholder", localize("TIDY5E.Environment")));
          var div_3 = sibling(div_2, 2), label_3 = child(div_3);
          set_attribute(label_3, "for", `alignment-edit-${appId ?? ""}`);
          var text_4 = child(label_3);
          template_effect(() => set_text(text_4, localize("DND5E.Alignment")));
          var input_3 = sibling(label_3, 2);
          set_attribute(input_3, "id", `alignment-edit-${appId ?? ""}`), template_effect(() => set_attribute(input_3, "placeholder", localize("DND5E.Alignment"))), bind_value(input_2, () => get(context).environment, ($$value) => mutate(context, get(context).environment = $$value)), bind_value(input_3, () => get(context).alignment, ($$value) => mutate(context, get(context).alignment = $$value)), append($$anchor3, fragment_2);
        }, "consequent_2"), alternate_1 = /* @__PURE__ */ __name(($$anchor3) => {
          var fragment_3 = comment(), node_3 = first_child(fragment_3);
          {
            var consequent_3 = /* @__PURE__ */ __name(($$anchor4) => {
              var div_4 = root_7$5(), label_4 = child(div_4);
              set_attribute(label_4, "for", `dimensions-edit-${appId ?? ""}`);
              var text_5 = child(label_4);
              template_effect(() => set_text(text_5, localize("DND5E.Dimensions")));
              var textarea = sibling(label_4, 2);
              set_attribute(textarea, "id", `dimensions-edit-${appId ?? ""}`), template_effect(() => set_attribute(textarea, "placeholder", localize("DND5E.Dimensions"))), bind_value(textarea, () => get(context).dimensions, ($$value) => mutate(context, get(context).dimensions = $$value)), append($$anchor4, div_4);
            }, "consequent_3");
            if_block(
              node_3,
              ($$render) => {
                get(context).isVehicle && $$render(consequent_3);
              },
              !0
            );
          }
          append($$anchor3, fragment_3);
        }, "alternate_1");
        if_block(
          node_2,
          ($$render) => {
            get(context).isNpc ? $$render(consequent_2) : $$render(alternate_1, !1);
          },
          !0
        );
      }
      append($$anchor2, fragment_1);
    }, "alternate_2");
    if_block(node, ($$render) => {
      get(context).isCharacter ? $$render(consequent_1) : $$render(alternate_2, !1);
    });
  }
  var button = sibling(node, 2), text_6 = sibling(child(button));
  template_effect(() => set_text(text_6, ` ${localize("Save") ?? ""}`)), append($$anchor, section), pop();
}
__name(ActorOriginSummaryConfig, "ActorOriginSummaryConfig");
class ActorOriginSummaryConfigFormApplication extends SvelteFormApplicationBase {
  static {
    __name(this, "ActorOriginSummaryConfigFormApplication");
  }
  #context = state();
  get context() {
    return get(this.#context);
  }
  set context(value) {
    set(this.#context, proxy(value));
  }
  actor;
  actorHook;
  constructor(actor, ...args) {
    super(...args), this.actor = actor;
  }
  createComponent(node) {
    return this.context = this.getData(), mount(ActorOriginSummaryConfig, {
      target: node,
      context: /* @__PURE__ */ new Map([
        ["appId", this.appId],
        ["context", this.context]
      ])
    });
  }
  activateListeners(html2) {
    this.refreshContextOnActorChanges(), super.activateListeners(html2);
  }
  refreshContextOnActorChanges() {
    this.actorHook === void 0 && (this.actorHook = Hooks.on("updateActor", (actor) => {
      actor.id === this.actor.id && this.refreshContext();
    }));
  }
  getData() {
    return {
      race: this.actor.system.details.race?.name ?? this.actor.system.details.race,
      background: this.actor.system.details.background?.name ?? this.actor.system.details.background,
      environment: this.actor.system.details.environment,
      alignment: this.actor.system.details.alignment,
      dimensions: this.actor.system.traits.dimensions,
      isCharacter: this.actor.type === CONSTANTS.SHEET_TYPE_CHARACTER,
      canEditBackground: !this.actor.system.details.background?.name,
      isNpc: this.actor.type === CONSTANTS.SHEET_TYPE_NPC,
      isVehicle: this.actor.type === CONSTANTS.SHEET_TYPE_VEHICLE
    };
  }
  static get defaultOptions() {
    return FoundryAdapter.mergeObject(super.defaultOptions, {
      width: 380,
      height: "auto",
      sheetConfig: !1,
      resizable: !1
    });
  }
  get title() {
    return FoundryAdapter.localize("TIDY5E.OriginSummaryConfig", { actorName: this.actor.name });
  }
  refreshContext() {
    this.context = this.getData();
  }
  close(options) {
    Hooks.off("updateActor", this.actorHook), this.actorHook = void 0, super.close(options);
  }
  async save() {
    if (!this.context) {
      error("Unable to save data due to an error.", !0), console.error("Unable to save Actor Origin Summary Config because the context is unexpectedly null.", this.actor, this.context);
      return;
    }
    if (this.context.isCharacter) {
      const update2 = {
        "system.details.alignment": this.context.alignment
      };
      this.context.canEditBackground && (update2["system.details.background"] = this.context.background), await this.actor.update(update2);
    } else this.context.isNpc ? await this.actor.update({
      "system.details.environment": this.context.environment,
      "system.details.alignment": this.context.alignment
    }) : this.context.isVehicle && await this.actor.update({
      "system.traits.dimensions": this.context.dimensions
    });
    this.close();
  }
  async _updateObject() {
    await this.save();
  }
}
function ActorName($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getSheetContext);
  const localize = FoundryAdapter.localize;
  var editable = /* @__PURE__ */ derived(() => get(context).editable && !get(context).lockSensitiveFields), placeholder = /* @__PURE__ */ derived(() => localize("DND5E.Name"));
  TextInput($$anchor, {
    get document() {
      return get(context).actor;
    },
    get editable() {
      return get(editable);
    },
    spellcheck: !1,
    get placeholder() {
      return get(placeholder);
    },
    get value() {
      return get(context).actor.name;
    },
    field: "name"
  }), pop();
}
__name(ActorName, "ActorName");
var root_5$6 = /* @__PURE__ */ template('<span class="max"> </span>'), root_3$a = /* @__PURE__ */ template('<span class="sep">/</span> <!>', 1), root_2$8 = /* @__PURE__ */ template('<div class="xp-tracker svelte-gr54wr"><div class="experience flex-row no-gap"><!> <!></div> <div class="xp-bar"><div class="xp-bar-total svelte-gr54wr"><span class="xp-bar-current svelte-gr54wr"></span></div></div></div>'), root_9$5 = /* @__PURE__ */ template('<span class="flex-no-grow">/</span>'), root_10$2 = /* @__PURE__ */ template('<span class="flex-no-grow"> </span>'), root_8$7 = /* @__PURE__ */ template('<!> <span class="flex-no-grow"><span> </span> <!></span>', 1), root_7$4 = /* @__PURE__ */ template('<span class="flex-row extra-small-gap"></span>'), root_11$2 = /* @__PURE__ */ template('<span class="ms-auto"> </span>'), root_13$1 = /* @__PURE__ */ template("<span> </span>"), root_14 = /* @__PURE__ */ template('<span>&#8226;</span> <span class="truncate"> </span>', 1), on_click$9 = /* @__PURE__ */ __name((_, context) => new ActorOriginSummaryConfigFormApplication(get(context).actor).render(!0), "on_click$9"), root_15 = /* @__PURE__ */ template('<button type="button" class="inline-icon-button"><i class="fas fa-cog"></i></button>'), root$x = /* @__PURE__ */ template('<!> <header class="tidy5e-sheet-header flex-row svelte-gr54wr"><div class="flex-0"><!></div> <div class="flex-grow-1"><div class="flex-row justify-content-space-between align-items-center small-gap"><div class="actor-name"><!></div> <div class="flex-row extra-small-gap align-items-stretch"><!> <h2 class="level svelte-gr54wr"> </h2> <!></div></div> <section class="class-list svelte-gr54wr"><!> <!> <!></section> <section class="origin-summary svelte-gr54wr"><span class="origin-points svelte-gr54wr"><!> <span>&#8226;</span> <!> <!></span> <span class="flex-row align-items-center extra-small-gap"><b> </b> <!></span></section> <div role="presentation" class="header-line-margin flex-row extra-small-gap justify-content-space-between"><!> <!></div> <!> <!></div></header> <!> <section class="tidy-sheet-body"><!></section>', 1);
function CharacterSheetFull($$anchor, $$props) {
  push($$props, !0);
  let selectedTabId = state(""), context = /* @__PURE__ */ derived(getCharacterSheetContext);
  const localize = FoundryAdapter.localize;
  let playerName = /* @__PURE__ */ derived(() => TidyFlags.playerName.get(get(context).actor) ?? ""), classAndSubclassSummaries = /* @__PURE__ */ derived(() => Array.from(FoundryAdapter.getClassAndSubclassSummaries(get(context).actor).values())), characterSummaryEntries = /* @__PURE__ */ derived(() => FoundryAdapter.getActorCharacterSummaryEntries(get(context))), abilities = /* @__PURE__ */ derived(() => Object.entries(get(context).abilities)), sizes = /* @__PURE__ */ derived(() => Object.entries(get(context).config.actorSizes).map(([abbreviation, size]) => ({ value: abbreviation, text: size.label }))), currentSize = /* @__PURE__ */ derived(() => ({
    value: get(context).system.traits.size,
    text: get(context).config.actorSizes[get(context).system.traits.size]?.label
  }));
  var fragment = root$x(), node = first_child(fragment);
  {
    var consequent = /* @__PURE__ */ __name(($$anchor2) => {
      ActorWarnings($$anchor2, {
        get warnings() {
          return get(context).viewableWarnings;
        }
      });
    }, "consequent");
    if_block(node, ($$render) => {
      get(context).viewableWarnings.length && $$render(consequent);
    });
  }
  var header = sibling(node, 2), div = child(header), node_1 = child(div);
  CharacterProfile(node_1, {});
  var div_1 = sibling(div, 2), div_2 = child(div_1), div_3 = child(div_2), node_2 = child(div_3);
  ActorName(node_2, {});
  var div_4 = sibling(div_3, 2), node_3 = child(div_4);
  {
    var consequent_3 = /* @__PURE__ */ __name(($$anchor2) => {
      var div_5 = root_2$8(), div_6 = child(div_5), node_4 = child(div_6), disabled = /* @__PURE__ */ derived(() => !get(context).editable || get(context).lockExpChanges);
      TextInput(node_4, {
        get document() {
          return get(context).actor;
        },
        field: "system.details.xp.value",
        class: "current-xp",
        get value() {
          return get(context).system.details.xp.value;
        },
        placeholder: "0",
        selectOnFocus: !0,
        allowDeltaChanges: !0,
        maxlength: 7,
        get disabled() {
          return get(disabled);
        }
      });
      var node_5 = sibling(node_4, 2);
      {
        var consequent_2 = /* @__PURE__ */ __name(($$anchor3) => {
          var fragment_2 = root_3$a(), node_6 = sibling(first_child(fragment_2), 2);
          {
            var consequent_1 = /* @__PURE__ */ __name(($$anchor4) => {
              var disabled_1 = /* @__PURE__ */ derived(() => !get(context).editable);
              TextInput($$anchor4, {
                get document() {
                  return get(context).actor;
                },
                field: "system.details.xp.max",
                class: "max-xp max",
                get value() {
                  return get(context).system.details.xp.max;
                },
                placeholder: "0",
                selectOnFocus: !0,
                allowDeltaChanges: !0,
                maxlength: 7,
                get disabled() {
                  return get(disabled_1);
                }
              });
            }, "consequent_1"), alternate = /* @__PURE__ */ __name(($$anchor4) => {
              var span = root_5$6(), text2 = child(span);
              template_effect(() => set_text(text2, get(context).system.details.xp.max)), append($$anchor4, span);
            }, "alternate");
            if_block(node_6, ($$render) => {
              get(context).editable && FoundryAdapter.userIsGm() ? $$render(consequent_1) : $$render(alternate, !1);
            });
          }
          append($$anchor3, fragment_2);
        }, "consequent_2");
        if_block(node_5, ($$render) => {
          get(context).epicBoonsEarned || $$render(consequent_2);
        });
      }
      var div_7 = sibling(div_6, 2), div_8 = child(div_7), span_1 = child(div_8);
      template_effect(() => set_attribute(span_1, "style", `width: ${get(context).system.details.xp.pct ?? ""}%`)), append($$anchor2, div_5);
    }, "consequent_3");
    if_block(node_3, ($$render) => {
      get(context).disableExperience || $$render(consequent_3);
    });
  }
  var h2 = sibling(node_3, 2), text_1 = child(h2);
  template_effect(() => set_text(text_1, `${localize("DND5E.AbbreviationLevel") ?? ""}
          ${get(context).system.details.level ?? ""}`));
  var node_7 = sibling(h2, 2);
  SheetMenu(node_7, {
    get defaultSettingsTab() {
      return CONSTANTS.TAB_USER_SETTINGS_PLAYERS;
    }
  });
  var section = sibling(div_2, 2), node_8 = child(section);
  {
    var consequent_4 = /* @__PURE__ */ __name(($$anchor2) => {
      var placeholder = /* @__PURE__ */ derived(() => localize("TIDY5E.PlayerName")), editable = /* @__PURE__ */ derived(() => get(context).editable && !get(context).lockSensitiveFields);
      ContentEditableFormField($$anchor2, {
        element: "span",
        get document() {
          return get(context).actor;
        },
        get field() {
          return TidyFlags.playerName.prop;
        },
        get value() {
          return get(playerName);
        },
        cssClass: "player-name",
        get placeholder() {
          return get(placeholder);
        },
        dataMaxLength: 40,
        get editable() {
          return get(editable);
        }
      });
    }, "consequent_4");
    if_block(node_8, ($$render) => {
      settings.value.showPlayerName && $$render(consequent_4);
    });
  }
  var node_9 = sibling(node_8, 2);
  {
    var consequent_7 = /* @__PURE__ */ __name(($$anchor2) => {
      var span_2 = root_7$4();
      each(span_2, 21, () => get(classAndSubclassSummaries), index, ($$anchor3, summary, i2) => {
        var fragment_5 = root_8$7(), node_10 = first_child(fragment_5);
        {
          var consequent_5 = /* @__PURE__ */ __name(($$anchor4) => {
            var span_3 = root_9$5();
            append($$anchor4, span_3);
          }, "consequent_5");
          if_block(node_10, ($$render) => {
            i2 > 0 && $$render(consequent_5);
          });
        }
        var span_4 = sibling(node_10, 2), span_5 = child(span_4), text_2 = child(span_5), node_11 = sibling(span_5, 2);
        {
          var consequent_6 = /* @__PURE__ */ __name(($$anchor4) => {
            var span_6 = root_10$2(), text_3 = child(span_6);
            template_effect(() => {
              set_attribute(span_6, "title", get(summary).subclass), set_text(text_3, get(summary).subclass);
            }), append($$anchor4, span_6);
          }, "consequent_6");
          if_block(node_11, ($$render) => {
            get(summary).subclass && $$render(consequent_6);
          });
        }
        template_effect(() => {
          set_attribute(span_5, "title", `${get(summary).class ?? ""} ${get(summary).level ?? "0" ?? ""}`), set_text(text_2, `${get(summary).class ?? ""}
                ${get(summary).level ?? "0" ?? ""}`);
        }), append($$anchor3, fragment_5);
      }), append($$anchor2, span_2);
    }, "consequent_7");
    if_block(node_9, ($$render) => {
      get(context).owner && settings.value.showClassList && $$render(consequent_7);
    });
  }
  var node_12 = sibling(node_9, 2);
  {
    var consequent_8 = /* @__PURE__ */ __name(($$anchor2) => {
      var span_7 = root_11$2(), text_4 = child(span_7);
      template_effect(() => set_text(text_4, get(context).epicBoonsEarned)), append($$anchor2, span_7);
    }, "consequent_8");
    if_block(node_12, ($$render) => {
      get(context).actor.system.details.xp.boonsEarned && $$render(consequent_8);
    });
  }
  var section_1 = sibling(section, 2), span_8 = child(section_1), node_13 = child(span_8);
  {
    var consequent_9 = /* @__PURE__ */ __name(($$anchor2) => {
      var title = /* @__PURE__ */ derived(() => localize("DND5E.Size"));
      InlineTextDropdownList($$anchor2, {
        get options() {
          return get(sizes);
        },
        get selected() {
          return get(currentSize);
        },
        onOptionClicked: /* @__PURE__ */ __name((option) => get(context).actor.update({ "system.traits.size": option.value }), "onOptionClicked"),
        get title() {
          return get(title);
        }
      });
    }, "consequent_9"), alternate_1 = /* @__PURE__ */ __name(($$anchor2) => {
      var span_9 = root_13$1();
      template_effect(() => set_attribute(span_9, "title", localize("DND5E.Size")));
      var text_5 = child(span_9);
      template_effect(() => set_text(text_5, get(currentSize).text)), append($$anchor2, span_9);
    }, "alternate_1");
    if_block(node_13, ($$render) => {
      get(context).editable ? $$render(consequent_9) : $$render(alternate_1, !1);
    });
  }
  var node_14 = sibling(node_13, 4);
  InlineCreatureType(node_14, {});
  var node_15 = sibling(node_14, 2);
  each(node_15, 17, () => get(characterSummaryEntries), index, ($$anchor2, entry) => {
    var fragment_7 = root_14(), span_10 = sibling(first_child(fragment_7), 2), text_6 = child(span_10);
    template_effect(() => {
      set_attribute(span_10, "title", get(entry)), set_text(text_6, get(entry));
    }), append($$anchor2, fragment_7);
  });
  var span_11 = sibling(span_8, 2), b2 = child(span_11), text_7 = child(b2);
  template_effect(() => set_text(text_7, `${localize("DND5E.Proficiency") ?? ""}: ${get(context).labels.proficiency ?? ""}`));
  var node_16 = sibling(b2, 2);
  {
    var consequent_10 = /* @__PURE__ */ __name(($$anchor2) => {
      var button = root_15();
      template_effect(() => set_attribute(button, "title", localize("TIDY5E.OriginSummaryConfig"))), button.__click = [on_click$9, context], template_effect(() => set_attribute(button, "tabindex", settings.value.useAccessibleKeyboardSupport ? 0 : -1)), append($$anchor2, button);
    }, "consequent_10");
    if_block(node_16, ($$render) => {
      get(context).unlocked && $$render(consequent_10);
    });
  }
  var div_9 = sibling(section_1, 2), node_17 = child(div_9);
  ActorMovement(node_17, {});
  var node_18 = sibling(node_17, 2);
  {
    var consequent_11 = /* @__PURE__ */ __name(($$anchor2) => {
      SpecialSaves($$anchor2, {});
    }, "consequent_11");
    if_block(node_18, ($$render) => {
      get(context).hasSpecialSaves && $$render(consequent_11);
    });
  }
  var node_19 = sibling(div_9, 2);
  HorizontalLineSeparator(node_19, {
    class: "header-line-margin-left",
    borderColor: "light"
  });
  var node_20 = sibling(node_19, 2);
  ActorHeaderStats(node_20, {
    get abilities() {
      return get(abilities);
    },
    get ac() {
      return get(context).system.attributes.ac;
    },
    get init() {
      return get(context).system.attributes.init;
    }
  });
  var node_21 = sibling(header, 2);
  Tabs(node_21, {
    get tabs() {
      return get(context).tabs;
    },
    get sheet() {
      return get(context).actor.sheet;
    },
    get selectedTabId() {
      return get(selectedTabId);
    },
    set selectedTabId($$value) {
      set(selectedTabId, proxy($$value));
    },
    tabEnd: /* @__PURE__ */ __name(($$anchor2) => {
      var fragment_9 = comment(), node_22 = first_child(fragment_9);
      {
        var consequent_12 = /* @__PURE__ */ __name(($$anchor3) => {
          var hint = /* @__PURE__ */ derived(() => settings.value.permanentlyUnlockCharacterSheetForGm && FoundryAdapter.userIsGm() ? localize("TIDY5E.Settings.value.PermanentlyUnlockCharacterSheetForGM.title") : null);
          SheetEditModeToggle($$anchor3, {
            get hint() {
              return get(hint);
            }
          });
        }, "consequent_12");
        if_block(node_22, ($$render) => {
          get(context).editable && $$render(consequent_12);
        });
      }
      append($$anchor2, fragment_9);
    }, "tabEnd"),
    $$slots: { tabEnd: !0 }
  });
  var section_2 = sibling(node_21, 2), node_23 = child(section_2);
  TabContents(node_23, {
    get tabs() {
      return get(context).tabs;
    },
    get selectedTabId() {
      return get(selectedTabId);
    }
  }), template_effect(() => {
    set_attribute(div_2, "data-tidy-sheet-part", CONSTANTS.SHEET_PARTS.NAME_HEADER_ROW), set_attribute(div_3, "data-tidy-sheet-part", CONSTANTS.SHEET_PARTS.NAME_CONTAINER);
  }), append($$anchor, fragment), pop();
}
__name(CharacterSheetFull, "CharacterSheetFull");
delegate(["click"]);
var root$w = /* @__PURE__ */ template('<header class="svelte-ny4uu3"><div class="profile svelte-ny4uu3"><div class="portrait svelte-ny4uu3"><img data-edit="img" class="svelte-ny4uu3"></div></div> <h1> </h1></header>');
function LimitedHeader($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getVehicleSheetContext);
  var header = root$w(), div = child(header), div_1 = child(div), img = child(div_1), h1 = sibling(div, 2), text2 = child(h1);
  template_effect(() => {
    toggle_class(div_1, "rounded", $$props.rounded), set_attribute(img, "src", get(context).actor.img), set_attribute(img, "alt", get(context).actor.name), set_text(text2, get(context).actor.name);
  }), append($$anchor, header), pop();
}
__name(LimitedHeader, "LimitedHeader");
var root_1$j = /* @__PURE__ */ template('<article class="appearance-notes svelte-1duz0dy"><div class="section-titles biopage"> </div> <!></article> <article class="biography-notes svelte-1duz0dy"><div class="section-titles"> </div> <!></article>', 1), root$v = /* @__PURE__ */ template('<div class="limited-character svelte-1duz0dy"><!> <section class="tidy-sheet-body svelte-1duz0dy"><div class="note-entries svelte-1duz0dy"><!></div></section></div>');
function CharacterSheetLimited($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getNpcSheetContext);
  const localize = FoundryAdapter.localize;
  var div = root$v(), node = child(div);
  LimitedHeader(node, {
    get rounded() {
      return get(context).useRoundedPortraitStyle;
    }
  });
  var section = sibling(node, 2), div_1 = child(section), node_1 = child(div_1);
  RerenderAfterFormSubmission(node_1, {
    get andOnValueChange() {
      return get(context).system.details.biography.value;
    },
    children: /* @__PURE__ */ __name(($$anchor2, $$slotProps) => {
      var fragment = root_1$j(), article = first_child(fragment), div_2 = child(article), text2 = child(div_2);
      template_effect(() => set_text(text2, localize("DND5E.Appearance")));
      var node_2 = sibling(div_2, 2);
      SheetEditor(node_2, {
        get content() {
          return get(context).system.details.appearance;
        },
        target: "system.details.appearance",
        get editable() {
          return get(context).editable;
        }
      }), action(article, ($$node) => get(context).activateEditors?.($$node));
      var article_1 = sibling(article, 2), div_3 = child(article_1);
      const stringified_text = /* @__PURE__ */ derived(() => localize("DND5E.Background") ?? ""), stringified_text_1 = /* @__PURE__ */ derived(() => localize("DND5E.Biography") ?? "");
      var text_1 = child(div_3);
      template_effect(() => set_text(text_1, `${get(stringified_text)}/${get(stringified_text_1)}`));
      var node_3 = sibling(div_3, 2);
      SheetEditor(node_3, {
        get content() {
          return get(context).biographyHTML;
        },
        target: "system.details.biography.value",
        get editable() {
          return get(context).editable;
        }
      }), action(article_1, ($$node) => get(context).activateEditors?.($$node)), append($$anchor2, fragment);
    }, "children"),
    $$slots: { default: !0 }
  }), append($$anchor, div), pop();
}
__name(CharacterSheetLimited, "CharacterSheetLimited");
function CharacterSheet($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getCharacterSheetContext);
  var fragment = comment(), node = first_child(fragment);
  {
    var consequent = /* @__PURE__ */ __name(($$anchor2) => {
      CharacterSheetLimited($$anchor2, {});
    }, "consequent"), alternate = /* @__PURE__ */ __name(($$anchor2) => {
      CharacterSheetFull($$anchor2, {});
    }, "alternate");
    if_block(node, ($$render) => {
      get(context).showLimitedSheet ? $$render(consequent) : $$render(alternate, !1);
    });
  }
  append($$anchor, fragment), pop();
}
__name(CharacterSheet, "CharacterSheet");
function initTidy5eContextMenu(sheet, html2, contextMenuSelector = "[data-context-menu]") {
  FoundryAdapter.createContextMenu(html2, contextMenuSelector, [], {
    onOpen: onItemContext.bind(sheet)
  });
}
__name(initTidy5eContextMenu, "initTidy5eContextMenu");
function onItemContext(element2) {
  const contextMenuType = element2.getAttribute("data-context-menu"), app = this;
  if (contextMenuType === CONSTANTS.CONTEXT_MENU_TYPE_EFFECTS) {
    const effectId = element2.getAttribute("data-effect-id") ?? "", parentId = element2.getAttribute("data-parent-id") ?? "", effect2 = FoundryAdapter.getEffect({
      document: app.document,
      effectId,
      parentId
    });
    if (!effect2)
      return;
    ui.context.menuItems = getActiveEffectContextOptions(effect2, app), TidyHooks.dnd5eGetActiveEffectContextOptions(effect2, ui.context.menuItems);
  } else if (contextMenuType === CONSTANTS.CONTEXT_MENU_TYPE_ITEMS) {
    const id = element2.closest("[data-item-id]")?.getAttribute("data-item-id");
    let item = this.document.type === CONSTANTS.ITEM_TYPE_CONTAINER ? this.document.system.contents.get(id) : this.document.items.get(id);
    if (!item) return;
    ui.context.menuItems = getItemContextOptions(item), TidyHooks.dnd5eGetItemContextOptions(item, ui.context.menuItems);
  } else if (contextMenuType === CONSTANTS.CONTEXT_MENU_TYPE_GROUP_MEMBER) {
    const memberId = element2.getAttribute("data-member-id"), actor = this.document.system.members.find(
      (m2) => m2.actor.id === memberId
    );
    if (!actor) return;
    ui.context.menuItems = getGroupMemberContextOptions(this.document, actor), TidyHooks.tidy5eSheetsGetGroupMemberContextOptions(
      this.document,
      actor,
      ui.context.menuItems
    );
    return;
  } else if (contextMenuType === CONSTANTS.CONTEXT_MENU_TYPE_FACILITY_OCCUPANTS) {
    const occupantUuid = element2.getAttribute("data-actor-uuid"), index2 = element2.getAttribute("data-index"), facilityId = element2.getAttribute("data-facility-id"), facilityName = element2.getAttribute("data-facility-name"), prop2 = element2.getAttribute("data-prop");
    let contextOptions = [
      {
        name: "TIDY5E.ContextMenuActionEdit",
        icon: "<i class='fas fas fa-pencil-alt fa-fw'></i>",
        callback: /* @__PURE__ */ __name(async () => {
          (await fromUuid(occupantUuid))?.sheet.render(!0);
        }, "callback"),
        condition: /* @__PURE__ */ __name(() => app.actor.isOwner && !app.actor.compendium?.locked, "condition")
      },
      {
        name: FoundryAdapter.localize(
          "TIDY5E.Facilities.ContextMenuActionRemove",
          { facilityName }
        ),
        icon: "<i class='fas fas fa-trash t5e-warning-color fa-fw'></i>",
        callback: /* @__PURE__ */ __name(async () => {
          await app.actor.sheet.deleteOccupant(facilityId, prop2, Number(index2));
        }, "callback"),
        condition: /* @__PURE__ */ __name(() => app.actor.isOwner && !app.actor.compendium?.locked, "condition")
      }
    ];
    ui.context.menuItems = contextOptions, TidyHooks.dnd5eGetFacilityOccupantContextOptions(
      this.document,
      this.document.items.get(facilityId),
      occupantUuid,
      prop2,
      index2 !== null ? Number(index2) : null,
      ui.context.menuItems
    );
  } else
    warn(
      `Unable to show context menu. The menu type ${contextMenuType} is not supported. Put a [data-context-menu] attribute on the target entity and implement the handler where this warning appears.`
    );
}
__name(onItemContext, "onItemContext");
function getActiveEffectContextOptions(effect2, app) {
  const effectParent = effect2.parent, actor = effectParent.actor ?? effectParent;
  if (!effectParent?.isOwner || !settings.value.useContextMenu)
    return [];
  if (actor.type === CONSTANTS.SHEET_TYPE_CHARACTER && !FoundryAdapter.allowCharacterEffectsManagement(actor))
    return [];
  const isConcentrationEffect = FoundryAdapter.isConcentrationEffect(
    effect2,
    app
  ), isFav = FoundryAdapter.isEffectFavorited(effect2, actor), favoriteIcon = "fa-bookmark";
  return [
    {
      name: "DND5E.ContextMenuActionEdit",
      icon: "<i class='fas fas fa-pencil-alt fa-fw'></i>",
      callback: /* @__PURE__ */ __name(() => effect2.sheet.render(!0), "callback")
    },
    {
      name: "DND5E.ContextMenuActionDuplicate",
      icon: "<i class='fas fa-copy fa-fw'></i>",
      callback: /* @__PURE__ */ __name(() => effect2.clone(
        {
          name: FoundryAdapter.localize("DOCUMENT.CopyOf", {
            name: effect2.name
          })
        },
        { save: !0 }
      ), "callback"),
      condition: /* @__PURE__ */ __name(() => canEditEffect(effect2), "condition")
    },
    {
      name: "DND5E.ContextMenuActionDelete",
      icon: '<i class="fas fa-trash fa-fw t5e-warning-color"></i>',
      callback: /* @__PURE__ */ __name(() => effect2.deleteDialog(), "callback"),
      condition: /* @__PURE__ */ __name(() => canEditEffect(effect2) && !isConcentrationEffect, "condition")
    },
    {
      name: effect2.disabled ? "DND5E.ContextMenuActionEnable" : "DND5E.ContextMenuActionDisable",
      icon: effect2.disabled ? "<i class='fas fa-check fa-fw'></i>" : "<i class='fas fa-times fa-fw'></i>",
      callback: /* @__PURE__ */ __name(() => effect2.update({ disabled: !effect2.disabled }), "callback"),
      condition: /* @__PURE__ */ __name(() => effect2.isOwner && !isConcentrationEffect, "condition"),
      group: "state"
    },
    {
      name: "DND5E.ConcentrationBreak",
      icon: '<dnd5e-icon src="systems/dnd5e/icons/svg/break-concentration.svg"></dnd5e-icon>',
      condition: /* @__PURE__ */ __name(() => isConcentrationEffect, "condition"),
      callback: /* @__PURE__ */ __name(() => app.document.endConcentration(effect2), "callback"),
      group: "state"
    },
    {
      name: isFav ? "TIDY5E.RemoveFavorite" : "TIDY5E.AddFavorite",
      icon: isFav ? `<i class='fas ${favoriteIcon} fa-fw' style='color: var(--t5e-warning-accent-color)'></i>` : `<i class='fas ${favoriteIcon} fa-fw inactive'></i>`,
      condition: /* @__PURE__ */ __name(() => "favorites" in actor.system, "condition"),
      callback: /* @__PURE__ */ __name(() => {
        if (!effect2) {
          warn("tidy5e-context-menu | Effect Not Found.");
          return;
        }
        FoundryAdapter.toggleFavoriteEffect(effect2);
      }, "callback"),
      group: "state"
    }
  ];
}
__name(getActiveEffectContextOptions, "getActiveEffectContextOptions");
function canEditEffect(effect2) {
  const actor = effect2.actor ? effect2.actor : effect2.parent;
  return FoundryAdapter.isSheetUnlocked(actor);
}
__name(canEditEffect, "canEditEffect");
function getItemContextOptions(item) {
  if (!item?.isOwner || !settings.value.useContextMenu)
    return [];
  const itemParent = item.actor ? item.actor : item.parent, itemParentIsActor = itemParent?.documentName === CONSTANTS.DOCUMENT_NAME_ACTOR;
  let options = [], isActive = !1;
  if (item.type === "spell") {
    const prep = item.system.preparation || {}, isAlways = prep.mode === CONSTANTS.SPELL_PREPARATION_MODE_ALWAYS, isPrepared = !!prep.prepared;
    isActive = isPrepared, isAlways ? CONFIG.DND5E.spellPreparationModes.always.label : isPrepared ? CONFIG.DND5E.spellPreparationModes.prepared.label : FoundryAdapter.localize("DND5E.SpellUnprepared"), item.system.level >= 1;
  } else
    isActive = !!item.system.equipped, FoundryAdapter.localize(
      isActive ? "DND5E.Equipped" : "DND5E.Unequipped"
    ), "equipped" in item.system, item.system.level >= 1;
  if (CONFIG.DND5E.attunementTypes[item.system.attunement] && !FoundryAdapter.concealDetails(item) && options.push({
    name: item.system.attuned ? "TIDY5E.ContextMenuActionUnattune" : "TIDY5E.ContextMenuActionAttune",
    icon: item.system.attuned ? "<i class='fas fa-sun fa-fw' style='color: var(--t5e-warning-accent-color);'></i>" : "<i class='fas fa-sun fa-fw'></i>",
    callback: /* @__PURE__ */ __name(() => item.update({
      "system.attuned": !item.system.attuned
    }), "callback"),
    condition: /* @__PURE__ */ __name(() => item.isOwner && !item.compendium?.locked, "condition")
  }), options.push({
    name: item.isOnCooldown ? "DND5E.ContextMenuActionCharge" : "DND5E.ContextMenuActionExpendCharge",
    icon: '<i class="fa-solid fa-bolt"></i>',
    callback: /* @__PURE__ */ __name(() => item.update({
      "system.uses.spent": item.isOnCooldown ? 0 : item.system.uses.max
    }), "callback"),
    condition: /* @__PURE__ */ __name(() => item.hasRecharge && item.isOwner && !item.compendium?.locked, "condition"),
    group: "state"
  }), "equipped" in item.system) {
    const isEquipped = item.system.equipped;
    options.push({
      name: isEquipped ? "TIDY5E.ContextMenuActionUnequip" : "TIDY5E.ContextMenuActionEquip",
      icon: isEquipped ? "<i class='fas fa-user-alt fa-fw' style='color: var(--t5e-warning-accent-color);'></i> " : "<i class='fas fa-user-alt fa-fw'></i> ",
      callback: /* @__PURE__ */ __name(() => item.update({ "system.equipped": !isEquipped }), "callback"),
      condition: /* @__PURE__ */ __name(() => item.isOwner && !item.compendium?.locked, "condition")
    });
  }
  if ("preparation" in item.system && FoundryAdapter.canPrepareSpell(item) && !item.getFlag("dnd5e", "cachedFor")) {
    const isPrepared = item.system?.preparation?.prepared === !0;
    options.push({
      name: isActive ? "TIDY5E.ContextMenuActionUnprepare" : "TIDY5E.ContextMenuActionPrepare",
      icon: "<i class='fas fa-book fa-fw'></i>",
      callback: /* @__PURE__ */ __name(() => item.update({ "system.preparation.prepared": !isPrepared }), "callback"),
      condition: /* @__PURE__ */ __name(() => item.isOwner && !item.compendium?.locked, "condition")
    });
  }
  if (options.push({
    name: "DND5E.Identify",
    icon: "<i class='fas fa-magnifying-glass fa-fw'></i>",
    callback: /* @__PURE__ */ __name(() => item.update({ "system.identified": !0 }), "callback"),
    condition: /* @__PURE__ */ __name(() => item.system.identified === !1 && FoundryAdapter.canIdentify(item) && !item.compendium?.locked, "condition")
  }), itemParentIsActor && itemParent.type === CONSTANTS.SHEET_TYPE_CHARACTER) {
    let isFav = FoundryAdapter.isItemFavorited(item);
    const favoriteIcon = "fa-bookmark";
    options.push({
      name: isFav ? "TIDY5E.RemoveFavorite" : "TIDY5E.AddFavorite",
      icon: isFav ? `<i class='fas ${favoriteIcon} fa-fw' style='color: var(--t5e-warning-accent-color)'></i>` : `<i class='fas ${favoriteIcon} fa-fw inactive'></i>`,
      callback: /* @__PURE__ */ __name(() => {
        if (!item) {
          warn("tidy5e-context-menu | Item Not Found");
          return;
        }
        FoundryAdapter.toggleFavoriteItem(item);
      }, "callback"),
      condition: /* @__PURE__ */ __name(() => !!itemParent && "favorites" in itemParent.system && !item.compendium?.locked, "condition")
    });
  }
  options.push({
    name: "TIDY5E.ContextMenuActionEdit",
    icon: "<i class='fas fa-pencil-alt fa-fw'></i>",
    callback: /* @__PURE__ */ __name(() => item.sheet.render(!0), "callback"),
    condition: /* @__PURE__ */ __name(() => item.isOwner && !item.compendium?.locked, "condition")
  }), options.push({
    name: "DND5E.ContextMenuActionDuplicate",
    icon: "<i class='fas fa-copy fa-fw'></i>",
    condition: /* @__PURE__ */ __name(() => item.canDuplicate && item.isOwner && !item.compendium?.locked, "condition"),
    callback: /* @__PURE__ */ __name(() => item.clone(
      {
        name: FoundryAdapter.localize("DOCUMENT.CopyOf", {
          name: item.name
        })
      },
      { save: !0 }
    ), "callback")
  }), item.type === "spell" ? (options.push({
    name: "TIDY5E.ContextMenuActionDelete",
    icon: "<i class='fas fa-trash fa-fw' style='color: var(--t5e-warning-accent-color);'></i>",
    callback: /* @__PURE__ */ __name(() => FoundryAdapter.onActorItemDelete(itemParent, item), "callback"),
    condition: /* @__PURE__ */ __name(() => item.canDelete && item.isOwner && !item.compendium?.locked, "condition")
  }), options.push({
    name: "DOCUMENT.DND5E.Activity",
    icon: "<i class='fas fa-gear fa-fw'></i>",
    callback: /* @__PURE__ */ __name(() => item.system.linkedActivity.sheet.render(!0), "callback"),
    condition: /* @__PURE__ */ __name(() => !item.canDelete && item.system.linkedActivity && item.isOwner && !item.compendium?.locked, "condition")
  })) : options.push({
    name: "DND5E.ContextMenuActionDelete",
    icon: "<i class='fas fa-trash fa-fw' style='color: var(--t5e-warning-accent-color);'></i>",
    callback: /* @__PURE__ */ __name(() => itemParent ? FoundryAdapter.onActorItemDelete(itemParent, item) : item.deleteDialog(), "callback"),
    condition: /* @__PURE__ */ __name(() => item.isOwner && !item.compendium?.locked, "condition")
  }), options.push({
    name: "DND5E.Scroll.CreateScroll",
    icon: '<i class="fa-solid fa-scroll"></i>',
    callback: /* @__PURE__ */ __name(async () => {
      const options2 = {};
      settings.value.includeFlagsInSpellScrollCreation && (options2.flags = item.flags);
      const scroll = await dnd5e.documents.Item5e.createScrollFromSpell(
        item,
        options2
      );
      scroll && dnd5e.documents.Item5e.create(scroll, { parent: itemParent });
    }, "callback"),
    condition: /* @__PURE__ */ __name(() => item.type === "spell" && !item.getFlag("dnd5e", "cachedFor") && itemParent?.isOwner && !itemParent?.compendium?.locked, "condition"),
    group: "action"
  });
  const active = isItemInActionList(item);
  options.push({
    name: active ? "TIDY5E.Actions.SetOverrideFalse" : "TIDY5E.Actions.SetOverrideTrue",
    icon: active ? '<i class="fas fa-fist-raised" style="color: var(--t5e-warning-accent-color)"></i>' : '<i class="fas fa-fist-raised"></i>',
    callback: /* @__PURE__ */ __name(() => {
      TidyFlags.actionFilterOverride.set(item, !isItemInActionList(item));
    }, "callback"),
    condition: /* @__PURE__ */ __name(() => item.type !== CONSTANTS.ITEM_TYPE_FACILITY && itemParentIsActor && actorUsesActionFeature(itemParent), "condition")
  });
  const overridden = TidyFlags.actionFilterOverride.get(item) !== void 0;
  return options.push({
    name: "TIDY5E.Actions.ResetActionDefault",
    icon: '<i class="fas fa-fist-raised" style="color: var(--t5e-warning-accent-color)"></i>',
    callback: /* @__PURE__ */ __name(() => {
      TidyFlags.actionFilterOverride.unset(item);
    }, "callback"),
    condition: /* @__PURE__ */ __name(() => overridden && itemParentIsActor && actorUsesActionFeature(itemParent), "condition")
  }), options;
}
__name(getItemContextOptions, "getItemContextOptions");
function getGroupMemberContextOptions(group, actor) {
  return [
    {
      name: "TIDY5E.Group.RemoveMemberFromGroup",
      icon: '<i class="fas fa-trash fa-fw t5e-warning-color"></i>',
      callback: /* @__PURE__ */ __name(() => group.removeMember(actor.id), "callback"),
      condition: /* @__PURE__ */ __name(() => !group.compendium?.locked, "condition")
    }
  ];
}
__name(getGroupMemberContextOptions, "getGroupMemberContextOptions");
function applyTitleToWindow(title, element2) {
  if (!element2)
    return;
  let windowTitle = element2.querySelector(".window-title");
  windowTitle?.hasChildNodes() && (windowTitle = windowTitle.childNodes[0]), windowTitle && windowTitle.textContent !== title && (windowTitle.textContent = title);
}
__name(applyTitleToWindow, "applyTitleToWindow");
function applyMutableSettingAttributesToWindow(currentSettings, element2) {
  if (!element2)
    return;
  let themeId = currentSettings.colorScheme;
  themeId = themeId === CONSTANTS.THEME_ID_DEFAULT ? settings.value.defaultTheme : themeId;
  const theme = getThemes()[themeId];
  theme && (debug(`Applying theme type ${theme.type} to window`), element2.setAttribute("data-tidy-theme-type", theme.type)), currentSettings.lockConfigureSheet && !FoundryAdapter.userIsGm() ? element2.setAttribute("data-tidy-lock-configure-sheet", "true") : element2.removeAttribute("data-tidy-lock-configure-sheet");
}
__name(applyMutableSettingAttributesToWindow, "applyMutableSettingAttributesToWindow");
function applySheetAttributesToWindow(documentName, documentUuid, type, element2) {
  element2?.setAttribute("data-sheet-module", "tidy5e-sheet"), element2?.setAttribute("data-document-name", documentName), element2?.setAttribute("data-document-type", type), element2?.setAttribute("data-document-uuid", documentUuid), applyMutableSettingAttributesToWindow(settings.value, element2);
}
__name(applySheetAttributesToWindow, "applySheetAttributesToWindow");
async function maintainCustomContentInputFocus(app, asyncRender) {
  let focus = globalThis.$(app.element).find(":focus");
  if (focus = focus.length ? focus[0] : null, await asyncRender(), focus && focus.name) {
    const input = app.form?.[focus.name];
    input && input.focus instanceof Function && input.focus();
  }
}
__name(maintainCustomContentInputFocus, "maintainCustomContentInputFocus");
function blurUntabbableButtonsOnClick(element2) {
  element2.removeEventListener("click", blurUntabbableButton), element2.addEventListener("click", blurUntabbableButton);
}
__name(blurUntabbableButtonsOnClick, "blurUntabbableButtonsOnClick");
function blurUntabbableButton(event2) {
  const target = event2.target;
  if (!(target instanceof HTMLElement))
    return;
  target.closest("button")?.tabIndex === -1 && target.blur();
}
__name(blurUntabbableButton, "blurUntabbableButton");
const delay = /* @__PURE__ */ __name((ms) => new Promise((resolve) => {
  setTimeout(() => {
    resolve();
  }, ms);
}), "delay");
function wrapCustomHtmlForRendering(html2, renderScheme, id, activateDefaultSheetListeners) {
  const renderingAttribute = renderScheme === "handlebars" ? ` ${CONSTANTS.HTML_DYNAMIC_RENDERING_ATTRIBUTE}` : "", coreListenersTag = activateDefaultSheetListeners ? ` class="${CONSTANTS.CLASS_TIDY_USE_CORE_LISTENERS}"` : "", groupId = getCustomContentGroupIdAttributeAndValue(id);
  return `<div style="display: contents;"${renderingAttribute}${coreListenersTag} ${groupId}>${html2}</div>`;
}
__name(wrapCustomHtmlForRendering, "wrapCustomHtmlForRendering");
function getCustomContentGroupIdAttributeAndValue(id) {
  return `data-tidy-custom-content-group-id="${id}"`;
}
__name(getCustomContentGroupIdAttributeAndValue, "getCustomContentGroupIdAttributeAndValue");
function getCustomContentGroupIdSelector(id) {
  return `[${getCustomContentGroupIdAttributeAndValue(id)}]`;
}
__name(getCustomContentGroupIdSelector, "getCustomContentGroupIdSelector");
class CustomContentRenderer {
  static {
    __name(this, "CustomContentRenderer");
  }
  static async render(params) {
    const {
      app,
      tabs,
      element: element2,
      data,
      isFullRender,
      superActivateListeners,
      customContent
    } = params, htmlElement = FoundryAdapter.getElementFromAppV1OrV2(element2);
    if (!htmlElement) {
      debug("Element not available when it normally should be", params);
      return;
    }
    htmlElement.querySelectorAll(
      CONSTANTS.HTML_DYNAMIC_RENDERING_ATTRIBUTE_SELECTOR
    ).forEach((el) => el.remove());
    const sheetEl = htmlElement;
    await CustomContentRenderer._renderTabs(
      tabs,
      sheetEl,
      isFullRender,
      app,
      data,
      params
    );
    for (let c2 of customContent)
      try {
        CustomContentRenderer._renderContent(
          sheetEl,
          c2,
          app,
          data,
          isFullRender,
          superActivateListeners
        );
      } catch (e2) {
        error("Unable to render custom content", !1, e2), debug("Custom content render failure context", {
          content: c2,
          app,
          data,
          isFullRender
        });
      }
  }
  static _renderTabs(tabs, sheetEl, isFullRender, app, data, args) {
    const promises = tabs.map(async (tab) => {
      try {
        let tabEl = sheetEl.querySelector(
          `[data-tab-contents-for="${tab.id}"]`
        );
        if (tabEl || (await delay(0), tabEl = sheetEl.querySelector(
          `[data-tab-contents-for="${tab.id}"]`
        )), !tabEl) {
          debug("Unable to find custom tab content container for render");
          return;
        }
        tab.content.type === "html" && (isFullRender || tab.content.renderScheme === "handlebars") && (tabEl.innerHTML = tab.content.html), tab.onRender && tab.onRender({
          app,
          data,
          element: sheetEl,
          tabContentsElement: tabEl,
          isFullRender
        });
      } catch (e2) {
        error("Failed to render custom content due to an error", !1, e2), debug("Custom content error debug details", {
          error: e2,
          erroredTab: tab,
          args
        });
      }
    });
    return Promise.all(promises);
  }
  static _renderContent(sheetEl, customContent, app, data, isFullRender, superActivateListeners) {
    const groupId = foundry.utils.randomID();
    let contentHtml = "";
    try {
      contentHtml = typeof customContent.content.html == "function" ? customContent.content.html(data) : customContent.content.html;
    } catch (e2) {
      error("Failed to render custom HTML", !1, { e: e2, customContent });
    }
    const wrappedContent = wrapCustomHtmlForRendering(
      contentHtml,
      customContent.content.renderScheme,
      groupId,
      customContent.activateDefaultSheetListeners
    );
    if (customContent.onContentReady && customContent.onContentReady({
      app,
      data,
      element: sheetEl,
      isFullRender,
      content: wrappedContent
    }), !isNil(customContent.position)) {
      const targetElements = Array.from(
        sheetEl.querySelectorAll(customContent.selector)
      );
      if (targetElements.length || debug("No target elements were found for injecting custom content", {
        content: customContent
      }), targetElements.forEach((el) => {
        el.insertAdjacentHTML(
          customContent.position,
          wrappedContent
        );
      }), customContent.activateDefaultSheetListeners) {
        const groupSelector = getCustomContentGroupIdSelector(groupId);
        sheetEl.querySelectorAll(groupSelector).forEach((el) => superActivateListeners(el));
      }
    }
    customContent.onRender && customContent.onRender({
      app,
      data,
      element: sheetEl,
      isFullRender
    });
  }
  static wireCompatibilityEventListeners(html2, superActivateListeners, sheet) {
    html2.find("input[name], textarea[name], select[name]").off("change.compatiblity-event-listeners").on("change.compatiblity-event-listeners", async function() {
      this.closest(CONSTANTS.CLASS_SELECTOR_TIDY_USE_CORE_LISTENERS) || await sheet.submit();
    }), html2.find(CONSTANTS.CLASS_SELECTOR_TIDY_USE_CORE_LISTENERS).each((_, el) => {
      superActivateListeners.call(sheet, globalThis.$(el));
    }), html2.find("input[data-name], textarea[data-name], select[data-name]").off("change.embedded-doc-compatiblity-event-listeners").on(
      "change.embedded-doc-compatiblity-event-listeners",
      async function(event2) {
        await _submitEmbeddedDocumentChange(sheet.document, event2);
      }
    );
  }
}
async function _submitEmbeddedDocumentChange(foundryDocument, event2) {
  const itemId = event2.target.closest("[data-item-id]")?.dataset.itemId;
  itemId && await _submitEmbeddedItemChange(foundryDocument, event2, itemId);
}
__name(_submitEmbeddedDocumentChange, "_submitEmbeddedDocumentChange");
async function _submitEmbeddedItemChange(foundryDocument, event2, itemId) {
  event2.stopImmediatePropagation();
  const item = await getItem(foundryDocument, itemId), field = event2.target.getAttribute("data-name");
  let valueToSave = event2.target.value;
  if (event2.target.matches('[inputmode="numeric"]') && (valueToSave = processInputChangeDelta(
    event2.target.value,
    item,
    field
  )?.toString()), event2.target.matches('[inputmode="numeric"], [type="number"]')) {
    const minAttribute = event2.target.getAttribute("min"), min = isNil(minAttribute, "") ? -1 / 0 : Number(minAttribute), maxAttribute = event2.target.getAttribute("max"), max = isNil(maxAttribute, "") ? 1 / 0 : Number(maxAttribute), valueAsNumber = Number(valueToSave);
    valueToSave = Math.clamp(valueAsNumber, min, max), item && !Number.isNaN(valueToSave) && (event2.target.value = valueToSave?.toString());
  }
  item.update({ [field]: valueToSave });
}
__name(_submitEmbeddedItemChange, "_submitEmbeddedItemChange");
async function getItem(foundryDocument, id) {
  return foundryDocument.type === "container" ? foundryDocument.system.getContainedItem(id) : foundryDocument.items.get(id);
}
__name(getItem, "getItem");
class SessionStorageManager {
  static {
    __name(this, "SessionStorageManager");
  }
  static _createKey(keyParams) {
    return `user-${keyParams.userId}|document-${keyParams.documentId}|${keyParams.feature}`;
  }
  static storeMap(keyParams, map) {
    try {
      const serializedMap = JSON.stringify(Array.from(map.entries()));
      sessionStorage.setItem(
        SessionStorageManager._createKey(keyParams),
        serializedMap
      );
    } catch (e2) {
      error(
        "An error occurred while storing cached data in session storage",
        !1,
        e2
      ), debug("Troubleshooting information", { keyParams, map });
    }
  }
  static getMap(keyParams) {
    try {
      const data = sessionStorage.getItem(
        SessionStorageManager._createKey(keyParams)
      );
      return data ? new Map(JSON.parse(data)) : void 0;
    } catch (e2) {
      error(
        "An error occurred while fetching cached data in session storage",
        !1,
        e2
      ), debug("Troubleshooting information", { keyParams });
    }
  }
}
class ItemTableToggleCacheService {
  static {
    __name(this, "ItemTableToggleCacheService");
  }
  _keyParams;
  itemTableToggles;
  constructor(params) {
    this._keyParams = {
      ...params,
      feature: "item-table-toggles"
    }, this.itemTableToggles = this.itemTableToggles = SessionStorageManager.getMap(this._keyParams) ?? /* @__PURE__ */ new Map();
  }
  onItemTableToggle(location, expanded) {
    debug("Toggled Item Table", { location, expanded }), this.itemTableToggles.set(location, expanded), SessionStorageManager.storeMap(this._keyParams, this.itemTableToggles);
  }
}
class AsyncMutex {
  static {
    __name(this, "AsyncMutex");
  }
  _mutex;
  constructor() {
    this._mutex = Promise.resolve();
  }
  /**
   * Perform an action with guaranteed mutual exclusion.
   * @param action the action to take
   * @returns a promise representing the entirety of the operation
   */
  lock(action2) {
    let currentMutex = this._mutex;
    return this._mutex = new Promise(async (resolve) => {
      try {
        await currentMutex, await action2();
      } finally {
        resolve();
      }
    }), this._mutex;
  }
}
class Tidy5eBaseActorSheet {
  static {
    __name(this, "Tidy5eBaseActorSheet");
  }
  static applyCommonContext(context) {
    if ([
      CONSTANTS.SHEET_TYPE_CHARACTER,
      CONSTANTS.SHEET_TYPE_NPC
    ].includes(context.actor.type)) {
      const attrConcentration = context.actor.system.attributes.concentration;
      (context.actor.statuses.has(CONFIG.specialStatusEffects.CONCENTRATING) || FoundryAdapter.isSheetUnlocked(context.actor) && attrConcentration) && ((context.saves ??= {}).concentration = {
        isConcentration: !0,
        label: game.i18n.localize("DND5E.Concentration"),
        abbr: game.i18n.localize("DND5E.Concentration"),
        mod: Math.abs(attrConcentration.save),
        sign: context.actor.system.attributes.concentration.save < 0 ? "-" : "+"
      });
    }
    context.hasSpecialSaves = Object.keys(context.saves ?? {}).length > 0, Tidy5eBaseActorSheet.applyDamageModifications(context);
  }
  static applyDamageModifications(context) {
    try {
      const dm = context.actor.system.traits?.dm;
      if (dm) {
        const rollData = context.actor.getRollData({ deterministic: !0 }), mods = Object.entries(dm.amount).map(([key, value]) => {
          const total = dnd5e.utils.simplifyBonus(value, rollData);
          if (!total) return null;
          const damageType = CONFIG.DND5E.damageTypes[key] ?? {}, mod = {
            label: `${damageType?.label ?? key} ${dnd5e.utils.formatNumber(total, { signDisplay: "always" })}`,
            consequence: total > 0 ? "detriment" : "benefit"
          }, icons = mod.icons = [];
          return dm.bypasses.size && "isPhysical" in damageType && damageType?.isPhysical && icons.push(...dm.bypasses), mod;
        }).filter((f2) => f2);
        context.traits.traits.dm = mods;
      }
    } catch (e2) {
      error("An error occurred while preparing Damage Modification data", !1, e2), debug("Damage Modification error troubleshooting info", { context });
    }
  }
}
class CharacterSheetSections {
  static {
    __name(this, "CharacterSheetSections");
  }
  static buildFeaturesSections(races, backgrounds, classes, feats, options) {
    const customFeats = feats.filter((f2) => TidyFlags.section.get(f2));
    feats = feats.filter((f2) => !TidyFlags.section.get(f2));
    const features = {
      race: {
        label: CONFIG.Item.typeLabels.race,
        items: races,
        hasActions: !1,
        dataset: { type: CONSTANTS.ITEM_TYPE_RACE },
        showRequirementsColumn: !0,
        canCreate: !0,
        key: CONSTANTS.CHARACTER_FEAT_SECTION_RACE,
        show: !0,
        ...options
      },
      background: {
        label: CONFIG.Item.typeLabels.background,
        items: backgrounds,
        hasActions: !1,
        dataset: { type: CONSTANTS.ITEM_TYPE_BACKGROUND },
        showRequirementsColumn: !0,
        canCreate: !0,
        key: CONSTANTS.CHARACTER_FEAT_SECTION_BACKGROUND,
        show: !0,
        ...options
      },
      classes: {
        label: `${CONFIG.Item.typeLabels.class}Pl`,
        items: classes,
        hasActions: !1,
        dataset: { type: CONSTANTS.ITEM_TYPE_CLASS },
        isClass: !0,
        showLevelColumn: !0,
        canCreate: !0,
        key: CONSTANTS.CHARACTER_FEAT_SECTION_CLASSES,
        show: !0,
        ...options
      },
      active: {
        label: "DND5E.FeatureActive",
        items: feats.filter((feat) => !!feat.system.activities?.size),
        hasActions: !0,
        dataset: {
          type: CONSTANTS.ITEM_TYPE_FEAT
        },
        showRequirementsColumn: !0,
        showUsagesColumn: !0,
        showUsesColumn: !0,
        canCreate: !0,
        key: CONSTANTS.CHARACTER_FEAT_SECTION_ACTIVE,
        show: !0,
        ...options
      },
      passive: {
        label: "DND5E.FeaturePassive",
        items: feats.filter((feat) => !feat.system.activities?.size),
        hasActions: !1,
        dataset: { type: CONSTANTS.ITEM_TYPE_FEAT },
        showRequirementsColumn: !0,
        showUsesColumn: !0,
        canCreate: !0,
        key: CONSTANTS.CHARACTER_FEAT_SECTION_PASSIVE,
        show: !0,
        ...options
      }
    };
    return customFeats.forEach(
      (f2) => CharacterSheetSections.applyCharacterFeatureToSection(
        features,
        f2,
        options
      )
    ), features;
  }
  static applyCharacterFeatureToSection(features, feat, customSectionOptions) {
    const customSectionName = TidyFlags.section.get(feat);
    if (!customSectionName)
      return;
    (features[customSectionName] ??= {
      label: customSectionName,
      items: [],
      hasActions: !0,
      dataset: {
        [TidyFlags.section.prop]: customSectionName
      },
      isClass: !1,
      canCreate: !0,
      showUsesColumn: !0,
      showUsagesColumn: !0,
      showRequirementsColumn: !0,
      key: customSectionName,
      custom: {
        section: customSectionName,
        creationItemTypes: [CONSTANTS.ITEM_TYPE_FEAT]
      },
      show: !0,
      ...customSectionOptions
    }).items.push(feat);
  }
  static partitionItem(item, partitions, inventory) {
    item.type === CONSTANTS.ITEM_TYPE_SPELL ? partitions.spells.push(item) : item.type === CONSTANTS.ITEM_TYPE_FEAT ? partitions.feats.push(item) : item.type === CONSTANTS.ITEM_TYPE_RACE ? partitions.species.push(item) : item.type === CONSTANTS.ITEM_TYPE_BACKGROUND ? partitions.backgrounds.push(item) : item.type === CONSTANTS.ITEM_TYPE_CLASS ? partitions.classes.push(item) : item.type === CONSTANTS.ITEM_TYPE_SUBCLASS ? partitions.subclasses.push(item) : item.type === CONSTANTS.ITEM_TYPE_FACILITY ? partitions.facilities.push(item) : Object.keys(inventory).includes(item.type) && partitions.items.push(item);
  }
  // TODO: Figure out how to handle effects with section names that collide with items
  static mergeDuplicateFavoriteSections(sections) {
    let sectionsMap = {};
    for (let section of sections) {
      if (section.type === CONSTANTS.FAVORITES_SECTION_TYPE_EFFECT || section.type === CONSTANTS.FAVORITES_SECTION_TYPE_ACTIVITY)
        continue;
      const mappedSection = sectionsMap[section.key];
      if (!mappedSection) {
        sectionsMap[section.key] = section;
        continue;
      }
      const incomingItems = CharacterSheetSections.getItemsFromFavoriteSection(section);
      if (mappedSection.type !== CONSTANTS.FAVORITES_SECTION_TYPE_GENERIC) {
        const mappedItems = CharacterSheetSections.getItemsFromFavoriteSection(mappedSection);
        sectionsMap[section.key] = CharacterSheetSections.createGenericFavoriteSection(section.key, [
          ...incomingItems,
          ...mappedItems
        ]);
        continue;
      }
      mappedSection.items.push(...incomingItems);
    }
    return Object.values(sectionsMap);
  }
  static getItemsFromFavoriteSection(section) {
    return section.type === CONSTANTS.TAB_CHARACTER_SPELLBOOK ? section.spells : section.items;
  }
  static createGenericFavoriteSection(key, items) {
    return {
      canCreate: !1,
      dataset: [],
      items,
      key,
      label: FoundryAdapter.localize(key),
      custom: {
        creationItemTypes: [],
        section: key
      },
      isExternal: !1,
      show: !0,
      type: "generic"
    };
  }
}
function BaseSheetCustomSectionMixin(itemsFn, Base) {
  return class extends Base {
    async _onDropItem(event2, data) {
      if (!this.actor.isOwner) return !1;
      const item = await Item.implementation.fromDropData(data);
      if (this.actor.uuid === item.parent?.uuid) {
        const removingFromContainer = item.system.container !== null;
        return removingFromContainer && await item.update({ "system.container": null }), this._onSortItem(event2, item.toObject(), !removingFromContainer);
      }
      return this._onDropItemCreate(item, event2);
    }
    async _onSortItem(event2, itemData, allowSectionTransfer = !0) {
      const sourceSection = foundry.utils.getProperty(
        itemData,
        TidyFlags.section.prop
      ), targetSection = event2.target?.closest('[data-tidy-section-key][data-custom-section="true"]')?.getAttribute("data-tidy-section-key"), isMovedToNewSection = !isNil(targetSection?.trim(), "") && sourceSection !== targetSection, isMovedToDefaultSection = !isNil(sourceSection?.trim(), "") && isNil(targetSection?.trim(), ""), initialSortResult = await super._onSortItem(event2, itemData);
      if (!allowSectionTransfer)
        return initialSortResult;
      const item = itemsFn(this.object).get(itemData._id);
      return isMovedToNewSection ? TidyFlags.section.set(item, targetSection) : isMovedToDefaultSection ? TidyFlags.section.unset(item) : initialSortResult;
    }
  };
}
__name(BaseSheetCustomSectionMixin, "BaseSheetCustomSectionMixin");
class ConditionsAndEffects {
  static {
    __name(this, "ConditionsAndEffects");
  }
  static async getConditionsAndEffects(actor, object, effectSections) {
    const conditionIds = /* @__PURE__ */ new Set(), conditions = Object.entries(CONFIG.DND5E.conditionTypes).reduce((arr, [k, c2]) => {
      if (c2.pseudo) return arr;
      const { label: name, icon, reference } = c2, id = dnd5e.utils.staticID(`dnd5e${k}`);
      conditionIds.add(id);
      const existing = actor.effects.get(id), { disabled, img } = existing ?? {};
      return arr.push({
        name,
        reference,
        id: k,
        icon: img ?? icon,
        disabled: existing ? disabled : !0
      }), arr;
    }, []);
    for (const category of Object.values(effectSections))
      category.effects = await category.effects.reduce(
        async (arr, effect2) => {
          if (effect2.updateDuration(), conditionIds.has(effect2.id) && !effect2.duration.remaining)
            return arr;
          const { id, name, img, disabled, duration } = effect2;
          let source2 = await effect2.getSource() ?? actor;
          return source2 instanceof dnd5e.documents.ActiveEffect5e && source2.target !== object && (source2 = source2.target), arr = await arr, arr.push({
            id,
            name,
            img,
            disabled,
            duration,
            source: source2,
            parentId: effect2.target === effect2.parent ? null : effect2.parent.id,
            durationParts: duration.remaining ? duration.label.split(", ") : [],
            hasTooltip: source2 instanceof dnd5e.documents.Item5e,
            uuid: effect2.uuid,
            effect: effect2
          }), arr;
        },
        []
      );
    return {
      conditions,
      effects: effectSections
    };
  }
}
const cardWidthRem = 17.5, cardHeightRem = 28.75;
function getInfoCardDimensions() {
  const rootFontSize = getRootFontSizePx();
  return {
    widthRem: `${cardWidthRem}rem`,
    heightRem: `${cardHeightRem}rem`,
    rootFontSize,
    cardWidthAbsolute: cardWidthRem * rootFontSize,
    cardHeightAbsolute: cardHeightRem * rootFontSize,
    widthPx: `${cardWidthRem * rootFontSize}px`,
    heightPx: `${cardHeightRem * rootFontSize}px`
  };
}
__name(getInfoCardDimensions, "getInfoCardDimensions");
const mouseCursorCardGapRem = 1.5;
function getStaticCardPosition({ sheetEl, dimensions }) {
  return sheetEl.offsetLeft > dimensions.cardWidthAbsolute + mouseCursorCardGapRem * dimensions.rootFontSize ? "left" : "right";
}
__name(getStaticCardPosition, "getStaticCardPosition");
function getInfoCardFloatingPosition(params) {
  const { clientX: x2, clientY: y2 } = params.event, {
    rootFontSize,
    cardWidthAbsolute,
    cardHeightAbsolute
  } = params.dimensions, sheetEl = FoundryAdapter.getElementFromAppV1OrV2(params.sheet.element), cardHalfHeightPx = cardHeightAbsolute / 2, mouseCursorCardGapPx = rootFontSize * mouseCursorCardGapRem, relativeY = y2 - params.sheet.position.top, relativeX = x2 - params.sheet.position.left, putCardOnLeftSide = x2 + mouseCursorCardGapPx + cardWidthAbsolute > window.innerWidth, minTop = sheetEl.offsetTop * -1 + mouseCursorCardGapPx, verticallyCenteredCardTop = relativeY - cardHalfHeightPx, maxTop = window.innerHeight - sheetEl.offsetTop - cardHeightAbsolute - mouseCursorCardGapPx;
  let top = clamp(verticallyCenteredCardTop, minTop, maxTop), left = putCardOnLeftSide ? relativeX - mouseCursorCardGapPx - cardWidthAbsolute : relativeX + mouseCursorCardGapPx;
  if (relativeY + cardHalfHeightPx > params.sheet.position.bottom) {
    let diff = window.innerHeight - (relativeY + cardHalfHeightPx);
    top = relativeY - cardHalfHeightPx + diff;
  }
  return { top: `${top}px`, left: `${left}px` };
}
__name(getInfoCardFloatingPosition, "getInfoCardFloatingPosition");
function getRootFontSizePx() {
  return document.documentElement.style.fontSize !== "" ? parseFloat(document.documentElement.style.fontSize) : parseFloat(getComputedStyle(document.documentElement).fontSize);
}
__name(getRootFontSizePx, "getRootFontSizePx");
function infoCardEventWatcher(node, args) {
  user_effect(() => {
    const sheetNode = node.closest(".tidy5e-sheet");
    if (!sheetNode) {
      warn("Unable to wire up info card watcher. Sheet element not found.");
      return;
    }
    const controller = new AbortController();
    return sheetNode?.addEventListener(
      "mouseenter",
      (ev) => {
        const target = ev.target?.closest(args.selector);
        target && args.hoverOn(ev, target);
      },
      { passive: !0, signal: controller.signal }
    ), sheetNode?.addEventListener(
      "mouseover",
      (ev) => {
        const target = ev.target?.closest(args.selector);
        target ? args.hoverOn(ev, target) : args.hoverOff(ev);
      },
      { passive: !0, signal: controller.signal }
    ), sheetNode?.addEventListener(
      "mouseleave",
      (ev) => {
        args.hoverOff(ev);
      },
      { passive: !0, signal: controller.signal }
    ), sheetNode?.addEventListener(
      "dragstart",
      (ev) => {
        if (ev.target === null)
          return;
        const target = ev.target?.closest?.(args.selector);
        args.dragStart(ev, !!target);
      },
      { signal: controller.signal }
    ), document?.addEventListener(
      "keyup",
      (ev) => {
        ev.key.toUpperCase() === args.inspectKey.toUpperCase() && args.inspectKeyUp(ev);
      },
      { passive: !0, signal: controller.signal }
    ), () => {
      controller.abort();
    };
  });
}
__name(infoCardEventWatcher, "infoCardEventWatcher");
var root_2$7 = /* @__PURE__ */ template('<span class="tag"> </span>'), root_1$i = /* @__PURE__ */ template('<!> <div class="inline-wrapped-elements"></div>', 1), root_4$5 = /* @__PURE__ */ template('<span class="tag"> </span>'), root_3$9 = /* @__PURE__ */ template('<!> <div class="inline-wrapped-elements"></div>', 1), root_5$5 = /* @__PURE__ */ template('<!> <div class="inline-wrapped-elements"><!></div>', 1), root$u = /* @__PURE__ */ template("<!> <!> <!>", 1);
function ItemCardPills($$anchor, $$props) {
  push($$props, !0);
  let specialProps = /* @__PURE__ */ derived(() => getSpecialProperties($$props.item)), itemProps = /* @__PURE__ */ derived(() => $$props.chatData?.properties ?? []), itemSummaryCommands = /* @__PURE__ */ derived(() => ItemSummaryRuntime.getItemSummaryCommands($$props.item));
  function getSpecialProperties(item) {
    const props = [];
    return item?.labels?.toHit && props.push(item.labels.toHit.replace("+ ", "+").replace("- ", "-")), item?.labels?.damage && item.labels?.damages?.length > 0 && props.push(item.labels.damages[0].label.replace(" + ", "+").replace(" - ", "-")), item?.labels?.save && props.push(item.labels.save), props;
  }
  __name(getSpecialProperties, "getSpecialProperties");
  var fragment = root$u(), node = first_child(fragment);
  {
    var consequent = /* @__PURE__ */ __name(($$anchor2) => {
      var fragment_1 = root_1$i(), node_1 = first_child(fragment_1);
      HorizontalLineSeparator(node_1, {});
      var div = sibling(node_1, 2);
      each(div, 21, () => get(specialProps), index, ($$anchor3, prop2) => {
        var span = root_2$7(), text2 = child(span);
        template_effect(() => set_text(text2, get(prop2))), append($$anchor3, span);
      }), template_effect(() => set_attribute(div, "data-tidy-sheet-part", CONSTANTS.SHEET_PARTS.ITEM_PROPERTY_LIST)), append($$anchor2, fragment_1);
    }, "consequent");
    if_block(node, ($$render) => {
      get(specialProps).length && $$render(consequent);
    });
  }
  var node_2 = sibling(node, 2);
  {
    var consequent_1 = /* @__PURE__ */ __name(($$anchor2) => {
      var fragment_2 = root_3$9(), node_3 = first_child(fragment_2);
      HorizontalLineSeparator(node_3, {});
      var div_1 = sibling(node_3, 2);
      each(div_1, 21, () => get(itemProps), index, ($$anchor3, prop2) => {
        var span_1 = root_4$5(), text_1 = child(span_1);
        template_effect(() => set_text(text_1, get(prop2))), append($$anchor3, span_1);
      }), template_effect(() => set_attribute(div_1, "data-tidy-sheet-part", CONSTANTS.SHEET_PARTS.ITEM_PROPERTY_LIST)), append($$anchor2, fragment_2);
    }, "consequent_1");
    if_block(node_2, ($$render) => {
      get(itemProps).length && $$render(consequent_1);
    });
  }
  var node_4 = sibling(node_2, 2);
  {
    var consequent_2 = /* @__PURE__ */ __name(($$anchor2) => {
      var fragment_3 = root_5$5(), node_5 = first_child(fragment_3);
      HorizontalLineSeparator(node_5, {});
      var div_2 = sibling(node_5, 2), node_6 = child(div_2);
      ItemSummaryCommandButtonList(node_6, {
        get item() {
          return $$props.item;
        }
      }), append($$anchor2, fragment_3);
    }, "consequent_2");
    if_block(node_4, ($$render) => {
      get(itemSummaryCommands).length && $$render(consequent_2);
    });
  }
  append($$anchor, fragment), pop();
}
__name(ItemCardPills, "ItemCardPills");
var root_3$8 = /* @__PURE__ */ template('<div class="info-card-amount"><span><i class="fas fa-bolt"></i><b> </b> </span></div> <!>', 1), root_2$6 = /* @__PURE__ */ template('<header> </header> <div class="info-card-content"><!> <div class="description-wrap"><div class="info-card-description user-select-text"><!></div></div></div> <!>', 1);
function DefaultItemCard($$anchor, $$props) {
  push($$props, !0);
  const localize = FoundryAdapter.localize;
  var fragment = comment(), node = first_child(fragment);
  {
    var consequent_1 = /* @__PURE__ */ __name(($$anchor2) => {
      var fragment_1 = comment(), node_1 = first_child(fragment_1);
      await_block(node_1, () => $$props.item.getChatData({ secrets: $$props.item.actor?.isOwner }), null, ($$anchor3, chatData) => {
        var fragment_2 = root_2$6(), header = first_child(fragment_2), text2 = child(header, !0);
        template_effect(() => set_text(text2, $$props.item.system.identified === !1 ? coalesce($$props.item.system.unidentified.name, localize("DND5E.Unidentified.Title")) : $$props.item.name));
        var div = sibling(header, 2), node_2 = child(div);
        {
          var consequent = /* @__PURE__ */ __name(($$anchor4) => {
            var fragment_3 = root_3$8(), div_1 = first_child(fragment_3), span = child(div_1), b2 = sibling(child(span)), text_1 = child(b2);
            template_effect(() => set_text(text_1, `${localize("DND5E.Charges") ?? ""}:`));
            var text_2 = sibling(b2);
            var node_3 = sibling(div_1, 2);
            HorizontalLineSeparator(node_3, { borderColor: "faint" }), template_effect(() => set_text(text_2, ` ${$$props.item.system.uses.value ?? ""}/${$$props.item.system.uses.max ?? ""}`)), append($$anchor4, fragment_3);
          }, "consequent");
          if_block(node_2, ($$render) => {
            $$props.item.hasLimitedUses && $$render(consequent);
          });
        }
        var div_2 = sibling(node_2, 2), div_3 = child(div_2), node_4 = child(div_3);
        html(node_4, () => get(chatData).description, !1, !1);
        var node_5 = sibling(div, 2);
        ItemCardPills(node_5, {
          get item() {
            return $$props.item;
          },
          get chatData() {
            return get(chatData);
          }
        }), append($$anchor3, fragment_2);
      }), append($$anchor2, fragment_1);
    }, "consequent_1"), alternate = /* @__PURE__ */ __name(($$anchor2) => {
      var text_3 = text("TODO: Show unidentified text, or blank.");
      append($$anchor2, text_3);
    }, "alternate");
    if_block(node, ($$render) => {
      FoundryAdapter.concealDetails($$props.item) ? $$render(alternate, !1) : $$render(consequent_1);
    });
  }
  append($$anchor, fragment), pop();
}
__name(DefaultItemCard, "DefaultItemCard");
var root_3$7 = /* @__PURE__ */ template('<span class="flex-row extra-small-gap align-items-center"><i class="fas fa-magic"></i>Magic Item</span>'), root_4$4 = /* @__PURE__ */ template('<span><i class="fas fa-sun"></i> </span>'), root_2$5 = /* @__PURE__ */ template('<div class="info-card-states"><!> <!></div> <!>', 1), root_5$4 = /* @__PURE__ */ template("&times; <!>", 1), root_8$6 = /* @__PURE__ */ template('<div class="info-card-amount"><span><i class="fas fa-bolt"></i><b> </b> </span></div> <!>', 1), root_1$h = /* @__PURE__ */ template('<header> </header> <div class="info-card-content"><!> <div class="info-card-amount"><span class="info-weight"><b> </b> </span> <span class="info-quantity"><b> </b> <!></span></div> <!> <!> <div class="description-wrap"><div class="info-card-description user-select-text"><!></div></div></div> <!>', 1);
function InventoryItemCard($$anchor, $$props) {
  push($$props, !0);
  const concealDetails = /* @__PURE__ */ derived(() => FoundryAdapter.concealDetails($$props.item)), attunementContext = /* @__PURE__ */ derived(() => FoundryAdapter.getAttunementContext($$props.item)), headerBackground = /* @__PURE__ */ derived(() => {
    const variableName = getInventoryItemThemeBackground($$props.item) ?? "";
    return variableName !== "" ? `var(${variableName})` : null;
  }), localize = FoundryAdapter.localize, weightUnit = FoundryAdapter.getWeightUnit();
  var fragment = comment(), node = first_child(fragment);
  await_block(node, () => $$props.item.getChatData({ secrets: $$props.item.actor?.isOwner }), null, ($$anchor2, chatData) => {
    var fragment_1 = root_1$h(), header = first_child(fragment_1), text$1 = child(header, !0);
    template_effect(() => set_text(text$1, $$props.item.system.identified === !1 ? coalesce($$props.item.system.unidentified.name, localize("DND5E.Unidentified.Title")) : $$props.item.name));
    var div = sibling(header, 2), node_1 = child(div);
    {
      var consequent_2 = /* @__PURE__ */ __name(($$anchor3) => {
        var fragment_2 = root_2$5(), div_1 = first_child(fragment_2), node_2 = child(div_1);
        {
          var consequent = /* @__PURE__ */ __name(($$anchor4) => {
            var span = root_3$7();
            append($$anchor4, span);
          }, "consequent");
          if_block(node_2, ($$render) => {
            $$props.item.system.properties?.has("mgc") && $$render(consequent);
          });
        }
        var node_3 = sibling(node_2, 2);
        {
          var consequent_1 = /* @__PURE__ */ __name(($$anchor4) => {
            var span_1 = root_4$4(), text_1 = sibling(child(span_1));
            template_effect(() => set_text(text_1, ` ${localize(get(attunementContext).title) ?? ""}`)), template_effect(() => set_class(span_1, `flex-row extra-small-gap align-items-center info-attuned ${get(attunementContext).cls ?? "" ?? ""}`)), append($$anchor4, span_1);
          }, "consequent_1");
          if_block(node_3, ($$render) => {
            get(attunementContext) && !get(concealDetails) && $$render(consequent_1);
          });
        }
        var node_4 = sibling(div_1, 2);
        HorizontalLineSeparator(node_4, { borderColor: "faint" }), append($$anchor3, fragment_2);
      }, "consequent_2");
      if_block(node_1, ($$render) => {
        ($$props.item.system.properties?.has("mgc") || get(attunementContext)) && $$render(consequent_2);
      });
    }
    var div_2 = sibling(node_1, 2), span_2 = child(div_2), b2 = child(span_2), text_2 = child(b2);
    template_effect(() => set_text(text_2, `${localize("DND5E.Weight") ?? ""}:`));
    var text_3 = sibling(b2);
    var span_3 = sibling(span_2, 2), b_1 = child(span_3), text_4 = child(b_1);
    template_effect(() => set_text(text_4, `${localize("DND5E.Quantity") ?? ""}:`));
    var text_5 = sibling(b_1), node_5 = sibling(text_5);
    {
      var consequent_4 = /* @__PURE__ */ __name(($$anchor3) => {
        var fragment_3 = root_5$4(), node_6 = sibling(first_child(fragment_3));
        {
          var consequent_3 = /* @__PURE__ */ __name(($$anchor4) => {
            var text_6 = text();
            template_effect(() => set_text(text_6, localize("DND5E.Unidentified.Value"))), append($$anchor4, text_6);
          }, "consequent_3"), alternate = /* @__PURE__ */ __name(($$anchor4) => {
            var text_7 = text();
            template_effect(() => set_text(text_7, `${$$props.item.system.price.value ?? ""}
            ${$$props.item.system.price.denomination ?? ""}`)), append($$anchor4, text_7);
          }, "alternate");
          if_block(node_6, ($$render) => {
            get(concealDetails) ? $$render(consequent_3) : $$render(alternate, !1);
          });
        }
        append($$anchor3, fragment_3);
      }, "consequent_4");
      if_block(node_5, ($$render) => {
        $$props.item.system.price.value && $$render(consequent_4);
      });
    }
    var node_7 = sibling(div_2, 2);
    HorizontalLineSeparator(node_7, { borderColor: "faint" });
    var node_8 = sibling(node_7, 2);
    {
      var consequent_5 = /* @__PURE__ */ __name(($$anchor3) => {
        var fragment_6 = root_8$6(), div_3 = first_child(fragment_6), span_4 = child(div_3), b_2 = sibling(child(span_4)), text_8 = child(b_2);
        template_effect(() => set_text(text_8, `${localize("DND5E.Charges") ?? ""}:`));
        var text_9 = sibling(b_2);
        var node_9 = sibling(div_3, 2);
        HorizontalLineSeparator(node_9, { borderColor: "faint" }), template_effect(() => set_text(text_9, ` ${$$props.item.system.uses.value ?? ""}/${$$props.item.system.uses.max ?? ""}`)), append($$anchor3, fragment_6);
      }, "consequent_5");
      if_block(node_8, ($$render) => {
        $$props.item.hasLimitedUses && $$render(consequent_5);
      });
    }
    var div_4 = sibling(node_8, 2), div_5 = child(div_4), node_10 = child(div_5);
    html(node_10, () => get(chatData).description, !1, !1);
    var node_11 = sibling(div, 2);
    ItemCardPills(node_11, {
      get item() {
        return $$props.item;
      },
      get chatData() {
        return get(chatData);
      }
    }), template_effect(() => {
      set_style(header, "--card-header-background", get(headerBackground)), set_text(text_3, ` ${$$props.item.system.weight.value ?? ""}
        ${weightUnit ?? ""}`), set_text(text_5, ` ${$$props.item.system.quantity ?? ""} `);
    }), append($$anchor2, fragment_1);
  }), append($$anchor, fragment), pop();
}
__name(InventoryItemCard, "InventoryItemCard");
var root_4$3 = /* @__PURE__ */ template("<span> </span>"), root_6$2 = /* @__PURE__ */ template("<span> </span>"), root_2$4 = /* @__PURE__ */ template('<div class="info-card-states"><span> </span> <!></div> <!>', 1), root_7$3 = /* @__PURE__ */ template('<div class="info-card-amount"><span><i class="fas fa-bolt"></i><b> </b> </span></div> <!>', 1), root_9$4 = /* @__PURE__ */ template('<div class="info-card-linked-source"><!></div>'), root_8$5 = /* @__PURE__ */ template("<!> <!>", 1), root_1$g = /* @__PURE__ */ template('<header> </header> <div class="info-card-content"><!> <!> <div class="description-wrap"><div class="info-card-description user-select-text"><!></div></div></div> <!> <!>', 1);
function SpellItemCard($$anchor, $$props) {
  push($$props, !0);
  const localize = FoundryAdapter.localize, headerBackground = /* @__PURE__ */ derived(() => {
    const variableName = getSpellItemThemeBackground($$props.item) ?? "";
    return variableName !== "" ? `var(${variableName})` : null;
  });
  let canPrepare = /* @__PURE__ */ derived(() => FoundryAdapter.canPrepareSpell($$props.item)), toggleTitle = /* @__PURE__ */ derived(() => SpellUtils.getToggleTitle($$props.item)), owner = /* @__PURE__ */ derived(() => $$props.item.actor?.isOwner ?? $$props.item.isOwner), linked = /* @__PURE__ */ derived(() => $$props.item.system.linkedActivity?.item);
  var fragment = comment(), node = first_child(fragment);
  await_block(node, () => $$props.item.getChatData({ secrets: get(owner) }), null, ($$anchor2, chatData) => {
    var fragment_1 = root_1$g(), header = first_child(fragment_1), text2 = child(header, !0);
    template_effect(() => set_text(text2, $$props.item.system.identified === !1 ? coalesce($$props.item.system.unidentified.name, localize("DND5E.Unidentified.Title")) : $$props.item.name));
    var div = sibling(header, 2), node_1 = child(div);
    {
      var consequent_3 = /* @__PURE__ */ __name(($$anchor3) => {
        var fragment_2 = root_2$4(), div_1 = first_child(fragment_2), span = child(div_1), text_1 = child(span, !0);
        var node_2 = sibling(span, 2);
        {
          var consequent_2 = /* @__PURE__ */ __name(($$anchor4) => {
            var fragment_3 = comment(), node_3 = first_child(fragment_3);
            {
              var consequent = /* @__PURE__ */ __name(($$anchor5) => {
                var span_1 = root_4$3(), text_2 = child(span_1, !0);
                template_effect(() => set_text(text_2, CONFIG.DND5E.spellPreparationModes[$$props.item.system.preparation?.mode]?.label ?? $$props.item.system.preparation?.mode)), append($$anchor5, span_1);
              }, "consequent"), alternate = /* @__PURE__ */ __name(($$anchor5) => {
                var fragment_4 = comment(), node_4 = first_child(fragment_4);
                {
                  var consequent_1 = /* @__PURE__ */ __name(($$anchor6) => {
                    var span_2 = root_6$2(), text_3 = child(span_2, !0);
                    template_effect(() => set_text(text_3, get(toggleTitle) ?? "")), append($$anchor6, span_2);
                  }, "consequent_1");
                  if_block(
                    node_4,
                    ($$render) => {
                      get(canPrepare) && $$render(consequent_1);
                    },
                    !0
                  );
                }
                append($$anchor5, fragment_4);
              }, "alternate");
              if_block(node_3, ($$render) => {
                !get(canPrepare) && $$props.item.system.level !== 0 ? $$render(consequent) : $$render(alternate, !1);
              });
            }
            append($$anchor4, fragment_3);
          }, "consequent_2");
          if_block(node_2, ($$render) => {
            get(owner) && $$render(consequent_2);
          });
        }
        var node_5 = sibling(div_1, 2);
        HorizontalLineSeparator(node_5, { borderColor: "faint" }), template_effect(() => set_text(text_1, $$props.item.labels?.school ?? "")), append($$anchor3, fragment_2);
      }, "consequent_3");
      if_block(node_1, ($$render) => {
        ($$props.item.labels?.school || get(owner) && get(canPrepare)) && $$render(consequent_3);
      });
    }
    var node_6 = sibling(node_1, 2);
    {
      var consequent_4 = /* @__PURE__ */ __name(($$anchor3) => {
        var fragment_5 = root_7$3(), div_2 = first_child(fragment_5), span_3 = child(div_2), b2 = sibling(child(span_3)), text_4 = child(b2);
        template_effect(() => set_text(text_4, `${localize("DND5E.Charges") ?? ""}:`));
        var text_5 = sibling(b2);
        var node_7 = sibling(div_2, 2);
        HorizontalLineSeparator(node_7, { borderColor: "faint" }), template_effect(() => set_text(text_5, ` ${$$props.item.system.uses.value ?? ""}/${$$props.item.system.uses.max ?? ""}`)), append($$anchor3, fragment_5);
      }, "consequent_4");
      if_block(node_6, ($$render) => {
        $$props.item.hasLimitedUses && $$render(consequent_4);
      });
    }
    var div_3 = sibling(node_6, 2), div_4 = child(div_3), node_8 = child(div_4);
    html(node_8, () => get(chatData).description, !1, !1);
    var node_9 = sibling(div, 2);
    {
      var consequent_5 = /* @__PURE__ */ __name(($$anchor3) => {
        var fragment_6 = root_8$5(), node_10 = first_child(fragment_6);
        HorizontalLineSeparator(node_10, { borderColor: "faint" });
        var node_11 = sibling(node_10, 2);
        await_block(node_11, () => FoundryAdapter.enrichHtml(Enrichers.reference(get(linked).uuid, get(linked).name)), null, ($$anchor4, enriched) => {
          var div_5 = root_9$4(), node_12 = child(div_5);
          html(node_12, () => localize("TIDY5E.Activities.Cast.SourceHintText", { itemName: get(enriched) }), !1, !1), append($$anchor4, div_5);
        }), append($$anchor3, fragment_6);
      }, "consequent_5");
      if_block(node_9, ($$render) => {
        get(linked) && $$render(consequent_5);
      });
    }
    var node_13 = sibling(node_9, 2);
    ItemCardPills(node_13, {
      get item() {
        return $$props.item;
      },
      get chatData() {
        return get(chatData);
      }
    }), template_effect(() => set_style(header, "--card-header-background", get(headerBackground))), append($$anchor2, fragment_1);
  }), append($$anchor, fragment), pop();
}
__name(SpellItemCard, "SpellItemCard");
var root_1$f = /* @__PURE__ */ template('<i class="fa-solid fa-wand-sparkles"></i> ', 1), root_3$6 = /* @__PURE__ */ template('<li><div><strong class="break-word"> </strong></div> <div><span> </span> <span class="text-body-tertiary break-word">|</span> </div></li>'), root_5$3 = /* @__PURE__ */ template('<span class="tag"> </span>'), root_4$2 = /* @__PURE__ */ template('<!> <div class="inline-wrapped-elements"></div>', 1), root$t = /* @__PURE__ */ template('<header> </header> <div class="info-card-content"><div class="info-card-states"><span> </span></div> <!> <div class="info-card-states"><span><i class="fa-regular fa-clock"></i> </span> <span><!></span></div> <!> <div class="description-wrap"><!> <ul style="margin-block-start: 1rem;" class="unlist flex-column small-gap"></ul></div></div> <!>', 1);
function EffectInfoCard($$anchor, $$props) {
  push($$props, !0);
  let enrichedDescriptionPromise = /* @__PURE__ */ derived(() => FoundryAdapter.enrichHtml($$props.activeEffect.description ?? "", {
    secrets: $$props.activeEffect.isOwner,
    relativeTo: $$props.activeEffect,
    rollData: {}
  })), pills = /* @__PURE__ */ derived(() => ActiveEffectsHelper.getActiveEffectPills($$props.activeEffect));
  const localize = FoundryAdapter.localize;
  var fragment = root$t(), header = first_child(fragment), text2 = child(header), div = sibling(header, 2), div_1 = child(div), span = child(div_1), text_1 = child(span), node = sibling(div_1, 2);
  HorizontalLineSeparator(node, { borderColor: "faint" });
  var div_2 = sibling(node, 2), span_1 = child(div_2), text_2 = sibling(child(span_1)), span_2 = sibling(span_1, 2), node_1 = child(span_2);
  {
    var consequent = /* @__PURE__ */ __name(($$anchor2) => {
      var fragment_1 = root_1$f(), text_3 = sibling(first_child(fragment_1));
      template_effect(() => set_text(text_3, ` ${localize("DND5E.ENCHANTMENT.Label") ?? ""}`)), append($$anchor2, fragment_1);
    }, "consequent");
    if_block(node_1, ($$render) => {
      $$props.activeEffect.type === "enchantment" && $$render(consequent);
    });
  }
  var node_2 = sibling(div_2, 2);
  HorizontalLineSeparator(node_2, { borderColor: "faint" });
  var div_3 = sibling(node_2, 2), node_3 = child(div_3);
  await_block(node_3, () => get(enrichedDescriptionPromise), null, ($$anchor2, description) => {
    var fragment_2 = comment(), node_4 = first_child(fragment_2);
    html(node_4, () => get(description), !1, !1), append($$anchor2, fragment_2);
  });
  var ul = sibling(node_3, 2);
  each(ul, 21, () => $$props.activeEffect.changes, index, ($$anchor2, change) => {
    var li = root_3$6();
    const modeLabel = /* @__PURE__ */ derived(() => ActiveEffectsHelper.findMode(get(change).mode));
    var div_4 = child(li), strong = child(div_4), text_4 = child(strong), div_5 = sibling(div_4, 2), span_3 = child(div_5), text_5 = child(span_3), text_6 = sibling(span_3, 3);
    template_effect(() => {
      set_text(text_4, get(change).key), set_text(text_5, get(modeLabel)), set_text(text_6, ` ${get(change).value ?? ""}`);
    }), append($$anchor2, li);
  });
  var node_5 = sibling(div, 2);
  {
    var consequent_1 = /* @__PURE__ */ __name(($$anchor2) => {
      var fragment_3 = root_4$2(), node_6 = first_child(fragment_3);
      HorizontalLineSeparator(node_6, {});
      var div_6 = sibling(node_6, 2);
      each(div_6, 21, () => get(pills), index, ($$anchor3, pill) => {
        var span_4 = root_5$3(), text_7 = child(span_4);
        template_effect(() => set_text(text_7, localize(get(pill)))), append($$anchor3, span_4);
      }), template_effect(() => set_attribute(div_6, "data-tidy-sheet-part", CONSTANTS.SHEET_PARTS.ITEM_PROPERTY_LIST)), append($$anchor2, fragment_3);
    }, "consequent_1");
    if_block(node_5, ($$render) => {
      get(pills).length && $$render(consequent_1);
    });
  }
  template_effect(() => {
    set_text(text2, $$props.activeEffect.name), set_text(text_1, $$props.activeEffect.parent?.name), set_text(text_2, ` ${$$props.activeEffect.duration?.seconds ?? "—" ?? ""}`);
  }), append($$anchor, fragment), pop();
}
__name(EffectInfoCard, "EffectInfoCard");
class CustomContentRendererV2 {
  static {
    __name(this, "CustomContentRendererV2");
  }
  async renderCustomContent(registeredContent, context, options) {
    let customContents = await this.#prepareContentForRendering(
      context,
      registeredContent,
      options
    ), parts = [];
    for (let content of customContents)
      try {
        let contentHtml = typeof content.content.html == "function" ? content.content.html(context) : content.content.html;
        parts.push({
          content: contentHtml,
          position: content.position,
          selector: content.selector,
          renderScheme: content.content.renderScheme,
          onContentReady: content.onContentReady,
          onRender: content.onRender
        });
      } catch (e2) {
        error("An error occurred while rendering custom content", !1, {
          error: e2,
          context,
          content,
          options
        });
      }
    return parts;
  }
  async #prepareContentForRendering(context, registeredContent, options) {
    let customContents = [];
    try {
      customContents = await CustomContentManager.prepareContentForRender(
        context,
        registeredContent
      );
    } catch (e2) {
      error(
        "An error occurred while preparing custom content for render",
        !1,
        {
          error: e2,
          context,
          options
        }
      );
    }
    return customContents;
  }
  async renderTabContents(tabs, context, options) {
    const promises = tabs.map(
      async (tab) => {
        try {
          let content = "", renderScheme = "force";
          tab.content.type === "html" && (options.isFirstRender || tab.content.renderScheme === "handlebars") && (content = tab.content.html, renderScheme = tab.content.renderScheme);
          const selector = `[data-tab-contents-for="${tab.id}"]`;
          return {
            content,
            renderScheme,
            position: "afterbegin",
            selector,
            onRender: /* @__PURE__ */ __name((params) => (
              // Retrofit tab render to satisfy unified structure
              tab.onRender?.({
                app: params.app,
                data: params.data,
                element: params.element,
                isFullRender: params.isFullRender,
                tabContentsElement: params.element.querySelector(selector)
              })
            ), "onRender"),
            tabSelector: selector
          };
        } catch (e2) {
          error("Failed to render custom content due to an error", !1, e2), debug("Custom content error debug details", {
            error: e2,
            tab,
            context,
            options
          });
        }
      }
    );
    return (await Promise.all(promises)).filter((t2) => !!t2);
  }
  replaceCustomContent(parts, sheet, context, options) {
    sheet.element.querySelectorAll(CONSTANTS.HTML_DYNAMIC_RENDERING_ATTRIBUTE_SELECTOR).forEach((el) => el.remove());
    for (let part of parts) {
      try {
        part.onContentReady?.({
          app: sheet,
          content: part.content,
          data: context,
          element: sheet.element,
          isFullRender: !!options.isFirstRender
        });
      } catch (e2) {
        error(
          "An error occurred while invoking the onContentReady callback for custom content",
          !1,
          { error: e2, part, sheet }
        );
      }
      if (!isNil(part.position) && !isNil(part.selector)) {
        const anchorElements = Array.from(
          sheet.element.querySelectorAll(part.selector)
        );
        if (part.tabSelector && part.renderScheme === "handlebars") {
          const tabContentsElement = sheet.element.querySelector(
            part.tabSelector
          );
          tabContentsElement.innerHTML = part.content;
        } else {
          const wrappedContent = part.tabSelector ? part.content : this.#wrapCustomHtmlForRendering(part.content, part.renderScheme);
          for (let el of anchorElements)
            el.insertAdjacentHTML(
              part.position,
              wrappedContent
            );
        }
      }
      try {
        part.onRender?.({
          app: sheet,
          data: context,
          element: sheet.element,
          isFullRender: !!options.isFirstRender
        });
      } catch (e2) {
        error(
          "An error occurred while invoking the onRender callback for custom content",
          !1,
          { error: e2, part, sheet }
        );
      }
    }
  }
  #wrapCustomHtmlForRendering(html2, renderScheme) {
    return `<div style="display: contents;"${renderScheme === "handlebars" ? ` ${CONSTANTS.HTML_DYNAMIC_RENDERING_ATTRIBUTE}` : ""}>${html2}</div>`;
  }
}
const tidyHeaderAttribute = "data-tidy-header-control";
function createHeaderButton(label, action2, icon) {
  return `<button type="button" class="header-control ${icon}" data-action="${action2}" data-tooltip="${label}" aria-label="${label}" ${tidyHeaderAttribute}></button>`;
}
__name(createHeaderButton, "createHeaderButton");
function insertHeaderButton(app, header, html2) {
  let anchor = header.querySelector('[data-action="copyUuid"]') ?? header.querySelector('[data-action="configureSheet"]') ?? app.window.close;
  anchor && anchor.insertAdjacentHTML("beforebegin", html2);
}
__name(insertHeaderButton, "insertHeaderButton");
function removeTidyHeaderButtons(header) {
  header.querySelectorAll(`[${tidyHeaderAttribute}]`).forEach((el) => el.remove());
}
__name(removeTidyHeaderButtons, "removeTidyHeaderButtons");
const HEADER_CONTROLS_DROPDOWN_SELECTOR = ".controls-dropdown", HEADER_CONTROLS_DROPDOWN_EXPANDED_SELECTOR = ".expanded", HEADER_CONTROLS_DROPDOWN_TOGGLE_SELECTOR = '[data-action="toggleControls"]';
function SvelteApplicationMixin(BaseApplication) {
  class SvelteApplication extends BaseApplication {
    static {
      __name(this, "SvelteApplication");
    }
    constructor(...args) {
      super(...args);
    }
    /**
     * An array of selectors within this sheet whose scroll positions should
     * be persisted during a re-render operation.
     */
    static SCROLLABLE = [
      ".scroll-container",
      "[data-tidy-track-scroll-y]"
    ];
    /**
     * Determines whether to use a sheet lock svelte component in the header.
     * This requires the application to mount another svelte component.
     */
    static USE_HEADER_SHEET_LOCK = !1;
    /** The component which represents the UI. */
    #components = [];
    #customHTMLTags = ["PROSE-MIRROR"];
    #customContentRenderer = new CustomContentRendererV2();
    #scrollPositions = {};
    #focusedInputSelector = "";
    /**
     * Compatibility shim from Application V1.
     */
    get object() {
      return this.document;
    }
    /* -------------------------------------------- */
    /*  Svelte-specific                             */
    /* -------------------------------------------- */
    /**
     * The context store which underpins the application Svelte component.
     * This store is made available as Svelte context to the component
     * and can be retrieved from any child component within.
     */
    _context = new CoarseReactivityProvider(void 0);
    /** Creates the component which represents the window content area. */
    _createComponent(node) {
      const errorMessage = "Unable to render Svelte application. To implement a Svelte application, override _createComponent and provide context data matching the specified sheet context type.";
      throw new Error(errorMessage);
    }
    _createAdditionalComponents(content) {
      return [];
    }
    /**
     * Allows for configuring any effects related to the sheet.
     */
    _configureEffects() {
    }
    /* -------------------------------------------- */
    /*  Rendering                                   */
    /* -------------------------------------------- */
    /** Prepares context data which matches the request data type. */
    async _prepareContext(options) {
      const errorMessage = "Unable to render Svelte application. To implement a Svelte application, override _prepareContext and provide context data matching the specified sheet context type.";
      throw error(errorMessage, !1, { options }), new Error(errorMessage);
    }
    /**
     * Triggers possible reactive rendering by updating the application store
     * with the latest context data.
     *
     * Renders non-Svelte sheet parts in preparation for injecting custom content during the HTML replacement phase.
     *
     * @returns any non-Svelte sheet parts that need to be rendered to the sheet.
     */
    async _renderHTML(context, options) {
      if (this._context.data = context, options.isFirstRender) {
        const content = this.hasFrame ? this.element.querySelector(".window-content") : this.element;
        this.#components.push(this._createComponent(content)), this.#components.push(...this._createAdditionalComponents(content));
      }
      await tick();
      let result = { context, customContents: [] };
      try {
        const renderedTabParts = context.tabs ? await this.#customContentRenderer.renderTabContents(context.tabs, context, options) : [], renderedContentParts = context.customContent ? await this.#customContentRenderer.renderCustomContent(context.customContent, context, options) : [];
        result.customContents = [...renderedTabParts, ...renderedContentParts];
      } catch (e2) {
        error("An error occurred while rendering custom tabs and content.", !1, e2);
      }
      return result;
    }
    /**
     * Creates and mounts the Svelte component on first render.
     * Removes handlebars content so that it can be reinserted on the appropriate render hook.
     * @param result rendered sheets parts which are ready to be placed on the page
     * @param content the window content area
     * @param options render options
     */
    _replaceHTML(result, content, options) {
      try {
        this.#saveScrollPositions(content), this.#saveInputFocus(content), this.#customContentRenderer.replaceCustomContent(result.customContents, this, result.context, options);
      } catch (e2) {
        error("An error occured while replacing custom content on the sheet.", !1, e2);
      }
    }
    async _renderFrame(options) {
      const element2 = await super._renderFrame(options);
      if (this.document)
        try {
          applySheetAttributesToWindow(this.document.documentName, this.document.uuid, this.document.type, element2), element2.addEventListener("change", async (ev) => {
            if (ev.target.matches("input[name], textarea[name], select[name]")) {
              await this.submit();
              return;
            }
            ev.target.matches("input[data-name], textarea[data-name], select[data-name]") && await this._submitEmbeddedDocumentChange(ev);
          });
        } catch (e2) {
          error("An error occurred while preparing the rendered frame of the application.", !1, { error: e2, sheet: this });
        }
      else
        debug("Skipping common window attributes and form submit shim. No document provided.");
      return element2;
    }
    async _submitEmbeddedDocumentChange(event2) {
      const itemId = event2.target.closest("[data-item-id]")?.dataset.itemId;
      itemId && await this._submitEmbeddedItemChange(event2, itemId);
    }
    async _submitEmbeddedItemChange(event2, itemId) {
      event2.stopImmediatePropagation();
      const item = await this.getItem(itemId), field = event2.target.getAttribute("data-name");
      let valueToSave = event2.target.value;
      if (event2.target.matches('[inputmode="numeric"]') && (valueToSave = processInputChangeDelta(event2.target.value, item, field)?.toString()), event2.target.matches('[inputmode="numeric"], [type="number"]')) {
        const minAttribute = event2.target.getAttribute("min"), min = isNil(minAttribute, "") ? -1 / 0 : Number(minAttribute), maxAttribute = event2.target.getAttribute("max"), max = isNil(maxAttribute, "") ? 1 / 0 : Number(maxAttribute), valueAsNumber = Number(valueToSave);
        valueToSave = Math.clamp(valueAsNumber, min, max), item && !Number.isNaN(valueToSave) && (event2.target.value = valueToSave?.toString());
      }
      await item.update({ [field]: valueToSave });
    }
    getItem(id) {
      return this.document.type === "container" ? this.document.system.getContainedItem(id) : this.document.items.get(id);
    }
    _updateFrame(options) {
      options ??= {}, removeTidyHeaderButtons(this.window.header), this._getVisibleHeaderControlsForPosition("header").forEach((x2) => insertHeaderButton(this, this.window.header, createHeaderButton(x2.label, x2.action ?? "", x2.icon))), FoundryAdapter.mergeObject(options, {
        window: {
          title: this.title,
          // TODO: Determine whether it's bad to keep this true always
          controls: !0
        }
      }), super._updateFrame(options);
    }
    /* -------------------------------------------- */
    /*  Closing                                     */
    /* -------------------------------------------- */
    async close(options = {}) {
      this._effectCleanup?.(), this.options.submitOnClose && this.document.isOwner && await this.submit({ preventClose: !0, preventRender: !0 }), this.#components.forEach((c2) => unmount(c2)), this.#components = [], await super.close(options);
    }
    /* -------------------------------------------- */
    /*  Rendering Life-Cycle Methods                */
    /* -------------------------------------------- */
    _onRender(context, options) {
      super._onRender(context, options), setTimeout(() => {
        this.#restoreScrollPositions(this.element), this.#restoreInputFocus(this.element);
      });
    }
    /* -------------------------------------------- */
    /*  Event Listeners and Handlers                */
    /* -------------------------------------------- */
    _effectCleanup;
    _attachFrameListeners() {
      super._attachFrameListeners();
      try {
        blurUntabbableButtonsOnClick(this.element), this._effectCleanup?.(), this._effectCleanup = effect_root(() => {
          this._configureEffects(), user_effect(() => {
            applyMutableSettingAttributesToWindow(settings.value, this.element);
          });
        }), this.element.addEventListener("click", (ev) => {
          const target = ev.target;
          target instanceof HTMLElement && target.closest(`${HEADER_CONTROLS_DROPDOWN_SELECTOR} button`) && this.toggleControls(!1);
        }), this.element.querySelector(HEADER_CONTROLS_DROPDOWN_SELECTOR)?.addEventListener(
          "focusout",
          (ev) => {
            ev.relatedTarget?.closest(`${HEADER_CONTROLS_DROPDOWN_SELECTOR}, ${HEADER_CONTROLS_DROPDOWN_TOGGLE_SELECTOR}`) || ev.currentTarget.matches(HEADER_CONTROLS_DROPDOWN_EXPANDED_SELECTOR) && this.toggleControls(!1);
          },
          {}
        );
      } catch (e2) {
        error("An error occurred while attaching frame listeners for the application.", !1, { error: e2, sheet: this });
      }
    }
    _onChangeForm(formConfig, event2) {
      if (super._onChangeForm(formConfig, event2), event2.type !== "change" || !this.document)
        return;
      const { target } = event2;
      if (!target || !this.#customHTMLTags.includes(target.tagName))
        return;
      const value = target._getValue();
      this.document.update({ [target.name]: value });
    }
    /**
     * Augments the base toggleControls with handling for closing menu when focus is lost.
     */
    toggleControls(expanded) {
      super.toggleControls(expanded);
      const controlsDropdown = this.element.querySelector(HEADER_CONTROLS_DROPDOWN_SELECTOR);
      controlsDropdown?.matches(HEADER_CONTROLS_DROPDOWN_EXPANDED_SELECTOR) ? (debug("App V2 - On Menu Opened"), controlsDropdown.tabIndex = 0, controlsDropdown.focus()) : controlsDropdown && (debug("App V2 - On Menu Closed"), controlsDropdown.blur(), controlsDropdown.tabIndex = -1);
    }
    /* -------------------------------------------- */
    /*  Prior Element State                         */
    /* -------------------------------------------- */
    /**
     * Persist the scroll positions of containers within the app before re-rendering the content
     * @param element the application window element
     */
    #saveScrollPositions(element2) {
      const selectors = SvelteApplication.SCROLLABLE || [];
      this.#scrollPositions = selectors.reduce(
        (state2, sel) => {
          const scrollableElements = element2.querySelectorAll(sel);
          return state2[sel] = Array.from(scrollableElements).map((el) => ({
            scrollTop: el.scrollTop,
            scrollLeft: el.scrollLeft
          })), state2;
        },
        {}
      );
    }
    /**
     * Restore the scroll positions of containers within the app after re-rendering the content
     * @param element the application window element
     */
    #restoreScrollPositions(element2) {
      const selectors = SvelteApplication.SCROLLABLE || [], positions = this.#scrollPositions || {};
      for (let sel of selectors) {
        const scrollableElements = element2.querySelectorAll(sel);
        for (let [index2, el] of Array.from(scrollableElements).entries())
          Object.assign(el, positions[sel]?.[index2]);
      }
    }
    /**
     * Persist the currently focused element, if any.
     * @param element the application window element
     */
    #saveInputFocus(element2) {
      const focusedElement = element2.querySelector(":is(input, select, textarea):focus");
      this.#focusedInputSelector = focusedElement?.name ? `${focusedElement.tagName}[name="${focusedElement.name}"]` : focusedElement?.id ? `[id="${focusedElement.id}"]` : void 0;
    }
    /**
     * Restore focus to the prior focused element, if able.
     * @param element the application window element
     */
    #restoreInputFocus(element2) {
      if (this.#focusedInputSelector) {
        const newFocus = element2.querySelector(this.#focusedInputSelector);
        newFocus && newFocus.focus?.();
      }
    }
    _initializeApplicationOptions(options) {
      const updatedOptions = super._initializeApplicationOptions(options);
      try {
        const customControls = this._getCustomHeaderControls(options.document);
        updatedOptions.actions = {
          ...updatedOptions.actions,
          ...customControls.actions
        }, updatedOptions.window.controls = [
          ...updatedOptions.window.controls ?? [],
          ...customControls.controls
        ];
      } catch (e2) {
        error("An error occurred while setting up custom controls.", !1, { error: e2, app: this, options: updatedOptions });
      }
      return updatedOptions;
    }
    _getCustomHeaderControls(document2) {
      const controls = [], actions = {};
      if (!document2)
        return debug("Skipping custom header controls. No document provided"), { actions, controls };
      const customControls = HeaderControlsRuntime.getHeaderControls({
        documentName: document2.documentName,
        documentType: document2.type
      });
      for (let control of customControls) {
        const actionId = `custom-control-action-${foundry.utils.randomID()}`;
        control.action = control.action ?? actionId, control.onClickAction && (actions[control.action ?? actionId] = control.onClickAction?.bind(this)), controls.push(control);
      }
      return { controls, actions };
    }
    /**
     * Configure the array of header control menu options
     */
    _getHeaderControls() {
      return this._getVisibleHeaderControlsForPosition("menu");
    }
    _getVisibleHeaderControlsForPosition(position) {
      return super._getHeaderControls().filter((c2) => {
        try {
          return (typeof c2.visible != "function" || c2.visible.call(this)) && coalesce(c2.position, "menu") === position;
        } catch (e2) {
          return error("Failed to get custom control", !1, { control: c2, error: e2 }), !1;
        }
      });
    }
  }
  return SvelteApplication;
}
__name(SvelteApplicationMixin, "SvelteApplicationMixin");
var root$s = /* @__PURE__ */ template('<section class="tidy-info-card"><section class="info-card-body"><!></section></section>');
function DetachedInfoCard($$anchor, $$props) {
  push($$props, !0);
  function onError(error2) {
    warn("An error occurred while managing the info card", !1, { error: error2, card: $$props.cardState });
  }
  __name(onError, "onError");
  var section = root$s(), section_1 = child(section), node = child(section_1);
  boundary(node, { onerror: onError }, ($$anchor2) => {
    var fragment = comment(), node_1 = first_child(fragment);
    component(node_1, () => $$props.cardState.component, ($$anchor3, $$component) => {
      $$component($$anchor3, spread_props(() => $$props.cardState.props));
    }), append($$anchor2, fragment);
  }), append($$anchor, section), pop();
}
__name(DetachedInfoCard, "DetachedInfoCard");
class DetachedInfoCardApplication extends SvelteApplicationMixin(
  foundry.applications.api.ApplicationV2
) {
  static {
    __name(this, "DetachedInfoCardApplication");
  }
  #cardState;
  constructor(cardState, ...rest) {
    super(...rest), this.#cardState = cardState;
  }
  static DEFAULT_OPTIONS = {
    classes: [
      CONSTANTS.MODULE_ID,
      "application-shell",
      "tidy-info-card-application",
      "app-v2",
      CONSTANTS.SHEET_LAYOUT_CLASSIC
    ],
    tag: "div",
    window: {
      frame: !0,
      positioned: !0,
      resizable: !0,
      controls: []
    },
    position: {
      width: 280,
      height: 460
    },
    actions: {},
    submitOnClose: !1
  };
  _createComponent(node) {
    return mount(DetachedInfoCard, {
      target: node,
      props: {
        cardState: this.#cardState
      }
    });
  }
  async _prepareContext() {
    return {};
  }
}
var root_1$e = /* @__PURE__ */ template('<section class="info-card-body"><!></section> <footer><span><!></span> <span><i class="fas fa-mouse"></i> </span></footer>', 1), root$r = /* @__PURE__ */ template('<section data-tidy-info-card=""><!></section>');
function AttachedInfoCard($$anchor, $$props) {
  push($$props, !0);
  let floating = /* @__PURE__ */ derived(() => settings.value.itemCardsAreFloating), inspectKey = /* @__PURE__ */ derived(() => settings.value.itemCardsFixKey), delay2 = /* @__PURE__ */ derived(() => settings.value.itemCardsDelay);
  const localize = FoundryAdapter.localize, selector = "[data-info-card], .tidy-info-card", uuidAttribute = "data-info-card-entity-uuid", sheetEl = /* @__PURE__ */ derived(() => FoundryAdapter.getElementFromAppV1OrV2($$props.sheet.element));
  let staticCardPosition = /* @__PURE__ */ derived(() => (get(show), getStaticCardPosition({ dimensions, sheetEl: get(sheetEl) }))), show = state(!1);
  user_effect(() => {
    const controller = new AbortController();
    return get(floating) && get(sheetEl).addEventListener(
      "mousemove",
      (event2) => {
        let { top, left } = getInfoCardFloatingPosition({ event: event2, sheet: $$props.sheet, dimensions });
        set(floatingLeft, proxy(left)), set(floatingTop, proxy(top));
      },
      { signal: controller.signal }
    ), () => {
      controller.abort();
    };
  });
  let card = state(void 0), floatingLeft = state(void 0), floatingTop = state(void 0), dimensions = proxy(getInfoCardDimensions());
  function withProps(component2, props) {
    return { component: component2, props };
  }
  __name(withProps, "withProps");
  async function hoverOn(_event, target) {
    const cardType = target.getAttribute("data-info-card"), uuid = target.getAttribute(uuidAttribute);
    if (!uuid || !cardType) {
      set(show, !1);
      return;
    }
    switch (cardType) {
      case "effect": {
        if (!settings.value.useEffectCards) {
          set(show, !1);
          return;
        }
        const entity = await fromUuid(uuid);
        if (!entity) {
          set(show, !1);
          return;
        }
        set(card, proxy({
          component: EffectInfoCard,
          props: { activeEffect: entity },
          title: entity.name
        }));
        break;
      }
      case "item": {
        if (!settings.value.itemCardsForAllItems && !target.matches("[data-tidy-grid-item]")) {
          set(show, !1);
          return;
        }
        const entity = await fromUuid(uuid);
        if (!entity) {
          set(show, !1);
          return;
        }
        Inventory.isInventoryType(entity) ? set(card, proxy({
          ...withProps(InventoryItemCard, { item: entity }),
          title: entity.name
        })) : entity?.type === CONSTANTS.ITEM_TYPE_SPELL ? set(card, proxy({
          ...withProps(SpellItemCard, { item: entity }),
          title: entity.name
        })) : set(card, proxy({
          ...withProps(DefaultItemCard, { item: entity }),
          title: entity.name
        }));
        break;
      }
      default: {
        set(show, !1);
        return;
      }
    }
    set(show, !0);
  }
  __name(hoverOn, "hoverOn");
  function hoverOff() {
    set(show, !1);
  }
  __name(hoverOff, "hoverOff");
  function dragStart() {
    set(show, !1);
  }
  __name(dragStart, "dragStart");
  function inspectKeyUp() {
    if (!get(show) || !get(card))
      return;
    const focusedElement = get(sheetEl).ownerDocument.activeElement;
    focusedElement instanceof HTMLElement && isUserInteractable(focusedElement) || (new DetachedInfoCardApplication({ ...get(card) }, {
      window: { title: get(card).title },
      position: {
        width: dimensions.cardWidthAbsolute,
        height: dimensions.cardHeightAbsolute
      }
    }).render(!0), hoverOff());
  }
  __name(inspectKeyUp, "inspectKeyUp");
  function onError(error2) {
    warn("An error occurred while managing the info card", !1, {
      error: error2,
      card: get(card),
      sheet: $$props.sheet
    });
  }
  __name(onError, "onError");
  var section = root$r(), node = child(section);
  {
    var consequent = /* @__PURE__ */ __name(($$anchor2) => {
      var fragment = root_1$e(), section_1 = first_child(fragment), node_1 = child(section_1);
      boundary(node_1, { onerror: onError }, ($$anchor3) => {
        var fragment_1 = comment(), node_2 = first_child(fragment_1);
        component(node_2, () => get(card).component, ($$anchor4, $$component) => {
          $$component($$anchor4, spread_props(() => get(card).props));
        }), append($$anchor3, fragment_1);
      });
      var footer = sibling(section_1, 2), span = child(footer), node_3 = child(span);
      html(
        node_3,
        () => localize("TIDY5E.InfoCardInspectHint", {
          inspectKey: `<span class="key">${get(inspectKey)}</span>`
        })
      );
      var span_1 = sibling(span, 2), text2 = sibling(child(span_1));
      template_effect(() => set_text(text2, ` ${localize("TIDY5E.ItemCardsMouseHint") ?? ""}`)), append($$anchor2, fragment);
    }, "consequent");
    if_block(node, ($$render) => {
      get(card)?.component && $$render(consequent);
    });
  }
  action(section, ($$node, $$action_arg) => infoCardEventWatcher?.($$node, $$action_arg), () => ({
    hoverOn,
    hoverOff,
    dragStart,
    inspectKeyUp,
    selector,
    inspectKey: get(inspectKey)
  })), template_effect(() => {
    set_class(section, `tidy-info-card attached ${(get(floating) ? "" : get(staticCardPosition)) ?? ""}`), toggle_class(section, "show", get(show)), toggle_class(section, "floating", get(floating)), set_style(section, "top", get(floating) ? get(floatingTop) : void 0), set_style(section, "left", get(floating) ? get(floatingLeft) : void 0), set_style(section, "--card-width", dimensions.widthRem), set_style(section, "--card-height", dimensions.heightRem), set_style(section, "--transition-show-delay", `${get(delay2) ?? ""}ms`);
  }), append($$anchor, section), pop();
}
__name(AttachedInfoCard, "AttachedInfoCard");
class Tidy5eCharacterSheet extends BaseSheetCustomSectionMixin((object) => object.items, dnd5e.applications.actor.ActorSheet5eCharacter) {
  static {
    __name(this, "Tidy5eCharacterSheet");
  }
  context = new CoarseReactivityProvider(void 0);
  #stats = state(proxy({ lastSubmissionTime: null }));
  get stats() {
    return get(this.#stats);
  }
  set stats(value) {
    set(this.#stats, proxy(value));
  }
  currentTabId;
  searchFilters = /* @__PURE__ */ new Map();
  expandedItems = /* @__PURE__ */ new Map();
  expandedItemData = /* @__PURE__ */ new Map();
  inlineToggleService = new InlineToggleService();
  itemTableTogglesCache;
  itemFilterService;
  #messageBus = state(proxy({ message: void 0 }));
  get messageBus() {
    return get(this.#messageBus);
  }
  set messageBus(value) {
    set(this.#messageBus, proxy(value));
  }
  /**
   * The cached concentration information for the character.
   * @type {{items: Set<Item5e>, effects: Set<ActiveEffect5e>}}
   * @internal
   */
  _concentration = {
    items: /* @__PURE__ */ new Set(),
    effects: /* @__PURE__ */ new Set()
  };
  constructor(...args) {
    super(...args), this.itemTableTogglesCache = new ItemTableToggleCacheService({
      userId: game.user.id,
      documentId: this.actor.id
    }), this.itemFilterService = new ItemFilterService({}, this.actor), this.currentTabId = settings.value.initialCharacterSheetTab;
  }
  get template() {
    return FoundryAdapter.getTemplate("empty-form-template.hbs");
  }
  static get defaultOptions() {
    return FoundryAdapter.mergeObject(super.defaultOptions, {
      classes: [
        CONSTANTS.MODULE_ID,
        "sheet",
        "actor",
        CONSTANTS.SHEET_TYPE_CHARACTER,
        CONSTANTS.SHEET_LAYOUT_CLASSIC,
        "app-v1"
      ],
      width: 740,
      height: 810,
      scrollY: [
        "[data-tidy-track-scroll-y]",
        ".scroll-container"
      ]
    });
  }
  component;
  additionalComponents = [];
  _effectCleanup;
  activateListeners(html2) {
    game.user.apps[this.id] = this;
    let first = !0;
    this._effectCleanup = effect_root(() => {
      user_effect(() => {
        first || (applyMutableSettingAttributesToWindow(settings.value, this.element.get(0)), this.render());
      }), user_effect(() => {
        debug("Message bus message received", {
          app: this,
          actor: this.actor,
          message: this.messageBus
        });
      });
    }), first = !1;
    const node = html2.get(0);
    this.component = mount(CharacterSheet, {
      target: node,
      context: /* @__PURE__ */ new Map([
        [CONSTANTS.SVELTE_CONTEXT.APP_ID, this.appId],
        [
          CONSTANTS.SVELTE_CONTEXT.CONTEXT,
          this.context
        ],
        [
          CONSTANTS.SVELTE_CONTEXT.MESSAGE_BUS,
          this.messageBus
        ],
        [CONSTANTS.SVELTE_CONTEXT.STATS, this.stats],
        [
          CONSTANTS.SVELTE_CONTEXT.CURRENT_TAB_ID,
          this.currentTabId
        ],
        [
          CONSTANTS.SVELTE_CONTEXT.ON_TAB_SELECTED,
          this.onTabSelected.bind(this)
        ],
        [
          CONSTANTS.SVELTE_CONTEXT.SEARCH_FILTERS,
          new Map(this.searchFilters)
        ],
        [
          CONSTANTS.SVELTE_CONTEXT.INLINE_TOGGLE_SERVICE,
          this.inlineToggleService
        ],
        [
          CONSTANTS.SVELTE_CONTEXT.ITEM_FILTER_SERVICE,
          this.itemFilterService
        ],
        [
          CONSTANTS.SVELTE_CONTEXT.ON_FILTER,
          this.itemFilterService.onFilter.bind(this.itemFilterService)
        ],
        [
          CONSTANTS.SVELTE_CONTEXT.ON_FILTER_CLEAR_ALL,
          this.itemFilterService.onFilterClearAll.bind(this.itemFilterService)
        ],
        [
          CONSTANTS.SVELTE_CONTEXT.ON_SEARCH,
          this.onSearch.bind(this)
        ],
        [
          CONSTANTS.SVELTE_CONTEXT.ON_ITEM_TOGGLED,
          this.onItemToggled.bind(this)
        ],
        [
          CONSTANTS.SVELTE_CONTEXT.ITEM_TABLE_TOGGLES,
          new Map(this.itemTableTogglesCache.itemTableToggles)
        ],
        [
          CONSTANTS.SVELTE_CONTEXT.ON_ITEM_TABLE_TOGGLE,
          this.itemTableTogglesCache.onItemTableToggle.bind(this.itemTableTogglesCache)
        ],
        [CONSTANTS.SVELTE_CONTEXT.LOCATION, ""],
        [
          CONSTANTS.SVELTE_CONTEXT.EXPANDED_ITEMS,
          new Map(this.expandedItems)
        ],
        [
          CONSTANTS.SVELTE_CONTEXT.EXPANDED_ITEM_DATA,
          new Map(this.expandedItemData)
        ]
      ])
    });
    const infoCard = mount(AttachedInfoCard, { target: node, props: { sheet: this } });
    this.additionalComponents.push(infoCard), initTidy5eContextMenu(this, html2), FoundryAdapter.createContextMenu(html2, ".activity[data-activity-id]", [], {
      onOpen: /* @__PURE__ */ __name((element2) => {
        const itemId = element2.closest("[data-item-id]")?.dataset.itemId, item = this.document.type === "container" ? this.document.system.getContainedItem(itemId) : this.document.items.get(itemId);
        if (!item || item instanceof Promise)
          return;
        const activityElement = element2.closest("[data-activity-id]");
        if (activityElement?.matches('[data-configurable="true"]'))
          dnd5e.documents.activity.UtilityActivity.onContextMenu(item, element2);
        else if (activityElement) {
          const activityId = activityElement.getAttribute("data-activity-id"), activity = item.system.activities.get(activityId);
          if (!activity)
            return;
          const isFav = this.actor.system.hasFavorite(activity.relativeUUID), favoriteIcon = "fa-bookmark", contextMenuItems = [
            {
              name: isFav ? "TIDY5E.RemoveFavorite" : "TIDY5E.AddFavorite",
              icon: isFav ? `<i class='fas ${favoriteIcon} fa-fw' style='color: var(--t5e-warning-accent-color)'></i>` : `<i class='fas ${favoriteIcon} fa-fw inactive'></i>`,
              callback: /* @__PURE__ */ __name(() => {
                if (!item) {
                  warn("tidy5e-context-menu | Item Not Found");
                  return;
                }
                FoundryAdapter.toggleFavoriteActivity(activity);
              }, "callback"),
              condition: /* @__PURE__ */ __name(() => !item.compendium?.locked, "condition")
            }
          ];
          ui.context.menuItems = contextMenuItems;
        }
      }, "onOpen")
    });
  }
  async getData(options = {}) {
    this._concentration = this.actor.concentration;
    const defaultDocumentContext = await super.getData(this.options);
    Tidy5eBaseActorSheet.applyCommonContext(defaultDocumentContext);
    const characterPreferences = SheetPreferencesService.getByType(this.actor.type), attributesSortMode = characterPreferences.tabs?.[CONSTANTS.TAB_CHARACTER_ATTRIBUTES]?.sort ?? "m", inventorySortMode = characterPreferences.tabs?.[CONSTANTS.TAB_ACTOR_INVENTORY]?.sort ?? "m", spellbookSortMode = characterPreferences.tabs?.[CONSTANTS.TAB_CHARACTER_SPELLBOOK]?.sort ?? "m", featureSortMode = characterPreferences.tabs?.[CONSTANTS.TAB_CHARACTER_FEATURES]?.sort ?? "m", actionListSortMode = characterPreferences.tabs?.[CONSTANTS.TAB_ACTOR_ACTIONS]?.sort ?? "m", unlocked = FoundryAdapter.isSheetUnlocked(this.actor) && defaultDocumentContext.editable, tidyResources = defaultDocumentContext.resources.map((r2) => ({
      name: r2.name,
      label: r2.label,
      labelName: `system.resources.${r2.name}.label`,
      placeholder: r2.placeholder,
      value: r2.value,
      valueName: `system.resources.${r2.name}.value`,
      max: r2.max,
      maxName: `system.resources.${r2.name}.max`,
      sr: r2.sr,
      srName: `system.resources.${r2.name}.sr`,
      lr: r2.lr,
      lrName: `system.resources.${r2.name}.lr`,
      cssClasses: [],
      dataSet: {}
    }));
    TidyHooks.tidy5eSheetsPrepareResources(tidyResources, this.actor);
    let utilities = {
      [CONSTANTS.TAB_CHARACTER_ATTRIBUTES]: {
        utilityToolbarCommands: [
          {
            title: FoundryAdapter.localize("SIDEBAR.SortModeAlpha"),
            iconClass: "fa-solid fa-arrow-down-a-z fa-fw",
            execute: /* @__PURE__ */ __name(async () => {
              await SheetPreferencesService.setDocumentTypeTabPreference(this.actor.type, CONSTANTS.TAB_CHARACTER_ATTRIBUTES, "sort", "m");
            }, "execute"),
            visible: attributesSortMode === "a"
          },
          {
            title: FoundryAdapter.localize("SIDEBAR.SortModeManual"),
            iconClass: "fa-solid fa-arrow-down-short-wide fa-fw",
            execute: /* @__PURE__ */ __name(async () => {
              await SheetPreferencesService.setDocumentTypeTabPreference(this.actor.type, CONSTANTS.TAB_CHARACTER_ATTRIBUTES, "sort", "a");
            }, "execute"),
            visible: attributesSortMode === "m"
          },
          {
            title: FoundryAdapter.localize("TIDY5E.Commands.ExpandAll"),
            iconClass: "fas fa-angles-down",
            execute: /* @__PURE__ */ __name(() => (
              // TODO: Use app.messageBus
              this.messageBus.message = {
                tabId: CONSTANTS.TAB_CHARACTER_ATTRIBUTES,
                message: CONSTANTS.MESSAGE_BUS_EXPAND_ALL
              }
            ), "execute")
          },
          {
            title: FoundryAdapter.localize("TIDY5E.Commands.CollapseAll"),
            iconClass: "fas fa-angles-up",
            execute: /* @__PURE__ */ __name(() => (
              // TODO: Use app.messageBus
              this.messageBus.message = {
                tabId: CONSTANTS.TAB_CHARACTER_ATTRIBUTES,
                message: CONSTANTS.MESSAGE_BUS_COLLAPSE_ALL
              }
            ), "execute")
          },
          {
            title: FoundryAdapter.localize("TIDY5E.Utilities.ConfigureSections"),
            iconClass: "fas fa-cog",
            execute: /* @__PURE__ */ __name(({ context: context2, sections }) => {
              new DocumentTabSectionConfigApplication({
                document: context2.actor,
                // Provide a way to build the necessary config, perhaps within the application constructor. We've got all the info we need in order to perform the operation.
                sections,
                tabId: CONSTANTS.TAB_CHARACTER_ATTRIBUTES,
                tabTitle: CharacterSheetRuntime.getTabTitle(CONSTANTS.TAB_CHARACTER_ATTRIBUTES)
              }).render(!0);
            }, "execute")
          }
        ]
      },
      [CONSTANTS.TAB_ACTOR_INVENTORY]: {
        utilityToolbarCommands: [
          {
            title: FoundryAdapter.localize("SIDEBAR.SortModeAlpha"),
            iconClass: "fa-solid fa-arrow-down-a-z fa-fw",
            execute: /* @__PURE__ */ __name(async () => {
              await SheetPreferencesService.setDocumentTypeTabPreference(this.actor.type, CONSTANTS.TAB_ACTOR_INVENTORY, "sort", "m");
            }, "execute"),
            visible: inventorySortMode === "a"
          },
          {
            title: FoundryAdapter.localize("SIDEBAR.SortModeManual"),
            iconClass: "fa-solid fa-arrow-down-short-wide fa-fw",
            execute: /* @__PURE__ */ __name(async () => {
              await SheetPreferencesService.setDocumentTypeTabPreference(this.actor.type, CONSTANTS.TAB_ACTOR_INVENTORY, "sort", "a");
            }, "execute"),
            visible: inventorySortMode === "m"
          },
          {
            title: FoundryAdapter.localize("TIDY5E.Commands.HideContainerPanel"),
            iconClass: "fas fa-boxes-stacked fa-fw",
            execute: /* @__PURE__ */ __name(() => {
              TidyFlags.showContainerPanel.unset(this.actor);
            }, "execute"),
            visible: !!TidyFlags.showContainerPanel.get(this.actor)
          },
          {
            title: FoundryAdapter.localize("TIDY5E.Commands.ShowContainerPanel"),
            iconClass: "fas fa-box fa-fw",
            execute: /* @__PURE__ */ __name(() => {
              TidyFlags.showContainerPanel.set(this.actor, !0);
            }, "execute"),
            visible: !TidyFlags.showContainerPanel.get(this.actor)
          },
          {
            title: FoundryAdapter.localize("TIDY5E.Commands.ExpandAll"),
            iconClass: "fas fa-angles-down",
            execute: /* @__PURE__ */ __name(() => (
              // TODO: Use app.messageBus
              this.messageBus.message = {
                tabId: CONSTANTS.TAB_ACTOR_INVENTORY,
                message: CONSTANTS.MESSAGE_BUS_EXPAND_ALL
              }
            ), "execute")
          },
          {
            title: FoundryAdapter.localize("TIDY5E.Commands.CollapseAll"),
            iconClass: "fas fa-angles-up",
            execute: /* @__PURE__ */ __name(() => (
              // TODO: Use app.messageBus
              this.messageBus.message = {
                tabId: CONSTANTS.TAB_ACTOR_INVENTORY,
                message: CONSTANTS.MESSAGE_BUS_COLLAPSE_ALL
              }
            ), "execute")
          },
          {
            title: FoundryAdapter.localize("TIDY5E.ListLayout"),
            iconClass: "fas fa-th-list fa-fw toggle-list",
            visible: !TidyFlags.inventoryGrid.get(this.actor),
            execute: /* @__PURE__ */ __name(() => {
              TidyFlags.inventoryGrid.set(this.actor);
            }, "execute")
          },
          {
            title: FoundryAdapter.localize("TIDY5E.GridLayout"),
            iconClass: "fas fa-th-large fa-fw toggle-grid",
            visible: !!TidyFlags.inventoryGrid.get(this.actor),
            execute: /* @__PURE__ */ __name(() => {
              TidyFlags.inventoryGrid.unset(this.actor);
            }, "execute")
          },
          {
            title: FoundryAdapter.localize("TIDY5E.Utilities.ConfigureSections"),
            iconClass: "fas fa-cog",
            execute: /* @__PURE__ */ __name(({ context: context2, sections }) => {
              new DocumentTabSectionConfigApplication({
                document: context2.actor,
                sections,
                tabId: CONSTANTS.TAB_ACTOR_INVENTORY,
                tabTitle: CharacterSheetRuntime.getTabTitle(CONSTANTS.TAB_ACTOR_INVENTORY)
              }).render(!0);
            }, "execute")
          }
        ]
      },
      [CONSTANTS.TAB_CHARACTER_SPELLBOOK]: {
        utilityToolbarCommands: [
          {
            title: FoundryAdapter.localize("SIDEBAR.SortModeAlpha"),
            iconClass: "fa-solid fa-arrow-down-a-z fa-fw",
            execute: /* @__PURE__ */ __name(async () => {
              await SheetPreferencesService.setDocumentTypeTabPreference(this.actor.type, CONSTANTS.TAB_CHARACTER_SPELLBOOK, "sort", "m");
            }, "execute"),
            visible: spellbookSortMode === "a"
          },
          {
            title: FoundryAdapter.localize("SIDEBAR.SortModeManual"),
            iconClass: "fa-solid fa-arrow-down-short-wide fa-fw",
            execute: /* @__PURE__ */ __name(async () => {
              await SheetPreferencesService.setDocumentTypeTabPreference(this.actor.type, CONSTANTS.TAB_CHARACTER_SPELLBOOK, "sort", "a");
            }, "execute"),
            visible: spellbookSortMode === "m"
          },
          {
            title: "Spell Pips",
            iconClass: "fa-regular fa-circle-dot fa-fw",
            execute: /* @__PURE__ */ __name(async () => {
              await SheetPreferencesService.setDocumentTypePreference(this.actor.type, CONSTANTS.SPELL_SLOT_TRACKER_MODE_PREFERENCE, CONSTANTS.SPELL_SLOT_TRACKER_MODE_VALUE_MAX);
            }, "execute"),
            visible: (characterPreferences?.spellSlotTrackerMode ?? CONSTANTS.SPELL_SLOT_TRACKER_MODE_PIPS) === CONSTANTS.SPELL_SLOT_TRACKER_MODE_PIPS
          },
          {
            title: "Spell Value/Max",
            iconClass: "fa-regular fa-square fa-fw",
            execute: /* @__PURE__ */ __name(async () => {
              await SheetPreferencesService.setDocumentTypePreference(this.actor.type, CONSTANTS.SPELL_SLOT_TRACKER_MODE_PREFERENCE, CONSTANTS.SPELL_SLOT_TRACKER_MODE_PIPS);
            }, "execute"),
            visible: characterPreferences?.spellSlotTrackerMode === CONSTANTS.SPELL_SLOT_TRACKER_MODE_VALUE_MAX
          },
          {
            title: FoundryAdapter.localize("TIDY5E.Commands.ExpandAll"),
            iconClass: "fas fa-angles-down",
            execute: /* @__PURE__ */ __name(() => (
              // TODO: Use app.messageBus
              this.messageBus.message = {
                tabId: CONSTANTS.TAB_CHARACTER_SPELLBOOK,
                message: CONSTANTS.MESSAGE_BUS_EXPAND_ALL
              }
            ), "execute")
          },
          {
            title: FoundryAdapter.localize("TIDY5E.Commands.CollapseAll"),
            iconClass: "fas fa-angles-up",
            execute: /* @__PURE__ */ __name(() => (
              // TODO: Use app.messageBus
              this.messageBus.message = {
                tabId: CONSTANTS.TAB_CHARACTER_SPELLBOOK,
                message: CONSTANTS.MESSAGE_BUS_COLLAPSE_ALL
              }
            ), "execute")
          },
          {
            title: FoundryAdapter.localize("TIDY5E.ListLayout"),
            iconClass: "fas fa-th-list fa-fw toggle-list",
            visible: !TidyFlags.spellbookGrid.get(this.actor),
            execute: /* @__PURE__ */ __name(() => {
              TidyFlags.spellbookGrid.set(this.actor);
            }, "execute")
          },
          {
            title: FoundryAdapter.localize("TIDY5E.GridLayout"),
            iconClass: "fas fa-th-large fa-fw toggle-grid",
            visible: !!TidyFlags.spellbookGrid.get(this.actor),
            execute: /* @__PURE__ */ __name(() => {
              TidyFlags.spellbookGrid.unset(this.actor);
            }, "execute")
          },
          {
            title: FoundryAdapter.localize("TIDY5E.Utilities.ConfigureSections"),
            iconClass: "fas fa-cog",
            execute: /* @__PURE__ */ __name(({ context: context2, sections }) => {
              new DocumentTabSectionConfigApplication({
                document: context2.actor,
                sections,
                tabId: CONSTANTS.TAB_CHARACTER_SPELLBOOK,
                tabTitle: CharacterSheetRuntime.getTabTitle(CONSTANTS.TAB_CHARACTER_SPELLBOOK)
              }).render(!0);
            }, "execute")
          }
        ]
      },
      [CONSTANTS.TAB_CHARACTER_FEATURES]: {
        utilityToolbarCommands: [
          {
            title: FoundryAdapter.localize("SIDEBAR.SortModeAlpha"),
            iconClass: "fa-solid fa-arrow-down-a-z fa-fw",
            execute: /* @__PURE__ */ __name(async () => {
              await SheetPreferencesService.setDocumentTypeTabPreference(this.actor.type, CONSTANTS.TAB_CHARACTER_FEATURES, "sort", "m");
            }, "execute"),
            visible: featureSortMode === "a"
          },
          {
            title: FoundryAdapter.localize("SIDEBAR.SortModeManual"),
            iconClass: "fa-solid fa-arrow-down-short-wide fa-fw",
            execute: /* @__PURE__ */ __name(async () => {
              await SheetPreferencesService.setDocumentTypeTabPreference(this.actor.type, CONSTANTS.TAB_CHARACTER_FEATURES, "sort", "a");
            }, "execute"),
            visible: featureSortMode === "m"
          },
          {
            title: FoundryAdapter.localize("TIDY5E.Commands.ExpandAll"),
            iconClass: "fas fa-angles-down",
            execute: /* @__PURE__ */ __name(() => (
              // TODO: Use app.messageBus
              this.messageBus.message = {
                tabId: CONSTANTS.TAB_CHARACTER_FEATURES,
                message: CONSTANTS.MESSAGE_BUS_EXPAND_ALL
              }
            ), "execute")
          },
          {
            title: FoundryAdapter.localize("TIDY5E.Commands.CollapseAll"),
            iconClass: "fas fa-angles-up",
            execute: /* @__PURE__ */ __name(() => (
              // TODO: Use app.messageBus
              this.messageBus.message = {
                tabId: CONSTANTS.TAB_CHARACTER_FEATURES,
                message: CONSTANTS.MESSAGE_BUS_COLLAPSE_ALL
              }
            ), "execute")
          },
          {
            title: FoundryAdapter.localize("TIDY5E.Utilities.ConfigureSections"),
            iconClass: "fas fa-cog",
            execute: /* @__PURE__ */ __name(({ context: context2, sections }) => {
              new DocumentTabSectionConfigApplication({
                document: context2.actor,
                sections,
                tabId: CONSTANTS.TAB_CHARACTER_FEATURES,
                tabTitle: CharacterSheetRuntime.getTabTitle(CONSTANTS.TAB_CHARACTER_FEATURES)
              }).render(!0);
            }, "execute")
          }
        ]
      },
      [CONSTANTS.TAB_ACTOR_ACTIONS]: {
        utilityToolbarCommands: [
          {
            title: FoundryAdapter.localize("SIDEBAR.SortModeAlpha"),
            iconClass: "fa-solid fa-arrow-down-a-z fa-fw",
            execute: /* @__PURE__ */ __name(async () => {
              await SheetPreferencesService.setDocumentTypeTabPreference(this.actor.type, CONSTANTS.TAB_ACTOR_ACTIONS, "sort", "m");
            }, "execute"),
            visible: actionListSortMode === "a"
          },
          {
            title: FoundryAdapter.localize("TIDY5E.SortMode.ActionListDefault"),
            iconClass: "fa-solid fa-arrow-down-short-wide fa-fw",
            execute: /* @__PURE__ */ __name(async () => {
              await SheetPreferencesService.setDocumentTypeTabPreference(this.actor.type, CONSTANTS.TAB_ACTOR_ACTIONS, "sort", "a");
            }, "execute"),
            visible: actionListSortMode === "m"
          },
          {
            title: FoundryAdapter.localize("TIDY5E.Commands.ExpandAll"),
            iconClass: "fas fa-angles-down",
            execute: /* @__PURE__ */ __name(() => (
              // TODO: Use app.messageBus
              this.messageBus.message = {
                tabId: CONSTANTS.TAB_ACTOR_ACTIONS,
                message: CONSTANTS.MESSAGE_BUS_EXPAND_ALL
              }
            ), "execute")
          },
          {
            title: FoundryAdapter.localize("TIDY5E.Commands.CollapseAll"),
            iconClass: "fas fa-angles-up",
            execute: /* @__PURE__ */ __name(() => (
              // TODO: Use app.messageBus
              this.messageBus.message = {
                tabId: CONSTANTS.TAB_ACTOR_ACTIONS,
                message: CONSTANTS.MESSAGE_BUS_COLLAPSE_ALL
              }
            ), "execute")
          },
          {
            title: FoundryAdapter.localize("TIDY5E.Utilities.ConfigureSections"),
            iconClass: "fas fa-cog",
            execute: /* @__PURE__ */ __name(({ context: context2, sections }) => {
              new DocumentTabSectionConfigApplication({
                document: context2.actor,
                sections,
                tabId: CONSTANTS.TAB_ACTOR_ACTIONS,
                tabTitle: CharacterSheetRuntime.getTabTitle(CONSTANTS.TAB_ACTOR_ACTIONS)
              }).render(!0);
            }, "execute")
          }
        ]
      }
    }, { conditions, effects: enhancedEffectSections } = await ConditionsAndEffects.getConditionsAndEffects(this.actor, this.object, defaultDocumentContext.effects);
    const context = {
      ...defaultDocumentContext,
      activateEditors: /* @__PURE__ */ __name((node, options2) => FoundryAdapter.activateEditors(node, this, options2?.bindSecrets), "activateEditors"),
      actions: await getActorActionSections(this.actor),
      actorClassesToImages: getActorClassesToImages(this.actor),
      actorPortraitCommands: ActorPortraitRuntime.getEnabledPortraitMenuCommands(this.actor),
      allowEffectsManagement: FoundryAdapter.allowCharacterEffectsManagement(this.actor),
      allowMaxHpOverride: settings.value.allowHpMaxOverride && (!settings.value.lockHpMaxChanges || FoundryAdapter.userIsGm()),
      appearanceEnrichedHtml: await FoundryAdapter.enrichHtml(this.actor.system.details.appearance, {
        secrets: this.actor.isOwner,
        rollData: defaultDocumentContext.rollData,
        relativeTo: this.actor
      }),
      appId: this.appId,
      biographyEnrichedHtml: await FoundryAdapter.enrichHtml(this.actor.system.details.biography.value, {
        secrets: this.actor.isOwner,
        rollData: defaultDocumentContext.rollData,
        relativeTo: this.actor
      }),
      bondEnrichedHtml: await FoundryAdapter.enrichHtml(this.actor.system.details.bond, {
        secrets: this.actor.isOwner,
        rollData: defaultDocumentContext.rollData,
        relativeTo: this.actor
      }),
      conditions,
      containerPanelItems: await Inventory.getContainerPanelItems(defaultDocumentContext.items),
      customActorTraits: CustomActorTraitsRuntime.getEnabledTraits(defaultDocumentContext),
      customContent: await CharacterSheetRuntime.getContent(defaultDocumentContext),
      document: this.document,
      editable: defaultDocumentContext.editable,
      effects: enhancedEffectSections,
      filterData: this.itemFilterService.getDocumentItemFilterData(),
      filterPins: ItemFilterRuntime.defaultFilterPins[this.actor.type],
      flawEnrichedHtml: await FoundryAdapter.enrichHtml(this.actor.system.details.flaw, {
        secrets: this.actor.isOwner,
        rollData: defaultDocumentContext.rollData,
        relativeTo: this.actor
      }),
      healthPercentage: this.actor.system.attributes.hp.pct.toNearest(0.1),
      idealEnrichedHtml: await FoundryAdapter.enrichHtml(this.actor.system.details.ideal, {
        secrets: this.actor.isOwner,
        rollData: defaultDocumentContext.rollData,
        relativeTo: this.actor
      }),
      lockExpChanges: FoundryAdapter.shouldLockExpChanges(),
      lockHpMaxChanges: FoundryAdapter.shouldLockHpMaxChanges(),
      lockItemQuantity: FoundryAdapter.shouldLockItemQuantity(),
      lockLevelSelector: FoundryAdapter.shouldLockLevelSelector(),
      lockMoneyChanges: FoundryAdapter.shouldLockMoneyChanges(),
      lockSensitiveFields: !unlocked && settings.value.useTotalSheetLock || !defaultDocumentContext.editable,
      notes1EnrichedHtml: await FoundryAdapter.enrichHtml(TidyFlags.notes1.members.value.get(this.actor) ?? "", {
        secrets: this.actor.isOwner,
        rollData: defaultDocumentContext.rollData,
        relativeTo: this.actor
      }),
      notes2EnrichedHtml: await FoundryAdapter.enrichHtml(TidyFlags.notes2.members.value.get(this.actor) ?? "", {
        secrets: this.actor.isOwner,
        rollData: defaultDocumentContext.rollData,
        relativeTo: this.actor
      }),
      notes3EnrichedHtml: await FoundryAdapter.enrichHtml(TidyFlags.notes3.members.value.get(this.actor) ?? "", {
        secrets: this.actor.isOwner,
        rollData: defaultDocumentContext.rollData,
        relativeTo: this.actor
      }),
      notes4EnrichedHtml: await FoundryAdapter.enrichHtml(TidyFlags.notes4.members.value.get(this.actor) ?? "", {
        secrets: this.actor.isOwner,
        rollData: defaultDocumentContext.rollData,
        relativeTo: this.actor
      }),
      notesEnrichedHtml: await FoundryAdapter.enrichHtml(TidyFlags.notes.members.value.get(this.actor) ?? "", {
        secrets: this.actor.isOwner,
        rollData: defaultDocumentContext.rollData,
        relativeTo: this.actor
      }),
      originalContext: defaultDocumentContext,
      owner: this.actor.isOwner,
      showContainerPanel: TidyFlags.showContainerPanel.get(this.actor) === !0 && Array.from(defaultDocumentContext.items).some((i2) => i2.type === CONSTANTS.ITEM_TYPE_CONTAINER),
      showLimitedSheet: FoundryAdapter.showLimitedSheet(this.actor),
      spellComponentLabels: FoundryAdapter.getSpellComponentLabels(),
      spellSlotTrackerMode: characterPreferences.spellSlotTrackerMode ?? CONSTANTS.SPELL_SLOT_TRACKER_MODE_PIPS,
      tabs: [],
      tidyResources,
      traitEnrichedHtml: await FoundryAdapter.enrichHtml(this.actor.system.details.trait, {
        secrets: this.actor.isOwner,
        rollData: defaultDocumentContext.rollData,
        relativeTo: this.actor
      }),
      unlocked,
      useActionsFeature: actorUsesActionFeature(this.actor),
      useClassicControls: settings.value.useClassicControlsForCharacter,
      useRoundedPortraitStyle: [
        CONSTANTS.CIRCULAR_PORTRAIT_OPTION_ALL,
        CONSTANTS.CIRCULAR_PORTRAIT_OPTION_CHARACTER
      ].includes(settings.value.useCircularPortraitStyle),
      utilities,
      viewableWarnings: defaultDocumentContext.warnings?.filter((w2) => !isNil(w2.message?.trim(), "")) ?? []
    };
    if (context.system.details.xp.boonsEarned !== void 0) {
      const pluralRules = new Intl.PluralRules(game.i18n.lang);
      context.epicBoonsEarned = FoundryAdapter.localize(`DND5E.ExperiencePointsBoons.${pluralRules.select(this.actor.system.details.xp.boonsEarned ?? 0)}`, {
        number: dnd5e.utils.formatNumber(this.actor.system.details.xp.boonsEarned ?? 0, { signDisplay: "always" })
      });
    }
    for (const panelItem of context.containerPanelItems) {
      const ctx = context.itemContext[panelItem.container.id];
      ctx.containerContents = await Container.getContainerContents(panelItem.container);
    }
    context.bastion = {
      description: await TextEditor.enrichHTML(this.actor.system.bastion.description, {
        secrets: this.actor.isOwner,
        rollData: context.rollData,
        relativeTo: this.actor
      })
    }, await this._prepareFacilities(context);
    let tabs = await CharacterSheetRuntime.getTabs(context);
    const selectedTabs = TidyFlags.selectedTabs.get(context.actor);
    if (selectedTabs?.length)
      tabs = tabs.filter((t2) => selectedTabs?.includes(t2.id)).sort((a2, b2) => selectedTabs.indexOf(a2.id) - selectedTabs.indexOf(b2.id));
    else {
      const defaultTabs = settings.value.defaultCharacterSheetTabs;
      tabs = tabs.filter((t2) => defaultTabs?.includes(t2.id)).sort((a2, b2) => defaultTabs.indexOf(a2.id) - defaultTabs.indexOf(b2.id));
    }
    context.tabs = tabs, TidyHooks.tidy5eSheetsPreConfigureSections(this, this.element.get(0), context);
    let effectsSection = {
      canCreate: !1,
      dataset: {},
      effects: [],
      key: "tidy-favorite-effects",
      label: "DND5E.Effects",
      show: !0
    };
    const favoriteEffects = this.actor.system.favorites.filter((f2) => f2.type === "effect");
    for (const favoriteEffect of favoriteEffects) {
      const effect2 = fromUuidSync(favoriteEffect.id, { relative: this.actor });
      if (!effect2)
        continue;
      const data = await effect2.getFavoriteData();
      data.suppressed && (data.subtitle = game.i18n.localize("DND5E.Suppressed")), effectsSection.effects.push({
        effectId: effect2.id,
        effect: effect2,
        id: favoriteEffect.id,
        img: data.img,
        sort: favoriteEffect.sort,
        subtitle: data.subtitle,
        suppressed: data.suppressed,
        title: data.title,
        toggle: { applicable: !0, value: data.toggle }
      });
    }
    const activitiesSection = {
      activities: [],
      dataset: {},
      key: "tidy-favorite-activities",
      label: "DND5E.ACTIVITY.Title.other",
      show: !0,
      type: CONSTANTS.FAVORITES_SECTION_TYPE_ACTIVITY
    }, favoriteActivities = this.actor.system.favorites.filter((f2) => f2.type === "activity");
    for (const favoriteActivity of favoriteActivities) {
      const activity = fromUuidSync(favoriteActivity.id, { relative: this.actor });
      activity && activitiesSection.activities.push(activity);
    }
    return context.favorites = CharacterSheetSections.mergeDuplicateFavoriteSections(context.favorites), effectsSection.effects.length && context.favorites.push({
      ...effectsSection,
      type: CONSTANTS.FAVORITES_SECTION_TYPE_EFFECT
    }), activitiesSection.activities.length && context.favorites.push(activitiesSection), debug("Character Sheet context data", context), context;
  }
  _prepareItems(context) {
    const inventory = Inventory.getDefaultInventorySections(), favoriteInventory = Inventory.getDefaultInventorySections({ canCreate: !1 }), favoritesIdMap = this._getFavoritesIdMap();
    let {
      backgrounds,
      classes,
      favorites,
      feats,
      items,
      species,
      spells,
      subclasses
    } = Array.from(this.actor.items).reduce(
      (obj, item) => {
        const { quantity } = item.system, ctx = context.itemContext[item.id] ??= {};
        ctx.isStack = Number.isNumeric(quantity) && quantity !== 1, ctx.attunement = FoundryAdapter.getAttunementContext(item), ctx.hasUses = item.hasLimitedUses, ctx.hasRecharge = item.hasRecharge, ctx.concealDetails = !game.user.isGM && item.system.identified === !1;
        const [originId] = item.getFlag("dnd5e", "advancementOrigin")?.split(".") ?? [], group = this.actor.items.get(originId);
        switch (group?.type) {
          case "race":
            ctx.group = "species";
            break;
          case "background":
            ctx.group = "background";
            break;
          case "class":
            ctx.group = group.identifier;
            break;
          case "subclass":
            ctx.group = group.class?.identifier ?? "other";
            break;
          default:
            ctx.group = "other";
        }
        this._prepareItem(item, ctx), this.actor.items.has(item.system.container) || CharacterSheetSections.partitionItem(item, obj, inventory);
        const favoritedItem = favoritesIdMap.get(item.getRelativeUUID(this.actor));
        return favoritedItem?.type === "item" && (ctx.favoriteId = favoritedItem.id, CharacterSheetSections.partitionItem(item, obj.favorites, favoriteInventory)), obj;
      },
      {
        items: [],
        spells: [],
        facilities: [],
        feats: [],
        species: [],
        backgrounds: [],
        classes: [],
        subclasses: [],
        favorites: {
          items: [],
          spells: [],
          facilities: [],
          feats: [],
          species: [],
          backgrounds: [],
          classes: [],
          subclasses: []
        }
      }
    );
    const inventoryTypes = Inventory.getDefaultInventoryTypes();
    for (let item of items) {
      const ctx = context.itemContext[item.id] ??= {};
      ctx.totalWeight = item.system.totalWeight?.toNearest(0.1), Inventory.applyInventoryItemToSection(inventory, item, inventoryTypes, { canCreate: !0 });
    }
    for (let item of favorites.items) {
      const ctx = context.itemContext[item.id] ??= {};
      ctx.totalWeight = item.system.totalWeight?.toNearest(0.1), Inventory.applyInventoryItemToSection(favoriteInventory, item, inventoryTypes, { canCreate: !1 });
    }
    context.spellcastingInfo = FoundryAdapter.getSpellcastingInfo(this.actor, spells);
    const spellbook = SheetSections.prepareTidySpellbook(context, spells, { canCreate: !0 }, this), favoriteSpellbook = SheetSections.prepareTidySpellbook(context, favorites.spells, { canCreate: !1 }, this);
    classes = SheetSections.prepareClassItems(context, classes, subclasses, this.actor);
    for (const subclass of subclasses) {
      feats.push(subclass);
      const message = game.i18n.format("DND5E.SubclassMismatchWarn", {
        name: subclass.name,
        class: subclass.system.classIdentifier
      });
      context.warnings.push({ message, type: "warning" });
    }
    favorites.classes = SheetSections.prepareClassItems(context, favorites.classes, favorites.subclasses, this.actor);
    for (const subclass of favorites.subclasses)
      favorites.feats.push(subclass);
    const features = CharacterSheetSections.buildFeaturesSections(species, backgrounds, classes, feats, { canCreate: !0 }), favoriteFeatures = CharacterSheetSections.buildFeaturesSections(favorites.species, favorites.backgrounds, favorites.classes, favorites.feats, { canCreate: !1 });
    let bastionFacilitiesLabel = isNil(context.system.bastion.name, "") ? "TYPES.Item.facilityPl" : context.system.bastion.name, favoriteFacilities = [
      {
        dataset: {},
        items: favorites.facilities,
        key: "tidy-favorite-bastion-facilities",
        label: bastionFacilitiesLabel,
        show: !0
      }
    ];
    context.inventory = Object.values(inventory), context.spellbook = spellbook, context.features = Object.values(features), context.favorites = [
      ...Object.values(favoriteInventory).filter((i2) => i2.items.length).map((i2) => ({
        ...i2,
        type: CONSTANTS.FAVORITES_SECTION_TYPE_INVENTORY
      })),
      ...Object.values(favoriteFeatures).filter((i2) => i2.items.length).map((i2) => ({
        ...i2,
        type: CONSTANTS.FAVORITES_SECTION_TYPE_FEATURE
      })),
      ...favoriteSpellbook.filter((s2) => s2.spells.length).map((s2) => ({
        ...s2,
        type: CONSTANTS.FAVORITES_SECTION_TYPE_SPELLBOOK
      })),
      ...favoriteFacilities.filter((i2) => i2.items.length).map((i2) => ({
        ...i2,
        type: CONSTANTS.FAVORITES_SECTION_TYPE_FACILITY
      }))
    ];
  }
  /**
   * Prepare bastion facility data for display.
   */
  async _prepareFacilities(context) {
    const allDefenders = [], basic = [], special = [];
    for (const facility of Object.values(this.actor.itemTypes.facility)) {
      const { id, img, labels, name, system } = facility, {
        building,
        craft,
        defenders,
        disabled,
        free,
        hirelings,
        level,
        order,
        progress,
        size,
        trade,
        type
      } = system, subtitle = [];
      isNil(order, "") || subtitle.push(CONFIG.DND5E.facilities.orders[order]?.label ?? order), trade.stock.max && subtitle.push(`${trade.stock.value ?? 0} &sol; ${trade.stock.max}`), subtitle.push(building.built ? CONFIG.DND5E.facilities.sizes[size].label : FoundryAdapter.localize("DND5E.FACILITY.Build.Unbuilt")), isNil(level) || subtitle.push(FoundryAdapter.localize("DND5E.LevelNumber", { level }));
      const chosenFacilityContext = {
        building,
        craft: craft.item ? await fromUuid(craft.item) : null,
        creatures: await this._prepareFacilityOccupants(trade.creatures),
        defenders: await this._prepareFacilityOccupants(defenders),
        disabled,
        executing: CONFIG.DND5E.facilities.orders[progress.order]?.icon,
        facility,
        free,
        hirelings: await this._prepareFacilityOccupants(hirelings),
        id,
        img: foundry.utils.getRoute(img),
        isSpecial: type.value === CONSTANTS.FACILITY_TYPE_SPECIAL,
        labels,
        name,
        progress,
        subtitle: subtitle.join(" &bull; ")
      };
      allDefenders.push(...chosenFacilityContext.defenders.map(({ actor }) => {
        if (!actor) return null;
        const { img: img2, name: name2, uuid } = actor;
        return {
          img: img2,
          name: name2,
          uuid,
          facility: facility.id
        };
      }).filter((_) => _)), chosenFacilityContext.isSpecial ? special.push(chosenFacilityContext) : basic.push(chosenFacilityContext);
      const itemContext = context.itemContext[facility.id] ??= {};
      itemContext.chosen = chosenFacilityContext;
    }
    context.defenders = allDefenders, context.facilities = {
      basic: {
        chosen: basic,
        available: [],
        value: 0,
        max: 0
      },
      special: {
        chosen: special,
        available: [],
        value: 0,
        max: 0
      }
    }, [
      CONSTANTS.FACILITY_TYPE_BASIC,
      CONSTANTS.FACILITY_TYPE_SPECIAL
    ].forEach((type) => {
      const facilities = context.facilities[type], config = CONFIG.DND5E.facilities.advancement[type];
      let [, available] = Object.entries(config).reverse().find(([level]) => level <= this.actor.system.details.level) ?? [];
      facilities.value = facilities.chosen.filter(({ free }) => type === CONSTANTS.FACILITY_TYPE_BASIC || !free).length, facilities.max = available ?? 0, available = (available ?? 0) - facilities.value, facilities.available = Array.fromRange(Math.max(0, available)).map(() => ({
        label: `DND5E.FACILITY.AvailableFacility.${type}.free`
      }));
    }), context.facilities.basic.available.length || context.facilities.basic.available.push({
      label: "DND5E.FACILITY.AvailableFacility.basic.build"
    });
  }
  /**
   * Prepare facility occupants for display.
   */
  _prepareFacilityOccupants(occupants) {
    const { max, value } = occupants;
    return Promise.all(Array.fromRange(max).map(async (i2) => {
      const uuid = value[i2];
      return uuid ? { actor: await fromUuid(uuid) } : { empty: !0 };
    }));
  }
  _getFavoritesIdMap() {
    return this.actor.system.favorites.reduce(
      (map, f2) => (map.set(f2.id, f2), map),
      /* @__PURE__ */ new Map()
    );
  }
  /**
   * A helper method to establish the displayed preparation state for an item.
   * @param {Item5e} item     Item being prepared for display.
   * @param {object} context  Context data for display.
   * @protected
   */
  _prepareItem(item, context) {
    if (item.type === CONSTANTS.ITEM_TYPE_SPELL) {
      const prep = item.system.preparation || {}, isAlways = prep.mode === "always", isPrepared = !!prep.prepared;
      context.toggleClass = isPrepared ? "active" : "", isAlways ? (context.toggleClass = "fixed", context.toggleTitle = CONFIG.DND5E.spellPreparationModes.always.label) : isPrepared ? context.toggleTitle = CONFIG.DND5E.spellPreparationModes.prepared.label : context.toggleTitle = game.i18n.localize("DND5E.SpellUnprepared"), this._concentration.items.has(item) && (context.concentration = !0);
    } else {
      const isActive = !!item.system.equipped;
      context.toggleClass = isActive ? "active" : "", context.toggleTitle = game.i18n.localize(isActive ? "DND5E.Equipped" : "DND5E.Unequipped"), context.canToggle = "equipped" in item.system;
    }
    context.activities = Activities.getVisibleActivities(item, item.system.activities)?.map(Activities.getActivityItemContext);
  }
  async setExpandedItemData() {
    this.expandedItemData.clear();
    for (const id of this.expandedItems.keys()) {
      const item = this.actor.items.get(id);
      item && this.expandedItemData.set(id, await item.getChatData({ secrets: this.actor.isOwner }));
    }
  }
  onToggleAbilityProficiency(event2) {
    return this._onToggleAbilityProficiency(event2);
  }
  onShortRest(event2) {
    return this._onShortRest(event2);
  }
  onLongRest(event2) {
    return this._onLongRest(event2);
  }
  async _onDropSingleItem(itemData, event2) {
    if (itemData.type === CONSTANTS.ITEM_TYPE_SPELL && this.currentTabId === CONSTANTS.TAB_ACTOR_INVENTORY) {
      const options = {};
      return settings.value.includeFlagsInSpellScrollCreation && (options.flags = itemData.flags), (await dnd5e.documents.Item5e.createScrollFromSpell(itemData, options)).toObject();
    }
    return super._onDropSingleItem(itemData, event2);
  }
  close(options = {}) {
    return this._effectCleanup?.(), this._destroySvelteComponent(), delete game.user.apps[this.id], super.close(options);
  }
  submit() {
    return super.submit();
  }
  async _onSubmit(...args) {
    await super._onSubmit(...args), this.stats.lastSubmissionTime = /* @__PURE__ */ new Date();
  }
  /**
   * A boolean which gates double-rendering and prevents a second
   * colliding render from triggering an infamous
   * "One of original or other are not Objects!" error.
   */
  tidyRendering = !1;
  render(...args) {
    debug("Sheet render begin"), this.tidyRendering = !0, super.render(...args);
  }
  _renderMutex = new AsyncMutex();
  async _render(force, options = {}) {
    await this._renderMutex.lock(async () => {
      this.options.token && this.tidyRendering === !1 || await this._renderSheet(force, options);
    }), this.tidyRendering = !1, debug("Sheet render end");
  }
  async _renderSheet(force, options = {}) {
    await this.setExpandedItemData();
    const data = await this.getData();
    if (SheetSections.accountForExternalSections(
      [
        "actions",
        "favorites",
        "inventory",
        "spellbook",
        "features"
      ],
      data
    ), this.context.data = data, force) {
      const { width, height } = SheetPreferencesService.getByType(this.actor.type) ?? {};
      this.position = {
        ...this.position,
        width: width ?? this.position.width,
        height: height ?? this.position.height
      }, this._saveScrollPositions(this.element), this._destroySvelteComponent(), await super._render(force, options), applySheetAttributesToWindow(this.actor.documentName, this.actor.uuid, this.actor.type, this.element.get(0)), await this.renderCustomContent({ data, isFullRender: !0 }), TidyHooks.tidy5eSheetsRenderActorSheet(this, this.element.get(0), data, !0), CustomContentRenderer.wireCompatibilityEventListeners(this.element, super.activateListeners, this), blurUntabbableButtonsOnClick(this.element.get(0));
      return;
    }
    await maintainCustomContentInputFocus(this, async () => {
      applyTitleToWindow(this.title, this.element.get(0)), await this.renderCustomContent({ data, isFullRender: !1 }), TidyHooks.tidy5eSheetsRenderActorSheet(this, this.element.get(0), data, !1), CustomContentRenderer.wireCompatibilityEventListeners(this.element, super.activateListeners, this);
    });
  }
  async renderCustomContent(args) {
    await CustomContentRenderer.render({
      app: this,
      customContent: args.data.customContent,
      data: args.data,
      element: this.element,
      isFullRender: args.isFullRender,
      superActivateListeners: super.activateListeners,
      tabs: args.data.tabs
    });
  }
  deleteOccupant(facilityId, prop2, index2) {
    const facility = this.actor.items.get(facilityId);
    if (!facility || !prop2 || index2 === void 0)
      return;
    let { value } = foundry.utils.getProperty(facility, prop2);
    return value = value.filter((_, i2) => i2 !== index2), facility.update({ [`${prop2}.value`]: value });
  }
  _getHeaderButtons() {
    const buttons = super._getHeaderButtons();
    return FoundryAdapter.removeConfigureSettingsButtonWhenLockedForNonGm(buttons);
  }
  _destroySvelteComponent() {
    this.component && unmount(this.component), this.component = void 0, this.additionalComponents.forEach((c2) => unmount(c2)), this.additionalComponents = [];
  }
  _saveScrollPositions(html2) {
    if (html2.length && this.component) {
      const save2 = super._saveScrollPositions(html2);
      return debug("Saved scroll positions", this._scrollPositions), save2;
    }
  }
  _disableFields(...args) {
    debug("Ignoring call to disable fields. Delegating to Tidy Sheets...");
  }
  _onResize(event2) {
    super._onResize(event2);
    const { width, height } = this.position;
    SheetPreferencesService.setDocumentTypePreference(this.actor.type, "width", width), SheetPreferencesService.setDocumentTypePreference(this.actor.type, "height", height);
  }
  async _onDrop(event2) {
    if (!event2.target.closest("[data-tidy-favorites]")) return super._onDrop(event2);
    const dragData = event2.dataTransfer?.getData("text/plain");
    if (!dragData) return super._onDrop(event2);
    let data;
    try {
      data = JSON.parse(dragData);
    } catch (e2) {
      console.error(e2);
      return;
    }
    let type = "item", id = (await fromUuid(data.uuid)).getRelativeUUID(this.actor);
    return this._onDropFavorite(event2, { type, id });
  }
  _prepareTraits(systemData) {
    const traits = super._prepareTraits(systemData), selectedWeaponProfs = traits.traits?.weaponProf?.selected;
    for (let key of systemData.traits?.weaponProf?.mastery?.value ?? [])
      Object.hasOwn(selectedWeaponProfs, key) || (selectedWeaponProfs[key] = dnd5e.documents.Trait.keyLabel(key, { trait: "weapon" }) ?? key);
    return traits;
  }
  /** @inheritDoc */
  async _onDropActor(event2, data) {
    if (!event2.target.closest(".facility-occupants") || !data.uuid)
      return super._onDropActor(event2, data);
    const facilityId = event2.target.closest("[data-facility-id]")?.dataset?.facilityId, facility = this.actor.items.get(facilityId);
    if (!facility)
      return;
    const prop2 = event2.target.closest("[data-prop]")?.dataset?.prop;
    prop2 && this._onDropActorAddToFacility(facility, prop2, data.uuid);
  }
  _onDropActorAddToFacility(facility, prop2, actorUuid) {
    const { max, value } = foundry.utils.getProperty(facility, prop2);
    if (!(value.length + 1 > max))
      return facility.update({ [`${prop2}.value`]: [...value, actorUuid] });
  }
  /* -------------------------------------------- */
  /* Favorites
  /* -------------------------------------------- */
  /**
   * Handle an owned item or effect being dropped in the favorites area.
   * @param {PointerEvent} event         The triggering event.
   * @param {ActorFavorites5e} favorite  The favorite that was dropped.
   * @returns {Promise<Actor5e>|void}
   * @protected
   */
  async _onDropFavorite(event2, favorite) {
    return this.actor.system.hasFavorite(favorite.id) ? await this._onSortFavorites(event2, favorite.id) : await this.actor.system.addFavorite(favorite);
  }
  /**
   * Handle re-ordering the favorites list.
   * @param {DragEvent} event  The drop event.
   * @param {string} srcId     The identifier of the dropped favorite.
   * @returns {Promise<Actor5e>|void}
   * @protected
   */
  async _onSortFavorites(event2, srcId) {
    const targetId = event2.target?.closest("[data-favorite-id]")?.getAttribute("data-favorite-id");
    if (!targetId) return;
    let source2, target;
    if (srcId === targetId) return;
    const siblings = this.actor.system.favorites.filter((f2) => (f2.id === targetId ? target = f2 : f2.id === srcId && (source2 = f2), f2.id !== srcId)), updates = SortingHelpers.performIntegerSort(source2, { target, siblings }), favorites = this.actor.system.favorites.reduce((map, f2) => map.set(f2.id, { ...f2 }), /* @__PURE__ */ new Map());
    for (const { target: target2, update: update2 } of updates) {
      const favorite = favorites.get(target2.id);
      foundry.utils.mergeObject(favorite, update2);
    }
    return await this.actor.update({
      "system.favorites": Array.from(favorites.values())
    });
  }
  /* -------------------------------------------- */
  /* SheetTabCacheable
  /* -------------------------------------------- */
  onTabSelected(tabId) {
    this.currentTabId = tabId;
  }
  /* -------------------------------------------- */
  /* SheetExpandedItemsCacheable
  /* -------------------------------------------- */
  onItemToggled(itemId, isVisible, location) {
    const locationSet = this.expandedItems.get(itemId) ?? this.expandedItems.set(itemId, /* @__PURE__ */ new Set()).get(itemId);
    isVisible ? locationSet?.add(location) : locationSet?.delete(location), debug("Item Toggled", { expandedItems: this.expandedItems });
  }
  /* -------------------------------------------- */
  /* SearchFilterCacheable
  /* -------------------------------------------- */
  onSearch(location, text2) {
    debug("Searched", { location, text: text2 }), this.searchFilters.set(location, text2);
  }
}
function getActorClassesToImages(actor) {
  let actorClassesToImages = {};
  for (let item of actor.items)
    if (item.type == CONSTANTS.ITEM_TYPE_CLASS) {
      let className = item.name.toLowerCase(), classImg = item.img;
      actorClassesToImages[className] = classImg;
    }
  return actorClassesToImages;
}
__name(getActorClassesToImages, "getActorClassesToImages");
var root$q = /* @__PURE__ */ template('<div class="portrait-hp svelte-l1hffv"><!></div>');
function NpcHitPoints($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getNpcSheetContext);
  const localize = FoundryAdapter.localize;
  var div = root$q();
  template_effect(() => set_attribute(div, "title", localize("DND5E.HitPoints")));
  var node = child(div), valueTitle = /* @__PURE__ */ derived(() => localize("DND5E.HitPointsCurrent")), valueDisabled = /* @__PURE__ */ derived(() => !get(context).editable), maxTitle = /* @__PURE__ */ derived(() => localize("DND5E.HitPointsMax")), maxDisabled = /* @__PURE__ */ derived(() => !get(context).editable || get(context).system.details.level || get(context).lockHpMaxChanges || get(context).lockSensitiveFields), Bar2 = /* @__PURE__ */ derived(() => settings.value.useHpBarNpc ? HpBar : null);
  ResourceWithBar(node, {
    get document() {
      return get(context).actor;
    },
    get value() {
      return get(context).system.attributes.hp.value;
    },
    valueField: "system.attributes.hp.value",
    get valueTitle() {
      return get(valueTitle);
    },
    get valueDisabled() {
      return get(valueDisabled);
    },
    get max() {
      return get(context).system.attributes.hp.max;
    },
    maxField: "system.attributes.hp.max",
    get maxTitle() {
      return get(maxTitle);
    },
    get maxDisabled() {
      return get(maxDisabled);
    },
    get percentage() {
      return get(context).healthPercentage;
    },
    get Bar() {
      return get(Bar2);
    }
  }), append($$anchor, div), pop();
}
__name(NpcHitPoints, "NpcHitPoints");
var on_click$8 = /* @__PURE__ */ __name((ev, context) => get(context).shortRest(ev), "on_click$8"), on_click_1$4 = /* @__PURE__ */ __name((ev, context) => get(context).longRest(ev), "on_click_1$4"), root$p = /* @__PURE__ */ template('<div class="rest-container svelte-1tber6c"><div class="resting svelte-1tber6c"><span class="resting-icon svelte-1tber6c"><i class="rest-icon fas fa-bed"></i></span> <button type="button" class="rest short-rest inline-icon-button svelte-1tber6c"><i class="fas fa-hourglass-half"></i></button> <button type="button" class="rest long-rest inline-icon-button svelte-1tber6c"><i class="fas fa-hourglass-end"></i></button></div></div>');
function NpcRest($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getNpcSheetContext);
  const localize = FoundryAdapter.localize;
  var div = root$p();
  template_effect(() => set_attribute(div, "title", localize("TIDY5E.RestHint")));
  var div_1 = child(div), button = sibling(child(div_1), 2);
  template_effect(() => set_attribute(button, "title", localize("TIDY5E.ShortRest"))), button.__click = [on_click$8, context];
  var button_1 = sibling(button, 2);
  template_effect(() => set_attribute(button_1, "title", localize("TIDY5E.LongRest"))), button_1.__click = [on_click_1$4, context], template_effect(() => {
    toggle_class(div, "has-rounded-portrait", get(context).useRoundedPortraitStyle), button.disabled = !get(context).editable, set_attribute(button, "tabindex", !settings.value.useDefaultSheetHpTabbing && settings.value.useAccessibleKeyboardSupport ? 0 : -1), button_1.disabled = !get(context).editable, set_attribute(button_1, "tabindex", !settings.value.useDefaultSheetHpTabbing && settings.value.useAccessibleKeyboardSupport ? 0 : -1);
  }), append($$anchor, div), pop();
}
__name(NpcRest, "NpcRest");
delegate(["click"]);
async function rollNpcHp(event2, context) {
  event2.preventDefault();
  const formula = get(context).actor.system.attributes.hp.formula;
  if (!formula) return;
  const hp = (await FoundryAdapter.roll(formula, void 0)).total;
  FoundryAdapter.playDiceSound(), get(context).actor.update({
    "system.attributes.hp.value": hp,
    "system.attributes.hp.max": hp
  });
}
__name(rollNpcHp, "rollNpcHp");
function calcAverageHitDie(event2, context) {
  event2.preventDefault();
  let formula = get(context).actor.system.attributes.hp.formula;
  debug(`tidy5e-npc | activateListeners | formula: ${formula}`);
  const average = FoundryAdapter.calculateAverageFromFormula(formula);
  get(context).actor.update({
    "system.attributes.hp.value": average,
    "system.attributes.hp.max": average
  });
}
__name(calcAverageHitDie, "calcAverageHitDie");
var root$o = /* @__PURE__ */ template('<div class="portrait-hp-formula health svelte-ykxlql"><button type="button" class="roll-hp-formula highlight-on-hover svelte-ykxlql"><i class="fas fa-dice-six"></i></button></div>');
function NpcHealthFormulaRoller($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getNpcSheetContext);
  const localize = FoundryAdapter.localize;
  var div = root$o();
  template_effect(() => set_attribute(div, "title", localize("DND5E.HPFormula")));
  var button = child(div);
  const stringified_text = /* @__PURE__ */ derived(() => localize("DND5E.HitDiceRoll") ?? ""), stringified_text_1 = /* @__PURE__ */ derived(() => localize("TIDY5E.HitDiceRollAverage") ?? "");
  template_effect(() => set_attribute(button, "title", `${get(stringified_text)}/${get(stringified_text_1)}`)), button.__click = [rollNpcHp, context], button.__contextmenu = [calcAverageHitDie, context], template_effect(() => set_attribute(button, "tabindex", !settings.value.useDefaultSheetHpTabbing && settings.value.useAccessibleKeyboardSupport ? 0 : -1)), append($$anchor, div), pop();
}
__name(NpcHealthFormulaRoller, "NpcHealthFormulaRoller");
delegate(["click", "contextmenu"]);
var root_1$d = /* @__PURE__ */ template("<!> <!> <!> <!> <!>", 1), root$n = /* @__PURE__ */ template("<!> <!>", 1);
function NpcProfile($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getNpcSheetContext), incapacitated = /* @__PURE__ */ derived(() => (get(context).actor?.system?.attributes?.hp?.value ?? 0) <= 0 && get(context).actor?.system?.attributes?.hp?.max !== 0);
  async function onLevelSelected(level) {
    await get(context).actor.update({ "system.attributes.exhaustion": level });
  }
  __name(onLevelSelected, "onLevelSelected");
  var fragment = root$n(), node = first_child(fragment);
  ActorProfile(node, {
    get useHpOverlay() {
      return settings.value.useHpOverlayNpc;
    },
    children: /* @__PURE__ */ __name(($$anchor2, $$slotProps) => {
      var fragment_1 = root_1$d(), node_1 = first_child(fragment_1);
      {
        var consequent = /* @__PURE__ */ __name(($$anchor3) => {
          DeathSaves($$anchor3, {
            get hasHpOverlay() {
              return settings.value.useHpOverlayNpc;
            }
          });
        }, "consequent");
        if_block(node_1, ($$render) => {
          get(incapacitated) && get(context).owner && $$render(consequent);
        });
      }
      var node_2 = sibling(node_1, 2);
      {
        var consequent_1 = /* @__PURE__ */ __name(($$anchor3) => {
          var radiusClass = /* @__PURE__ */ derived(() => get(context).useRoundedPortraitStyle ? "rounded" : "top-left"), isActiveEffectApplied = /* @__PURE__ */ derived(() => ActiveEffectsHelper.isActiveEffectAppliedToField(get(context).actor, "system.attributes.exhaustion"));
          ExhaustionTracker($$anchor3, {
            get level() {
              return get(context).system.attributes.exhaustion;
            },
            get radiusClass() {
              return get(radiusClass);
            },
            onLevelSelected,
            get exhaustionConfig() {
              return settings.value.exhaustionConfig;
            },
            get isActiveEffectApplied() {
              return get(isActiveEffectApplied);
            }
          });
        }, "consequent_1"), alternate = /* @__PURE__ */ __name(($$anchor3) => {
          var fragment_4 = comment(), node_3 = first_child(fragment_4);
          {
            var consequent_2 = /* @__PURE__ */ __name(($$anchor4) => {
              var radiusClass_1 = /* @__PURE__ */ derived(() => get(context).useRoundedPortraitStyle ? "rounded" : "top-left"), isActiveEffectApplied_1 = /* @__PURE__ */ derived(() => ActiveEffectsHelper.isActiveEffectAppliedToField(get(context).actor, "system.attributes.exhaustion"));
              ExhaustionInput($$anchor4, {
                get level() {
                  return get(context).system.attributes.exhaustion;
                },
                get radiusClass() {
                  return get(radiusClass_1);
                },
                onLevelSelected,
                get isActiveEffectApplied() {
                  return get(isActiveEffectApplied_1);
                }
              });
            }, "consequent_2");
            if_block(
              node_3,
              ($$render) => {
                settings.value.useExhaustion && settings.value.exhaustionConfig.type === "open" && $$render(consequent_2);
              },
              !0
            );
          }
          append($$anchor3, fragment_4);
        }, "alternate");
        if_block(node_2, ($$render) => {
          settings.value.useExhaustion && settings.value.exhaustionConfig.type === "specific" ? $$render(consequent_1) : $$render(alternate, !1);
        });
      }
      var node_4 = sibling(node_2, 2);
      NpcHitPoints(node_4, {});
      var node_5 = sibling(node_4, 2);
      NpcRest(node_5, {});
      var node_6 = sibling(node_5, 2);
      {
        var consequent_3 = /* @__PURE__ */ __name(($$anchor3) => {
          NpcHealthFormulaRoller($$anchor3, {});
        }, "consequent_3");
        if_block(node_6, ($$render) => {
          get(context).system.details.level || $$render(consequent_3);
        });
      }
      append($$anchor2, fragment_1);
    }, "children"),
    $$slots: { default: !0 }
  });
  var node_7 = sibling(node, 2);
  TempHp(node_7, {}), append($$anchor, fragment), pop();
}
__name(NpcProfile, "NpcProfile");
var root$m = /* @__PURE__ */ template("<div><!></div>");
function DelimitedTruncatedContent($$anchor, $$props) {
  push($$props, !0);
  let delimiter = prop($$props, "delimiter", 3, "<span>&#8226;</span>"), cssClass = prop($$props, "cssClass", 3, null), dynamicStyles = state("");
  function contentWithGridStyles(node) {
    const childrenEntries = Array.from(node.children).entries();
    for (let [index2, el] of childrenEntries) {
      var div = document.createElement("div");
      div.innerHTML = delimiter(), index2 > 0 && div.firstChild && node.insertBefore(div.firstChild, el);
    }
    const nodesLength = node.children.length;
    if (nodesLength) {
      let columns = [];
      for (let i2 = 0; i2 < nodesLength; i2++) {
        const target = node.children[i2], isContentNode = i2 % 2 === 0;
        isContentNode && target.classList.add("truncate");
        const column = isContentNode ? "minmax(auto, min-content)" : "min-content";
        columns.push(column);
      }
      set(dynamicStyles, "grid-template-columns: " + columns.join(" "));
    }
  }
  __name(contentWithGridStyles, "contentWithGridStyles");
  var div_1 = root$m(), node_1 = child(div_1);
  snippet(node_1, () => $$props.children ?? noop), action(div_1, ($$node) => contentWithGridStyles?.($$node)), template_effect(() => {
    set_class(div_1, `delimited-truncated-content ${cssClass() ?? ""} svelte-crs614`), set_attribute(div_1, "style", get(dynamicStyles));
  }), append($$anchor, div_1), pop();
}
__name(DelimitedTruncatedContent, "DelimitedTruncatedContent");
var on_click$7 = /* @__PURE__ */ __name((_, $$props) => FoundryAdapter.renderSourceConfig($$props.document, $$props.keyPath), "on_click$7"), root_1$c = /* @__PURE__ */ template('<button type="button" class="configure-source inline-transparent-button highlight-on-hover truncate svelte-5gbao"> </button>'), root_2$3 = /* @__PURE__ */ template('<span class="source-label truncate svelte-5gbao"> </span>');
function InlineSource($$anchor, $$props) {
  push($$props, !0);
  let source2 = /* @__PURE__ */ derived(() => FoundryAdapter.getProperty($$props.document, $$props.keyPath)), text2 = /* @__PURE__ */ derived(() => isNil(get(source2)?.label, "") ? "Source" : get(source2).label), usePlaceholder = /* @__PURE__ */ derived(() => isNil(get(source2)?.label, ""));
  var fragment = comment(), node = first_child(fragment);
  {
    var consequent = /* @__PURE__ */ __name(($$anchor2) => {
      var button = root_1$c();
      button.__click = [on_click$7, $$props];
      var text_1 = child(button);
      template_effect(() => {
        set_attribute(button, "tabindex", settings.value.useAccessibleKeyboardSupport ? 0 : -1), toggle_class(button, "placeholder", get(usePlaceholder)), set_text(text_1, get(text2));
      }), append($$anchor2, button);
    }, "consequent"), alternate = /* @__PURE__ */ __name(($$anchor2) => {
      var span = root_2$3(), text_2 = child(span);
      template_effect(() => {
        set_attribute(span, "title", get(text2)), toggle_class(span, "placeholder", get(usePlaceholder)), set_text(text_2, get(text2));
      }), append($$anchor2, span);
    }, "alternate");
    if_block(node, ($$render) => {
      $$props.editable ? $$render(consequent) : $$render(alternate, !1);
    });
  }
  append($$anchor, fragment), pop();
}
__name(InlineSource, "InlineSource");
delegate(["click"]);
var on_click$6 = /* @__PURE__ */ __name((_, tryUnlink) => tryUnlink(), "on_click$6"), root_1$b = /* @__PURE__ */ template('<a class="link-state-button svelte-1gxu315"><i class="link-state fas fa-link svelte-1gxu315"></i></a>'), on_click_1$3 = /* @__PURE__ */ __name((__1, canLink, tryLink) => get(canLink) && tryLink(), "on_click_1$3"), root_3$5 = /* @__PURE__ */ template('<a class="link-state-button svelte-1gxu315"><i class="link-state fas fa-unlink svelte-1gxu315"></i></a>');
function ActorLinkIndicator($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getNpcSheetContext), isLinked = /* @__PURE__ */ derived(() => get(context).actor.token?.actorLink ?? get(context).actor.prototypeToken.actorLink), showUnlinked = /* @__PURE__ */ derived(() => ["unlinked", "both"].includes(settings.value.showNpcActorLinkMarker)), showLinked = /* @__PURE__ */ derived(() => settings.value.showNpcActorLinkMarker === "both");
  async function togglePrototypeLinkState() {
    const isNowLinked = get(context).actor.prototypeToken.actorLink;
    await get(context).actor.prototypeToken.update({ actorLink: !isNowLinked });
  }
  __name(togglePrototypeLinkState, "togglePrototypeLinkState");
  async function tryUnlink() {
    if (get(context).actor.sheet.token) {
      await get(context).actor.sheet.token.update({ actorLink: !1 });
      const newToken = get(context).actor.sheet.token;
      await get(context).actor.sheet.close(), newToken.actor.sheet.render(!0);
    } else
      await togglePrototypeLinkState();
  }
  __name(tryUnlink, "tryUnlink");
  async function tryLink() {
    await togglePrototypeLinkState();
  }
  __name(tryLink, "tryLink");
  let canLink = /* @__PURE__ */ derived(() => !get(context).actor.token);
  const localize = FoundryAdapter.localize;
  var fragment = comment(), node = first_child(fragment);
  {
    var consequent = /* @__PURE__ */ __name(($$anchor2) => {
      var a2 = root_1$b();
      a2.__click = [on_click$6, tryUnlink];
      var i2 = child(a2);
      template_effect(() => set_attribute(i2, "title", localize("TIDY5E.TokenLinked"))), template_effect(() => toggle_class(a2, "disabled", !get(context).unlocked)), append($$anchor2, a2);
    }, "consequent"), alternate = /* @__PURE__ */ __name(($$anchor2) => {
      var fragment_1 = comment(), node_1 = first_child(fragment_1);
      {
        var consequent_1 = /* @__PURE__ */ __name(($$anchor3) => {
          var a_1 = root_3$5();
          a_1.__click = [on_click_1$3, canLink, tryLink];
          var i_1 = child(a_1);
          template_effect(() => set_attribute(i_1, "title", localize("TIDY5E.TokenUnlinked"))), template_effect(() => toggle_class(a_1, "disabled", !get(context).unlocked || !get(canLink))), append($$anchor3, a_1);
        }, "consequent_1");
        if_block(
          node_1,
          ($$render) => {
            get(showUnlinked) && !get(isLinked) && $$render(consequent_1);
          },
          !0
        );
      }
      append($$anchor2, fragment_1);
    }, "alternate");
    if_block(node, ($$render) => {
      get(showLinked) && get(isLinked) ? $$render(consequent) : $$render(alternate, !1);
    });
  }
  append($$anchor, fragment), pop();
}
__name(ActorLinkIndicator, "ActorLinkIndicator");
delegate(["click"]);
var root_3$4 = /* @__PURE__ */ template('<span class="challenge-rating-label svelte-1qknk79"> </span>'), root_5$2 = /* @__PURE__ */ template("<span> </span>"), root_8$4 = /* @__PURE__ */ template('<span class="environment"><i class="fas fa-tree"></i></span>'), root_7$2 = /* @__PURE__ */ template('<span class="flex-row extra-small-gap align-items-center"><!> <!></span> <span class="origin-summary-text"> </span> <!>', 1), on_click$5 = /* @__PURE__ */ __name((_, context) => new ActorOriginSummaryConfigFormApplication(get(context).actor).render(!0), "on_click$5"), root_9$3 = /* @__PURE__ */ template('<button type="button" class="origin-summary-tidy inline-icon-button"><i class="fas fa-cog"></i></button>'), root$l = /* @__PURE__ */ template('<!> <header class="svelte-1qknk79"><div class="flex-0"><!></div> <div class="flex-grow-1"><div class="actor-name-row flex-row justify-content-space-between align-items-center small-gap svelte-1qknk79"><!> <div class="actor-name"><!></div> <div class="level-information svelte-1qknk79"><div class="xp svelte-1qknk79"><span> </span></div> <div class="challenge-rating svelte-1qknk79"><label class="challenge-rating-label svelte-1qknk79"> </label> <!></div> <!></div></div> <!> <div class="origin-summary svelte-1qknk79"><div class="flex-row extra-small-gap"><!> <span>&#8226;</span> <!></div> <div class="flex-row align-items-center extra-small-gap"><b class="proficiency svelte-1qknk79"> </b> <!></div></div> <!> <div class="flex-row extra-small-gap justify-content-space-between header-line-margin"><!> <!></div> <!> <!></div></header> <!> <section class="tidy-sheet-body"><!></section>', 1);
function NpcSheetFull($$anchor, $$props) {
  push($$props, !0);
  let selectedTabId = state(""), context = /* @__PURE__ */ derived(getNpcSheetContext), sizes = /* @__PURE__ */ derived(() => Object.entries(get(context).config.actorSizes).map(([abbreviation, size]) => ({ value: abbreviation, text: size.label }))), currentSize = /* @__PURE__ */ derived(() => ({
    value: get(context).system.traits.size,
    text: get(context).config.actorSizes[get(context).system.traits.size]?.label
  })), abilities = /* @__PURE__ */ derived(() => Object.entries(get(context).abilities));
  const localize = FoundryAdapter.localize;
  let formattedCr = /* @__PURE__ */ derived(() => dnd5e.utils.formatCR(get(context).system.details.cr));
  function calculateSaveCr(crValue) {
    const crs = {
      "1/8": 0.125,
      "⅛": 0.125,
      "1/4": 0.25,
      "¼": 0.25,
      "1/2": 0.5,
      "½": 0.5
    };
    let cr = crValue;
    return cr === "" || cr === "—" ? cr = null : (cr = crs[cr] || parseFloat(cr), Number.isNaN(cr) ? cr = null : cr = cr < 1 ? cr : parseInt(cr.toString())), get(context).actor.update({ "system.details.cr": cr }), !1;
  }
  __name(calculateSaveCr, "calculateSaveCr");
  var fragment = root$l(), node = first_child(fragment);
  {
    var consequent = /* @__PURE__ */ __name(($$anchor2) => {
      ActorWarnings($$anchor2, {
        get warnings() {
          return get(context).viewableWarnings;
        }
      });
    }, "consequent");
    if_block(node, ($$render) => {
      get(context).viewableWarnings.length && $$render(consequent);
    });
  }
  var header = sibling(node, 2), div = child(header), node_1 = child(div);
  NpcProfile(node_1, {});
  var div_1 = sibling(div, 2), div_2 = child(div_1), node_2 = child(div_2);
  ActorLinkIndicator(node_2, {});
  var div_3 = sibling(node_2, 2), node_3 = child(div_3);
  ActorName(node_3, {});
  var div_4 = sibling(div_3, 2), div_5 = child(div_4), span = child(div_5), text2 = child(span);
  template_effect(() => set_text(text2, localize("DND5E.ExperiencePointsFormat", {
    value: get(context).system.details.xp.value ?? 0
  })));
  var div_6 = sibling(div_5, 2);
  template_effect(() => set_attribute(div_6, "aria-label", localize("DND5E.CRLabel", { cr: get(context).system.details.cr }))), template_effect(() => set_attribute(div_6, "title", get(context).unlocked ? "" : localize("DND5E.ChallengeRating")));
  var label = child(div_6), text_1 = child(label);
  template_effect(() => set_text(text_1, localize("DND5E.AbbreviationCR")));
  var node_4 = sibling(label, 2);
  {
    var consequent_1 = /* @__PURE__ */ __name(($$anchor2) => {
      var title = /* @__PURE__ */ derived(() => localize("DND5E.ChallengeRating"));
      TextInput($$anchor2, {
        get document() {
          return get(context).actor;
        },
        get value() {
          return get(formattedCr);
        },
        field: "system.details.cr",
        class: "challenge-rating-input",
        selectOnFocus: !0,
        get title() {
          return get(title);
        },
        get id() {
          return `${get(context).appId ?? ""}-system-details-cr`;
        },
        onSaveChange: /* @__PURE__ */ __name((ev) => calculateSaveCr(ev.currentTarget.value), "onSaveChange")
      });
    }, "consequent_1"), alternate = /* @__PURE__ */ __name(($$anchor2) => {
      var span_1 = root_3$4(), text_2 = child(span_1);
      template_effect(() => set_text(text_2, get(formattedCr))), append($$anchor2, span_1);
    }, "alternate");
    if_block(node_4, ($$render) => {
      get(context).unlocked ? $$render(consequent_1) : $$render(alternate, !1);
    });
  }
  var node_5 = sibling(div_6, 2);
  SheetMenu(node_5, {
    get defaultSettingsTab() {
      return CONSTANTS.TAB_USER_SETTINGS_NPCS;
    }
  });
  var node_6 = sibling(div_2, 2);
  HorizontalLineSeparator(node_6, {
    borderColor: "light",
    class: "header-line-margin-left"
  });
  var div_7 = sibling(node_6, 2), div_8 = child(div_7), node_7 = child(div_8);
  {
    var consequent_2 = /* @__PURE__ */ __name(($$anchor2) => {
      var title_1 = /* @__PURE__ */ derived(() => localize("DND5E.Size"));
      InlineTextDropdownList($$anchor2, {
        get options() {
          return get(sizes);
        },
        get selected() {
          return get(currentSize);
        },
        onOptionClicked: /* @__PURE__ */ __name((option) => get(context).actor.update({ "system.traits.size": option.value }), "onOptionClicked"),
        get title() {
          return get(title_1);
        }
      });
    }, "consequent_2"), alternate_1 = /* @__PURE__ */ __name(($$anchor2) => {
      var span_2 = root_5$2();
      template_effect(() => set_attribute(span_2, "title", localize("DND5E.Size")));
      var text_3 = child(span_2);
      template_effect(() => set_text(text_3, get(currentSize).text)), append($$anchor2, span_2);
    }, "alternate_1");
    if_block(node_7, ($$render) => {
      get(context).editable ? $$render(consequent_2) : $$render(alternate_1, !1);
    });
  }
  var node_8 = sibling(node_7, 4);
  key_block(node_8, () => get(context).lockSensitiveFields, ($$anchor2) => {
    DelimitedTruncatedContent($$anchor2, {
      cssClass: "flex-grow-1",
      children: /* @__PURE__ */ __name(($$anchor3, $$slotProps) => {
        var fragment_5 = root_7$2(), span_3 = first_child(fragment_5), node_9 = child(span_3);
        InlineCreatureType(node_9, {});
        var node_10 = sibling(node_9, 2);
        {
          var consequent_3 = /* @__PURE__ */ __name(($$anchor4) => {
            var span_4 = root_8$4();
            template_effect(() => set_attribute(span_4, "title", localize("TIDY5E.EnvironmentTooltip", {
              environment: get(context).system.details.environment
            }))), append($$anchor4, span_4);
          }, "consequent_3");
          if_block(node_10, ($$render) => {
            isNil(get(context).system.details.environment, "") || $$render(consequent_3);
          });
        }
        var span_5 = sibling(span_3, 2), text_4 = child(span_5), node_11 = sibling(span_5, 2);
        InlineSource(node_11, {
          get document() {
            return get(context).actor;
          },
          keyPath: "system.source",
          get editable() {
            return get(context).unlocked;
          }
        }), template_effect(() => {
          set_attribute(span_5, "title", get(context).system.details.alignment), set_text(text_4, get(context).system.details.alignment);
        }), append($$anchor3, fragment_5);
      }, "children"),
      $$slots: { default: !0 }
    });
  });
  var div_9 = sibling(div_8, 2), b2 = child(div_9);
  const stringified_text = /* @__PURE__ */ derived(() => localize("DND5E.Proficiency") ?? ""), stringified_text_1 = /* @__PURE__ */ derived(() => formatAsModifier(get(context).system.attributes.prof) ?? "");
  var text_5 = child(b2);
  template_effect(() => set_text(text_5, `${get(stringified_text)}: ${get(stringified_text_1)}`));
  var node_12 = sibling(b2, 2);
  {
    var consequent_4 = /* @__PURE__ */ __name(($$anchor2) => {
      var button = root_9$3();
      button.__click = [on_click$5, context], template_effect(() => set_attribute(button, "title", localize("TIDY5E.OriginSummaryConfig"))), template_effect(() => set_attribute(button, "tabindex", settings.value.useAccessibleKeyboardSupport ? 0 : -1)), append($$anchor2, button);
    }, "consequent_4");
    if_block(node_12, ($$render) => {
      get(context).unlocked && $$render(consequent_4);
    });
  }
  var node_13 = sibling(div_7, 2);
  HorizontalLineSeparator(node_13, {
    borderColor: "light",
    class: "header-line-margin-left"
  });
  var div_10 = sibling(node_13, 2), node_14 = child(div_10);
  ActorMovement(node_14, { class: "flex-1" });
  var node_15 = sibling(node_14, 2);
  {
    var consequent_5 = /* @__PURE__ */ __name(($$anchor2) => {
      SpecialSaves($$anchor2, {});
    }, "consequent_5");
    if_block(node_15, ($$render) => {
      get(context).hasSpecialSaves && $$render(consequent_5);
    });
  }
  var node_16 = sibling(div_10, 2);
  HorizontalLineSeparator(node_16, {
    borderColor: "light",
    class: "header-line-margin-left"
  });
  var node_17 = sibling(node_16, 2);
  ActorHeaderStats(node_17, {
    get abilities() {
      return get(abilities);
    },
    get ac() {
      return get(context).system.attributes.ac;
    },
    get init() {
      return get(context).system.attributes.init;
    }
  });
  var node_18 = sibling(header, 2);
  Tabs(node_18, {
    get tabs() {
      return get(context).tabs;
    },
    get sheet() {
      return get(context).actor.sheet;
    },
    get selectedTabId() {
      return get(selectedTabId);
    },
    set selectedTabId($$value) {
      set(selectedTabId, proxy($$value));
    },
    tabEnd: /* @__PURE__ */ __name(($$anchor2) => {
      var fragment_7 = comment(), node_19 = first_child(fragment_7);
      {
        var consequent_6 = /* @__PURE__ */ __name(($$anchor3) => {
          var hint = /* @__PURE__ */ derived(() => settings.value.permanentlyUnlockNpcSheetForGm && FoundryAdapter.userIsGm() ? localize("TIDY5E.Settings.PermanentlyUnlockNPCSheetForGM.title") : null);
          SheetEditModeToggle($$anchor3, {
            get hint() {
              return get(hint);
            }
          });
        }, "consequent_6");
        if_block(node_19, ($$render) => {
          get(context).editable && $$render(consequent_6);
        });
      }
      append($$anchor2, fragment_7);
    }, "tabEnd"),
    $$slots: { tabEnd: !0 }
  });
  var section = sibling(node_18, 2), node_20 = child(section);
  TabContents(node_20, {
    get tabs() {
      return get(context).tabs;
    },
    get selectedTabId() {
      return get(selectedTabId);
    }
  }), template_effect(() => {
    set_attribute(div_2, "data-tidy-sheet-part", CONSTANTS.SHEET_PARTS.NAME_HEADER_ROW), set_attribute(div_3, "data-tidy-sheet-part", CONSTANTS.SHEET_PARTS.NAME_CONTAINER), set_attribute(label, "for", `${get(context).appId ?? ""}-system-details-cr`);
  }), append($$anchor, fragment), pop();
}
__name(NpcSheetFull, "NpcSheetFull");
delegate(["click"]);
var root_1$a = /* @__PURE__ */ template('<article class="appearance-notes svelte-1mpy67c"><div class="section-titles biopage"> </div> <!></article> <article class="biography-notes svelte-1mpy67c"><div class="section-titles"> </div> <!></article>', 1), root$k = /* @__PURE__ */ template('<div class="limited-npc svelte-1mpy67c"><!> <section class="tidy-sheet-body svelte-1mpy67c"><div class="note-entries svelte-1mpy67c"><!></div></section></div>');
function NpcSheetLimited($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getNpcSheetContext);
  const localize = FoundryAdapter.localize;
  var div = root$k(), node = child(div);
  LimitedHeader(node, {
    get rounded() {
      return get(context).useRoundedPortraitStyle;
    }
  });
  var section = sibling(node, 2), div_1 = child(section), node_1 = child(div_1);
  RerenderAfterFormSubmission(node_1, {
    get andOnValueChange() {
      return get(context).system.details.biography.value;
    },
    children: /* @__PURE__ */ __name(($$anchor2, $$slotProps) => {
      var fragment = root_1$a(), article = first_child(fragment), div_2 = child(article), text2 = child(div_2);
      template_effect(() => set_text(text2, localize("DND5E.Appearance")));
      var node_2 = sibling(div_2, 2), content = /* @__PURE__ */ derived(() => TidyFlags.appearance.get(get(context).actor) ?? "");
      SheetEditor(node_2, {
        get content() {
          return get(content);
        },
        get target() {
          return TidyFlags.appearance.prop;
        },
        get editable() {
          return get(context).editable;
        }
      }), action(article, ($$node) => get(context).activateEditors?.($$node));
      var article_1 = sibling(article, 2), div_3 = child(article_1);
      const stringified_text = /* @__PURE__ */ derived(() => localize("DND5E.Background") ?? ""), stringified_text_1 = /* @__PURE__ */ derived(() => localize("DND5E.Biography") ?? "");
      var text_1 = child(div_3);
      template_effect(() => set_text(text_1, `${get(stringified_text)}/${get(stringified_text_1)}`));
      var node_3 = sibling(div_3, 2);
      SheetEditor(node_3, {
        get content() {
          return get(context).biographyHTML;
        },
        target: "system.details.biography.value",
        get editable() {
          return get(context).editable;
        }
      }), action(article_1, ($$node) => get(context).activateEditors?.($$node)), append($$anchor2, fragment);
    }, "children"),
    $$slots: { default: !0 }
  }), append($$anchor, div), pop();
}
__name(NpcSheetLimited, "NpcSheetLimited");
function NpcSheet($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getNpcSheetContext);
  var fragment = comment(), node = first_child(fragment);
  {
    var consequent = /* @__PURE__ */ __name(($$anchor2) => {
      NpcSheetLimited($$anchor2, {});
    }, "consequent"), alternate = /* @__PURE__ */ __name(($$anchor2) => {
      NpcSheetFull($$anchor2, {});
    }, "alternate");
    if_block(node, ($$render) => {
      get(context).showLimitedSheet ? $$render(consequent) : $$render(alternate, !1);
    });
  }
  append($$anchor, fragment), pop();
}
__name(NpcSheet, "NpcSheet");
class NpcSheetSections {
  static {
    __name(this, "NpcSheetSections");
  }
  static get abilitiesItemTypes() {
    return [
      CONSTANTS.ITEM_TYPE_WEAPON,
      CONSTANTS.ITEM_TYPE_EQUIPMENT,
      CONSTANTS.ITEM_TYPE_TOOL,
      CONSTANTS.ITEM_TYPE_CONTAINER,
      CONSTANTS.ITEM_TYPE_LOOT,
      CONSTANTS.ITEM_TYPE_FEAT
    ];
  }
  static applyAbilityToSection(abilities, feat, customSectionOptions) {
    const customSectionName = TidyFlags.section.get(feat);
    if (!customSectionName)
      return;
    (abilities[customSectionName] ??= {
      label: customSectionName,
      items: [],
      hasActions: !0,
      key: customSectionName,
      dataset: {
        [TidyFlags.section.prop]: customSectionName
      },
      canCreate: !0,
      custom: {
        section: customSectionName,
        creationItemTypes: NpcSheetSections.abilitiesItemTypes
      },
      show: !0,
      ...customSectionOptions
    }).items.push(feat);
  }
}
class Tidy5eNpcSheet extends BaseSheetCustomSectionMixin((object) => object.items, dnd5e.applications.actor.ActorSheet5eNPC) {
  static {
    __name(this, "Tidy5eNpcSheet");
  }
  context = new CoarseReactivityProvider(void 0);
  #stats = state(proxy({ lastSubmissionTime: null }));
  get stats() {
    return get(this.#stats);
  }
  set stats(value) {
    set(this.#stats, proxy(value));
  }
  currentTabId;
  searchFilters = /* @__PURE__ */ new Map();
  expandedItems = /* @__PURE__ */ new Map();
  expandedItemData = /* @__PURE__ */ new Map();
  inlineToggleService = new InlineToggleService();
  itemTableTogglesCache;
  itemFilterService;
  #messageBus = state(proxy({ message: void 0 }));
  get messageBus() {
    return get(this.#messageBus);
  }
  set messageBus(value) {
    set(this.#messageBus, proxy(value));
  }
  /**
   * The cached concentration information for the character.
   * @type {{items: Set<Item5e>, effects: Set<ActiveEffect5e>}}
   * @internal
   */
  _concentration = {
    items: /* @__PURE__ */ new Set(),
    effects: /* @__PURE__ */ new Set()
  };
  constructor(...args) {
    super(...args), this.itemTableTogglesCache = new ItemTableToggleCacheService({
      userId: game.user.id,
      documentId: this.actor.id
    }), this.itemFilterService = new ItemFilterService({}, this.actor), this.currentTabId = settings.value.initialNpcSheetTab;
  }
  get template() {
    return FoundryAdapter.getTemplate("empty-form-template.hbs");
  }
  static get defaultOptions() {
    return FoundryAdapter.mergeObject(super.defaultOptions, {
      classes: [
        CONSTANTS.MODULE_ID,
        "sheet",
        "actor",
        CONSTANTS.SHEET_TYPE_NPC,
        CONSTANTS.SHEET_LAYOUT_CLASSIC,
        "app-v1"
      ],
      width: 740,
      height: 810,
      scrollY: [
        "[data-tidy-track-scroll-y]",
        ".scroll-container"
      ]
    });
  }
  component;
  additionalComponents = [];
  _effectCleanup;
  activateListeners(html2) {
    game.user.apps[this.id] = this;
    let first = !0;
    this._effectCleanup = effect_root(() => {
      user_effect(() => {
        first || (applyMutableSettingAttributesToWindow(settings.value, this.element.get(0)), this.render());
      }), user_effect(() => {
        debug("Message bus message received", {
          app: this,
          actor: this.actor,
          message: this.messageBus
        });
      });
    }), first = !1;
    const node = html2.get(0);
    this.component = mount(NpcSheet, {
      target: node,
      context: /* @__PURE__ */ new Map([
        [CONSTANTS.SVELTE_CONTEXT.APP_ID, this.appId],
        [
          CONSTANTS.SVELTE_CONTEXT.CONTEXT,
          this.context
        ],
        [
          CONSTANTS.SVELTE_CONTEXT.MESSAGE_BUS,
          this.messageBus
        ],
        [CONSTANTS.SVELTE_CONTEXT.STATS, this.stats],
        [
          CONSTANTS.SVELTE_CONTEXT.CURRENT_TAB_ID,
          this.currentTabId
        ],
        [
          CONSTANTS.SVELTE_CONTEXT.INLINE_TOGGLE_SERVICE,
          this.inlineToggleService
        ],
        [
          CONSTANTS.SVELTE_CONTEXT.ITEM_FILTER_SERVICE,
          this.itemFilterService
        ],
        [
          CONSTANTS.SVELTE_CONTEXT.ON_TAB_SELECTED,
          this.onTabSelected.bind(this)
        ],
        [
          CONSTANTS.SVELTE_CONTEXT.ON_ITEM_TOGGLED,
          this.onItemToggled.bind(this)
        ],
        [
          CONSTANTS.SVELTE_CONTEXT.SEARCH_FILTERS,
          new Map(this.searchFilters)
        ],
        [
          CONSTANTS.SVELTE_CONTEXT.ON_FILTER,
          this.itemFilterService.onFilter.bind(this.itemFilterService)
        ],
        [
          CONSTANTS.SVELTE_CONTEXT.ON_FILTER_CLEAR_ALL,
          this.itemFilterService.onFilterClearAll.bind(this.itemFilterService)
        ],
        [
          CONSTANTS.SVELTE_CONTEXT.ON_SEARCH,
          this.onSearch.bind(this)
        ],
        [CONSTANTS.SVELTE_CONTEXT.LOCATION, ""],
        [
          CONSTANTS.SVELTE_CONTEXT.EXPANDED_ITEMS,
          new Map(this.expandedItems)
        ],
        [
          CONSTANTS.SVELTE_CONTEXT.EXPANDED_ITEM_DATA,
          new Map(this.expandedItemData)
        ],
        [
          CONSTANTS.SVELTE_CONTEXT.ITEM_TABLE_TOGGLES,
          new Map(this.itemTableTogglesCache.itemTableToggles)
        ],
        [
          CONSTANTS.SVELTE_CONTEXT.ON_ITEM_TABLE_TOGGLE,
          this.itemTableTogglesCache.onItemTableToggle.bind(this.itemTableTogglesCache)
        ]
      ])
    });
    const infoCard = mount(AttachedInfoCard, { target: node, props: { sheet: this } });
    this.additionalComponents.push(infoCard), initTidy5eContextMenu(this, html2), FoundryAdapter.createContextMenu(html2, ".activity[data-activity-id]", [], {
      onOpen: /* @__PURE__ */ __name((element2) => {
        const itemId = element2.closest("[data-item-id]")?.dataset.itemId, item = this.document.type === "container" ? this.document.system.getContainedItem(itemId) : this.document.items.get(itemId);
        !item || item instanceof Promise || element2.closest("[data-activity-id]") && dnd5e.documents.activity.UtilityActivity.onContextMenu(item, element2);
      }, "onOpen")
    });
  }
  async getData(options = {}) {
    this._concentration = this.actor.concentration;
    const defaultDocumentContext = await super.getData(this.options);
    Tidy5eBaseActorSheet.applyCommonContext(defaultDocumentContext);
    const npcPreferences = SheetPreferencesService.getByType(this.actor.type), abilitiesSortMode = npcPreferences.tabs?.[CONSTANTS.TAB_NPC_ABILITIES]?.sort ?? "m", spellbookSortMode = npcPreferences.tabs?.[CONSTANTS.TAB_NPC_SPELLBOOK]?.sort ?? "m", actionListSortMode = npcPreferences.tabs?.[CONSTANTS.TAB_ACTOR_ACTIONS]?.sort ?? "m", inventorySortMode = npcPreferences.tabs?.[CONSTANTS.TAB_ACTOR_INVENTORY]?.sort ?? "m", unlocked = FoundryAdapter.isSheetUnlocked(this.actor) && defaultDocumentContext.editable, lockSensitiveFields = !unlocked && settings.value.useTotalSheetLock || !defaultDocumentContext.editable, showLegendaryToolbarFlagValue = TidyFlags.showLegendaryToolbar.get(this.actor), res = this.actor.system.resources, showLegendaryToolbar = showLegendaryToolbarFlagValue === !0 || showLegendaryToolbarFlagValue === void 0 && ((res.legact?.max ?? 0) > 0 || (res.legres?.max ?? 0) > 0 || res.lair?.value === !0 || res.lair?.initiative !== null);
    let utilities = {
      [CONSTANTS.TAB_NPC_ABILITIES]: {
        utilityToolbarCommands: [
          {
            title: FoundryAdapter.localize("TIDY5E.Commands.ShowLegendaryToolbar"),
            iconClass: "ra ra-player",
            execute: /* @__PURE__ */ __name(async () => {
              await TidyFlags.showLegendaryToolbar.set(this.actor, !0);
            }, "execute"),
            visible: !showLegendaryToolbar
          },
          {
            title: FoundryAdapter.localize("TIDY5E.Commands.HideLegendaryToolbar"),
            iconClass: "ra ra-monster-skull",
            execute: /* @__PURE__ */ __name(async () => {
              await TidyFlags.showLegendaryToolbar.set(this.actor, !1);
            }, "execute"),
            visible: showLegendaryToolbar
          },
          {
            title: FoundryAdapter.localize("SIDEBAR.SortModeAlpha"),
            iconClass: "fa-solid fa-arrow-down-a-z fa-fw",
            execute: /* @__PURE__ */ __name(async () => {
              await SheetPreferencesService.setDocumentTypeTabPreference(this.actor.type, CONSTANTS.TAB_NPC_ABILITIES, "sort", "m");
            }, "execute"),
            visible: abilitiesSortMode === "a"
          },
          {
            title: FoundryAdapter.localize("SIDEBAR.SortModeManual"),
            iconClass: "fa-solid fa-arrow-down-short-wide fa-fw",
            execute: /* @__PURE__ */ __name(async () => {
              await SheetPreferencesService.setDocumentTypeTabPreference(this.actor.type, CONSTANTS.TAB_NPC_ABILITIES, "sort", "a");
            }, "execute"),
            visible: abilitiesSortMode === "m"
          },
          {
            title: "Spell Pips",
            iconClass: "fa-regular fa-circle-dot fa-fw",
            execute: /* @__PURE__ */ __name(async () => {
              await SheetPreferencesService.setDocumentTypePreference(this.actor.type, CONSTANTS.SPELL_SLOT_TRACKER_MODE_PREFERENCE, CONSTANTS.SPELL_SLOT_TRACKER_MODE_VALUE_MAX);
            }, "execute"),
            visible: !settings.value.showSpellbookTabNpc && (npcPreferences?.spellSlotTrackerMode ?? CONSTANTS.SPELL_SLOT_TRACKER_MODE_PIPS) === CONSTANTS.SPELL_SLOT_TRACKER_MODE_PIPS
          },
          {
            title: "Spell Value/Max",
            iconClass: "fa-regular fa-square fa-fw",
            execute: /* @__PURE__ */ __name(async () => {
              await SheetPreferencesService.setDocumentTypePreference(this.actor.type, CONSTANTS.SPELL_SLOT_TRACKER_MODE_PREFERENCE, CONSTANTS.SPELL_SLOT_TRACKER_MODE_PIPS);
            }, "execute"),
            visible: !settings.value.showSpellbookTabNpc && npcPreferences?.spellSlotTrackerMode === CONSTANTS.SPELL_SLOT_TRACKER_MODE_VALUE_MAX
          },
          {
            title: FoundryAdapter.localize("TIDY5E.Commands.ExpandAll"),
            iconClass: "fas fa-angles-down",
            execute: /* @__PURE__ */ __name(() => (
              // TODO: Use app.messageBus
              this.messageBus.message = {
                tabId: CONSTANTS.TAB_NPC_ABILITIES,
                message: CONSTANTS.MESSAGE_BUS_EXPAND_ALL
              }
            ), "execute")
          },
          {
            title: FoundryAdapter.localize("TIDY5E.Commands.CollapseAll"),
            iconClass: "fas fa-angles-up",
            execute: /* @__PURE__ */ __name(() => (
              // TODO: Use app.messageBus
              this.messageBus.message = {
                tabId: CONSTANTS.TAB_NPC_ABILITIES,
                message: CONSTANTS.MESSAGE_BUS_COLLAPSE_ALL
              }
            ), "execute")
          },
          {
            title: FoundryAdapter.localize("TIDY5E.Utilities.ConfigureSections"),
            iconClass: "fas fa-cog",
            execute: /* @__PURE__ */ __name(({ context: context2, sections }) => {
              new DocumentTabSectionConfigApplication({
                document: context2.actor,
                sections,
                tabId: CONSTANTS.TAB_NPC_ABILITIES,
                tabTitle: NpcSheetRuntime.getTabTitle(CONSTANTS.TAB_NPC_ABILITIES)
              }).render(!0);
            }, "execute")
          }
        ]
      },
      [CONSTANTS.TAB_NPC_SPELLBOOK]: {
        utilityToolbarCommands: [
          {
            title: FoundryAdapter.localize("SIDEBAR.SortModeAlpha"),
            iconClass: "fa-solid fa-arrow-down-a-z fa-fw",
            execute: /* @__PURE__ */ __name(async () => {
              await SheetPreferencesService.setDocumentTypeTabPreference(this.actor.type, CONSTANTS.TAB_NPC_SPELLBOOK, "sort", "m");
            }, "execute"),
            visible: spellbookSortMode === "a"
          },
          {
            title: FoundryAdapter.localize("SIDEBAR.SortModeManual"),
            iconClass: "fa-solid fa-arrow-down-short-wide fa-fw",
            execute: /* @__PURE__ */ __name(async () => {
              await SheetPreferencesService.setDocumentTypeTabPreference(this.actor.type, CONSTANTS.TAB_NPC_SPELLBOOK, "sort", "a");
            }, "execute"),
            visible: spellbookSortMode === "m"
          },
          {
            title: "Spell Pips",
            iconClass: "fa-regular fa-circle-dot fa-fw",
            execute: /* @__PURE__ */ __name(async () => {
              await SheetPreferencesService.setDocumentTypePreference(this.actor.type, CONSTANTS.SPELL_SLOT_TRACKER_MODE_PREFERENCE, CONSTANTS.SPELL_SLOT_TRACKER_MODE_VALUE_MAX);
            }, "execute"),
            visible: (npcPreferences?.spellSlotTrackerMode ?? CONSTANTS.SPELL_SLOT_TRACKER_MODE_PIPS) === CONSTANTS.SPELL_SLOT_TRACKER_MODE_PIPS
          },
          {
            title: "Spell Value/Max",
            iconClass: "fa-regular fa-square fa-fw",
            execute: /* @__PURE__ */ __name(async () => {
              await SheetPreferencesService.setDocumentTypePreference(this.actor.type, CONSTANTS.SPELL_SLOT_TRACKER_MODE_PREFERENCE, CONSTANTS.SPELL_SLOT_TRACKER_MODE_PIPS);
            }, "execute"),
            visible: npcPreferences?.spellSlotTrackerMode === CONSTANTS.SPELL_SLOT_TRACKER_MODE_VALUE_MAX
          },
          {
            title: FoundryAdapter.localize("TIDY5E.Commands.ExpandAll"),
            iconClass: "fas fa-angles-down",
            execute: /* @__PURE__ */ __name(() => (
              // TODO: Use app.messageBus
              this.messageBus.message = {
                tabId: CONSTANTS.TAB_NPC_SPELLBOOK,
                message: CONSTANTS.MESSAGE_BUS_EXPAND_ALL
              }
            ), "execute")
          },
          {
            title: FoundryAdapter.localize("TIDY5E.Commands.CollapseAll"),
            iconClass: "fas fa-angles-up",
            execute: /* @__PURE__ */ __name(() => (
              // TODO: Use app.messageBus
              this.messageBus.message = {
                tabId: CONSTANTS.TAB_NPC_SPELLBOOK,
                message: CONSTANTS.MESSAGE_BUS_COLLAPSE_ALL
              }
            ), "execute")
          },
          {
            title: FoundryAdapter.localize("TIDY5E.ListLayout"),
            iconClass: "fas fa-th-list fa-fw toggle-list",
            visible: !TidyFlags.spellbookGrid.get(this.actor),
            execute: /* @__PURE__ */ __name(() => {
              TidyFlags.spellbookGrid.set(this.actor);
            }, "execute")
          },
          {
            title: FoundryAdapter.localize("TIDY5E.GridLayout"),
            iconClass: "fas fa-th-large fa-fw toggle-grid",
            visible: !!TidyFlags.spellbookGrid.get(this.actor),
            execute: /* @__PURE__ */ __name(() => {
              TidyFlags.spellbookGrid.unset(this.actor);
            }, "execute")
          },
          {
            title: FoundryAdapter.localize("TIDY5E.Utilities.ConfigureSections"),
            iconClass: "fas fa-cog",
            execute: /* @__PURE__ */ __name(({ context: context2, sections }) => {
              new DocumentTabSectionConfigApplication({
                document: context2.actor,
                sections,
                tabId: CONSTANTS.TAB_NPC_SPELLBOOK,
                tabTitle: NpcSheetRuntime.getTabTitle(CONSTANTS.TAB_NPC_SPELLBOOK)
              }).render(!0);
            }, "execute")
          }
        ]
      },
      [CONSTANTS.TAB_ACTOR_ACTIONS]: {
        utilityToolbarCommands: [
          {
            title: FoundryAdapter.localize("SIDEBAR.SortModeAlpha"),
            iconClass: "fa-solid fa-arrow-down-a-z fa-fw",
            execute: /* @__PURE__ */ __name(async () => {
              await SheetPreferencesService.setDocumentTypeTabPreference(this.actor.type, CONSTANTS.TAB_ACTOR_ACTIONS, "sort", "m");
            }, "execute"),
            visible: actionListSortMode === "a"
          },
          {
            title: FoundryAdapter.localize("TIDY5E.SortMode.ActionListDefault"),
            iconClass: "fa-solid fa-arrow-down-short-wide fa-fw",
            execute: /* @__PURE__ */ __name(async () => {
              await SheetPreferencesService.setDocumentTypeTabPreference(this.actor.type, CONSTANTS.TAB_ACTOR_ACTIONS, "sort", "a");
            }, "execute"),
            visible: actionListSortMode === "m"
          },
          {
            title: FoundryAdapter.localize("TIDY5E.Commands.ExpandAll"),
            iconClass: "fas fa-angles-down",
            execute: /* @__PURE__ */ __name(() => (
              // TODO: Use app.messageBus
              this.messageBus.message = {
                tabId: CONSTANTS.TAB_ACTOR_ACTIONS,
                message: CONSTANTS.MESSAGE_BUS_EXPAND_ALL
              }
            ), "execute")
          },
          {
            title: FoundryAdapter.localize("TIDY5E.Commands.CollapseAll"),
            iconClass: "fas fa-angles-up",
            execute: /* @__PURE__ */ __name(() => (
              // TODO: Use app.messageBus
              this.messageBus.message = {
                tabId: CONSTANTS.TAB_ACTOR_ACTIONS,
                message: CONSTANTS.MESSAGE_BUS_COLLAPSE_ALL
              }
            ), "execute")
          },
          {
            title: FoundryAdapter.localize("TIDY5E.Utilities.ConfigureSections"),
            iconClass: "fas fa-cog",
            execute: /* @__PURE__ */ __name(({ context: context2, sections }) => {
              new DocumentTabSectionConfigApplication({
                document: context2.actor,
                sections,
                tabId: CONSTANTS.TAB_ACTOR_ACTIONS,
                tabTitle: NpcSheetRuntime.getTabTitle(CONSTANTS.TAB_ACTOR_ACTIONS)
              }).render(!0);
            }, "execute")
          }
        ]
      },
      [CONSTANTS.TAB_ACTOR_INVENTORY]: {
        utilityToolbarCommands: [
          {
            title: FoundryAdapter.localize("SIDEBAR.SortModeAlpha"),
            iconClass: "fa-solid fa-arrow-down-a-z fa-fw",
            execute: /* @__PURE__ */ __name(async () => {
              await SheetPreferencesService.setDocumentTypeTabPreference(this.actor.type, CONSTANTS.TAB_ACTOR_INVENTORY, "sort", "m");
            }, "execute"),
            visible: inventorySortMode === "a"
          },
          {
            title: FoundryAdapter.localize("SIDEBAR.SortModeManual"),
            iconClass: "fa-solid fa-arrow-down-short-wide fa-fw",
            execute: /* @__PURE__ */ __name(async () => {
              await SheetPreferencesService.setDocumentTypeTabPreference(this.actor.type, CONSTANTS.TAB_ACTOR_INVENTORY, "sort", "a");
            }, "execute"),
            visible: inventorySortMode === "m"
          },
          {
            title: FoundryAdapter.localize("TIDY5E.Commands.HideContainerPanel"),
            iconClass: "fas fa-boxes-stacked fa-fw",
            execute: /* @__PURE__ */ __name(() => {
              TidyFlags.showContainerPanel.unset(this.actor);
            }, "execute"),
            visible: !!TidyFlags.showContainerPanel.get(this.actor)
          },
          {
            title: FoundryAdapter.localize("TIDY5E.Commands.ShowContainerPanel"),
            iconClass: "fas fa-box fa-fw",
            execute: /* @__PURE__ */ __name(() => {
              TidyFlags.showContainerPanel.set(this.actor, !0);
            }, "execute"),
            visible: !TidyFlags.showContainerPanel.get(this.actor)
          },
          {
            title: FoundryAdapter.localize("TIDY5E.Commands.ExpandAll"),
            iconClass: "fas fa-angles-down",
            execute: /* @__PURE__ */ __name(() => (
              // TODO: Use app.messageBus
              this.messageBus.message = {
                tabId: CONSTANTS.TAB_ACTOR_INVENTORY,
                message: CONSTANTS.MESSAGE_BUS_EXPAND_ALL
              }
            ), "execute")
          },
          {
            title: FoundryAdapter.localize("TIDY5E.Commands.CollapseAll"),
            iconClass: "fas fa-angles-up",
            execute: /* @__PURE__ */ __name(() => (
              // TODO: Use app.messageBus
              this.messageBus.message = {
                tabId: CONSTANTS.TAB_ACTOR_INVENTORY,
                message: CONSTANTS.MESSAGE_BUS_COLLAPSE_ALL
              }
            ), "execute")
          },
          {
            title: FoundryAdapter.localize("TIDY5E.ListLayout"),
            iconClass: "fas fa-th-list fa-fw toggle-list",
            visible: !TidyFlags.inventoryGrid.get(this.actor),
            execute: /* @__PURE__ */ __name(() => {
              TidyFlags.inventoryGrid.set(this.actor);
            }, "execute")
          },
          {
            title: FoundryAdapter.localize("TIDY5E.GridLayout"),
            iconClass: "fas fa-th-large fa-fw toggle-grid",
            visible: !!TidyFlags.inventoryGrid.get(this.actor),
            execute: /* @__PURE__ */ __name(() => {
              TidyFlags.inventoryGrid.unset(this.actor);
            }, "execute")
          },
          {
            title: FoundryAdapter.localize("TIDY5E.Utilities.ConfigureSections"),
            iconClass: "fas fa-cog",
            execute: /* @__PURE__ */ __name(({ context: context2, sections }) => {
              new DocumentTabSectionConfigApplication({
                document: context2.actor,
                sections,
                tabId: CONSTANTS.TAB_ACTOR_INVENTORY,
                tabTitle: NpcSheetRuntime.getTabTitle(CONSTANTS.TAB_ACTOR_INVENTORY)
              }).render(!0);
            }, "execute")
          }
        ]
      }
    }, { conditions, effects: enhancedEffectSections } = await ConditionsAndEffects.getConditionsAndEffects(this.actor, this.object, defaultDocumentContext.effects);
    const context = {
      ...defaultDocumentContext,
      actions: await getActorActionSections(this.actor),
      activateEditors: /* @__PURE__ */ __name((node, options2) => FoundryAdapter.activateEditors(node, this, options2?.bindSecrets), "activateEditors"),
      actorPortraitCommands: ActorPortraitRuntime.getEnabledPortraitMenuCommands(this.actor),
      allowEffectsManagement: !0,
      appearanceEnrichedHtml: await FoundryAdapter.enrichHtml(TidyFlags.appearance.get(this.actor) ?? "", {
        secrets: this.actor.isOwner,
        rollData: defaultDocumentContext.rollData,
        relativeTo: this.actor
      }),
      appId: this.appId,
      biographyEnrichedHtml: await FoundryAdapter.enrichHtml(FoundryAdapter.getProperty(this.actor, "system.details.biography.value") ?? "", {
        secrets: this.actor.isOwner,
        rollData: defaultDocumentContext.rollData,
        relativeTo: this.actor
      }),
      bondEnrichedHtml: await FoundryAdapter.enrichHtml(this.actor.system.details.bond, {
        secrets: this.actor.isOwner,
        rollData: defaultDocumentContext.rollData,
        relativeTo: this.actor
      }),
      conditions,
      containerPanelItems: await Inventory.getContainerPanelItems(defaultDocumentContext.items),
      customActorTraits: CustomActorTraitsRuntime.getEnabledTraits(defaultDocumentContext),
      customContent: await NpcSheetRuntime.getContent(defaultDocumentContext),
      document: this.document,
      useClassicControls: settings.value.useClassicControlsForNpc,
      effects: enhancedEffectSections,
      editable: defaultDocumentContext.editable,
      encumbrance: this.actor.system.attributes.encumbrance,
      filterData: this.itemFilterService.getDocumentItemFilterData(),
      filterPins: ItemFilterRuntime.defaultFilterPins[this.actor.type],
      flawEnrichedHtml: await FoundryAdapter.enrichHtml(this.actor.system.details.flaw, {
        secrets: this.actor.isOwner,
        rollData: defaultDocumentContext.rollData,
        relativeTo: this.actor
      }),
      hideEmptySpellbook: lockSensitiveFields && defaultDocumentContext.spellbook.length === 0,
      healthPercentage: this.actor.system.attributes.hp.pct.toNearest(0.1),
      showSpellbookTab: settings.value.showSpellbookTabNpc,
      idealEnrichedHtml: await FoundryAdapter.enrichHtml(this.actor.system.details.ideal, {
        secrets: this.actor.isOwner,
        rollData: defaultDocumentContext.rollData,
        relativeTo: this.actor
      }),
      showContainerPanel: TidyFlags.showContainerPanel.get(this.actor) === !0 && Array.from(defaultDocumentContext.items).some((i2) => i2.type === CONSTANTS.ITEM_TYPE_CONTAINER),
      showLegendaryToolbar,
      spellcastingInfo: FoundryAdapter.getSpellcastingInfo(this.actor, this.actor.itemTypes.spell),
      lockSensitiveFields,
      longRest: this._onLongRest.bind(this),
      lockExpChanges: FoundryAdapter.shouldLockExpChanges(),
      lockHpMaxChanges: FoundryAdapter.shouldLockHpMaxChanges(),
      lockItemQuantity: FoundryAdapter.shouldLockItemQuantity(),
      lockLevelSelector: FoundryAdapter.shouldLockLevelSelector(),
      lockMoneyChanges: FoundryAdapter.shouldLockMoneyChanges(),
      notes1EnrichedHtml: await FoundryAdapter.enrichHtml(TidyFlags.notes1.members.value.get(this.actor) ?? "", {
        secrets: this.actor.isOwner,
        rollData: defaultDocumentContext.rollData,
        relativeTo: this.actor
      }),
      notes2EnrichedHtml: await FoundryAdapter.enrichHtml(TidyFlags.notes2.members.value.get(this.actor) ?? "", {
        secrets: this.actor.isOwner,
        rollData: defaultDocumentContext.rollData,
        relativeTo: this.actor
      }),
      notes3EnrichedHtml: await FoundryAdapter.enrichHtml(TidyFlags.notes3.members.value.get(this.actor) ?? "", {
        secrets: this.actor.isOwner,
        rollData: defaultDocumentContext.rollData,
        relativeTo: this.actor
      }),
      notes4EnrichedHtml: await FoundryAdapter.enrichHtml(TidyFlags.notes4.members.value.get(this.actor) ?? "", {
        secrets: this.actor.isOwner,
        rollData: defaultDocumentContext.rollData,
        relativeTo: this.actor
      }),
      notesEnrichedHtml: await FoundryAdapter.enrichHtml(TidyFlags.notes.members.value.get(this.actor) ?? "", {
        secrets: this.actor.isOwner,
        rollData: defaultDocumentContext.rollData,
        relativeTo: this.actor
      }),
      owner: this.actor.isOwner,
      shortRest: this._onShortRest.bind(this),
      showLimitedSheet: FoundryAdapter.showLimitedSheet(this.actor),
      spellComponentLabels: FoundryAdapter.getSpellComponentLabels(),
      spellSlotTrackerMode: npcPreferences.spellSlotTrackerMode ?? CONSTANTS.SPELL_SLOT_TRACKER_MODE_PIPS,
      tabs: [],
      traitEnrichedHtml: await FoundryAdapter.enrichHtml(TidyFlags.trait.get(this.actor) ?? "", {
        secrets: this.actor.isOwner,
        rollData: defaultDocumentContext.rollData,
        relativeTo: this.actor
      }),
      unlocked,
      useActionsFeature: actorUsesActionFeature(this.actor),
      useRoundedPortraitStyle: [
        CONSTANTS.CIRCULAR_PORTRAIT_OPTION_ALL,
        CONSTANTS.CIRCULAR_PORTRAIT_OPTION_NPCVEHICLE
      ].includes(settings.value.useCircularPortraitStyle),
      utilities,
      viewableWarnings: defaultDocumentContext.warnings?.filter((w2) => !isNil(w2.message?.trim(), "")) ?? []
    };
    for (const panelItem of context.containerPanelItems) {
      const ctx = context.itemContext[panelItem.container.id];
      ctx.containerContents = await Container.getContainerContents(panelItem.container);
    }
    let tabs = await NpcSheetRuntime.getTabs(context);
    const selectedTabs = TidyFlags.selectedTabs.get(context.actor);
    if (selectedTabs?.length)
      tabs = tabs.filter((t2) => selectedTabs?.includes(t2.id)).sort((a2, b2) => selectedTabs.indexOf(a2.id) - selectedTabs.indexOf(b2.id));
    else {
      const defaultTabs = settings.value.defaultNpcSheetTabs;
      tabs = tabs.filter((t2) => defaultTabs?.includes(t2.id)).sort((a2, b2) => defaultTabs.indexOf(a2.id) - defaultTabs.indexOf(b2.id));
    }
    return context.tabs = tabs, TidyHooks.tidy5eSheetsPreConfigureSections(this, this.element.get(0), context), debug("NPC Sheet context data", context), context;
  }
  _prepareItems(context) {
    const features = {
      [CONSTANTS.NPC_ABILITY_SECTION_WEAPONS]: {
        label: game.i18n.localize("DND5E.AttackPl"),
        items: [],
        hasActions: !0,
        dataset: {
          type: CONSTANTS.ITEM_TYPE_WEAPON,
          "system.weaponType": "natural"
        },
        canCreate: !0,
        key: "weapons",
        show: !0
      },
      [CONSTANTS.NPC_ABILITY_SECTION_ACTIONS]: {
        label: game.i18n.localize("DND5E.ActionPl"),
        items: [],
        hasActions: !0,
        dataset: {
          type: CONSTANTS.ITEM_TYPE_FEAT,
          "system.activation.type": "action"
        },
        canCreate: !0,
        key: "actions",
        show: !0
      },
      [CONSTANTS.NPC_ABILITY_SECTION_PASSIVE]: {
        label: game.i18n.localize("DND5E.Features"),
        items: [],
        dataset: { type: CONSTANTS.ITEM_TYPE_FEAT },
        canCreate: !0,
        key: "passive",
        show: !0
      },
      [CONSTANTS.NPC_ABILITY_SECTION_EQUIPMENT]: {
        label: game.i18n.localize("DND5E.Inventory"),
        items: [],
        dataset: { type: CONSTANTS.ITEM_TYPE_LOOT },
        canCreate: !0,
        key: "equipment",
        show: !0
      },
      [CONSTANTS.NPC_ABILITY_SECTION_CLASSES]: {
        label: `${CONFIG.Item.typeLabels.class}Pl`,
        items: [],
        dataset: { type: CONSTANTS.ITEM_TYPE_CLASS },
        canCreate: !0,
        key: "classes",
        show: !0,
        isClass: !0
      }
    };
    let { spells, classes, subclasses, other } = context.items.reduce(
      (features2, item) => {
        const { quantity, uses } = item.system, ctx = context.itemContext[item.id] ??= {};
        return ctx.activities = Activities.getVisibleActivities(item, item.system.activities)?.map(Activities.getActivityItemContext), ctx.attunement = FoundryAdapter.getAttunementContext(item), ctx.isStack = Number.isNumeric(quantity) && quantity !== 1, ctx.hasUses = uses && uses.max > 0, ctx.canToggle = "equipped" in item.system, ctx.totalWeight = item.system.totalWeight?.toNearest(0.1), item.type === CONSTANTS.ITEM_TYPE_SPELL ? (this._concentration.items.has(item) && (ctx.concentration = !0), features2.spells.push(item)) : item.type === CONSTANTS.ITEM_TYPE_CLASS ? features2.classes.push(item) : item.type === CONSTANTS.ITEM_TYPE_SUBCLASS ? features2.subclasses.push(item) : features2.other.push(item), features2;
      },
      {
        spells: [],
        subclasses: [],
        classes: [],
        other: []
      }
    );
    classes = SheetSections.prepareClassItems(context, classes, subclasses, this.actor);
    for (const subclass of subclasses) {
      const message = game.i18n.format("DND5E.SubclassMismatchWarn", {
        name: subclass.name,
        class: subclass.system.classIdentifier
      });
      context.warnings.push({ message, type: "warning" });
    }
    other = [...other, ...subclasses], features.classes.items = classes;
    const inventoryTypesArray = Inventory.getDefaultInventoryTypes(), inventoryTypes = new Set(inventoryTypesArray), inventory = Inventory.getDefaultInventorySections();
    for (let item of other)
      inventoryTypes.has(item.type) && Inventory.applyInventoryItemToSection(inventory, item, inventoryTypesArray, { canCreate: !0 }), TidyFlags.section.get(item) ? NpcSheetSections.applyAbilityToSection(features, item, { canCreate: !0 }) : item.type === CONSTANTS.ITEM_TYPE_WEAPON ? features.weapons.items.push(item) : [
        CONSTANTS.ITEM_TYPE_BACKGROUND,
        CONSTANTS.ITEM_TYPE_CLASS,
        CONSTANTS.ITEM_TYPE_FEAT,
        CONSTANTS.ITEM_TYPE_RACE,
        CONSTANTS.ITEM_TYPE_SUBCLASS
      ].includes(item.type) ? ItemUtils.hasActivationType(item) ? features.actions.items.push(item) : features.passive.items.push(item) : features.equipment.items.push(item);
    const spellbook = SheetSections.prepareTidySpellbook(context, spells, { canCreate: !0 }, this);
    context.features = Object.values(features), context.spellbook = spellbook, context.inventory = Object.values(inventory);
  }
  async setExpandedItemData() {
    this.expandedItemData.clear();
    for (const id of this.expandedItems.keys()) {
      const item = this.actor.items.get(id);
      item && this.expandedItemData.set(id, await item.getChatData({ secrets: this.actor.isOwner }));
    }
  }
  onToggleAbilityProficiency(event2) {
    return this._onToggleAbilityProficiency(event2);
  }
  async _onDropSingleItem(itemData, event2) {
    if (itemData.type === CONSTANTS.ITEM_TYPE_SPELL && this.currentTabId === CONSTANTS.TAB_ACTOR_INVENTORY) {
      const options = {};
      return settings.value.includeFlagsInSpellScrollCreation && (options.flags = itemData.flags), (await dnd5e.documents.Item5e.createScrollFromSpell(itemData, options)).toObject();
    }
    return super._onDropSingleItem(itemData, event2);
  }
  /**
   * A boolean which gates double-rendering and prevents a second
   * colliding render from triggering an infamous
   * "One of original or other are not Objects!" error.
   */
  tidyRendering = !1;
  render(...args) {
    debug("Sheet render begin"), this.tidyRendering = !0, super.render(...args);
  }
  _renderMutex = new AsyncMutex();
  async _render(force, options = {}) {
    await this._renderMutex.lock(async () => {
      this.options.token && this.tidyRendering === !1 || await this._renderSheet(force, options);
    }), this.tidyRendering = !1, debug("Sheet render end");
  }
  async _renderSheet(force, options = {}) {
    await this.setExpandedItemData();
    const data = await this.getData();
    if (SheetSections.accountForExternalSections(["features", "spellbook"], data), this.context.data = data, force) {
      const { width, height } = SheetPreferencesService.getByType(this.actor.type) ?? {};
      this.position = {
        ...this.position,
        width: width ?? this.position.width,
        height: height ?? this.position.height
      }, this._saveScrollPositions(this.element), this._destroySvelteComponent(), await super._render(force, options), applySheetAttributesToWindow(this.actor.documentName, this.actor.uuid, this.actor.type, this.element.get(0)), await this.renderCustomContent({ data, isFullRender: !0 }), TidyHooks.tidy5eSheetsRenderActorSheet(this, this.element.get(0), data, !0), CustomContentRenderer.wireCompatibilityEventListeners(this.element, super.activateListeners, this), blurUntabbableButtonsOnClick(this.element.get(0));
      return;
    }
    await maintainCustomContentInputFocus(this, async () => {
      applyTitleToWindow(this.title, this.element.get(0)), await this.renderCustomContent({ data, isFullRender: !1 }), TidyHooks.tidy5eSheetsRenderActorSheet(this, this.element.get(0), data, !1), CustomContentRenderer.wireCompatibilityEventListeners(this.element, super.activateListeners, this);
    });
  }
  async renderCustomContent(args) {
    await CustomContentRenderer.render({
      app: this,
      customContent: args.data.customContent,
      data: args.data,
      element: this.element,
      isFullRender: args.isFullRender,
      superActivateListeners: super.activateListeners,
      tabs: args.data.tabs
    });
  }
  _getHeaderButtons() {
    const buttons = super._getHeaderButtons();
    return FoundryAdapter.removeConfigureSettingsButtonWhenLockedForNonGm(buttons);
  }
  _destroySvelteComponent() {
    this.component && unmount(this.component), this.component = void 0, this.additionalComponents.forEach((c2) => unmount(c2)), this.additionalComponents = [];
  }
  _saveScrollPositions(html2) {
    if (html2.length && this.component) {
      const save2 = super._saveScrollPositions(html2);
      return debug("Saved scroll positions", this._scrollPositions), save2;
    }
  }
  /**
   * Take a short rest, calling the relevant function on the Actor instance.
   * @param {Event} event             The triggering click event.
   * @returns {Promise<RestResult>}  Result of the rest action.
   */
  async _onShortRest(event2) {
    return event2.preventDefault(), await this._onSubmit(event2), this.actor.shortRest({ chat: settings.value.showNpcRestInChat });
  }
  /**
   * Take a long rest, calling the relevant function on the Actor instance
   * @param {Event} event   The triggering click event
   * @private
   */
  async _onLongRest(event2) {
    return event2.preventDefault(), await this._onSubmit(event2), this.actor.longRest({ chat: settings.value.showNpcRestInChat });
  }
  async _onSubmit(...args) {
    await super._onSubmit(...args), this.stats.lastSubmissionTime = /* @__PURE__ */ new Date();
  }
  close(options = {}) {
    return this._effectCleanup?.(), this._destroySvelteComponent(), delete game.user.apps[this.id], super.close(options);
  }
  _disableFields(...args) {
    debug("Ignoring call to disable fields. Delegating to Tidy Sheets...");
  }
  _onResize(event2) {
    super._onResize(event2);
    const { width, height } = this.position;
    SheetPreferencesService.setDocumentTypePreference(this.actor.type, "width", width), SheetPreferencesService.setDocumentTypePreference(this.actor.type, "height", height);
  }
  /* -------------------------------------------- */
  /* SheetTabCacheable
  /* -------------------------------------------- */
  onTabSelected(tabId) {
    this.currentTabId = tabId;
  }
  /* -------------------------------------------- */
  /* SheetExpandedItemsCacheable
  /* -------------------------------------------- */
  onItemToggled(itemId, isVisible, location) {
    const locationSet = this.expandedItems.get(itemId) ?? this.expandedItems.set(itemId, /* @__PURE__ */ new Set()).get(itemId);
    isVisible ? locationSet?.add(location) : locationSet?.delete(location), debug("Item Toggled", { expandedItems: this.expandedItems });
  }
  /* -------------------------------------------- */
  /* SearchFilterCacheable
  /* -------------------------------------------- */
  onSearch(location, text2) {
    debug("Searched", { location, text: text2 }), this.searchFilters.set(location, text2);
  }
}
var root$j = /* @__PURE__ */ template('<div class="portrait-hp svelte-1tj6d6i"><!></div>');
function VehicleHitPoints($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getVehicleSheetContext);
  const localize = FoundryAdapter.localize;
  var div = root$j();
  template_effect(() => set_attribute(div, "title", localize("DND5E.HitPoints")));
  var node = child(div), valueTitle = /* @__PURE__ */ derived(() => localize("DND5E.HitPointsCurrent")), valueDisabled = /* @__PURE__ */ derived(() => !get(context).editable), maxTitle = /* @__PURE__ */ derived(() => localize("DND5E.HitPointsMax")), maxDisabled = /* @__PURE__ */ derived(() => !get(context).editable || get(context).lockHpMaxChanges || get(context).lockSensitiveFields), Bar2 = /* @__PURE__ */ derived(() => settings.value.useHpBarVehicle ? HpBar : null);
  ResourceWithBar(node, {
    get document() {
      return get(context).actor;
    },
    get value() {
      return get(context).system.attributes.hp.value;
    },
    valueField: "system.attributes.hp.value",
    get valueTitle() {
      return get(valueTitle);
    },
    get valueDisabled() {
      return get(valueDisabled);
    },
    get max() {
      return get(context).system.attributes.hp.max;
    },
    maxField: "system.attributes.hp.max",
    get maxTitle() {
      return get(maxTitle);
    },
    get maxDisabled() {
      return get(maxDisabled);
    },
    get percentage() {
      return get(context).healthPercentage;
    },
    get Bar() {
      return get(Bar2);
    }
  }), append($$anchor, div), pop();
}
__name(VehicleHitPoints, "VehicleHitPoints");
var root$i = /* @__PURE__ */ template('<div class="profile-thresholds svelte-1gso283"><!> <!></div>');
function VehicleDamageAndMishapThresholds($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getVehicleSheetContext);
  const localize = FoundryAdapter.localize;
  var div = root$i(), node = child(div), placeholder = /* @__PURE__ */ derived(() => localize("DND5E.Threshold")), value = /* @__PURE__ */ derived(() => get(context).system.attributes.hp.dt?.toString() ?? ""), title = /* @__PURE__ */ derived(() => localize("DND5E.DamageThreshold")), disabled = /* @__PURE__ */ derived(() => !get(context).editable || get(context).lockSensitiveFields);
  TextInput(node, {
    get document() {
      return get(context).actor;
    },
    field: "system.attributes.hp.dt",
    class: "damage-threshold",
    get placeholder() {
      return get(placeholder);
    },
    get value() {
      return get(value);
    },
    allowDeltaChanges: !0,
    maxlength: 5,
    get title() {
      return get(title);
    },
    get disabled() {
      return get(disabled);
    }
  });
  var node_1 = sibling(node, 2), placeholder_1 = /* @__PURE__ */ derived(() => localize("DND5E.VehicleMishap")), value_1 = /* @__PURE__ */ derived(() => get(context).system.attributes.hp.mt?.toString() ?? ""), title_1 = /* @__PURE__ */ derived(() => localize("DND5E.VehicleMishapThreshold")), disabled_1 = /* @__PURE__ */ derived(() => !get(context).editable || get(context).lockSensitiveFields);
  TextInput(node_1, {
    get document() {
      return get(context).actor;
    },
    field: "system.attributes.hp.mt",
    class: "mishap-threshold",
    get placeholder() {
      return get(placeholder_1);
    },
    get value() {
      return get(value_1);
    },
    allowDeltaChanges: !0,
    maxlength: 5,
    get title() {
      return get(title_1);
    },
    get disabled() {
      return get(disabled_1);
    }
  }), append($$anchor, div), pop();
}
__name(VehicleDamageAndMishapThresholds, "VehicleDamageAndMishapThresholds");
var root_1$9 = /* @__PURE__ */ template('<i class="motion-icon fas fa-sailboat svelte-1jcz2f"></i>'), root$h = /* @__PURE__ */ template("<div><!></div>");
function VehicleMovement($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getVehicleSheetContext), cssClass = prop($$props, "cssClass", 3, ""), animate2 = prop($$props, "animate", 3, !0);
  const localize = FoundryAdapter.localize;
  var div = root$h();
  template_effect(() => set_attribute(div, "title", localize($$props.motion ? "TIDY5E.VehicleInMotion" : "TIDY5E.VehicleMotionless")));
  var node = child(div), labelCssClass = /* @__PURE__ */ derived(() => `${($$props.motion ? "motion" : "") ?? ""} ${$$props.radiusClass ?? ""}`), disabled = /* @__PURE__ */ derived(() => !get(context).editable);
  Checkbox(node, {
    checkboxCssClass: "motion-toggle",
    get labelCssClass() {
      return get(labelCssClass);
    },
    get document() {
      return get(context).actor;
    },
    get field() {
      return TidyFlags.motion.prop;
    },
    get checked() {
      return $$props.motion;
    },
    get disabled() {
      return get(disabled);
    },
    children: /* @__PURE__ */ __name(($$anchor2, $$slotProps) => {
      var i2 = root_1$9();
      template_effect(() => toggle_class(i2, "animate", animate2())), append($$anchor2, i2);
    }, "children"),
    $$slots: { default: !0 }
  }), template_effect(() => {
    set_class(div, `motion ${cssClass() ?? ""} svelte-1jcz2f`), toggle_class(div, "is-in-motion", $$props.motion);
  }), append($$anchor, div), pop();
}
__name(VehicleMovement, "VehicleMovement");
var root_1$8 = /* @__PURE__ */ template("<!> <!> <!>", 1), root$g = /* @__PURE__ */ template("<!> <!>", 1);
function VehicleProfile($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getVehicleSheetContext);
  function onLevelSelected(level) {
    TidyFlags.setFlag(get(context).actor, "exhaustion", level);
  }
  __name(onLevelSelected, "onLevelSelected");
  var fragment = root$g(), node = first_child(fragment), useHpOverlay = /* @__PURE__ */ derived(() => settings.value.useHpOverlayVehicle && get(context).system.attributes.hp.max > 0);
  ActorProfile(node, {
    get useHpOverlay() {
      return get(useHpOverlay);
    },
    children: /* @__PURE__ */ __name(($$anchor2, $$slotProps) => {
      var fragment_1 = root_1$8(), node_1 = first_child(fragment_1);
      {
        var consequent = /* @__PURE__ */ __name(($$anchor3) => {
          var level_1 = /* @__PURE__ */ derived(() => TidyFlags.exhaustion.get(get(context).actor) ?? 0), radiusClass = /* @__PURE__ */ derived(() => get(context).useRoundedPortraitStyle ? "rounded" : "top-left"), isActiveEffectApplied = /* @__PURE__ */ derived(() => ActiveEffectsHelper.isActiveEffectAppliedToField(get(context).actor, TidyFlags.exhaustion.prop));
          ExhaustionTracker($$anchor3, {
            get level() {
              return get(level_1);
            },
            get radiusClass() {
              return get(radiusClass);
            },
            onLevelSelected,
            get exhaustionConfig() {
              return settings.value.vehicleExhaustionConfig;
            },
            get isActiveEffectApplied() {
              return get(isActiveEffectApplied);
            }
          });
        }, "consequent"), alternate = /* @__PURE__ */ __name(($$anchor3) => {
          var fragment_3 = comment(), node_2 = first_child(fragment_3);
          {
            var consequent_1 = /* @__PURE__ */ __name(($$anchor4) => {
              var level_2 = /* @__PURE__ */ derived(() => TidyFlags.exhaustion.get(get(context).actor) ?? 0), radiusClass_1 = /* @__PURE__ */ derived(() => get(context).useRoundedPortraitStyle ? "rounded" : "top-left"), isActiveEffectApplied_1 = /* @__PURE__ */ derived(() => ActiveEffectsHelper.isActiveEffectAppliedToField(get(context).actor, TidyFlags.exhaustion.prop));
              ExhaustionInput($$anchor4, {
                get level() {
                  return get(level_2);
                },
                get radiusClass() {
                  return get(radiusClass_1);
                },
                onLevelSelected,
                get isActiveEffectApplied() {
                  return get(isActiveEffectApplied_1);
                }
              });
            }, "consequent_1");
            if_block(
              node_2,
              ($$render) => {
                settings.value.useExhaustion && settings.value.vehicleExhaustionConfig.type === "open" && $$render(consequent_1);
              },
              !0
            );
          }
          append($$anchor3, fragment_3);
        }, "alternate");
        if_block(node_1, ($$render) => {
          settings.value.useExhaustion && settings.value.vehicleExhaustionConfig.type === "specific" ? $$render(consequent) : $$render(alternate, !1);
        });
      }
      var node_3 = sibling(node_1, 2);
      {
        var consequent_2 = /* @__PURE__ */ __name(($$anchor3) => {
          var motion = /* @__PURE__ */ derived(() => TidyFlags.motion.get(get(context).actor) === !0), radiusClass_2 = /* @__PURE__ */ derived(() => get(context).useRoundedPortraitStyle ? "rounded" : "top-right");
          VehicleMovement($$anchor3, {
            get motion() {
              return get(motion);
            },
            get radiusClass() {
              return get(radiusClass_2);
            },
            animate: !0
          });
        }, "consequent_2");
        if_block(node_3, ($$render) => {
          settings.value.useVehicleMotion && $$render(consequent_2);
        });
      }
      var node_4 = sibling(node_3, 2);
      VehicleHitPoints(node_4, {}), append($$anchor2, fragment_1);
    }, "children"),
    $$slots: { default: !0 }
  });
  var node_5 = sibling(node, 2);
  VehicleDamageAndMishapThresholds(node_5, {}), append($$anchor, fragment), pop();
}
__name(VehicleProfile, "VehicleProfile");
var root_1$7 = /* @__PURE__ */ template("<!> <!>", 1), root$f = /* @__PURE__ */ template('<div class="vehicle-armor-class-wrapper svelte-1xh55vz"><!></div>');
function AcShieldVehicle($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getVehicleSheetContext), cssClass = prop($$props, "cssClass", 3, "");
  const localize = FoundryAdapter.localize;
  var div = root$f(), node = child(div);
  AcShieldBase(node, {
    get cssClass() {
      return `${cssClass() ?? ""} vehicle-ac-shield`;
    },
    children: /* @__PURE__ */ __name(($$anchor2, $$slotProps) => {
      var fragment = root_1$7(), node_1 = first_child(fragment), title = /* @__PURE__ */ derived(() => localize("DND5E.ArmorClass")), disabled = /* @__PURE__ */ derived(() => !get(context).editable || get(context).lockSensitiveFields);
      NumberInput(node_1, {
        get document() {
          return get(context).actor;
        },
        field: "system.attributes.ac.flat",
        get value() {
          return get(context).actor.system.attributes.ac.flat;
        },
        step: "1",
        min: "0",
        placeholder: "—",
        get title() {
          return get(title);
        },
        cssClass: "armor-class-flat",
        selectOnFocus: !0,
        get disabled() {
          return get(disabled);
        }
      });
      var node_2 = sibling(node_1, 2), title_1 = /* @__PURE__ */ derived(() => localize("DND5E.ArmorClassMotionless")), disabled_1 = /* @__PURE__ */ derived(() => !get(context).editable || get(context).lockSensitiveFields);
      TextInput(node_2, {
        get document() {
          return get(context).actor;
        },
        field: "system.attributes.ac.motionless",
        get value() {
          return get(context).system.attributes.ac.motionless;
        },
        placeholder: "—",
        get title() {
          return get(title_1);
        },
        class: "armor-class-motionless",
        selectOnFocus: !0,
        get disabled() {
          return get(disabled_1);
        }
      }), append($$anchor2, fragment);
    }, "children"),
    $$slots: { default: !0 }
  }), append($$anchor, div), pop();
}
__name(AcShieldVehicle, "AcShieldVehicle");
var root_3$3 = /* @__PURE__ */ template("<span> </span>"), root_5$1 = /* @__PURE__ */ template("<span> </span>"), root_7$1 = /* @__PURE__ */ template("<!> <!>", 1), on_click$4 = /* @__PURE__ */ __name((_, context) => new ActorOriginSummaryConfigFormApplication(get(context).actor).render(!0), "on_click$4"), root_8$3 = /* @__PURE__ */ template('<button type="button" class="origin-summary-tidy inline-icon-button"><i class="fas fa-cog"></i></button>'), root_9$2 = /* @__PURE__ */ template("<!> <div><!></div>", 1), root$e = /* @__PURE__ */ template('<!> <header class="svelte-lqhlrq"><div class="flex-0"><!></div> <div class="flex-grow-1"><div class="actor-name-row flex-row justify-content-space-between align-items-center small-gap svelte-lqhlrq"><div class="actor-name"><!></div> <!></div> <!> <div class="origin-summary svelte-lqhlrq"><div class="flex-row extra-small-gap"><!></div> <span>&#8226;</span> <div class="flex-row extra-small-gap"><!></div> <span>&#8226;</span> <!> <div class="flex-row align-items-center extra-small-gap"><!></div></div> <!> <!> <!> <section class="actor-stats"><!> <!></section></div></header> <!> <section class="tidy-sheet-body svelte-lqhlrq"><!></section>', 1);
function VehicleSheetFull($$anchor, $$props) {
  push($$props, !0);
  let selectedTabId = state(""), context = /* @__PURE__ */ derived(getVehicleSheetContext), sizes = /* @__PURE__ */ derived(() => Object.entries(get(context).config.actorSizes).map(([key, size]) => ({ value: key, text: size.label }))), currentSize = /* @__PURE__ */ derived(() => ({
    value: get(context).system.traits.size,
    text: get(context).config.actorSizes[get(context).system.traits.size]?.label
  })), vehicleTypes = /* @__PURE__ */ derived(() => Object.entries(get(context).config.vehicleTypes).map(([key, label]) => ({ value: key, text: label }))), currentVehicleType = /* @__PURE__ */ derived(() => ({
    value: get(context).system.vehicleType,
    text: get(context).config.vehicleTypes[get(context).system.vehicleType]
  })), abilities = /* @__PURE__ */ derived(() => Object.entries(get(context).abilities));
  const localize = FoundryAdapter.localize;
  var fragment = root$e(), node = first_child(fragment);
  {
    var consequent = /* @__PURE__ */ __name(($$anchor2) => {
      ActorWarnings($$anchor2, {
        get warnings() {
          return get(context).viewableWarnings;
        }
      });
    }, "consequent");
    if_block(node, ($$render) => {
      get(context).viewableWarnings.length && $$render(consequent);
    });
  }
  var header = sibling(node, 2), div = child(header), node_1 = child(div);
  VehicleProfile(node_1, {});
  var div_1 = sibling(div, 2), div_2 = child(div_1), div_3 = child(div_2), node_2 = child(div_3);
  ActorName(node_2, {});
  var node_3 = sibling(div_3, 2);
  SheetMenu(node_3, {
    get defaultSettingsTab() {
      return CONSTANTS.TAB_USER_SETTINGS_VEHICLES;
    }
  });
  var node_4 = sibling(div_2, 2);
  HorizontalLineSeparator(node_4, {
    borderColor: "light",
    class: "header-line-margin-left"
  });
  var div_4 = sibling(node_4, 2), div_5 = child(div_4), node_5 = child(div_5);
  {
    var consequent_1 = /* @__PURE__ */ __name(($$anchor2) => {
      var title = /* @__PURE__ */ derived(() => localize("DND5E.Size"));
      InlineTextDropdownList($$anchor2, {
        get options() {
          return get(sizes);
        },
        get selected() {
          return get(currentSize);
        },
        onOptionClicked: /* @__PURE__ */ __name((option) => get(context).actor.update({ "system.traits.size": option.value }), "onOptionClicked"),
        get title() {
          return get(title);
        }
      });
    }, "consequent_1"), alternate = /* @__PURE__ */ __name(($$anchor2) => {
      var span = root_3$3();
      template_effect(() => set_attribute(span, "title", localize("DND5E.Size")));
      var text2 = child(span);
      template_effect(() => set_text(text2, get(currentSize).text)), append($$anchor2, span);
    }, "alternate");
    if_block(node_5, ($$render) => {
      get(context).editable ? $$render(consequent_1) : $$render(alternate, !1);
    });
  }
  var div_6 = sibling(div_5, 4), node_6 = child(div_6);
  {
    var consequent_2 = /* @__PURE__ */ __name(($$anchor2) => {
      var title_1 = /* @__PURE__ */ derived(() => localize("DND5E.VehicleType"));
      InlineTextDropdownList($$anchor2, {
        get options() {
          return get(vehicleTypes);
        },
        get selected() {
          return get(currentVehicleType);
        },
        onOptionClicked: /* @__PURE__ */ __name((option) => get(context).actor.update({ "system.vehicleType": option }), "onOptionClicked"),
        get title() {
          return get(title_1);
        }
      });
    }, "consequent_2"), alternate_1 = /* @__PURE__ */ __name(($$anchor2) => {
      var span_1 = root_5$1();
      template_effect(() => set_attribute(span_1, "title", localize("DND5E.VehicleType")));
      var text_1 = child(span_1);
      template_effect(() => set_text(text_1, get(currentVehicleType).text)), append($$anchor2, span_1);
    }, "alternate_1");
    if_block(node_6, ($$render) => {
      get(context).editable ? $$render(consequent_2) : $$render(alternate_1, !1);
    });
  }
  var node_7 = sibling(div_6, 4);
  key_block(node_7, () => get(context).lockSensitiveFields, ($$anchor2) => {
    DelimitedTruncatedContent($$anchor2, {
      cssClass: "flex-1",
      children: /* @__PURE__ */ __name(($$anchor3, $$slotProps) => {
        var fragment_5 = root_7$1(), node_8 = first_child(fragment_5), editable = /* @__PURE__ */ derived(() => get(context).editable && !get(context).lockSensitiveFields), placeholder = /* @__PURE__ */ derived(() => localize("DND5E.Dimensions"));
        ContentEditableFormField(node_8, {
          element: "span",
          get document() {
            return get(context).actor;
          },
          field: "system.traits.dimensions",
          get value() {
            return get(context).system.traits.dimensions;
          },
          get title() {
            return get(context).system.traits.dimensions;
          },
          get editable() {
            return get(editable);
          },
          get placeholder() {
            return get(placeholder);
          },
          selectOnFocus: !0
        });
        var node_9 = sibling(node_8, 2);
        InlineSource(node_9, {
          get document() {
            return get(context).actor;
          },
          keyPath: "system.source",
          get editable() {
            return get(context).unlocked;
          }
        }), append($$anchor3, fragment_5);
      }, "children"),
      $$slots: { default: !0 }
    });
  });
  var div_7 = sibling(node_7, 2), node_10 = child(div_7);
  {
    var consequent_3 = /* @__PURE__ */ __name(($$anchor2) => {
      var button = root_8$3();
      button.__click = [on_click$4, context], template_effect(() => set_attribute(button, "title", localize("TIDY5E.OriginSummaryConfig"))), template_effect(() => set_attribute(button, "tabindex", settings.value.useAccessibleKeyboardSupport ? 0 : -1)), append($$anchor2, button);
    }, "consequent_3");
    if_block(node_10, ($$render) => {
      get(context).editable && !get(context).lockSensitiveFields && $$render(consequent_3);
    });
  }
  var node_11 = sibling(div_4, 2);
  HorizontalLineSeparator(node_11, {
    borderColor: "light",
    class: "header-line-margin-left"
  });
  var node_12 = sibling(node_11, 2);
  ActorMovement(node_12, { class: "header-line-margin" });
  var node_13 = sibling(node_12, 2);
  HorizontalLineSeparator(node_13, {
    borderColor: "light",
    class: "header-line-margin-left"
  });
  var section = sibling(node_13, 2), node_14 = child(section);
  AcShieldVehicle(node_14, {});
  var node_15 = sibling(node_14, 2);
  each(node_15, 17, () => get(abilities), index, ($$anchor2, $$item) => {
    let id = /* @__PURE__ */ __name(() => get($$item)[0], "id"), ability = /* @__PURE__ */ __name(() => get($$item)[1], "ability");
    var fragment_6 = root_9$2(), node_16 = first_child(fragment_6);
    VerticalLineSeparator(node_16);
    var div_8 = sibling(node_16, 2), node_17 = child(div_8);
    AttributeBlock(node_17, {
      get id() {
        return id();
      },
      get ability() {
        return ability();
      },
      useConfigurationOption: !1,
      useSavingThrowProficiency: !1
    }), append($$anchor2, fragment_6);
  });
  var node_18 = sibling(header, 2);
  Tabs(node_18, {
    get tabs() {
      return get(context).tabs;
    },
    get sheet() {
      return get(context).actor.sheet;
    },
    get selectedTabId() {
      return get(selectedTabId);
    },
    set selectedTabId($$value) {
      set(selectedTabId, proxy($$value));
    },
    tabEnd: /* @__PURE__ */ __name(($$anchor2) => {
      var fragment_7 = comment(), node_19 = first_child(fragment_7);
      {
        var consequent_4 = /* @__PURE__ */ __name(($$anchor3) => {
          var hint = /* @__PURE__ */ derived(() => settings.value.permanentlyUnlockVehicleSheetForGm && FoundryAdapter.userIsGm() ? localize("TIDY5E.Settings.value.PermanentlyUnlockVehicleSheetForGM.title") : null);
          SheetEditModeToggle($$anchor3, {
            get hint() {
              return get(hint);
            }
          });
        }, "consequent_4");
        if_block(node_19, ($$render) => {
          get(context).editable && $$render(consequent_4);
        });
      }
      append($$anchor2, fragment_7);
    }, "tabEnd"),
    $$slots: { tabEnd: !0 }
  });
  var section_1 = sibling(node_18, 2), node_20 = child(section_1);
  TabContents(node_20, {
    get tabs() {
      return get(context).tabs;
    },
    get selectedTabId() {
      return get(selectedTabId);
    }
  }), template_effect(() => {
    set_attribute(div_2, "data-tidy-sheet-part", CONSTANTS.SHEET_PARTS.NAME_HEADER_ROW), set_attribute(div_3, "data-tidy-sheet-part", CONSTANTS.SHEET_PARTS.NAME_CONTAINER);
  }), append($$anchor, fragment), pop();
}
__name(VehicleSheetFull, "VehicleSheetFull");
delegate(["click"]);
var root_1$6 = /* @__PURE__ */ template('<article class="biography-notes"><div class="section-titles"> </div> <!></article>'), root$d = /* @__PURE__ */ template('<div class="limited-vehicle svelte-lyk7nb"><!> <section class="tidy-sheet-body svelte-lyk7nb"><div class="note-entries svelte-lyk7nb"><!></div></section></div>');
function VehicleSheetLimited($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getVehicleSheetContext);
  const localize = FoundryAdapter.localize;
  var div = root$d(), node = child(div);
  LimitedHeader(node, {
    get rounded() {
      return get(context).useRoundedPortraitStyle;
    }
  });
  var section = sibling(node, 2), div_1 = child(section), node_1 = child(div_1);
  RerenderAfterFormSubmission(node_1, {
    get andOnValueChange() {
      return get(context).system.details.biography.value;
    },
    children: /* @__PURE__ */ __name(($$anchor2, $$slotProps) => {
      var article = root_1$6(), div_2 = child(article), text2 = child(div_2);
      template_effect(() => set_text(text2, localize("DND5E.Description")));
      var node_2 = sibling(div_2, 2);
      SheetEditor(node_2, {
        get content() {
          return get(context).biographyHTML;
        },
        target: "system.details.biography.value",
        get editable() {
          return get(context).editable;
        }
      }), action(article, ($$node) => get(context).activateEditors?.($$node)), append($$anchor2, article);
    }, "children"),
    $$slots: { default: !0 }
  }), append($$anchor, div), pop();
}
__name(VehicleSheetLimited, "VehicleSheetLimited");
function VehicleSheet($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getSheetContext);
  var fragment = comment(), node = first_child(fragment);
  {
    var consequent = /* @__PURE__ */ __name(($$anchor2) => {
      VehicleSheetLimited($$anchor2, {});
    }, "consequent"), alternate = /* @__PURE__ */ __name(($$anchor2) => {
      VehicleSheetFull($$anchor2, {});
    }, "alternate");
    if_block(node, ($$render) => {
      get(context).showLimitedSheet ? $$render(consequent) : $$render(alternate, !1);
    });
  }
  append($$anchor, fragment), pop();
}
__name(VehicleSheet, "VehicleSheet");
function getInheritedClassByName(obj, className) {
  let proto = obj.__proto__;
  for (let i2 = 0; i2 < 42; i2++) {
    if (proto.constructor.name === className)
      return proto;
    proto = proto.__proto__;
  }
  return !1;
}
__name(getInheritedClassByName, "getInheritedClassByName");
function getBaseActorSheet5e(obj) {
  return getInheritedClassByName(obj, CONSTANTS.CLASS_ACTOR_SHEET_5E);
}
__name(getBaseActorSheet5e, "getBaseActorSheet5e");
class Tidy5eVehicleSheet extends dnd5e.applications.actor.ActorSheet5eVehicle {
  static {
    __name(this, "Tidy5eVehicleSheet");
  }
  context = new CoarseReactivityProvider(void 0);
  #stats = state(proxy({ lastSubmissionTime: null }));
  get stats() {
    return get(this.#stats);
  }
  set stats(value) {
    set(this.#stats, proxy(value));
  }
  currentTabId;
  expandedItems = /* @__PURE__ */ new Map();
  expandedItemData = /* @__PURE__ */ new Map();
  inlineToggleService = new InlineToggleService();
  itemTableTogglesCache;
  itemFilterService;
  #messageBus = state(proxy({ message: void 0 }));
  get messageBus() {
    return get(this.#messageBus);
  }
  set messageBus(value) {
    set(this.#messageBus, proxy(value));
  }
  constructor(...args) {
    super(...args), this.itemTableTogglesCache = new ItemTableToggleCacheService({
      userId: game.user.id,
      documentId: this.actor.id
    }), this.itemFilterService = new ItemFilterService({}, this.actor), this.currentTabId = settings.value.initialVehicleSheetTab;
  }
  get template() {
    return FoundryAdapter.getTemplate("empty-form-template.hbs");
  }
  static get defaultOptions() {
    const { width, height } = SheetPreferencesService.getByType(CONSTANTS.SHEET_TYPE_VEHICLE) ?? {};
    return FoundryAdapter.mergeObject(super.defaultOptions, {
      classes: [
        CONSTANTS.MODULE_ID,
        "sheet",
        "actor",
        CONSTANTS.SHEET_TYPE_VEHICLE,
        CONSTANTS.SHEET_LAYOUT_CLASSIC,
        "app-v1"
      ],
      width: width ?? 740,
      height: height ?? 810,
      scrollY: [
        "[data-tidy-track-scroll-y]",
        ".scroll-container"
      ]
    });
  }
  component;
  additionalComponents = [];
  _effectCleanup;
  activateListeners(html2) {
    game.user.apps[this.id] = this;
    let first = !0;
    this._effectCleanup = effect_root(() => {
      user_effect(() => {
        first || (applyMutableSettingAttributesToWindow(settings.value, this.element.get(0)), this.render());
      }), user_effect(() => {
        debug("Message bus message received", {
          app: this,
          actor: this.actor,
          message: this.messageBus
        });
      });
    }), first = !1;
    const node = html2.get(0);
    this.component = mount(VehicleSheet, {
      target: node,
      context: /* @__PURE__ */ new Map([
        [CONSTANTS.SVELTE_CONTEXT.APP_ID, this.appId],
        [
          CONSTANTS.SVELTE_CONTEXT.CONTEXT,
          this.context
        ],
        [
          CONSTANTS.SVELTE_CONTEXT.MESSAGE_BUS,
          this.messageBus
        ],
        [CONSTANTS.SVELTE_CONTEXT.STATS, this.stats],
        [
          CONSTANTS.SVELTE_CONTEXT.INLINE_TOGGLE_SERVICE,
          this.inlineToggleService
        ],
        [
          CONSTANTS.SVELTE_CONTEXT.ITEM_FILTER_SERVICE,
          this.itemFilterService
        ],
        [
          CONSTANTS.SVELTE_CONTEXT.ON_FILTER,
          this.itemFilterService.onFilter.bind(this.itemFilterService)
        ],
        [
          CONSTANTS.SVELTE_CONTEXT.ON_FILTER_CLEAR_ALL,
          this.itemFilterService.onFilterClearAll.bind(this.itemFilterService)
        ],
        [
          CONSTANTS.SVELTE_CONTEXT.CURRENT_TAB_ID,
          this.currentTabId
        ],
        [
          CONSTANTS.SVELTE_CONTEXT.ON_TAB_SELECTED,
          this.onTabSelected.bind(this)
        ],
        [
          CONSTANTS.SVELTE_CONTEXT.ON_ITEM_TOGGLED,
          this.onItemToggled.bind(this)
        ],
        [CONSTANTS.SVELTE_CONTEXT.LOCATION, ""],
        [
          CONSTANTS.SVELTE_CONTEXT.EXPANDED_ITEMS,
          new Map(this.expandedItems)
        ],
        [
          CONSTANTS.SVELTE_CONTEXT.EXPANDED_ITEM_DATA,
          new Map(this.expandedItemData)
        ],
        [
          CONSTANTS.SVELTE_CONTEXT.ITEM_TABLE_TOGGLES,
          new Map(this.itemTableTogglesCache.itemTableToggles)
        ],
        [
          CONSTANTS.SVELTE_CONTEXT.ON_ITEM_TABLE_TOGGLE,
          this.itemTableTogglesCache.onItemTableToggle.bind(this.itemTableTogglesCache)
        ]
      ])
    });
    const infoCard = mount(AttachedInfoCard, { target: node, props: { sheet: this } });
    this.additionalComponents.push(infoCard), initTidy5eContextMenu(this, html2), FoundryAdapter.createContextMenu(html2, ".activity[data-activity-id]", [], {
      onOpen: /* @__PURE__ */ __name((element2) => {
        const itemId = element2.closest("[data-item-id]")?.dataset.itemId, item = this.document.type === "container" ? this.document.system.getContainedItem(itemId) : this.document.items.get(itemId);
        !item || item instanceof Promise || element2.closest("[data-activity-id]") && dnd5e.documents.activity.UtilityActivity.onContextMenu(item, element2);
      }, "onOpen")
    });
  }
  async getData(options = {}) {
    const defaultDocumentContext = await super.getData(this.options);
    Tidy5eBaseActorSheet.applyCommonContext(defaultDocumentContext);
    const unlocked = FoundryAdapter.isSheetUnlocked(this.actor) && defaultDocumentContext.editable, actionListSortMode = SheetPreferencesService.getByType(this.actor.type).tabs?.[CONSTANTS.TAB_ACTOR_ACTIONS]?.sort ?? "m", utilities = {
      [CONSTANTS.TAB_ACTOR_ACTIONS]: {
        utilityToolbarCommands: [
          {
            title: FoundryAdapter.localize("SIDEBAR.SortModeAlpha"),
            iconClass: "fa-solid fa-arrow-down-a-z fa-fw",
            execute: /* @__PURE__ */ __name(async () => {
              await SheetPreferencesService.setDocumentTypeTabPreference(this.actor.type, CONSTANTS.TAB_ACTOR_ACTIONS, "sort", "m");
            }, "execute"),
            visible: actionListSortMode === "a"
          },
          {
            title: FoundryAdapter.localize("TIDY5E.SortMode.ActionListDefault"),
            iconClass: "fa-solid fa-arrow-down-short-wide fa-fw",
            execute: /* @__PURE__ */ __name(async () => {
              await SheetPreferencesService.setDocumentTypeTabPreference(this.actor.type, CONSTANTS.TAB_ACTOR_ACTIONS, "sort", "a");
            }, "execute"),
            visible: actionListSortMode === "m"
          },
          {
            title: FoundryAdapter.localize("TIDY5E.Commands.ExpandAll"),
            iconClass: "fas fa-angles-down",
            execute: /* @__PURE__ */ __name(() => (
              // TODO: Use app.messageBus
              this.messageBus.message = {
                tabId: CONSTANTS.TAB_ACTOR_ACTIONS,
                message: CONSTANTS.MESSAGE_BUS_EXPAND_ALL
              }
            ), "execute")
          },
          {
            title: FoundryAdapter.localize("TIDY5E.Commands.CollapseAll"),
            iconClass: "fas fa-angles-up",
            execute: /* @__PURE__ */ __name(() => (
              // TODO: Use app.messageBus
              this.messageBus.message = {
                tabId: CONSTANTS.TAB_ACTOR_ACTIONS,
                message: CONSTANTS.MESSAGE_BUS_COLLAPSE_ALL
              }
            ), "execute")
          },
          {
            title: FoundryAdapter.localize("TIDY5E.Utilities.ConfigureSections"),
            iconClass: "fas fa-cog",
            execute: /* @__PURE__ */ __name(({ context: context2, sections }) => {
              new DocumentTabSectionConfigApplication({
                document: context2.actor,
                sections,
                tabId: CONSTANTS.TAB_ACTOR_ACTIONS,
                tabTitle: VehicleSheetRuntime.getTabTitle(CONSTANTS.TAB_ACTOR_ACTIONS)
              }).render(!0);
            }, "execute")
          }
        ]
      }
    }, context = {
      ...defaultDocumentContext,
      actions: await getActorActionSections(this.actor),
      activateEditors: /* @__PURE__ */ __name((node, options2) => FoundryAdapter.activateEditors(node, this, options2?.bindSecrets), "activateEditors"),
      actorPortraitCommands: ActorPortraitRuntime.getEnabledPortraitMenuCommands(this.actor),
      allowEffectsManagement: !0,
      appId: this.appId,
      customActorTraits: CustomActorTraitsRuntime.getEnabledTraits(defaultDocumentContext),
      customContent: await VehicleSheetRuntime.getContent(defaultDocumentContext),
      document: this.document,
      filterData: this.itemFilterService.getDocumentItemFilterData(),
      filterPins: ItemFilterRuntime.defaultFilterPins[this.actor.type],
      useClassicControls: settings.value.useClassicControlsForVehicle,
      editable: defaultDocumentContext.editable,
      healthPercentage: this.actor.system.attributes.hp.pct.toNearest(0.1),
      lockExpChanges: FoundryAdapter.shouldLockExpChanges(),
      lockHpMaxChanges: FoundryAdapter.shouldLockHpMaxChanges(),
      lockItemQuantity: FoundryAdapter.shouldLockItemQuantity(),
      lockLevelSelector: FoundryAdapter.shouldLockLevelSelector(),
      lockMoneyChanges: FoundryAdapter.shouldLockMoneyChanges(),
      lockSensitiveFields: !unlocked && settings.value.useTotalSheetLock || !defaultDocumentContext.editable,
      owner: this.actor.isOwner,
      showLimitedSheet: FoundryAdapter.showLimitedSheet(this.actor),
      tabs: [],
      unlocked,
      useActionsFeature: actorUsesActionFeature(this.actor),
      useRoundedPortraitStyle: [
        CONSTANTS.CIRCULAR_PORTRAIT_OPTION_ALL,
        CONSTANTS.CIRCULAR_PORTRAIT_OPTION_NPCVEHICLE
      ].includes(settings.value.useCircularPortraitStyle),
      utilities,
      viewableWarnings: defaultDocumentContext.warnings?.filter((w2) => !isNil(w2.message?.trim(), "")) ?? []
    };
    for (const item of context.items) {
      const ctx = context.itemContext[item.id];
      item.type === CONSTANTS.ITEM_TYPE_CONTAINER && (ctx.containerContents = await Container.getContainerContents(item));
    }
    let tabs = await VehicleSheetRuntime.getTabs(context);
    const selectedTabs = TidyFlags.selectedTabs.get(context.actor);
    if (selectedTabs?.length)
      tabs = tabs.filter((t2) => selectedTabs?.includes(t2.id)).sort((a2, b2) => selectedTabs.indexOf(a2.id) - selectedTabs.indexOf(b2.id));
    else {
      const defaultTabs = settings.value.defaultVehicleSheetTabs;
      tabs = tabs.filter((t2) => defaultTabs?.includes(t2.id)).sort((a2, b2) => defaultTabs.indexOf(a2.id) - defaultTabs.indexOf(b2.id));
    }
    return context.tabs = tabs, debug("Vehicle Sheet context data", context), context;
  }
  _prepareItems(context) {
    const cargoColumns = [
      {
        label: game.i18n.localize("DND5E.Quantity"),
        css: "item-qty",
        property: "quantity",
        editable: "Number"
      }
    ], equipmentColumns = [
      {
        label: game.i18n.localize("DND5E.Quantity"),
        css: "item-qty",
        property: "system.quantity",
        editable: "Number"
      },
      {
        label: game.i18n.localize("DND5E.AC"),
        css: "item-ac",
        property: "system.armor.value"
      },
      {
        label: game.i18n.localize("DND5E.HP"),
        css: "item-hp",
        property: "system.hp.value",
        maxProperty: "system.hp.max",
        editable: "Number"
      },
      {
        label: game.i18n.localize("DND5E.Threshold"),
        css: "item-threshold",
        property: "threshold"
      }
    ], features = {
      actions: {
        label: game.i18n.localize("DND5E.ActionPl"),
        items: [],
        hasActions: !0,
        crewable: !0,
        key: "actions",
        dataset: { type: "feat" },
        columns: [
          {
            label: game.i18n.localize("DND5E.Cover"),
            css: "item-cover",
            property: "cover"
          }
        ],
        show: !0
      },
      equipment: {
        label: game.i18n.localize(CONFIG.Item.typeLabels.equipment),
        items: [],
        crewable: !0,
        dataset: {
          type: "equipment",
          "system.type.value": "vehicle"
        },
        columns: equipmentColumns,
        key: "equipment",
        show: !0
      },
      passive: {
        label: game.i18n.localize("DND5E.Features"),
        items: [],
        dataset: { type: "feat" },
        key: "passive",
        show: !0
      },
      reactions: {
        label: game.i18n.localize("DND5E.ReactionPl"),
        items: [],
        dataset: { type: "feat" },
        key: "reactions",
        show: !0
      },
      weapons: {
        label: game.i18n.localize(`${CONFIG.Item.typeLabels.weapon}Pl`),
        items: [],
        crewable: !0,
        dataset: { type: "weapon", "system.weaponType": "siege" },
        columns: equipmentColumns,
        key: "weapons",
        show: !0
      }
    };
    context.items.forEach((item) => {
      context.itemContext[item.id] ??= this._prepareItem(item, context);
    });
    const cargo = {
      crew: {
        label: game.i18n.localize("DND5E.VehicleCrew"),
        items: context.actor.system.cargo.crew,
        css: "cargo-row crew",
        editableName: !0,
        dataset: { type: "crew" },
        columns: cargoColumns,
        key: "crew",
        show: !0
      },
      passengers: {
        label: game.i18n.localize("DND5E.VehiclePassengers"),
        items: context.actor.system.cargo.passengers,
        css: "cargo-row passengers",
        editableName: !0,
        dataset: { type: "passengers" },
        columns: cargoColumns,
        key: "passengers",
        show: !0
      },
      cargo: {
        label: game.i18n.localize("DND5E.VehicleCargo"),
        items: [],
        dataset: { type: "loot" },
        columns: [
          {
            label: game.i18n.localize("DND5E.Quantity"),
            css: "item-qty",
            property: "system.quantity",
            editable: "Number"
          },
          {
            label: game.i18n.localize("DND5E.Price"),
            css: "item-price",
            property: "system.price.value",
            editable: "Number"
          },
          {
            label: game.i18n.localize("DND5E.Weight"),
            css: "item-weight",
            property: "system.weight.value",
            editable: "Number"
          }
        ],
        key: "cargo",
        show: !0
      }
    }, baseUnits = CONFIG.DND5E.encumbrance.baseUnits[this.actor.type] ?? CONFIG.DND5E.encumbrance.baseUnits.default, units = game.settings.get("dnd5e", "metricWeightUnits") ? baseUnits.metric : baseUnits.imperial;
    let totalWeight = 0;
    for (const item of context.items) {
      const ctx = context.itemContext[item.id] ??= {};
      if (this._prepareCrewedItem(item, ctx), item.flags.dnd5e?.vehicleCargo === !0) {
        totalWeight += item.system.totalWeightin?.(units) ?? 0, cargo.cargo.items.push(item);
        continue;
      }
      switch (item.type) {
        case "weapon":
          features.weapons.items.push(item);
          break;
        case "equipment":
          features.equipment.items.push(item);
          break;
        case "feat":
          const firstActivityActivationType = item.system.activities?.contents[0]?.activation?.type;
          !firstActivityActivationType || firstActivityActivationType === "none" ? features.passive.items.push(item) : firstActivityActivationType === "reaction" ? features.reactions.items.push(item) : features.actions.items.push(item);
          break;
        default:
          totalWeight += item.system.totalWeightIn?.(units) ?? 0, cargo.cargo.items.push(item);
      }
    }
    context.features = Object.values(features), context.cargo = Object.values(cargo), context.encumbrance = context.system.attributes.encumbrance;
  }
  _prepareItem(item, context) {
    const { uses } = item.system, ctx = {};
    return ctx.canToggle = !1, ctx.hasUses = uses && uses.max > 0, ctx.activities = Activities.getVisibleActivities(item, item.system.activities)?.map(Activities.getActivityItemContext), ctx;
  }
  /**
   * Prepare items that are mounted to a vehicle and require one or more crew to operate.
   * @param {object} item     Copy of the item data being prepared for display.
   * @param {object} context  Display context for the item.
   * @protected
   */
  _prepareCrewedItem(item, context) {
    const isCrewed = item.system.crewed;
    context.toggleClass = isCrewed ? "active" : "", context.toggleTitle = game.i18n.localize(`DND5E.${isCrewed ? "Crewed" : "Uncrewed"}`);
    const firstActivityActivationType = item.system.activities?.contents[0]?.activation?.type;
    item.type === "feat" && firstActivityActivationType === "crew" && (context.cover = game.i18n.localize(`DND5E.${item.system.cover ? "CoverTotal" : "None"}`), item.system.cover === 0.5 ? context.cover = "½" : item.system.cover === 0.75 ? context.cover = "¾" : item.system.cover === null && (context.cover = "—")), (item.type === "equipment" || item.type === "weapon") && (context.threshold = item.system.hp.dt ? item.system.hp.dt : "—");
  }
  async setExpandedItemData() {
    this.expandedItemData.clear();
    for (const id of this.expandedItems.keys()) {
      const item = this.actor.items.get(id);
      item && this.expandedItemData.set(id, await item.getChatData({ secrets: this.actor.isOwner }));
    }
  }
  /**
   * A boolean which gates double-rendering and prevents a second
   * colliding render from triggering an infamous
   * "One of original or other are not Objects!" error.
   */
  tidyRendering = !1;
  render(...args) {
    debug("Sheet render begin"), this.tidyRendering = !0, super.render(...args);
  }
  _renderMutex = new AsyncMutex();
  async _render(force, options = {}) {
    await this._renderMutex.lock(async () => {
      this.options.token && this.tidyRendering === !1 || await this._renderSheet(force, options);
    }), this.tidyRendering = !1, debug("Sheet render end");
  }
  async _renderSheet(force, options = {}) {
    await this.setExpandedItemData();
    const data = await this.getData();
    if (SheetSections.accountForExternalSections(["features"], data), this.context.data = data, force) {
      const { width, height } = SheetPreferencesService.getByType(CONSTANTS.SHEET_TYPE_VEHICLE) ?? {};
      this.position = {
        ...this.position,
        width: width ?? this.position.width,
        height: height ?? this.position.height
      }, this._saveScrollPositions(this.element), this._destroySvelteComponent(), await super._render(force, options), applySheetAttributesToWindow(this.actor.documentName, this.actor.uuid, this.actor.type, this.element.get(0)), await this.renderCustomContent({ data, isFullRender: !0 }), TidyHooks.tidy5eSheetsRenderActorSheet(this, this.element.get(0), data, !0), CustomContentRenderer.wireCompatibilityEventListeners(this.element, super.activateListeners, this), blurUntabbableButtonsOnClick(this.element.get(0));
      return;
    }
    await maintainCustomContentInputFocus(this, async () => {
      applyTitleToWindow(this.title, this.element.get(0)), await this.renderCustomContent({ data, isFullRender: !1 }), TidyHooks.tidy5eSheetsRenderActorSheet(this, this.element.get(0), data, !1), CustomContentRenderer.wireCompatibilityEventListeners(this.element, super.activateListeners, this);
    });
  }
  async renderCustomContent(args) {
    await CustomContentRenderer.render({
      app: this,
      customContent: args.data.customContent,
      data: args.data,
      element: this.element,
      isFullRender: args.isFullRender,
      superActivateListeners: super.activateListeners,
      tabs: args.data.tabs
    });
  }
  _getHeaderButtons() {
    const buttons = super._getHeaderButtons();
    return FoundryAdapter.removeConfigureSettingsButtonWhenLockedForNonGm(buttons);
  }
  _destroySvelteComponent() {
    this.component && unmount(this.component), this.component = void 0, this.additionalComponents.forEach((c2) => unmount(c2)), this.additionalComponents = [];
  }
  _saveScrollPositions(html2) {
    if (html2.length && this.component) {
      const save2 = super._saveScrollPositions(html2);
      return debug("Saved scroll positions", this._scrollPositions), save2;
    }
  }
  async _onDropSingleItem(itemData, event2) {
    const isCargo = [
      "weapon",
      "equipment",
      "consumable",
      "tool",
      "loot",
      "container"
    ].includes(itemData.type) && this.currentTabId === CONSTANTS.TAB_VEHICLE_CARGO_AND_CREW;
    if (foundry.utils.setProperty(itemData, "flags.dnd5e.vehicleCargo", isCargo), itemData.type === "spell") {
      const options = {};
      return settings.value.includeFlagsInSpellScrollCreation && (options.flags = itemData.flags), (await dnd5e.documents.Item5e.createScrollFromSpell(itemData, options)).toObject();
    }
    if (itemData.type === "consumable")
      return super._onDropSingleItem(itemData, event2);
    const baseActor5eClass = getBaseActorSheet5e(this);
    if (baseActor5eClass)
      return baseActor5eClass._onDropSingleItem.call(this, itemData, event2);
  }
  close(options = {}) {
    return this._effectCleanup?.(), this._destroySvelteComponent(), delete game.user.apps[this.id], super.close(options);
  }
  async _onSubmit(...args) {
    await super._onSubmit(...args), this.stats.lastSubmissionTime = /* @__PURE__ */ new Date();
  }
  _disableFields(...args) {
    debug("Ignoring call to disable fields. Delegating to Tidy Sheets...");
  }
  _onResize(event2) {
    super._onResize(event2);
    const { width, height } = this.position;
    SheetPreferencesService.setDocumentTypePreference(CONSTANTS.SHEET_TYPE_VEHICLE, "width", width), SheetPreferencesService.setDocumentTypePreference(CONSTANTS.SHEET_TYPE_VEHICLE, "height", height);
  }
  /* -------------------------------------------- */
  /* SheetTabCacheable
  /* -------------------------------------------- */
  onTabSelected(tabId) {
    this.currentTabId = tabId;
  }
  /* -------------------------------------------- */
  /* SheetExpandedItemsCacheable
  /* -------------------------------------------- */
  onItemToggled(itemId, isVisible, location) {
    const locationSet = this.expandedItems.get(itemId) ?? this.expandedItems.set(itemId, /* @__PURE__ */ new Set()).get(itemId);
    isVisible ? locationSet?.add(location) : locationSet?.delete(location), debug("Item Toggled", { expandedItems: this.expandedItems });
  }
  /* -------------------------------------------- */
  /* SearchFilterCacheable
  /* -------------------------------------------- */
  onSearch(location, text2) {
    debug("Searched", { location, text: text2 }), this.searchFilters.set(location, text2);
  }
}
var root$c = /* @__PURE__ */ template(
  `<h2>Item Type Not Found</h2> <p>The item type <code> </code> does not have a sheet in Tidy
  5e Sheets. Please request any item type sheets in an issue on the <a target="_blank" href="https://github.com/kgar/foundry-vtt-tidy-5e-sheets/issues">Tidy 5e github repository</a>.</p>`,
  1
);
function TypeNotFoundSheet($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getItemSheetContext);
  var fragment = root$c(), p2 = sibling(first_child(fragment), 2), code = sibling(child(p2)), text2 = child(code);
  template_effect(() => set_text(text2, get(context).item.type)), append($$anchor, fragment), pop();
}
__name(TypeNotFoundSheet, "TypeNotFoundSheet");
function DragAndDropMixin(BaseApplication) {
  class DragAndDrop extends BaseApplication {
    static {
      __name(this, "DragAndDrop");
    }
    #dragDrop;
    constructor(...args) {
      super(...args), this.#dragDrop = this.#createDragDropHandlers();
    }
    /**
     * Create drag-and-drop workflow handlers for this Application
     * @returns {DragDrop[]}     An array of DragDrop handlers
     * @private
     */
    #createDragDropHandlers() {
      const dragDrop = this.options.dragDrop;
      return !dragDrop || !Array.isArray(dragDrop) ? [] : Array.isArray(dragDrop) ? dragDrop.map((d2) => (d2.permissions = {
        dragstart: this._canDragStart.bind(this),
        drop: this._canDragDrop.bind(this)
      }, d2.callbacks = {
        dragstart: this._onDragStart.bind(this),
        dragover: this._onDragOver.bind(this),
        drop: this._onDrop.bind(this)
      }, new DragDrop(d2))) : [];
    }
    /** @inheritdoc */
    _canDragStart(selector) {
      return this.isEditable;
    }
    /* -------------------------------------------- */
    /** @inheritdoc */
    _canDragDrop(selector) {
      return this.isEditable;
    }
    _onDragStart(event2) {
    }
    _onDragOver(event2) {
    }
    _onDrop(event2) {
    }
    /**
     * Returns an array of DragDrop instances
     * @type {DragDrop[]}
     */
    get dragDrop() {
      return this.#dragDrop;
    }
    _onRender(...args) {
      this.#dragDrop.forEach((d2) => d2.bind(this.element)), super._onRender(...args);
    }
  }
  return DragAndDrop;
}
__name(DragAndDropMixin, "DragAndDropMixin");
class ImportSheetControl {
  static {
    __name(this, "ImportSheetControl");
  }
  static actionName = "importFromCompendium";
  static getSheetControl() {
    return {
      action: "importFromCompendium",
      icon: "fas fa-download",
      label: "Import",
      visible() {
        const document2 = this.document;
        return document2.constructor.name !== "Folder" && !document2.isEmbedded && document2.compendium && document2.constructor.canUserCreate(game.user);
      },
      position: "header"
    };
  }
  static async importFromCompendium(app, document2) {
    return await app.close(), document2.collection.importFromCompendium(
      document2.compendium,
      document2.id
    );
  }
}
class Tidy5eItemSheetClassic extends DragAndDropMixin(SvelteApplicationMixin(foundry.applications.sheets.ItemSheetV2)) {
  static {
    __name(this, "Tidy5eItemSheetClassic");
  }
  currentTabId = void 0;
  constructor(...args) {
    super(...args);
  }
  static DEFAULT_OPTIONS = {
    classes: [
      CONSTANTS.MODULE_ID,
      "sheet",
      "item",
      "app-v2",
      CONSTANTS.SHEET_LAYOUT_CLASSIC
    ],
    tag: "form",
    window: {
      frame: !0,
      positioned: !0,
      resizable: !0,
      controls: [ImportSheetControl.getSheetControl()]
    },
    position: { width: 560, height: 600 },
    actions: {
      async [ImportSheetControl.actionName]() {
        await ImportSheetControl.importFromCompendium(this, this.document);
      }
    },
    dragDrop: [{ dropSelector: "form" }],
    submitOnClose: !1
  };
  _createComponent(node) {
    const sheetComponent = ItemSheetRuntime.sheets[this.item.type], context = /* @__PURE__ */ new Map([
      [
        CONSTANTS.SVELTE_CONTEXT.CONTEXT,
        this._context
      ],
      [
        CONSTANTS.SVELTE_CONTEXT.CURRENT_TAB_ID,
        this.currentTabId
      ]
    ]), component2 = sheetComponent ? mount(sheetComponent.Sheet, { target: node, context }) : mount(TypeNotFoundSheet, { target: node, context }), contextOptions = this._getAdvancementContextMenuOptions(), html2 = globalThis.$(this.element);
    return TidyHooks.dnd5eGetItemAdvancementContext(html2, contextOptions), contextOptions && FoundryAdapter.createContextMenu(html2, ".advancement-item", contextOptions), FoundryAdapter.createContextMenu(html2, ".activity[data-activity-id]", [], {
      onOpen: /* @__PURE__ */ __name((target) => dnd5e.documents.activity.UtilityActivity.onContextMenu(this.item, target), "onOpen")
    }), initTidy5eContextMenu(this, html2), component2;
  }
  _createAdditionalComponents(content) {
    return [mount(AttachedInfoCard, { target: content, props: { sheet: this } })];
  }
  async _prepareContext(options) {
    const rollData = this.document.getRollData(), enrichmentOptions = {
      secrets: this.document.isOwner,
      relativeTo: this.item,
      rollData
    }, enriched = {
      description: await TextEditor.enrichHTML(this.document.system.description.value, enrichmentOptions),
      unidentified: await TextEditor.enrichHTML(this.document.system.unidentified?.description, enrichmentOptions),
      chat: await TextEditor.enrichHTML(this.document.system.description.chat, enrichmentOptions)
    }, isIdentifiable = "identified" in this.document.system, itemDescriptions = [];
    itemDescriptions.push({
      enriched: enriched.description,
      content: this.document.system.description.value,
      field: "system.description.value",
      label: FoundryAdapter.localize("DND5E.Description")
    }), isIdentifiable && FoundryAdapter.userIsGm() && itemDescriptions.push({
      enriched: enriched.unidentified,
      content: this.document.system.unidentified.description,
      field: "system.unidentified.description",
      label: FoundryAdapter.localize("DND5E.DescriptionUnidentified")
    }), itemDescriptions.push({
      enriched: enriched.chat,
      content: this.document.system.description.chat,
      field: "system.description.chat",
      label: FoundryAdapter.localize("DND5E.DescriptionChat")
    });
    const sourceSystem = this.item.system.toObject(), editable = this.isEditable, target = this.item.type === "spell" ? this.item.system.target : null, context = {
      activities: (this.document.system.activities ?? []).filter((a2) => Activities.isConfigurable(a2)).map(({ _id: id, name, img, sort, uuid }) => ({
        id,
        name,
        sort,
        uuid,
        img: { src: img, svg: img?.endsWith(".svg") }
      })).sort((a2, b2) => a2.sort - b2.sort),
      affectsPlaceholder: game.i18n.localize(`DND5E.Target${target?.template?.type ? "Every" : "Any"}`),
      advancementEditable: (this.advancementConfigurationMode || !this.document.isEmbedded) && editable,
      config: CONFIG.DND5E,
      customContent: [],
      customEquipmentTypeGroups: ItemSheetRuntime.getCustomEquipmentTypeGroups(),
      data: this.document.toObject(!1),
      defaultAbility: "",
      dimensions: target?.template?.dimensions,
      document: this.document,
      durationUnits: [
        ...Object.entries(CONFIG.DND5E.specialTimePeriods).map(([value, label]) => ({ value, label })),
        ...Object.entries(CONFIG.DND5E.scalarTimePeriods).map(([value, label]) => ({ value, label, group: "DND5E.DurationTime" })),
        ...Object.entries(CONFIG.DND5E.permanentTimePeriods).map(([value, label]) => ({
          value,
          label,
          group: "DND5E.DurationPermanent"
        }))
      ],
      editable,
      enriched,
      isEmbedded: this.document.isEmbedded,
      item: this.document,
      itemDescriptions,
      itemOverrides: new Set(this._getItemOverrides()),
      healthPercentage: getPercentage(this.item?.system?.hp?.value, this.item?.system?.hp?.max),
      identifiedName: FoundryAdapter.getIdentifiedName(this.item),
      labels: this.document.labels,
      lockItemQuantity: FoundryAdapter.shouldLockItemQuantity(),
      limited: this.document.limited,
      options: this.options,
      owner: this.document.isOwner,
      scalarTarget: !["", "self", "any"].includes(target?.affects?.type),
      source: sourceSystem,
      system: this.document.system,
      tabs: [],
      title: this.title,
      rollData,
      user: game.user,
      // Item Type, Status, and Details
      // @ts-expect-error
      itemType: game.i18n.localize(CONFIG.Item.typeLabels[this.item.type]),
      itemStatus: this._getItemStatus(),
      baseItems: await this._getItemBaseTypes(),
      isPhysical: this.document.system.hasOwnProperty("quantity"),
      // Identified state
      isIdentifiable,
      isIdentified: this.document.system.identified !== !1,
      // Armor Class
      hasDexModifier: this.document.isArmor && this.document.system.type.value !== "shield",
      // Advancement
      advancement: this._getItemAdvancement(this.document),
      effects: dnd5e.applications.components.EffectsElement.prepareCategories(this.document.effects, { parent: this.item }),
      concealDetails: !game.user.isGM && this.document.system.identified === !1,
      toggleAdvancementLock: this.toggleAdvancementLock.bind(this),
      rangeTypes: [
        ...Object.entries(CONFIG.DND5E.rangeTypes).map(([value, label]) => ({ value, label })),
        ...Object.entries(CONFIG.DND5E.movementUnits).map(([value, label]) => ({ value, label, group: "DND5E.RangeDistance" }))
      ],
      activationTypes: [
        ...Object.entries(CONFIG.DND5E.activityActivationTypes).map(
          // @ts-ignore
          ([value, { label, group }]) => ({ value, label, group: group ?? "" })
        ),
        { value: "", label: "DND5E.NoneActionLabel" }
      ],
      properties: { active: [], object: {}, options: [] },
      equipmentTypes: [
        ...Object.entries(CONFIG.DND5E.miscEquipmentTypes).map(([value, label]) => ({ value, label })),
        ...Object.entries(CONFIG.DND5E.armorTypes).map(([value, label]) => ({ value, label, group: "DND5E.Armor" })),
        ...ItemSheetRuntime.getCustomEquipmentTypeGroups().reduce(
          (prev, curr) => {
            for (let [key, typeLabel] of Object.entries(curr.types))
              prev.push({
                value: key,
                label: typeLabel,
                group: curr.label
              });
            return prev;
          },
          []
        )
      ],
      recoveryPeriods: [
        ...Object.entries(CONFIG.DND5E.limitedUsePeriods).filter(([, { deprecated }]) => !deprecated).map(([value, { label }]) => ({ value, label, group: "DND5E.DurationTime" })),
        {
          value: "recharge",
          label: "DND5E.USES.Recovery.Recharge.Label"
        }
      ],
      recoveryTypes: [
        {
          value: "recoverAll",
          label: "DND5E.USES.Recovery.Type.RecoverAll"
        },
        {
          value: "loseAll",
          label: "DND5E.USES.Recovery.Type.LoseAll"
        },
        {
          value: "formula",
          label: "DND5E.USES.Recovery.Type.Formula"
        }
      ],
      usesRecovery: (this.document.system.uses?.recovery ?? []).map((data) => ({
        data,
        formulaOptions: data.period === "recharge" ? data.recharge?.options : null
      })),
      damageTypes: [],
      denominationOptions: []
    };
    context.properties = {
      active: [],
      object: Object.fromEntries((this.document.system.properties ?? []).map((p2) => [p2, !0])),
      options: (this.document.system.validProperties ?? []).reduce(
        (arr, k) => {
          const { label } = CONFIG.DND5E.itemProperties[k];
          return arr.push({
            label,
            value: k,
            selected: this.item._source.system.properties?.includes(k)
          }), arr;
        },
        []
      )
    }, this.item.type !== "spell" && context.properties.options.sort((a2, b2) => a2.label.localeCompare(b2.label, game.i18n.lang)), (game.user.isGM || this.item.system.identified !== !1) && context.properties.active.push(...this.item.system.cardProperties ?? [], ...Object.values(this.item.labels.activations[0] ?? {}), ...this.item.system.equippableItemCardProperties ?? []);
    const { building, craft, order, type } = this.item.system;
    if (this.item.type === "facility" && (context.orders = Object.entries(CONFIG.DND5E.facilities.orders).reduce(
      (obj, [value, config]) => {
        const { label, basic, hidden } = config;
        if (hidden)
          return obj;
        if (value === "build")
          return building.built || obj.executable.push({ value, label }), obj;
        if (value === "change")
          return type.subtype === "garden" && obj.executable.push({ value, label }), obj;
        if (type.value === "basic") {
          if (!building.built) return obj;
          basic && obj.executable.push({ value, label });
        } else type.value === "special" && !basic && (obj.available.push({ value, label }), (value === order || value === "maintain") && obj.executable.push({ value, label }));
        return obj;
      },
      { available: [], executable: [] }
    )), type?.value === "special" && (order === "craft" || order === "harvest")) {
      context.canCraft = !0, context.isHarvesting = order === "harvest";
      const crafting = await fromUuid(craft.item);
      crafting && (context.craft = {
        img: crafting.img,
        name: crafting.name,
        contentLink: crafting.toAnchor().outerHTML
      });
    }
    const eligibleCustomTabs = ItemSheetRuntime.getCustomItemTabs(context), customTabs = await TabManager.prepareTabsForRender(context, eligibleCustomTabs), tabs = ItemSheetRuntime.sheets[this.item.type]?.defaultTabs() ?? [];
    if (tabs.push(...customTabs), context.tabs = tabs, context.customContent = await ItemSheetRuntime.getContent(context), ["feat", "loot", "consumable"].includes(this.document.type)) {
      const name = this.document.type === "feat" ? "feature" : this.document.type, itemTypes = (
        // @ts-expect-error
        CONFIG.DND5E[`${name}Types`][this.document.system.type.value]
      );
      itemTypes && (context.itemType = itemTypes.label, context.itemSubtypes = itemTypes.subtypes);
    }
    return await this.item.system.getSheetData?.(context), context;
  }
  /**
   * Whether advancements on embedded items should be configurable.
   * @type {boolean}
   */
  advancementConfigurationMode = !1;
  /* -------------------------------------------- */
  /**
   * Get the display object used to show the advancement tab.
   * @param {Item5e} item  The item for which the advancement is being prepared.
   * @returns {object}     Object with advancement data grouped by levels.
   */
  _getItemAdvancement(item) {
    if (!item.system.advancement) return {};
    const advancement = {}, configMode = !item.parent || this.advancementConfigurationMode, legacyDisplay = this.options.legacyDisplay, maxLevel = configMode ? -1 : item.system.levels ?? item.class?.system.levels ?? item.parent.system.details?.level ?? -1;
    item.advancement.needingConfiguration.length && (advancement.unconfigured = {
      items: item.advancement.needingConfiguration.map((a2) => ({
        id: a2.id,
        order: a2.constructor.order,
        title: a2.title,
        icon: a2.icon,
        classRestriction: a2.classRestriction,
        configured: !1,
        tags: this._getItemAdvancementTags(a2),
        classes: [a2.icon?.endsWith(".svg") ? "svg" : ""].filterJoin(" ")
      })),
      configured: "partial"
    });
    for (let [level, advancements] of Object.entries(item.advancement.byLevel)) {
      configMode || (advancements = advancements.filter((a2) => a2.appliesToClass));
      const items = advancements.map((advancement2) => ({
        id: advancement2.id,
        order: advancement2.sortingValueForLevel(level),
        title: advancement2.titleForLevel(level, { configMode, legacyDisplay }),
        icon: advancement2.icon,
        classRestriction: advancement2.classRestriction,
        summary: advancement2.summaryForLevel(level, { configMode, legacyDisplay }),
        configured: advancement2.configuredForLevel(level),
        tags: this._getItemAdvancementTags(advancement2),
        value: advancement2.valueForLevel?.(level),
        classes: [
          advancement2.icon?.endsWith(".svg") ? "svg" : ""
        ].filterJoin(" ")
      }));
      items.length && (advancement[level] = {
        items: items.sort((a2, b2) => a2.order.localeCompare(b2.order, game.i18n.lang)),
        configured: level > maxLevel ? !1 : items.some((a2) => !a2.configured) ? "partial" : "full"
      });
    }
    return advancement;
  }
  /* -------------------------------------------- */
  /**
   * Prepare tags for an Advancement.
   * @param {Advancement} advancement  The Advancement.
   * @returns {{label: string, icon: string}[]}
   * @protected
   */
  _getItemAdvancementTags(advancement) {
    return [];
  }
  /* -------------------------------------------- */
  /**
   * Get the base weapons and tools based on the selected type.
   * @returns {Promise<object>}  Object with base items for this type formatted for selectOptions.
   * @protected
   */
  async _getItemBaseTypes() {
    const baseIds = this.item.type === "equipment" ? {
      ...CONFIG.DND5E.armorIds,
      ...CONFIG.DND5E.shieldIds
    } : (
      // @ts-expect-error
      CONFIG.DND5E[`${this.item.type}Ids`]
    );
    if (baseIds === void 0) return {};
    const baseType = this.item.system.type.value, items = {};
    for (const [name, id] of Object.entries(baseIds)) {
      const baseItem = await dnd5e.documents.Trait.getBaseItem(id);
      baseType === baseItem?.system?.type?.value && (items[name] = baseItem.name);
    }
    return Object.fromEntries(Object.entries(items).sort((lhs, rhs) => lhs[1].localeCompare(rhs[1], game.i18n.lang)));
  }
  /* -------------------------------------------- */
  /**
   * Get the text item status which is shown beneath the Item type in the top-right corner of the sheet.
   * @returns {string|null}  Item status string if applicable to item's type.
   * @protected
   */
  _getItemStatus() {
    switch (this.item.type) {
      case "class":
        return game.i18n.format("DND5E.LevelCount", {
          ordinal: this.item.system.levels.ordinalString()
        });
      case "equipment":
      case "weapon":
        return game.i18n.localize(this.item.system.equipped ? "DND5E.Equipped" : "DND5E.Unequipped");
      case "feat":
      case "consumable":
        return this.item.system.type.label;
      case "spell":
        return CONFIG.DND5E.spellPreparationModes[this.item.system.preparation.mode]?.label;
      case "tool":
        return CONFIG.DND5E.proficiencyLevels[this.item.system.prof?.multiplier || 0];
    }
    return null;
  }
  /* -------------------------------------------- */
  /**
   * Retrieve the list of fields that are currently modified by Active Effects on the Item.
   * @returns {string[]}
   * @protected
   */
  _getItemOverrides() {
    const overrides = Object.keys(foundry.utils.flattenObject(this.item.overrides ?? {}));
    return this.item.system.getItemOverrides?.(overrides), "properties" in this.item.system && dnd5e.documents.ActiveEffect5e.addOverriddenChoices(this.item, "system.properties", "system.properties", overrides), "damage" in this.item.system && foundry.utils.getProperty(this.item.overrides, "system.damage.parts") && (overrides.push("damage-control"), Array.fromRange(this.item.system.damage.parts.length).forEach((index2) => overrides.push(`system.damage.parts.${index2}.0`, `system.damage.parts.${index2}.1`))), overrides;
  }
  /* -------------------------------------------- */
  /**
   * Get the set of ContextMenu options which should be applied for advancement entries.
   * @returns {ContextMenuEntry[]}  Context menu entries.
   * @protected
   */
  _getAdvancementContextMenuOptions() {
    const condition = /* @__PURE__ */ __name((li) => (this.advancementConfigurationMode || !this.isEmbedded) && this.isEditable, "condition");
    return [
      {
        name: "DND5E.AdvancementControlEdit",
        icon: "<i class='fas fa-edit fa-fw'></i>",
        condition,
        callback: /* @__PURE__ */ __name((li) => this._onAdvancementAction(li[0], "edit"), "callback")
      },
      {
        name: "DND5E.AdvancementControlDuplicate",
        icon: "<i class='fas fa-copy fa-fw'></i>",
        condition: /* @__PURE__ */ __name((li) => {
          const id = li[0].closest(".advancement-item")?.dataset.id, advancement = this.item.advancement.byId[id];
          return condition() && advancement?.constructor.availableForItem(this.item);
        }, "condition"),
        callback: /* @__PURE__ */ __name((li) => this._onAdvancementAction(li[0], "duplicate"), "callback")
      },
      {
        name: "DND5E.AdvancementControlDelete",
        icon: "<i class='fas fa-trash fa-fw' style='color: rgb(255, 65, 65);'></i>",
        condition,
        callback: /* @__PURE__ */ __name((li) => this._onAdvancementAction(li[0], "delete"), "callback")
      }
    ];
  }
  /* -------------------------------------------- */
  /*  Rendering Life-Cycle Methods                */
  /* -------------------------------------------- */
  _onRender(context, options) {
    super._onRender(context, options), TidyHooks.tidy5eSheetsRenderItemSheet(this, this.element, context, !!options.isFirstRender);
  }
  /* -------------------------------------------- */
  /*  Drag and Drop                               */
  /* -------------------------------------------- */
  /** @inheritDoc */
  _canDragStart(selector) {
    return [".advancement-item", "[data-effect-id]"].includes(selector) ? !0 : this.isEditable;
  }
  /* -------------------------------------------- */
  /** @inheritDoc */
  _canDragDrop(selector) {
    return this.isEditable;
  }
  /* -------------------------------------------- */
  /** @inheritDoc */
  _onDragStart(event2) {
    const li = event2.currentTarget;
    if (event2.target.classList.contains("content-link")) return;
    let dragData;
    li.dataset.effectId ? dragData = this.item.effects.get(li.dataset.effectId).toDragData() : li.classList.contains("advancement-item") && !isNil(li.dataset.id) && (dragData = this.item.advancement.byId[li.dataset.id]?.toDragData()), dragData && event2.dataTransfer?.setData("text/plain", JSON.stringify(dragData));
  }
  /* -------------------------------------------- */
  /** @inheritDoc */
  async _onDrop(event2) {
    const data = TextEditor.getDragEventData(event2), item = this.item;
    if (TidyHooks.dnd5eDropItemSheetData(item, this, data) !== !1)
      switch (data.type) {
        case "ActiveEffect":
          return this._onDropActiveEffect(event2, data);
        case "Activity":
          return this._onDropActivity(event2, data);
        case "Advancement":
        case "Item":
          return this._onDropAdvancement(event2, data);
      }
  }
  /* -------------------------------------------- */
  /**
   * Handle the dropping of ActiveEffect data onto an Item Sheet
   * @param {DragEvent} event                  The concluding DragEvent which contains drop data
   * @param {object} data                      The data transfer extracted from the event
   * @returns {Promise<ActiveEffect|boolean>}  The created ActiveEffect object or false if it couldn't be created.
   * @protected
   */
  async _onDropActiveEffect(event2, data) {
    const effect2 = await ActiveEffect.implementation.fromDropData(data);
    if (!this.item.isOwner || !effect2 || this.item.uuid === effect2.parent?.uuid || this.item.uuid === effect2.origin) return !1;
    const effectData = effect2.toObject(), options = { parent: this.item, keepOrigin: !1 };
    return effect2.type === "enchantment" && (effectData.origin ??= effect2.parent.uuid, options.keepOrigin = !0, options.dnd5e = {
      enchantmentProfile: effect2.id,
      activityId: data.activityId
    }), ActiveEffect.create(effectData, options);
  }
  /* -------------------------------------------- */
  /**
   * Handle dropping an Activity onto the sheet.
   * @param {DragEvent} event       The drag event.
   * @param {object} transfer       The dropped data.
   * @param {object} transfer.data  The Activity data.
   * @protected
   */
  _onDropActivity(event2, { data }) {
    const { _id: id, type } = data, source2 = this.item.system.activities.get(id);
    if (source2) {
      const targetId = event2.target.closest(".activity[data-activity-id]")?.dataset.activityId, target = this.item.system.activities.get(targetId);
      if (!target || target === source2) return;
      const siblings = this.item.system.activities.filter((a2) => a2._id !== id), sortUpdates = SortingHelpers.performIntegerSort(source2, { target, siblings }), updateData = Object.fromEntries(sortUpdates.map(({ target: target2, update: update2 }) => [target2._id, { sort: update2.sort }]));
      this.item.update({ "system.activities": updateData });
    } else
      delete data._id, this.item.createActivity(type, data, { renderSheet: !1 });
  }
  /* -------------------------------------------- */
  /**
   * Handle the dropping of an advancement or item with advancements onto the advancements tab.
   * @param {DragEvent} event                  The concluding DragEvent which contains drop data.
   * @param {object} data                      The data transfer extracted from the event.
   * @returns {Promise}
   */
  async _onDropAdvancement(event2, data) {
    if (!this.item.system.advancement) return;
    let advancements, showDialog = !1;
    if (data.type === "Advancement")
      advancements = [await fromUuid(data.uuid)];
    else if (data.type === "Item") {
      const item = await Item.implementation.fromDropData(data);
      if (!item?.system.advancement) return !1;
      advancements = Object.values(item.advancement.byId), showDialog = !0;
    } else
      return !1;
    if (advancements = advancements.filter((a2) => {
      const validItemTypes = (
        // @ts-expect-error
        CONFIG.DND5E.advancementTypes[a2.constructor.typeName]?.validItemTypes ?? a2.metadata.validItemTypes
      );
      return !this.item.advancement.byId[a2.id] && validItemTypes.has(this.item.type) && a2.constructor.availableForItem(this.item);
    }), showDialog)
      try {
        advancements = await dnd5e.applications.advancement.AdvancementMigrationDialog.createDialog(this.item, advancements);
      } catch {
        return !1;
      }
    if (!advancements.length) return !1;
    if (this.item.actor?.system.metadata?.supportsAdvancement && !game.settings.get("dnd5e", "disableAdvancements")) {
      const manager = dnd5e.applications.advancement.AdvancementManager.forNewAdvancement(this.item.actor, this.item.id, advancements);
      if (manager.steps.length) return manager.render(!0);
    }
    const advancementArray = this.item.system.toObject().advancement;
    advancementArray.push(...advancements.map((a2) => a2.toObject())), this.item.update({ "system.advancement": advancementArray });
  }
  async toggleAdvancementLock() {
    this.advancementConfigurationMode = !this.advancementConfigurationMode, this.context.set(await this.getData());
  }
  /* -------------------------------------------- */
  /* Actions
  /* -------------------------------------------- */
  addActivity() {
    return dnd5e.documents.activity.UtilityActivity.createDialog({}, {
      parent: this.item,
      types: Object.entries(CONFIG.DND5E.activityTypes).filter(([, { configurable }]) => configurable !== !1).map(([k]) => k)
    });
  }
  /**
   * Create a new recovery profile.
   */
  addRecovery() {
    return this.submit({
      updateData: {
        "system.uses.recovery": [
          ...this.item.system.toObject().uses.recovery,
          {}
        ]
      }
    });
  }
  deleteRecovery(index2) {
    const recovery = this.item.system.toObject().uses.recovery;
    return recovery.splice(index2, 1), this.submit({
      updateData: { "system.uses.recovery": recovery }
    });
  }
  updateRecovery(index2, prop2, value) {
    const recovery = this.item.system.toObject().uses.recovery;
    return recovery[index2][prop2] = value, this.submit({
      updateData: { "system.uses.recovery": recovery }
    });
  }
  /**
   * Handle one of the advancement actions from the buttons or context menu.
   * @param {Element} target  Button or context menu entry that triggered this action.
   * @param {string} action   Action being triggered.
   * @returns {Promise|void}
   */
  _onAdvancementAction(target, action2) {
    const id = target.closest(".advancement-item")?.dataset.id;
    if (!id)
      return;
    const advancement = this.item.advancement.byId[id];
    let manager;
    if (!(["edit", "delete", "duplicate"].includes(action2) && !advancement))
      switch (action2) {
        case "add":
          return game.dnd5e.applications.advancement.AdvancementSelection.createDialog(this.item);
        case "edit":
          return new advancement.constructor.metadata.apps.config(advancement).render(!0);
        case "delete":
          return this.item.actor?.system.metadata?.supportsAdvancement && !game.settings.get("dnd5e", "disableAdvancements") && (manager = dnd5e.applications.advancement.AdvancementManager.forDeletedAdvancement(this.item.actor, this.item.id, id), manager.steps.length) ? manager.render(!0) : this.item.deleteAdvancement(id);
        case "duplicate":
          return this.item.duplicateAdvancement(id);
        case "modify-choices":
          const level = target.closest("[data-level]")?.dataset.level;
          if (!level)
            return;
          manager = dnd5e.applications.advancement.AdvancementManager.forModifyChoices(this.item.actor, this.item.id, Number(level)), manager.steps.length && manager.render(!0);
          return;
        case "toggle-configuration":
          return this.advancementConfigurationMode = !this.advancementConfigurationMode, this.render();
      }
  }
}
var root$b = /* @__PURE__ */ template('<div class="group-hp-container"><!></div>');
function GroupHitPoints($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getCharacterSheetContext);
  const localize = FoundryAdapter.localize;
  var div = root$b();
  template_effect(() => set_attribute(div, "title", localize("DND5E.GroupHP")));
  var node = child(div), Bar2 = /* @__PURE__ */ derived(() => settings.value.useHpBar ? HpBar : null);
  ResourceWithBar(node, {
    get document() {
      return $$props.actor;
    },
    get value() {
      return $$props.value;
    },
    valueField: "system.attributes.hp.value",
    valueTitle: null,
    valueDisabled: !0,
    get max() {
      return $$props.max;
    },
    maxField: "system.attributes.hp.max",
    maxTitle: null,
    maxDisabled: !0,
    get percentage() {
      return get(context).healthPercentage;
    },
    get Bar() {
      return get(Bar2);
    }
  }), template_effect(() => toggle_class(div, "widen-for-rounded-portrait", get(context).useRoundedPortraitStyle)), append($$anchor, div), pop();
}
__name(GroupHitPoints, "GroupHitPoints");
var root_5 = /* @__PURE__ */ template('<span class="semibold"> </span>'), root_7 = /* @__PURE__ */ template('<div class="flex-row align-items-center no-gap"><!> <span class="fs-sm semibold"> </span></div>'), root_8$2 = /* @__PURE__ */ template('<strong class="fs-sm semibold"> </strong>'), on_click$3 = /* @__PURE__ */ __name((_, context) => get(context).actor.sheet.award(), "on_click$3"), on_click_1$2 = /* @__PURE__ */ __name((__1, context) => get(context).actor.system.placeMembers(), "on_click_1$2"), on_click_2$1 = /* @__PURE__ */ __name((__2, context) => get(context).actor.shortRest({ advanceTime: !0 }), "on_click_2$1"), on_click_3$1 = /* @__PURE__ */ __name((__3, context) => get(context).actor.longRest({ advanceTime: !0 }), "on_click_3$1"), root_9$1 = /* @__PURE__ */ template('<div class="group-commands"><button type="button" class="group-action-button flex-row small-gap flex-grow-0 flex-basis-max-content"><i class="fa-solid fa-trophy"></i> </button> <button type="button" class="group-action-button flex-row small-gap flex-grow-0 flex-basis-max-content"><i class="fa-solid fa-location-dot"></i> </button> <button type="button" class="group-action-button flex-row small-gap rest-button flex-grow-0 flex-basis-max-content"><i class="fa-solid fa-utensils"></i> </button> <button type="button" class="group-action-button flex-row small-gap rest-button flex-grow-0 flex-basis-max-content"><i class="fa-solid fa-campground"></i> </button></div>'), root$a = /* @__PURE__ */ template('<header class="tidy5e-sheet-header flex-row"><div class="flex-0"><!></div> <div class="flex-grow-1"><div class="flex-row justify-content-space-between align-items-center small-gap"><div class="actor-name"><!></div></div> <div class="flex-row align-items-center header-line-margin" style="margin-top: 0;"><span class="flex-1 fs-sm text-body-secondary"> </span> <!></div> <!> <div class="flex-row header-line-margin justify-content-space-between align-items-center"><!> <!></div> <!> <!></div></header> <!> <section class="tidy-sheet-body"><!></section>', 1);
function GroupSheet($$anchor, $$props) {
  push($$props, !0);
  const context = /* @__PURE__ */ derived(getGroupSheetClassicContext), localize = FoundryAdapter.localize;
  let selectedTabId = state("");
  onMount(() => {
    set(selectedTabId, proxy(get(context).tabs[0]?.id ?? ""));
  });
  var fragment = root$a(), header = first_child(fragment), div = child(header), node = child(div);
  ActorProfile(node, {
    useHpOverlay: !1,
    size: "small",
    children: /* @__PURE__ */ __name(($$anchor2, $$slotProps) => {
      var fragment_1 = comment(), node_1 = first_child(fragment_1);
      {
        var consequent = /* @__PURE__ */ __name(($$anchor3) => {
          GroupHitPoints($$anchor3, {
            get actor() {
              return get(context).actor;
            },
            get value() {
              return get(context).currentHP;
            },
            get max() {
              return get(context).maxHP;
            }
          });
        }, "consequent");
        if_block(node_1, ($$render) => {
          get(context).canObserveAll && $$render(consequent);
        });
      }
      append($$anchor2, fragment_1);
    }, "children"),
    $$slots: { default: !0 }
  });
  var div_1 = sibling(div, 2), div_2 = child(div_1), div_3 = child(div_2), node_2 = child(div_3), disabled = /* @__PURE__ */ derived(() => !get(context).unlocked), placeholder = /* @__PURE__ */ derived(() => localize("TIDY5E.Group.NamePlaceholder"));
  TextInput(node_2, {
    get document() {
      return get(context).actor;
    },
    get editable() {
      return get(context).unlocked;
    },
    get disabled() {
      return get(disabled);
    },
    spellcheck: !1,
    get placeholder() {
      return get(placeholder);
    },
    get value() {
      return get(context).actor.name;
    },
    field: "name"
  });
  var div_4 = sibling(div_2, 2), span = child(div_4), text2 = child(span), node_3 = sibling(span, 2);
  {
    var consequent_1 = /* @__PURE__ */ __name(($$anchor2) => {
      Select($$anchor2, {
        get document() {
          return get(context).actor;
        },
        get value() {
          return get(context).system.type.value;
        },
        field: "system.type.value",
        blankValue: "",
        class: "flex-grow-0 flex-shrink-0 flex-basis-max-content",
        children: /* @__PURE__ */ __name(($$anchor3, $$slotProps) => {
          var blank = /* @__PURE__ */ derived(() => localize("DND5E.Group.TypeGeneric"));
          SelectOptions($$anchor3, {
            get data() {
              return get(context).config.groupTypes;
            },
            get blank() {
              return get(blank);
            }
          });
        }, "children"),
        $$slots: { default: !0 }
      });
    }, "consequent_1"), alternate = /* @__PURE__ */ __name(($$anchor2) => {
      var span_1 = root_5(), text_1 = child(span_1);
      template_effect(() => set_text(text_1, get(context).config.groupTypes[get(context).system.type.value] ?? localize("DND5E.Group.TypeGeneric"))), append($$anchor2, span_1);
    }, "alternate");
    if_block(node_3, ($$render) => {
      get(context).unlocked ? $$render(consequent_1) : $$render(alternate, !1);
    });
  }
  var node_4 = sibling(div_4, 2);
  HorizontalLineSeparator(node_4, { class: "header-line-margin-left" });
  var div_5 = sibling(node_4, 2), node_5 = child(div_5);
  ActorMovement(node_5, { movementLabelKey: "DND5E.Movement" });
  var node_6 = sibling(node_5, 2);
  {
    var consequent_3 = /* @__PURE__ */ __name(($$anchor2) => {
      var fragment_5 = comment(), node_7 = first_child(fragment_5);
      {
        var consequent_2 = /* @__PURE__ */ __name(($$anchor3) => {
          var div_6 = root_7(), node_8 = child(div_6), placeholder_1 = /* @__PURE__ */ derived(() => get(context).system.details.xp.derived?.toString() ?? "0");
          TextInput(node_8, {
            get document() {
              return get(context).actor;
            },
            field: "system.details.xp.value",
            get value() {
              return get(context).system.details.xp.value;
            },
            get placeholder() {
              return get(placeholder_1);
            },
            class: "group-xp-input fs-sm",
            saveEmptyAsNull: !0
          });
          var span_2 = sibling(node_8, 2), text_2 = child(span_2);
          template_effect(() => set_text(text_2, localize("DND5E.ExperiencePointsAbbr"))), append($$anchor3, div_6);
        }, "consequent_2"), alternate_1 = /* @__PURE__ */ __name(($$anchor3) => {
          var strong = root_8$2(), text_3 = child(strong);
          template_effect(() => set_text(text_3, localize("DND5E.ExperiencePointsFormat", {
            value: get(context).system.details.xp.value ?? get(context).system.details.xp.derived ?? "0"
          }))), append($$anchor3, strong);
        }, "alternate_1");
        if_block(node_7, ($$render) => {
          get(context).unlocked ? $$render(consequent_2) : $$render(alternate_1, !1);
        });
      }
      append($$anchor2, fragment_5);
    }, "consequent_3");
    if_block(node_6, ($$render) => {
      get(context).disableExperience || $$render(consequent_3);
    });
  }
  var node_9 = sibling(div_5, 2);
  HorizontalLineSeparator(node_9, { class: "header-line-margin-left" });
  var node_10 = sibling(node_9, 2);
  {
    var consequent_4 = /* @__PURE__ */ __name(($$anchor2) => {
      var div_7 = root_9$1(), button = child(div_7);
      button.__click = [on_click$3, context];
      var text_4 = sibling(child(button));
      template_effect(() => set_text(text_4, ` ${localize("DND5E.Award.Action") ?? ""}`));
      var button_1 = sibling(button, 2);
      button_1.__click = [on_click_1$2, context];
      var text_5 = sibling(child(button_1));
      template_effect(() => set_text(text_5, ` ${localize("DND5E.Group.PlaceMembers") ?? ""}`));
      var button_2 = sibling(button_1, 2);
      button_2.__click = [on_click_2$1, context];
      var text_6 = sibling(child(button_2));
      template_effect(() => set_text(text_6, ` ${localize("DND5E.ShortRest") ?? ""}`));
      var button_3 = sibling(button_2, 2);
      button_3.__click = [on_click_3$1, context];
      var text_7 = sibling(child(button_3));
      template_effect(() => set_text(text_7, ` ${localize("DND5E.LongRest") ?? ""}`)), template_effect(() => {
        set_attribute(button, "tabindex", settings.value.useAccessibleKeyboardSupport ? 0 : -1), set_attribute(button_1, "tabindex", settings.value.useAccessibleKeyboardSupport ? 0 : -1), set_attribute(button_2, "tabindex", settings.value.useAccessibleKeyboardSupport ? 0 : -1), set_attribute(button_3, "tabindex", settings.value.useAccessibleKeyboardSupport ? 0 : -1);
      }), append($$anchor2, div_7);
    }, "consequent_4");
    if_block(node_10, ($$render) => {
      get(context).isGM && $$render(consequent_4);
    });
  }
  var node_11 = sibling(header, 2);
  Tabs(node_11, {
    get tabs() {
      return get(context).tabs;
    },
    get sheet() {
      return get(context).actor.sheet;
    },
    get selectedTabId() {
      return get(selectedTabId);
    },
    set selectedTabId($$value) {
      set(selectedTabId, proxy($$value));
    }
  });
  var section = sibling(node_11, 2), node_12 = child(section);
  TabContents(node_12, {
    get tabs() {
      return get(context).tabs;
    },
    get selectedTabId() {
      return get(selectedTabId);
    }
  }), template_effect(() => {
    set_attribute(div_2, "data-tidy-sheet-part", CONSTANTS.SHEET_PARTS.NAME_HEADER_ROW), set_attribute(div_3, "data-tidy-sheet-part", CONSTANTS.SHEET_PARTS.NAME_CONTAINER), set_text(text2, get(context).summary);
  }), append($$anchor, fragment), pop();
}
__name(GroupSheet, "GroupSheet");
delegate(["click"]);
function firstOfSet(set2) {
  return set2.values().next().value;
}
__name(firstOfSet, "firstOfSet");
function Tidy5eActorSheetBaseMixin(BaseApplication) {
  class Tidy5eActorSheetBase extends DragAndDropMixin(BaseApplication) {
    static {
      __name(this, "Tidy5eActorSheetBase");
    }
    _supportedItemTypes = /* @__PURE__ */ new Set();
    _currentDragEvent;
    static ACTOR_ACTIONS_AND_CONTROLS = {
      configureToken: {
        control: {
          action: "configureToken",
          icon: "fa-solid fa-user-circle",
          label: "This Actions Title Changes Based on an Actor-specific piece of data",
          ownership: "OWNER"
        },
        action: {
          configureToken: Tidy5eActorSheetBase.#onConfigureToken
        }
      },
      showPortraitArtwork: {
        control: {
          action: "showPortraitArtwork",
          icon: "fa-solid fa-image",
          label: "SIDEBAR.CharArt",
          ownership: "OWNER"
        },
        action: {
          showPortraitArtwork: Tidy5eActorSheetBase.#onShowPortraitArtwork
        }
      },
      showTokenArtwork: {
        control: {
          action: "showTokenArtwork",
          icon: "fa-solid fa-image",
          label: "SIDEBAR.TokenArt",
          ownership: "OWNER"
        },
        action: {
          showTokenArtwork: Tidy5eActorSheetBase.#onShowTokenArtwork
        }
      },
      openTabSelection: {
        control: {
          action: "openTabSelection",
          icon: "fas fa-file-invoice",
          label: "TIDY5E.TabSelection.MenuOptionText"
        },
        action: {
          openTabSelection: /* @__PURE__ */ __name(async function() {
            new TabSelectionFormApplication(this.actor).render(!0);
          }, "openTabSelection")
        }
      }
    };
    /* -------------------------------------------- */
    /*  Application Lifecycle Functions             */
    /* -------------------------------------------- */
    /**
     * Perform any dynamic behavior on controls which depends on the current state of the sheet.
     * @returns
     */
    _getHeaderControls() {
      const controls = super._getHeaderControls(), configureTokenControl = controls.find(
        (c2) => c2.action === Tidy5eActorSheetBase.ACTOR_ACTIONS_AND_CONTROLS.configureToken.control.action
      );
      return configureTokenControl && this.token ? (configureTokenControl.label = "Token", configureTokenControl.icon = "far fa-user-circle") : configureTokenControl.label = "TOKEN.TitlePrototype", controls;
    }
    /* -------------------------------------------- */
    /*  Drag and Drop Handlers                      */
    /* -------------------------------------------- */
    async _onDrop(event2) {
      this._currentDragEvent = event2;
      const data = TextEditor.getDragEventData(event2), actor = this.actor;
      if (Hooks.call("dropActorSheetData", actor, this, data) !== !1)
        switch (data.type) {
          case "ActiveEffect":
            return this._onDropActiveEffect(event2, data);
          case "Actor":
            return this._onDropActor(event2, data);
          case "Item":
            return this._onDropItem(event2, data);
          case "Folder":
            return this._onDropFolder(event2, data);
        }
    }
    /**
     * Handle the dropping of ActiveEffect data onto an Actor Sheet
     */
    async _onDropActiveEffect(_currentDragEvent, data) {
      const effect2 = await ActiveEffect.implementation.fromDropData(data);
      return !this.actor.isOwner || !effect2 || effect2.target === this.actor ? !1 : ActiveEffect.create(effect2.toObject(), { parent: this.actor });
    }
    async _onDropActor(_currentDragEvent, data) {
      if (!(game.user.isGM || this.actor.isOwner && game.settings.get("dnd5e", "allowPolymorphing"))) return !1;
      const sourceActor = await getDocumentClass("Actor").fromDropData(data);
      if (!sourceActor) return;
      const rememberOptions = /* @__PURE__ */ __name((html2) => {
        const options = {};
        html2.find("input").each((i2, el) => {
          options[el.name] = el.checked;
        });
        const settings2 = foundry.utils.mergeObject(
          game.settings.get("dnd5e", "polymorphSettings") ?? {},
          options
        );
        return game.settings.set("dnd5e", "polymorphSettings", settings2), settings2;
      }, "rememberOptions");
      return new Dialog(
        {
          title: game.i18n.localize("DND5E.PolymorphPromptTitle"),
          content: {
            options: game.settings.get("dnd5e", "polymorphSettings"),
            settings: CONFIG.DND5E.polymorphSettings,
            effectSettings: CONFIG.DND5E.polymorphEffectSettings,
            isToken: this.actor.isToken
          },
          default: "accept",
          buttons: {
            accept: {
              icon: '<i class="fas fa-check"></i>',
              label: game.i18n.localize("DND5E.PolymorphAcceptSettings"),
              callback: /* @__PURE__ */ __name((html2) => this.actor.transformInto(sourceActor, rememberOptions(html2)), "callback")
            },
            wildshape: {
              icon: CONFIG.DND5E.transformationPresets.wildshape.icon,
              label: CONFIG.DND5E.transformationPresets.wildshape.label,
              callback: /* @__PURE__ */ __name((html2) => this.actor.transformInto(
                sourceActor,
                foundry.utils.mergeObject(
                  CONFIG.DND5E.transformationPresets.wildshape.options,
                  { transformTokens: rememberOptions(html2).transformTokens }
                )
              ), "callback")
            },
            polymorph: {
              icon: CONFIG.DND5E.transformationPresets.polymorph.icon,
              label: CONFIG.DND5E.transformationPresets.polymorph.label,
              callback: /* @__PURE__ */ __name((html2) => this.actor.transformInto(
                sourceActor,
                foundry.utils.mergeObject(
                  CONFIG.DND5E.transformationPresets.polymorph.options,
                  { transformTokens: rememberOptions(html2).transformTokens }
                )
              ), "callback")
            },
            self: {
              icon: CONFIG.DND5E.transformationPresets.polymorphSelf.icon,
              label: CONFIG.DND5E.transformationPresets.polymorphSelf.label,
              callback: /* @__PURE__ */ __name((html2) => this.actor.transformInto(
                sourceActor,
                foundry.utils.mergeObject(
                  CONFIG.DND5E.transformationPresets.polymorphSelf.options,
                  { transformTokens: rememberOptions(html2).transformTokens }
                )
              ), "callback")
            },
            cancel: {
              icon: '<i class="fas fa-times"></i>',
              label: game.i18n.localize("Cancel")
            }
          }
        },
        {
          classes: ["dialog", "dnd5e", "polymorph"],
          width: 900,
          template: "systems/dnd5e/templates/apps/polymorph-prompt.hbs"
        }
      ).render(!0);
    }
    async _onDropItem(event2, data) {
      if (!this.actor.isOwner) return !1;
      const item = await Item.implementation.fromDropData(data);
      return this.actor.uuid === item.parent?.uuid ? (item.system.container !== null && await item.update({ "system.container": null }), FoundryAdapter.onSortItemForActor(
        this.actor,
        event2,
        item.toObject()
      )) : this._onDropItemCreate(item, event2);
    }
    /**
     * Handle the final creation of dropped Item data on the Actor.
     */
    async _onDropItemCreate(itemData, event2) {
      let items = itemData instanceof Array ? itemData : [itemData];
      const itemsWithoutAdvancement = items.filter(
        (i2) => !i2.system.advancement?.length
      );
      items.length - itemsWithoutAdvancement.length > 1 && !game.settings.get("dnd5e", "disableAdvancements") && (ui.notifications.warn(
        game.i18n.format("DND5E.WarnCantAddMultipleAdvancements")
      ), items = itemsWithoutAdvancement);
      const containers = new Set(
        items.filter((i2) => i2.type === "container").map((i2) => i2._id)
      );
      items = items.filter((i2) => !containers.has(i2.system.container));
      const toCreate = await dnd5e.documents.Item5e.createWithContents(items, {
        transformFirst: /* @__PURE__ */ __name((item) => this._onDropSingleItem(item.toObject(), event2), "transformFirst")
      });
      return dnd5e.documents.Item5e.createDocuments(toCreate, {
        pack: this.actor.pack,
        parent: this.actor,
        keepId: !0
      });
    }
    /**
     * Handles dropping of a single item onto this character sheet.
     */
    async _onDropSingleItem(itemData, event2) {
      if (!(this._supportedItemTypes.size === 0 || this._supportedItemTypes.has(itemData.type)))
        return ui.notifications.warn(
          game.i18n.format("DND5E.ActorWarningInvalidItem", {
            itemType: game.i18n.localize(
              CONFIG.Item.typeLabels[itemData.type]
            ),
            actorType: game.i18n.localize(
              CONFIG.Actor.typeLabels[this.actor.type]
            )
          })
        ), !1;
      const isOnInventoryTab = this.element.matches(
        `:has([data-tab-id="${CONSTANTS.TAB_ACTOR_INVENTORY}"].active)`
      );
      if (itemData.type === "spell" && (isOnInventoryTab || this.actor.type === CONSTANTS.SHEET_TYPE_VEHICLE || this.actor.type === CONSTANTS.SHEET_TYPE_GROUP)) {
        const options = {};
        return settings.value.includeFlagsInSpellScrollCreation && (options.flags = itemData.flags), (await dnd5e.documents.Item5e.createScrollFromSpell(
          itemData,
          options
        ))?.toObject?.() ?? !1;
      }
      if (this._onDropResetData(itemData), this._onDropStackConsumables(itemData, {}, event2)) return !1;
      if (this.actor.system.metadata?.supportsAdvancement && itemData.system.advancement?.length && !game.settings.get("dnd5e", "disableAdvancements")) {
        if ((CONFIG.Item.dataModels[itemData.type]?.metadata.singleton ?? !1) && this.actor.itemTypes[itemData.type].length)
          return ui.notifications.error(
            game.i18n.format("DND5E.ActorWarningSingleton", {
              itemType: game.i18n.localize(
                CONFIG.Item.typeLabels[itemData.type]
              ),
              actorType: game.i18n.localize(
                CONFIG.Actor.typeLabels[this.actor.type]
              )
            })
          ), !1;
        const manager = dnd5e.applications.advacement.AdvancementManager.forNewItem(
          this.actor,
          itemData
        );
        if (manager.steps.length)
          return manager.render(!0), !1;
      }
      return itemData.type === "spell" && this._onDropSpell(itemData), itemData;
    }
    /**
     * Stack identical consumables when a new one is dropped rather than creating a duplicate item.
     */
    _onDropStackConsumables(itemData, { container = null } = {}, event2) {
      return FoundryAdapter.onDropStackConsumablesForActor(
        this.actor,
        itemData,
        { container },
        event2
      );
    }
    /**
     * Reset certain pieces of data stored on items when they are dropped onto the actor.
     */
    _onDropResetData(itemData) {
      itemData.system && ["attuned", "equipped", "proficient", "prepared"].forEach(
        (k) => delete itemData.system[k]
      );
    }
    /**
     * Adjust the preparation mode of a dropped spell depending on the drop location on the sheet.
     */
    _onDropSpell(itemData) {
      if (!["npc", "character"].includes(this.document.type)) return;
      const dropTarget = this._currentDragEvent?.target;
      if (!dropTarget || !(dropTarget instanceof HTMLElement))
        return;
      let header = dropTarget.closest(".items-header");
      if (header === null) {
        const list = dropTarget.closest(".item-list");
        header = list?.previousElementSibling instanceof HTMLElement ? list.previousElementSibling : null;
      }
      const { level, preparationMode } = header?.closest("[data-level]")?.dataset ?? {}, spellcastKeys = Object.keys(CONFIG.DND5E.spellcastingTypes), progs = Object.values(this.document.classes).reduce(
        (acc, cls) => {
          const type = cls.spellcasting?.type;
          return spellcastKeys.includes(type) && acc.add(type), acc;
        },
        /* @__PURE__ */ new Set()
      ), prep = itemData.system.preparation;
      if (itemData.system.level === 0 && preparationMode) {
        const mode = CONFIG.DND5E.spellPreparationModes[preparationMode] ?? {};
        if ("cantrips" in mode && mode.cantrips)
          prep.mode = "prepared";
        else if (preparationMode)
          prep.mode = preparationMode;
        else {
          const isCaster = this.document.system.details.spellLevel || progs.size;
          prep.mode = isCaster ? "prepared" : "innate";
        }
        "prepares" in mode && mode.prepares && (prep.prepared = !0);
      } else if (level === "0" || !preparationMode)
        if (this.document.type === "npc")
          prep.mode = this.document.system.details.spellLevel ? "prepared" : "innate";
        else {
          const m2 = progs.has("leveled") ? "prepared" : firstOfSet(progs) ?? "innate";
          prep.mode = progs.has(prep.mode) ? prep.mode : m2;
        }
      else prep.mode = preparationMode;
    }
    async _onDropFolder(event2, data) {
      if (!this.actor.isOwner)
        return [];
      const folder = await Folder.implementation.fromDropData(data);
      if (folder.type !== "Item")
        return [];
      const droppedItemData = await Promise.all(
        folder.contents.map(async (item) => (item instanceof Item || (item = await fromUuid(item.uuid)), item))
      );
      return this._onDropItemCreate(droppedItemData, event2);
    }
    /* -------------------------------------------- */
    /*  Event Listeners and Handlers                */
    /* -------------------------------------------- */
    /**
     * Handle header control button clicks to render the Prototype Token configuration sheet.
     * @this {ActorSheetV2}
     * @param {PointerEvent} event
     */
    static async #onConfigureToken(event2) {
      event2.preventDefault();
      const renderOptions = {
        left: Math.max(this.position.left - 560 - 10, 10),
        top: this.position.top
      };
      if (this.token)
        return this.token.sheet.render(!0, renderOptions);
      new CONFIG.Token.prototypeSheetClass(
        this.actor.prototypeToken,
        renderOptions
      ).render(!0);
    }
    /* -------------------------------------------- */
    /**
     * Handle header control button clicks to display actor portrait artwork.
     * @this {ActorSheetV2}
     * @param {PointerEvent} event
     */
    static async #onShowPortraitArtwork(event2) {
      const { img, name, uuid } = this.actor;
      new ImagePopout(img, { title: name, uuid }).render(!0);
    }
    /* -------------------------------------------- */
    /**
     * Handle header control button clicks to display actor portrait artwork.
     * @this {ActorSheetV2}
     * @param {PointerEvent} event
     */
    static async #onShowTokenArtwork(event2) {
      const { prototypeToken, name, uuid } = this.actor;
      new ImagePopout(prototypeToken.texture.src, {
        title: name,
        uuid
      }).render(!0);
    }
  }
  return Tidy5eActorSheetBase;
}
__name(Tidy5eActorSheetBaseMixin, "Tidy5eActorSheetBaseMixin");
var on_dblclick = /* @__PURE__ */ __name((event2, $$props) => {
  event2.stopPropagation(), $$props.ondblclick?.(event2);
}, "on_dblclick"), root_1$5 = /* @__PURE__ */ template('<div><svelte-css-wrapper style="display: contents"><!></svelte-css-wrapper></div>');
function SheetHeaderEditModeToggle($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getSheetContext);
  async function toggleLock() {
    await TidyFlags.allowEdit.set(get(context).document, !get(allowEdit));
  }
  __name(toggleLock, "toggleLock");
  const localize = FoundryAdapter.localize;
  let allowEdit = /* @__PURE__ */ derived(() => TidyFlags.allowEdit.get(get(context).document)), descriptionVariable = /* @__PURE__ */ derived(() => settings.value.useTotalSheetLock ? localize("TIDY5E.SheetLock.Description") : localize("TIDY5E.SheetEdit.Description")), lockHintVariable = /* @__PURE__ */ derived(() => settings.value.useTotalSheetLock ? "TIDY5E.SheetLock.Unlock.Hint" : "TIDY5E.SheetEdit.Enable.Hint"), unlockHintVariable = /* @__PURE__ */ derived(() => settings.value.useTotalSheetLock ? "TIDY5E.SheetLock.Lock.Hint" : "TIDY5E.SheetEdit.Disable.Hint"), unlockTitle = /* @__PURE__ */ derived(() => localize(get(unlockHintVariable), { description: get(descriptionVariable) })), lockTitle = /* @__PURE__ */ derived(() => localize(get(lockHintVariable), { description: get(descriptionVariable) }));
  var fragment = comment(), node = first_child(fragment);
  {
    var consequent = /* @__PURE__ */ __name(($$anchor2) => {
      var div = root_1$5();
      div.__dblclick = [on_dblclick, $$props];
      var node_1 = child(div), title = /* @__PURE__ */ derived(() => get(allowEdit) ? get(unlockTitle) : get(lockTitle)), thumbIconClass = /* @__PURE__ */ derived(() => `${(get(allowEdit) ? "fas fa-unlock" : "fas fa-lock") ?? ""} fa-fw`);
      css_props(node_1, () => ({
        "--tidy-switch-scale": "1",
        "--tidy-switch-thumb-transform-duration": "0.15s"
      })), TidySwitch(node_1.lastChild, {
        get title() {
          return get(title);
        },
        get checked() {
          return get(allowEdit);
        },
        get thumbIconClass() {
          return get(thumbIconClass);
        },
        onChange: /* @__PURE__ */ __name(() => toggleLock(), "onChange")
      }), template_effect(() => {
        set_class(div, `header-sheet-edit-mode-toggle ${$$props.class ?? "" ?? ""}`), set_attribute(div, "data-tidy-sheet-part", CONSTANTS.SHEET_PARTS.SHEET_LOCK_TOGGLE);
      }), append($$anchor2, div);
    }, "consequent");
    if_block(node, ($$render) => {
      get(context).editable && $$render(consequent);
    });
  }
  append($$anchor, fragment), pop();
}
__name(SheetHeaderEditModeToggle, "SheetHeaderEditModeToggle");
delegate(["dblclick"]);
class Tidy5eGroupSheetClassic extends Tidy5eActorSheetBaseMixin(SvelteApplicationMixin(foundry.applications.sheets.ActorSheetV2)) {
  static {
    __name(this, "Tidy5eGroupSheetClassic");
  }
  constructor(...args) {
    super(...args), this._supportedItemTypes = new Set(Inventory.getDefaultInventoryTypes()), this._supportedItemTypes.add(CONSTANTS.ITEM_TYPE_SPELL), this.#itemFilterService = new ItemFilterService({}, this.actor);
  }
  static DEFAULT_OPTIONS = {
    classes: [
      CONSTANTS.MODULE_ID,
      "sheet",
      "actor",
      CONSTANTS.SHEET_TYPE_GROUP,
      "app-v2",
      CONSTANTS.SHEET_LAYOUT_CLASSIC
    ],
    tag: "form",
    window: {
      frame: !0,
      positioned: !0,
      resizable: !0,
      controls: [
        ImportSheetControl.getSheetControl(),
        this.ACTOR_ACTIONS_AND_CONTROLS.configureToken.control,
        this.ACTOR_ACTIONS_AND_CONTROLS.showPortraitArtwork.control,
        this.ACTOR_ACTIONS_AND_CONTROLS.showTokenArtwork.control,
        this.ACTOR_ACTIONS_AND_CONTROLS.openTabSelection.control
      ]
    },
    position: { width: 600, height: 700 },
    dragDrop: [{ dragSelector: "[data-member-drag]" }],
    actions: {
      async [ImportSheetControl.actionName]() {
        await ImportSheetControl.importFromCompendium(this, this.document);
      },
      ...this.ACTOR_ACTIONS_AND_CONTROLS.configureToken.action,
      ...this.ACTOR_ACTIONS_AND_CONTROLS.showPortraitArtwork.action,
      ...this.ACTOR_ACTIONS_AND_CONTROLS.showTokenArtwork.action,
      ...this.ACTOR_ACTIONS_AND_CONTROLS.openTabSelection.action
    },
    submitOnClose: !1
  };
  #itemFilterService;
  #inlineToggleService = new InlineToggleService();
  #messageBus = state(proxy({ message: void 0 }));
  get messageBus() {
    return get(this.#messageBus);
  }
  set messageBus(value) {
    set(this.#messageBus, proxy(value));
  }
  // TODO: First render, derive options that come from user preference
  _createComponent(node) {
    const component2 = mount(GroupSheet, {
      target: node,
      context: /* @__PURE__ */ new Map([
        [
          CONSTANTS.SVELTE_CONTEXT.CONTEXT,
          this._context
        ],
        [
          CONSTANTS.SVELTE_CONTEXT.INLINE_TOGGLE_SERVICE,
          this.#inlineToggleService
        ],
        [
          CONSTANTS.SVELTE_CONTEXT.ITEM_FILTER_SERVICE,
          this.#itemFilterService
        ],
        [CONSTANTS.SVELTE_CONTEXT.LOCATION, ""],
        [
          CONSTANTS.SVELTE_CONTEXT.MESSAGE_BUS,
          this.messageBus
        ],
        [
          CONSTANTS.SVELTE_CONTEXT.ON_FILTER,
          this.#itemFilterService.onFilter.bind(this.#itemFilterService)
        ],
        [
          CONSTANTS.SVELTE_CONTEXT.ON_FILTER_CLEAR_ALL,
          this.#itemFilterService.onFilterClearAll.bind(this.#itemFilterService)
        ]
      ])
    });
    return initTidy5eContextMenu(this, globalThis.$(this.element)), component2;
  }
  _createAdditionalComponents(content) {
    const windowHeader = this.element.querySelector(".window-header"), sheetLock = mount(SheetHeaderEditModeToggle, {
      target: windowHeader,
      anchor: windowHeader.querySelector(".window-title"),
      context: /* @__PURE__ */ new Map([
        [
          CONSTANTS.SVELTE_CONTEXT.CONTEXT,
          this._context
        ]
      ]),
      props: { class: "header-control" }
    }), infoCard = mount(AttachedInfoCard, { target: content, props: { sheet: this } });
    return [sheetLock, infoCard];
  }
  async _prepareContext(options) {
    let xp;
    FoundryAdapter.getSystemSetting(CONSTANTS.SYSTEM_SETTING_LEVELING_MODE) !== CONSTANTS.SYSTEM_SETTING_LEVELING_MODE_NO_XP && (xp = this.actor.system.details.xp);
    const descriptionFullEnrichedHtml = await TextEditor.enrichHTML(this.actor.system.description.full, {
      secrets: this.actor.isOwner,
      rollData: this.actor.getRollData(),
      relativeTo: this.actor
    }), {
      sections: memberSections,
      stats,
      memberContext,
      groupLanguages,
      groupSkills
    } = this.#prepareMembers(), source2 = this.actor.toObject(), unlocked = FoundryAdapter.isSheetUnlocked(this.actor) && this.isEditable, editable = this.isEditable, summary = this.#getSummary(stats), movement = this.#prepareMovementSpeed(), sheetPreferences = SheetPreferencesService.getByType(this.actor.type), membersSortMode = sheetPreferences.tabs?.[CONSTANTS.TAB_GROUP_MEMBERS]?.sort ?? "m", inventorySortMode = sheetPreferences.tabs?.[CONSTANTS.TAB_ACTOR_INVENTORY]?.sort ?? "m", utilities = {
      [CONSTANTS.TAB_GROUP_MEMBERS]: {
        utilityToolbarCommands: [
          {
            title: FoundryAdapter.localize("SIDEBAR.SortModeAlpha"),
            iconClass: "fa-solid fa-arrow-down-a-z fa-fw",
            execute: /* @__PURE__ */ __name(async () => {
              await SheetPreferencesService.setDocumentTypeTabPreference(this.actor.type, CONSTANTS.TAB_GROUP_MEMBERS, "sort", "m");
            }, "execute"),
            visible: membersSortMode === "a"
          },
          {
            title: FoundryAdapter.localize("SIDEBAR.SortModeManual"),
            iconClass: "fa-solid fa-arrow-down-short-wide fa-fw",
            execute: /* @__PURE__ */ __name(async () => {
              await SheetPreferencesService.setDocumentTypeTabPreference(this.actor.type, CONSTANTS.TAB_GROUP_MEMBERS, "sort", "a");
            }, "execute"),
            visible: membersSortMode === "m"
          },
          {
            title: FoundryAdapter.localize("TIDY5E.Group.ShowMemberTabInfoPanel"),
            iconClass: "fa-solid fa-people-group fa-fw",
            execute: /* @__PURE__ */ __name(async () => {
              await TidyFlags.showGroupMemberTabInfoPanel.set(this.actor, !0);
            }, "execute"),
            visible: FoundryAdapter.userIsGm() && !TidyFlags.showGroupMemberTabInfoPanel.get(this.actor)
          },
          {
            title: FoundryAdapter.localize("TIDY5E.Group.HideMemberTabInfoPanel"),
            iconClass: "fa-solid fa-people-group fa-fw active",
            execute: /* @__PURE__ */ __name(async () => {
              await TidyFlags.showGroupMemberTabInfoPanel.unset(this.actor);
            }, "execute"),
            visible: FoundryAdapter.userIsGm() && TidyFlags.showGroupMemberTabInfoPanel.get(this.actor)
          }
        ]
      },
      [CONSTANTS.TAB_ACTOR_INVENTORY]: {
        utilityToolbarCommands: [
          {
            title: FoundryAdapter.localize("SIDEBAR.SortModeAlpha"),
            iconClass: "fa-solid fa-arrow-down-a-z fa-fw",
            execute: /* @__PURE__ */ __name(async () => {
              await SheetPreferencesService.setDocumentTypeTabPreference(this.actor.type, CONSTANTS.TAB_ACTOR_INVENTORY, "sort", "m");
            }, "execute"),
            visible: inventorySortMode === "a"
          },
          {
            title: FoundryAdapter.localize("SIDEBAR.SortModeManual"),
            iconClass: "fa-solid fa-arrow-down-short-wide fa-fw",
            execute: /* @__PURE__ */ __name(async () => {
              await SheetPreferencesService.setDocumentTypeTabPreference(this.actor.type, CONSTANTS.TAB_ACTOR_INVENTORY, "sort", "a");
            }, "execute"),
            visible: inventorySortMode === "m"
          },
          {
            title: FoundryAdapter.localize("TIDY5E.Commands.HideContainerPanel"),
            iconClass: "fas fa-boxes-stacked fa-fw",
            execute: /* @__PURE__ */ __name(() => {
              TidyFlags.showContainerPanel.unset(this.actor);
            }, "execute"),
            visible: !!TidyFlags.showContainerPanel.get(this.actor)
          },
          {
            title: FoundryAdapter.localize("TIDY5E.Commands.ShowContainerPanel"),
            iconClass: "fas fa-box fa-fw",
            execute: /* @__PURE__ */ __name(() => {
              TidyFlags.showContainerPanel.set(this.actor, !0);
            }, "execute"),
            visible: !TidyFlags.showContainerPanel.get(this.actor)
          },
          {
            title: FoundryAdapter.localize("TIDY5E.Commands.ExpandAll"),
            iconClass: "fas fa-angles-down",
            execute: /* @__PURE__ */ __name(() => (
              // TODO: Use app.messageBus
              this.messageBus.message = {
                tabId: CONSTANTS.TAB_ACTOR_INVENTORY,
                message: CONSTANTS.MESSAGE_BUS_EXPAND_ALL
              }
            ), "execute")
          },
          {
            title: FoundryAdapter.localize("TIDY5E.Commands.CollapseAll"),
            iconClass: "fas fa-angles-up",
            execute: /* @__PURE__ */ __name(() => (
              // TODO: Use app.messageBus
              this.messageBus.message = {
                tabId: CONSTANTS.TAB_ACTOR_INVENTORY,
                message: CONSTANTS.MESSAGE_BUS_COLLAPSE_ALL
              }
            ), "execute")
          },
          {
            title: FoundryAdapter.localize("TIDY5E.ListLayout"),
            iconClass: "fas fa-th-list fa-fw toggle-list",
            visible: !TidyFlags.inventoryGrid.get(this.actor),
            execute: /* @__PURE__ */ __name(() => {
              TidyFlags.inventoryGrid.set(this.actor);
            }, "execute")
          },
          {
            title: FoundryAdapter.localize("TIDY5E.GridLayout"),
            iconClass: "fas fa-th-large fa-fw toggle-grid",
            visible: !!TidyFlags.inventoryGrid.get(this.actor),
            execute: /* @__PURE__ */ __name(() => {
              TidyFlags.inventoryGrid.unset(this.actor);
            }, "execute")
          },
          {
            title: FoundryAdapter.localize("TIDY5E.Utilities.ConfigureSections"),
            iconClass: "fas fa-cog",
            execute: /* @__PURE__ */ __name(({ context: context2, sections }) => {
              new DocumentTabSectionConfigApplication({
                document: context2.actor,
                sections,
                tabId: CONSTANTS.TAB_ACTOR_INVENTORY,
                tabTitle: GroupSheetRuntime.getTabTitle(CONSTANTS.TAB_ACTOR_INVENTORY)
              }).render(!0);
            }, "execute")
          }
        ]
      }
    }, uncontainedItems = Array.from(this.actor.items).filter((i2) => !this.actor.items.has(i2.system.container)), inventoryTypesArray = Inventory.getDefaultInventoryTypes(), inventoryTypes = new Set(inventoryTypesArray), inventory = Inventory.getDefaultInventorySections();
    for (let item of uncontainedItems)
      inventoryTypes.has(item.type) && Inventory.applyInventoryItemToSection(inventory, item, inventoryTypesArray, { canCreate: !0 });
    let context = {
      actor: this.actor,
      actorPortraitCommands: ActorPortraitRuntime.getEnabledPortraitMenuCommands(this.actor),
      canObserveAll: Object.values(memberContext).every((m2) => m2.canObserve),
      config: CONFIG.DND5E,
      containerPanelItems: await Inventory.getContainerPanelItems(uncontainedItems),
      currentHP: stats.currentHP,
      customContent: GroupSheetRuntime.content,
      descriptionFullEnrichedHtml,
      disableExperience: FoundryAdapter.getSystemSetting(CONSTANTS.SYSTEM_SETTING_LEVELING_MODE) === CONSTANTS.SYSTEM_SETTING_LEVELING_MODE_NO_XP,
      document: this.actor,
      editable,
      effects: dnd5e.applications.components.EffectsElement.prepareCategories(this.actor.allApplicableEffects()),
      filterData: this.#itemFilterService.getDocumentItemFilterData(),
      filterPins: ItemFilterRuntime.defaultFilterPins[this.actor.type],
      groupLanguages,
      groupSkills,
      healthPercentage: getPercentage(stats.currentHP, stats.maxHP),
      inventory: Object.values(inventory),
      isGM: game.user.isGM,
      itemContext: {},
      items: Array.from(this.actor.items),
      limited: this.actor.limited,
      lockSensitiveFields: !unlocked && settings.value.useTotalSheetLock || !editable,
      maxHP: stats.maxHP,
      memberContext,
      memberSections,
      movement,
      owner: this.actor.isOwner,
      showContainerPanel: TidyFlags.showContainerPanel.get(this.actor) === !0 && Array.from(uncontainedItems).some((i2) => i2.type === CONSTANTS.ITEM_TYPE_CONTAINER),
      showGroupMemberTabInfoPanel: TidyFlags.showGroupMemberTabInfoPanel.get(this.actor),
      source: source2,
      summary,
      system: this.actor.system,
      tabs: [],
      unlocked,
      useClassicControls: !0,
      // TODO: Establish setting for this; and group section in settings
      useRoundedPortraitStyle: [CONSTANTS.CIRCULAR_PORTRAIT_OPTION_ALL].includes(settings.value.useCircularPortraitStyle),
      utilities,
      xp
    };
    await this._prepareItems(context);
    let tabs = await GroupSheetRuntime.getTabs(context);
    const selectedTabs = TidyFlags.selectedTabs.get(context.actor);
    if (selectedTabs?.length)
      tabs = tabs.filter((t2) => selectedTabs?.includes(t2.id)).sort((a2, b2) => selectedTabs.indexOf(a2.id) - selectedTabs.indexOf(b2.id));
    else {
      const defaultTabs = GroupSheetRuntime.getDefaultTabs();
      tabs = tabs.filter((t2) => defaultTabs?.includes(t2.id)).sort((a2, b2) => defaultTabs.indexOf(a2.id) - defaultTabs.indexOf(b2.id));
    }
    return context.tabs = tabs, context;
  }
  #getSummary(stats) {
    const formatter = game.i18n.getListFormatter({ style: "long", type: "conjunction" }), rule = new Intl.PluralRules(game.i18n.lang), members = [];
    return stats.memberCount && members.push(`${stats.memberCount} ${game.i18n.localize(`DND5E.Group.Member.${rule.select(stats.memberCount)}`)}`), stats.vehicleCount && members.push(`${stats.vehicleCount} ${game.i18n.localize(`DND5E.Group.Vehicle.${rule.select(stats.vehicleCount)}`)}`), members.length ? game.i18n.format("DND5E.GroupSummary", { members: formatter.format(members) }) : game.i18n.localize("DND5E.GroupSummaryEmpty");
  }
  #prepareMembers() {
    const stats = {
      currentHP: 0,
      maxHP: 0,
      memberCount: 0,
      vehicleCount: 0
    }, sections = {
      character: {
        label: `${CONFIG.Actor.typeLabels.character}Pl`,
        members: [],
        dataset: {},
        key: "character",
        show: !0,
        custom: void 0,
        isExternal: !1,
        showCrColumn: !1
      },
      npc: {
        label: `${CONFIG.Actor.typeLabels.npc}Pl`,
        members: [],
        dataset: {},
        key: "npc",
        show: !0,
        custom: void 0,
        isExternal: !1,
        showCrColumn: !0
      },
      vehicle: {
        label: `${CONFIG.Actor.typeLabels.vehicle}Pl`,
        members: [],
        dataset: {},
        key: "vehicle",
        show: !0,
        custom: void 0,
        isExternal: !1,
        showCrColumn: !1
      }
    }, type = this.actor.system.type.value, memberContext = {}, groupLanguages = {}, groupSkills = {}, collectAggregates = FoundryAdapter.userIsGm(), configuredSkills = Object.entries(CONFIG.DND5E.skills);
    for (const [index2, memberData] of this.actor.system.members.entries()) {
      const ctx = memberContext[memberData.actor.id] = {
        index: index2,
        quantity: memberData.quantity,
        canObserve: memberData.actor.testUserPermission(game.user, "OBSERVER"),
        senses: [],
        conditionImmunities: [],
        topSkills: []
      }, member = memberData.actor, hp = member.system.attributes.hp, multiplier = type === "encounter" ? memberData.quantity.value ?? 1 : 1, memberCurrentHp = hp.value + (hp.temp || 0), memberMaxHp = Math.max(0, hp.effectiveMax);
      if (stats.currentHP += memberCurrentHp * multiplier, stats.maxHP += memberMaxHp * multiplier, member.type === "vehicle" ? stats.vehicleCount += multiplier : stats.memberCount += multiplier, sections[member.type].members.push(member), collectAggregates && member.system.traits?.languages?.value) {
        const customLanguageString = member.system.traits.languages.custom?.trim(), customLanguages = isNil(customLanguageString, "") ? [] : dnd5e.utils.splitSemicolons(customLanguageString), languageKeys = [
          ...member.system.traits.languages.value,
          ...customLanguages
        ];
        for (let key of languageKeys) {
          const language = dnd5e.documents.Trait.keyLabel(key, { trait: "languages" });
          (groupLanguages[language] ??= this.#createEmptyGroupLanguage(language)).members.push(member);
        }
      }
      if (collectAggregates && member.system.skills)
        for (let [key, skill] of Object.entries(member.system.skills)) {
          const groupSkill = groupSkills[key] ??= this.#createEmptyGroupSkill(key);
          groupSkill.total = Math.max(groupSkill.total, skill.total), groupSkill.members.push(member);
        }
      if (ctx.canObserve) {
        const senses = member.system.attributes.senses ?? {}, tags = {};
        for (let [k, label] of Object.entries(CONFIG.DND5E.senses)) {
          const v2 = senses[k] ?? 0;
          v2 !== 0 && (tags[k] = `${game.i18n.localize(label)} ${v2} ${senses.units ?? Object.keys(CONFIG.DND5E.movementUnits)[0]}`);
        }
        senses.special && dnd5e.utils.splitSemicolons(senses.special).forEach((c2, i2) => tags[`custom${i2 + 1}`] = c2.trim()), ctx.senses = Object.values(tags);
        const conditionImmunities = [];
        for (let entry of member.system.traits.ci.value)
          conditionImmunities.push(CONFIG.DND5E.conditionTypes[entry]?.label ?? entry);
        const customImmunity = member.system.traits.ci.custom?.trim();
        isNil(customImmunity, "") || conditionImmunities.push(customImmunity), ctx.conditionImmunities = conditionImmunities;
        let skills;
        skills = member.system.skills ? Array.from(configuredSkills).reduce(
          (prev, [key, configSkill]) => {
            const skill = this.#getSkill(member, key);
            if (!skill)
              return warn('Unable to find skill. Ensure custom skills are added at "init" time.', !1, { key, configSkill }), prev;
            const label = CONFIG.DND5E.skills[key]?.label ?? key;
            return prev.push({
              key,
              label,
              passive: skill.passive,
              total: skill.total,
              formattedTotal: formatAsModifier(skill.total)
            }), prev;
          },
          []
        ) : [], ctx.topSkills = skills.filter((s2) => s2.key !== CONSTANTS.SKILL_KEY_PERCEPTION).sort((a2, b2) => b2.total - a2.total).slice(0, 4), ctx.perception = skills.find((s2) => s2.key === CONSTANTS.SKILL_KEY_PERCEPTION);
      }
    }
    return {
      sections: Object.values(sections).filter((s2) => s2.members.length > 0),
      stats,
      memberContext,
      groupLanguages: Object.values(groupLanguages).sort((a2, b2) => a2.label.localeCompare(b2.label, game.i18n.lang)),
      groupSkills: Object.values(groupSkills).sort((a2, b2) => a2.label.localeCompare(b2.label, game.i18n.lang))
    };
  }
  #createEmptyGroupLanguage(language) {
    return { label: language, members: [] };
  }
  #createEmptyGroupSkill(key) {
    return {
      key,
      label: CONFIG.DND5E.skills[key]?.label ?? key,
      members: [],
      total: Number.NEGATIVE_INFINITY
    };
  }
  #prepareMovementSpeed() {
    const movement = this.actor.system.attributes.movement;
    let speeds = [
      [
        movement.land,
        `${game.i18n.localize("DND5E.MovementLand")} ${movement.land}`
      ],
      [
        movement.water,
        `${game.i18n.localize("DND5E.MovementWater")} ${movement.water}`
      ],
      [
        movement.air,
        `${game.i18n.localize("DND5E.MovementAir")} ${movement.air}`
      ]
    ];
    speeds = speeds.filter((s2) => s2[0]).sort((a2, b2) => b2[0] - a2[0]);
    const primary = speeds.shift();
    return {
      primary: `${primary ? primary[1] : "0"}`,
      secondary: speeds.map((s2) => s2[1]).join(", ")
    };
  }
  #getSkill(member, key) {
    return key in member.system.skills ? member.system.skills[key] : null;
  }
  async _prepareItems(context) {
    for (const item of context.items)
      Inventory.isInventoryType(item) && (context.itemContext[item.id] ??= await this._prepareItem(item, context));
    for (const panelItem of context.containerPanelItems) {
      const ctx = context.itemContext[panelItem.container.id];
      ctx.containerContents = await Container.getContainerContents(panelItem.container);
    }
  }
  async _prepareItem(item, context) {
    return {
      activities: Activities.getVisibleActivities(item, item.system.activities)?.map(Activities.getActivityItemContext),
      canToggle: !1,
      containerContents: void 0,
      hasUses: item.hasLimitedUses,
      isStack: item.system.quantity > 1,
      totalWeight: (await item.system.totalWeight)?.toNearest(0.1) ?? 0
    };
  }
  _configureEffects() {
    let first = !0;
    user_effect(() => {
      first || this.render();
    }), user_effect(() => {
      debug("Message bus message received", {
        app: this,
        actor: this.actor,
        message: this.messageBus
      });
    }), first = !1;
  }
  async _renderHTML(context, options) {
    game.user.apps[this.id] = this;
    for (const member of this.actor.system.members)
      member.actor.apps[this.id] = this;
    return await super._renderHTML(context, options);
  }
  async close(options = {}) {
    delete game.user.apps[this.id];
    for (const member of this.actor.system.members)
      delete member.actor.apps[this.id];
    return await super.close(options);
  }
  // ---------------------------------------------
  // Drag and Drop
  // ---------------------------------------------
  _onDragStart(event2) {
    const memberId = event2.currentTarget.closest("[data-member-drag][data-member-id]")?.getAttribute("data-member-id");
    if (!memberId) {
      super._onDragStart(event2);
      return;
    }
    const actor = this.#findMemberActor(memberId);
    if (!actor)
      return;
    const dragData = actor.toDragData();
    dragData.groupId = this.actor.id, event2.dataTransfer?.setData("text/plain", JSON.stringify(dragData));
  }
  async _onDropActiveEffect(..._args) {
    return !1;
  }
  async _onDropActor(event2, data) {
    if (!this.isEditable)
      return !1;
    const sourceActor = await getDocumentClass("Actor").fromDropData(data);
    if (!sourceActor)
      return;
    if (data.groupId !== this.actor.id)
      return this.actor.system.addMember(sourceActor);
    const dropTarget = event2.target?.closest("[data-member-drag][data-member-id]"), targetMemberId = dropTarget?.getAttribute("data-member-id"), targetMemberActor = this.#findMemberActor(targetMemberId);
    return !dropTarget || !targetMemberActor || targetMemberId === sourceActor.id ? !1 : await this._onSortMember(sourceActor, targetMemberActor);
  }
  #findMemberActor(actorId) {
    return this.actor.system.members.find((m2) => m2.actor.id === actorId)?.actor;
  }
  async _onSortMember(sourceActor, targetActor) {
    const membersCollection = this.actor.system.toObject().members, sourceIndex = membersCollection.findIndex((m2) => m2.actor === sourceActor.id), targetIndex = membersCollection.findIndex((m2) => m2.actor === targetActor.id);
    if (sourceIndex > targetIndex) {
      const sourceMember = membersCollection.splice(sourceIndex, 1)[0];
      membersCollection.splice(targetIndex, 0, sourceMember);
    } else {
      const sourceMember = membersCollection[sourceIndex];
      membersCollection.splice(targetIndex + 1, 0, sourceMember), membersCollection.splice(sourceIndex, 1);
    }
    return await this.actor.update({ "system.members": membersCollection });
  }
  async _onDropFolder(event2, data) {
    if (!this.isEditable)
      return !1;
    const folder = await Folder.implementation.fromDropData(data);
    if (folder.type === "Actor") {
      const results = [];
      for (let actor of folder.contents)
        results.push(await this.actor.system.addMember(actor));
      return results;
    }
    return await super._onDropFolder(event2, data);
  }
  // ---------------------------------------------
  // Actions
  // ---------------------------------------------
  award() {
    new dnd5e.applications.Award(this.actor, {
      savedDestinations: this.actor.getFlag("dnd5e", "awardDestinations")
    }).render(!0);
  }
  async updateMemberQuantity(memberActorId, event2) {
    const membersCollection = this.actor.system.toObject().members, index2 = membersCollection.findIndex((m2) => m2.actor === memberActorId), originalValue = membersCollection[index2].quantity.value, amount = event2.currentTarget.value, newQuantity = amount?.trim() === "" ? null : processInputChangeDeltaFromValues(amount, originalValue);
    membersCollection[index2].quantity.value = newQuantity;
    const result = await this.actor.update({ "system.members": membersCollection });
    return result || (event2.currentTarget.value = originalValue.toString()), result;
  }
  async updateMemberFormula(memberActorId, event2) {
    const membersCollection = this.actor.system.toObject().members, index2 = membersCollection.findIndex((m2) => m2.actor === memberActorId), originalValue = membersCollection[index2].quantity.formula;
    membersCollection[index2].quantity.formula = event2.currentTarget.value;
    const result = await this.actor.update({ "system.members": membersCollection });
    return result || (event2.currentTarget.value = originalValue), result;
  }
}
class Tidy5eContainerSheetClassic extends DragAndDropMixin(SvelteApplicationMixin(foundry.applications.sheets.ItemSheetV2)) {
  static {
    __name(this, "Tidy5eContainerSheetClassic");
  }
  currentTabId = void 0;
  searchFilters = /* @__PURE__ */ new Map();
  expandedItems = /* @__PURE__ */ new Map();
  expandedItemData = /* @__PURE__ */ new Map();
  inlineToggleService = new InlineToggleService();
  itemFilterService;
  #messageBus = state(proxy({ message: void 0 }));
  get messageBus() {
    return get(this.#messageBus);
  }
  set messageBus(value) {
    set(this.#messageBus, proxy(value));
  }
  constructor(...args) {
    super(...args), this.itemFilterService = new ItemFilterService({}, this.item);
  }
  static DEFAULT_OPTIONS = {
    classes: [
      CONSTANTS.MODULE_ID,
      "sheet",
      "item",
      CONSTANTS.ITEM_TYPE_CONTAINER,
      "app-v2",
      CONSTANTS.SHEET_LAYOUT_CLASSIC
    ],
    tag: "form",
    window: {
      frame: !0,
      positioned: !0,
      resizable: !0,
      controls: [ImportSheetControl.getSheetControl()]
    },
    position: { width: 560, height: 600 },
    actions: {
      async [ImportSheetControl.actionName]() {
        await ImportSheetControl.importFromCompendium(this, this.document);
      }
    },
    dragDrop: [{ dropSelector: "form" }],
    submitOnClose: !1
  };
  _createComponent(node) {
    const context = /* @__PURE__ */ new Map([
      [
        CONSTANTS.SVELTE_CONTEXT.CONTEXT,
        this._context
      ],
      [
        CONSTANTS.SVELTE_CONTEXT.CURRENT_TAB_ID,
        this.currentTabId
      ],
      [
        CONSTANTS.SVELTE_CONTEXT.MESSAGE_BUS,
        this.messageBus
      ],
      [
        CONSTANTS.SVELTE_CONTEXT.INLINE_TOGGLE_SERVICE,
        this.inlineToggleService
      ],
      [
        CONSTANTS.SVELTE_CONTEXT.ITEM_FILTER_SERVICE,
        this.itemFilterService
      ],
      [
        CONSTANTS.SVELTE_CONTEXT.ON_FILTER,
        this.itemFilterService.onFilter.bind(this.itemFilterService)
      ],
      [
        CONSTANTS.SVELTE_CONTEXT.ON_FILTER_CLEAR_ALL,
        this.itemFilterService.onFilterClearAll.bind(this.itemFilterService)
      ],
      [
        CONSTANTS.SVELTE_CONTEXT.SEARCH_FILTERS,
        new Map(this.searchFilters)
      ]
    ]), component2 = mount(ContainerSheet$1, { target: node, context }), html2 = globalThis.$(this.element);
    return initTidy5eContextMenu(this, html2), FoundryAdapter.createContextMenu(html2, ".activity[data-activity-id]", [], {
      onOpen: /* @__PURE__ */ __name((element2) => {
        const itemId = element2.closest("[data-item-id]")?.dataset.itemId, item = this.document.type === "container" ? this.document.system.getContainedItem(itemId) : this.document.items.get(itemId);
        !item || item instanceof Promise || element2.closest("[data-activity-id]") && dnd5e.documents.activity.UtilityActivity.onContextMenu(item, element2);
      }, "onOpen")
    }), component2;
  }
  async _prepareContext(options) {
    const rollData = this.item.getRollData(), enrichmentOptions = {
      secrets: this.item.isOwner,
      relativeTo: this.item,
      rollData
    }, enriched = {
      description: await TextEditor.enrichHTML(this.item.system.description.value, enrichmentOptions),
      unidentified: await TextEditor.enrichHTML(this.item.system.unidentified?.description, enrichmentOptions),
      chat: await TextEditor.enrichHTML(this.item.system.description.chat, enrichmentOptions)
    }, isIdentifiable = "identified" in this.item.system, itemDescriptions = [];
    itemDescriptions.push({
      enriched: enriched.description,
      content: this.document.system.description.value,
      field: "system.description.value",
      label: FoundryAdapter.localize("DND5E.Description")
    }), isIdentifiable && FoundryAdapter.userIsGm() && itemDescriptions.push({
      enriched: enriched.unidentified,
      content: this.document.system.unidentified.description,
      field: "system.unidentified.description",
      label: FoundryAdapter.localize("DND5E.DescriptionUnidentified")
    }), itemDescriptions.push({
      enriched: enriched.chat,
      content: this.document.system.description.chat,
      field: "system.description.chat",
      label: FoundryAdapter.localize("DND5E.DescriptionChat")
    });
    const contentsSortMode = SheetPreferencesService.getByType(this.item.type).tabs?.[CONSTANTS.TAB_CONTAINER_CONTENTS]?.sort ?? "m";
    let utilities = {
      [CONSTANTS.TAB_CONTAINER_CONTENTS]: {
        utilityToolbarCommands: [
          {
            title: FoundryAdapter.localize("SIDEBAR.SortModeAlpha"),
            iconClass: "fa-solid fa-arrow-down-a-z fa-fw",
            execute: /* @__PURE__ */ __name(async () => {
              await SheetPreferencesService.setDocumentTypeTabPreference(this.item.type, CONSTANTS.TAB_CONTAINER_CONTENTS, "sort", "m"), this.render();
            }, "execute"),
            visible: contentsSortMode === "a"
          },
          {
            title: FoundryAdapter.localize("SIDEBAR.SortModeManual"),
            iconClass: "fa-solid fa-arrow-down-short-wide fa-fw",
            execute: /* @__PURE__ */ __name(async () => {
              await SheetPreferencesService.setDocumentTypeTabPreference(this.item.type, CONSTANTS.TAB_CONTAINER_CONTENTS, "sort", "a"), this.render();
            }, "execute"),
            visible: contentsSortMode === "m"
          },
          {
            title: FoundryAdapter.localize("TIDY5E.Utilities.ConfigureSections"),
            iconClass: "fas fa-cog",
            execute: /* @__PURE__ */ __name(({ context: context2, sections }) => {
              new DocumentTabSectionConfigApplication({
                document: context2.item,
                // Provide a way to build the necessary config, perhaps within the application constructor. We've got all the info we need in order to perform the operation.
                sections,
                tabId: CONSTANTS.TAB_CONTAINER_CONTENTS,
                tabTitle: ItemSheetRuntime.getTabTitle(CONSTANTS.TAB_CONTAINER_CONTENTS)
              }).render(!0);
            }, "execute")
          }
        ]
      }
    };
    const context = {
      capacity: await this.item.system.computeCapacity(),
      concealDetails: !game.user.isGM && this.document.system.identified === !1,
      config: CONFIG.DND5E,
      containerContents: await Container.getContainerContents(this.item),
      customContent: [],
      document: this.document,
      editable: this.isEditable,
      enriched,
      filterData: this.itemFilterService.getDocumentItemFilterData(),
      filterPins: ItemFilterRuntime.defaultFilterPins[this.item.type],
      identifiedName: FoundryAdapter.getIdentifiedName(this.item),
      isContainer: !0,
      isIdentifiable,
      isIdentified: this.document.system.identified !== !1,
      isPhysical: this.document.system.hasOwnProperty("quantity"),
      item: this.item,
      itemContext: await Container.getContainerItemContext(this.item),
      itemDescriptions,
      itemOverrides: new Set(this._getItemOverrides()),
      items: Array.from(await this.item.system.contents),
      // @ts-expect-error
      itemType: game.i18n.localize(CONFIG.Item.typeLabels[this.item.type]),
      labels: this.document.labels,
      lockItemQuantity: FoundryAdapter.shouldLockItemQuantity(),
      lockMoneyChanges: FoundryAdapter.shouldLockMoneyChanges(),
      owner: this.item.isOwner,
      properties: { active: [], object: {}, options: [] },
      rollData,
      source: this.document.toObject().system,
      system: this.document.system,
      tabs: [],
      utilities
    };
    context.properties = {
      active: [],
      object: Object.fromEntries((this.document.system.properties ?? []).map((p2) => [p2, !0])),
      options: (this.document.system.validProperties ?? []).reduce(
        (arr, k) => {
          const { label } = CONFIG.DND5E.itemProperties[k];
          return arr.push({
            label,
            value: k,
            selected: this.item._source.system.properties?.includes(k)
          }), arr;
        },
        []
      ).sort((a2, b2) => a2.label.localeCompare(b2.label, game.i18n.lang))
    }, context.customContent = await ItemSheetRuntime.getContent(context);
    const eligibleCustomTabs = ItemSheetRuntime.getCustomItemTabs(context), customTabs = await TabManager.prepareTabsForRender(context, eligibleCustomTabs);
    return context.tabs = ItemSheetRuntime.sheets[this.item.type]?.defaultTabs() ?? [], context.tabs.push(...customTabs), TidyHooks.tidy5eSheetsPreConfigureSections(this, this.element, context), context;
  }
  /**
   * Retrieve the list of fields that are currently modified by Active Effects on the Item.
   */
  _getItemOverrides() {
    const overrides = Object.keys(foundry.utils.flattenObject(this.item.overrides ?? {}));
    return this.item.system.getItemOverrides?.(overrides), "properties" in this.item.system && dnd5e.documents.ActiveEffect5e.addOverriddenChoices(this.item, "system.properties", "system.properties", overrides), "damage" in this.item.system && foundry.utils.getProperty(this.item.overrides, "system.damage.parts") && (overrides.push("damage-control"), Array.fromRange(this.item.system.damage.parts.length).forEach((index2) => overrides.push(`system.damage.parts.${index2}.0`, `system.damage.parts.${index2}.1`))), overrides;
  }
  /* -------------------------------------------- */
  /*  Rendering Life-Cycle Methods                */
  /* -------------------------------------------- */
  _onRender(context, options) {
    super._onRender(context, options), TidyHooks.tidy5eSheetsRenderItemSheet(this, this.element, context, !!options.isFirstRender);
  }
  /* -------------------------------------------- */
  /*  Drag and Drop                               */
  /* -------------------------------------------- */
  /** @inheritDoc */
  async _onDrop(event2) {
    const data = TextEditor.getDragEventData(event2);
    if (!["Item", "Folder"].includes(data.type))
      return super._onDrop(event2);
    if (TidyHooks.dnd5eDropItemSheetData(this.item, this, data) !== !1)
      return data.type === "Folder" ? this._onDropFolder(event2, data) : this._onDropItem(event2, data);
  }
  /* -------------------------------------------- */
  async _onDropFolder(event2, data) {
    const folder = await Folder.implementation.fromDropData(data);
    if (!this.item.isOwner || folder.type !== "Item") return [];
    let recursiveWarning = !1;
    const parentContainers = await this.item.system.allContainers(), containers = /* @__PURE__ */ new Set();
    let items = await Promise.all(folder.contents.map(async (item) => {
      if (item instanceof Item || (item = await fromUuid(item.uuid)), item.system.container !== this.item.id) {
        if (this.item.uuid === item.uuid || parentContainers.includes(item)) {
          recursiveWarning = !0;
          return;
        }
        return item.type === "container" && containers.add(item.id), item;
      }
    }));
    if (items = items.filter((i2) => i2 && !containers.has(i2.system.container)), recursiveWarning && ui.notifications.warn("DND5E.ContainerRecursiveError", { localize: !0 }), !items.length) return [];
    const toCreate = await dnd5e.documents.Item5e.createWithContents(items, {
      container: this.item,
      transformAll: /* @__PURE__ */ __name((itemData, options) => this._onDropSingleItem(itemData, { ...options, event: event2 }), "transformAll")
    });
    return this.item.folder && toCreate.forEach((d2) => d2.folder = this.item.folder.id), dnd5e.documents.Item5e.createDocuments(toCreate, {
      pack: this.item.pack,
      parent: this.item.parent,
      keepId: !0
    });
  }
  /* -------------------------------------------- */
  async _onDropItem(event2, data) {
    const item = await Item.implementation.fromDropData(data);
    if (!this.item.isOwner || !item) return !1;
    if (item.system.container === this.item.id)
      return this._onSortItem(event2, item);
    const parentContainers = await this.item.system.allContainers();
    if (this.item.uuid === item.uuid || parentContainers.includes(item)) {
      ui.notifications.error("DND5E.ContainerRecursiveError", { localize: !0 });
      return;
    }
    if (item.actor === this.item.actor && item.pack === this.item.pack && Inventory.getDefaultInventoryTypes().includes(item.type))
      return item.update({
        folder: this.item.folder,
        "system.container": this.item.id
      });
    const toCreate = await dnd5e.documents.Item5e.createWithContents([item], {
      container: this.item,
      transformAll: /* @__PURE__ */ __name((itemData, options) => this._onDropSingleItem(itemData, { ...options, event: event2 }), "transformAll")
    });
    return this.item.folder && toCreate.forEach((d2) => d2.folder = this.item.folder.id), dnd5e.documents.Item5e.createDocuments(toCreate, {
      pack: this.item.pack,
      parent: this.item.actor,
      keepId: !0
    });
  }
  /* -------------------------------------------- */
  /**
   * Process a single item when dropping into the container.
   * @param {object} itemData           The item data to create.
   * @param {object} options
   * @param {string} options.container  ID of the container to create the items.
   * @param {number} options.depth      Current depth of the item being created.
   * @param {DragEvent} options.event   The concluding DragEvent which provided the drop data.
   * @returns {Promise<object|false>}   The item data to create after processing, or false if the item should not be
   *                                    created or creation has been otherwise handled.
   * @protected
   */
  async _onDropSingleItem(itemData, { container, depth, event: event2 }) {
    if (itemData.type === "spell") {
      const createOptions = {};
      return settings.value.includeFlagsInSpellScrollCreation && (createOptions.flags = itemData.flags), (await dnd5e.documents.Item5e.createScrollFromSpell(itemData, createOptions))?.toObject?.() ?? !1;
    }
    return this.item.actor && container === this.item.id && await FoundryAdapter.onDropStackConsumablesForActor(this.actor, itemData, { container }, event2) ? !1 : itemData;
  }
  /**
   * Handle a drop event for an existing contained Item to sort it relative to its siblings.
   */
  async _onSortItem(event2, item) {
    const dropTarget = event2.target.closest("[data-item-id]");
    if (!dropTarget) return;
    const contents = await this.item.system.contents, target = contents.get(dropTarget.dataset.itemId);
    if (item.id === target.id) return;
    const siblings = [];
    for (const el of Array.from(dropTarget.parentElement.children))
      if (el instanceof HTMLElement) {
        const siblingId = el.dataset.itemId;
        siblingId && siblingId !== item.id && siblings.push(contents.get(siblingId));
      }
    const updateData = SortingHelpers.performIntegerSort(item, { target, siblings }).map((u2) => {
      const update2 = u2.update;
      return update2._id = u2.target.id, update2;
    });
    Item.updateDocuments(updateData, { pack: this.item.pack, parent: this.item.actor });
  }
}
const supportedSheetClasses = [
  Tidy5eCharacterSheet.name,
  Tidy5eNpcSheet.name,
  Tidy5eVehicleSheet.name,
  Tidy5eItemSheetClassic.name,
  Tidy5eContainerSheetClassic.name,
  Tidy5eGroupSheetClassic.name
];
class ApplyTidySheetPreferencesApplication extends SvelteFormApplicationBase {
  static {
    __name(this, "ApplyTidySheetPreferencesApplication");
  }
  #sheetOptions = state(proxy([]));
  get sheetOptions() {
    return get(this.#sheetOptions);
  }
  set sheetOptions(value) {
    set(this.#sheetOptions, proxy(value));
  }
  static get defaultOptions() {
    return FoundryAdapter.mergeObject(super.defaultOptions, {
      width: 650,
      height: 500,
      id: "tidy-5e-sheet-preferences",
      popOut: !0,
      title: FoundryAdapter.localize("TIDY5E.Settings.SheetPreferences.name")
    });
  }
  createComponent(node) {
    return this.sheetOptions = this.getTidySheetPreferenceOptions(), mount(ApplyTidySheetPreferences, {
      target: node,
      props: {
        options: this.sheetOptions,
        onConfirm: this._onConfirm.bind(this)
      }
    });
  }
  getTidySheetPreferenceOptions() {
    const sheetClassOptions = [], setting = game.settings.get("core", "sheetClasses");
    for (const { documentName, hasTypeData } of Object.values(foundry.documents)) {
      if (!hasTypeData)
        continue;
      const subTypes = game.documentTypes[documentName].filter((t2) => t2 !== CONST.BASE_DOCUMENT_TYPE);
      if (subTypes.length)
        for (let subType of subTypes) {
          const { defaultClasses } = DocumentSheetConfig.getSheetClassesForSubType(documentName, subType), tidySheetClass = Object.keys(defaultClasses).find((c2) => supportedSheetClasses.includes(c2.split(".").at(-1) ?? "Not Found"));
          if (!tidySheetClass)
            continue;
          const typeLabel = FoundryAdapter.localize(
            // @ts-ignore
            CONFIG[documentName].typeLabels?.[subType]
          ), isDefault = tidySheetClass === foundry.utils.getProperty(setting, `${documentName}.${subType}`);
          sheetClassOptions.push({
            label: typeLabel,
            documentName,
            subType,
            sheetClassIdentifier: tidySheetClass,
            selected: isDefault
          });
        }
    }
    return sheetClassOptions;
  }
  async _onConfirm() {
    try {
      let sheetSettings = this.getSheetClassesSetting();
      this.sheetOptions.forEach((o2) => {
        const compositeSettingKey = `${o2.documentName}.${o2.subType}`;
        if (o2.selected) {
          debug(`Tidy Sheet ${o2.sheetClassIdentifier} selected; ensuring it is set in settings.`), sheetSettings = foundry.utils.mergeObject(sheetSettings, { [compositeSettingKey]: o2.sheetClassIdentifier });
          return;
        }
        if (debug(`Tidy Sheet ${o2.sheetClassIdentifier} unselected; checking setting.`), foundry.utils.getProperty(sheetSettings, compositeSettingKey) !== o2.sheetClassIdentifier) {
          debug(`Tidy Sheet ${o2.sheetClassIdentifier} not currently configured and is unselected; ignoring.`);
          return;
        }
        debug(`Tidy Sheet ${o2.sheetClassIdentifier} currently configured and is unselected; removing setting.`), delete sheetSettings[o2.documentName][o2.subType], Object.keys(sheetSettings[o2.documentName]).length === 0 && (debug(`${o2.documentName} is now empty. Pruning property from settings.`), delete sheetSettings[o2.documentName]);
      }), await game.settings.set("core", "sheetClasses", sheetSettings), debug("New sheetClasses settings", { sheetClasses: sheetSettings }), this.close(), Dialog.confirm({
        title: FoundryAdapter.localize("SETTINGS.ReloadPromptTitle"),
        content: FoundryAdapter.localize("SETTINGS.ReloadPromptBody"),
        yes: /* @__PURE__ */ __name(() => foundry.utils.debouncedReload(), "yes"),
        no: /* @__PURE__ */ __name(() => {
        }, "no"),
        defaultYes: !0
      });
    } catch (e2) {
      error(FoundryAdapter.localize("TIDY5E.GenericErrorNotification"), !0, { error: e2 });
    }
  }
  getSheetClassesSetting() {
    return game.settings.get("core", "sheetClasses");
  }
}
function getCurrentSettings() {
  return Object.keys(SettingsProvider.settings).reduce(
    (obj, key) => (obj[key] = SettingsProvider.settings[key].get(), obj),
    {}
  );
}
__name(getCurrentSettings, "getCurrentSettings");
let _settings = state(void 0);
const settings = {
  get value() {
    return get(_settings);
  }
};
function createSettings() {
  return {
    menus: {
      worldSettings: {
        options: {
          name: "TIDY5E.WorldSettings.Menu.name",
          label: "TIDY5E.WorldSettings.Menu.label",
          hint: "TIDY5E.WorldSettings.Menu.hint",
          icon: "fa-solid fa-globe",
          type: WorldSettingsFormApplication,
          restricted: !0
        }
      },
      userMenu: {
        options: {
          name: "TIDY5E.UserSettings.Menu.name",
          label: "TIDY5E.UserSettings.Menu.label",
          hint: "TIDY5E.UserSettings.Menu.hint",
          icon: "fa-solid fa-user-gear",
          type: UserSettingsFormApplication,
          restricted: !1
        }
      },
      theme: {
        options: {
          name: "TIDY5E.ThemeSettings.SheetMenu.name",
          label: "TIDY5E.ThemeSettings.SheetMenu.buttonLabel",
          hint: "TIDY5E.ThemeSettings.SheetMenu.hint",
          icon: "fa-solid fa-palette",
          type: ThemeSettingsFormApplication,
          restricted: !1
        }
      },
      resetAllSettings: {
        options: {
          name: "TIDY5E.Settings.Reset.name",
          hint: "TIDY5E.Settings.Reset.hint",
          icon: "fa-solid fa-database",
          type: ResetSettingsDialog,
          restricted: !0
        }
      },
      migrations: {
        options: {
          name: "TIDY5E.Settings.Migrations.name",
          label: "TIDY5E.Settings.Migrations.buttonLabel",
          hint: "TIDY5E.Settings.Migrations.hint",
          icon: "fa-solid fa-right-left",
          type: BulkMigrationsApplication,
          restricted: !0
        }
      },
      applyTidySheetPreferences: {
        options: {
          name: "TIDY5E.Settings.SheetPreferences.name",
          label: "TIDY5E.Settings.SheetPreferences.buttonLabel",
          hint: "TIDY5E.Settings.SheetPreferences.hint",
          icon: "fa-solid fa-file-pen",
          type: ApplyTidySheetPreferencesApplication,
          restricted: !0
        }
      },
      about: {
        options: {
          name: "TIDY5E.Settings.About.name",
          label: "TIDY5E.Settings.About.buttonLabel",
          hint: "TIDY5E.Settings.About.hint",
          icon: "fa-solid fa-question",
          type: AboutApplication,
          restricted: !1
        }
      }
    },
    settings: {
      migrationsConfirmationTally: {
        options: {
          name: "Migrations Confirmation Tally",
          hint: 'Developer Only: This field tells the developer when was the last time the GM indicated "Do Not Show Again" for a migration notification. This is so Tidy does not notify of migrations until a new migration has become available. A migration tick counter increments each release where a migration has become available.',
          scope: "world",
          config: !1,
          type: Number,
          default: 0
        },
        get() {
          return FoundryAdapter.getTidySetting("migrationsConfirmationTally");
        }
      },
      defaultTheme: {
        options: {
          name: "TIDY5E.Settings.DefaultTheme.name",
          hint: "TIDY5E.Settings.DefaultTheme.hint",
          scope: "world",
          config: !0,
          type: new foundry.data.fields.StringField({
            required: !0,
            blank: !1,
            initial: CONSTANTS.THEME_ID_DEFAULT_LIGHT,
            choices: /* @__PURE__ */ __name(() => getCoreThemes(!1), "choices")
          }),
          onChange: /* @__PURE__ */ __name((data) => {
            const theme = getThemeOrDefault(data), colorScheme = SettingsProvider.settings.colorScheme.get();
            theme && colorScheme === CONSTANTS.THEME_ID_DEFAULT && applyTheme(theme);
          }, "onChange")
        },
        get() {
          return FoundryAdapter.getTidySetting("defaultTheme");
        }
      },
      // Color Theme
      colorScheme: {
        options: {
          name: "TIDY5E.Settings.SheetTheme.name",
          hint: "TIDY5E.Settings.SheetTheme.hint",
          scope: "client",
          config: !0,
          type: new foundry.data.fields.StringField({
            required: !0,
            blank: !1,
            initial: CONSTANTS.THEME_ID_DEFAULT,
            choices: /* @__PURE__ */ __name(() => getCoreThemes(!0), "choices")
          }),
          onChange: /* @__PURE__ */ __name((data, colorPickerEnabledOverride = null) => {
            const theme = getThemeOrDefault(data);
            applyTheme(theme, colorPickerEnabledOverride);
          }, "onChange")
        },
        get() {
          return FoundryAdapter.getTidySetting("colorScheme");
        }
      },
      // Context Menu
      useContextMenu: {
        options: {
          name: "TIDY5E.Settings.UseContextMenu.name",
          hint: "TIDY5E.Settings.UseContextMenu.hint",
          scope: "client",
          config: !1,
          default: !0,
          type: Boolean
        },
        get() {
          return FoundryAdapter.getTidySetting("useContextMenu");
        }
      },
      // Player Character Settings
      initialCharacterSheetTab: {
        options: {
          name: "TIDY5E.Settings.InitialSheetTab.name",
          hint: "TIDY5E.Settings.InitialSheetTab.hint",
          scope: "world",
          config: !1,
          type: String,
          choices: /* @__PURE__ */ __name(() => TabManager.getTabsAsConfigOptions(CharacterSheetRuntime.getAllRegisteredTabs()), "choices"),
          default: CONSTANTS.TAB_CHARACTER_ATTRIBUTES
        },
        get() {
          return FoundryAdapter.getTidySetting("initialCharacterSheetTab");
        }
      },
      defaultCharacterSheetTabs: {
        options: {
          name: "TIDY5E.Settings.DefaultSheetTabs.name",
          hint: "TIDY5E.Settings.DefaultSheetTabs.hint",
          scope: "world",
          config: !1,
          type: Array,
          default: [
            CONSTANTS.TAB_CHARACTER_ATTRIBUTES,
            CONSTANTS.TAB_ACTOR_INVENTORY,
            CONSTANTS.TAB_CHARACTER_SPELLBOOK,
            CONSTANTS.TAB_CHARACTER_FEATURES,
            CONSTANTS.TAB_CHARACTER_EFFECTS,
            CONSTANTS.TAB_CHARACTER_BIOGRAPHY,
            CONSTANTS.TAB_CHARACTER_JOURNAL,
            CONSTANTS.TAB_CHARACTER_BASTION
          ]
        },
        get() {
          return FoundryAdapter.getTidySetting("defaultCharacterSheetTabs");
        }
      },
      useClassicControlsForCharacter: {
        options: {
          name: "TIDY5E.Settings.UseClassicControls.name",
          hint: "TIDY5E.Settings.UseClassicControls.hint",
          scope: "client",
          config: !1,
          default: !0,
          type: Boolean
        },
        get() {
          return FoundryAdapter.getTidySetting("useClassicControlsForCharacter");
        }
      },
      // Info Cards
      itemCardsForAllItems: {
        options: {
          name: "TIDY5E.Settings.ItemCardsForAllItems.name",
          hint: "TIDY5E.Settings.ItemCardsForAllItems.hint",
          scope: "client",
          config: !0,
          default: !0,
          type: Boolean
        },
        get() {
          return FoundryAdapter.getTidySetting("itemCardsForAllItems");
        }
      },
      useEffectCards: {
        options: {
          name: "TIDY5E.Settings.UseEffectCards.name",
          hint: "TIDY5E.Settings.UseEffectCards.hint",
          scope: "client",
          config: !0,
          default: !0,
          type: Boolean
        },
        get() {
          return FoundryAdapter.getTidySetting("useEffectCards");
        }
      },
      itemCardsAreFloating: {
        options: {
          name: "TIDY5E.Settings.ItemCardsAreFloating.name",
          hint: "TIDY5E.Settings.ItemCardsAreFloating.hint",
          scope: "client",
          config: !0,
          default: !1,
          type: Boolean
        },
        get() {
          return FoundryAdapter.getTidySetting("itemCardsAreFloating");
        }
      },
      itemCardsDelay: {
        options: {
          name: "TIDY5E.Settings.ItemCardsDelay.name",
          hint: "TIDY5E.Settings.ItemCardsDelay.hint",
          scope: "client",
          config: !0,
          default: 300,
          type: Number
        },
        get() {
          return FoundryAdapter.getTidySetting("itemCardsDelay");
        }
      },
      useAccessibleKeyboardSupport: {
        options: {
          name: "TIDY5E.Settings.UseAccessibleKeyboardSupport.name",
          hint: "TIDY5E.Settings.UseAccessibleKeyboardSupport.hint",
          scope: "world",
          config: !0,
          default: !1,
          type: Boolean
        },
        get() {
          return FoundryAdapter.getTidySetting("useAccessibleKeyboardSupport");
        }
      },
      useDefaultSheetAttributeTabbing: {
        options: {
          name: "TIDY5E.Settings.UseDefaultSheetAttributeTabbing.name",
          hint: "TIDY5E.Settings.UseDefaultSheetAttributeTabbing.hint",
          scope: "client",
          config: !0,
          default: !1,
          type: Boolean
        },
        get() {
          return FoundryAdapter.getTidySetting("useDefaultSheetAttributeTabbing");
        }
      },
      useDefaultSheetHpTabbing: {
        options: {
          name: "TIDY5E.Settings.UseDefaultSheetHpTabbing.name",
          hint: "TIDY5E.Settings.UseDefaultSheetHpTabbing.hint",
          scope: "client",
          config: !0,
          default: !1,
          type: Boolean
        },
        get() {
          return FoundryAdapter.getTidySetting("useDefaultSheetHpTabbing");
        }
      },
      itemCardsFixKey: {
        options: {
          name: "TIDY5E.Settings.InfoCardsInspectKey.name",
          hint: "TIDY5E.Settings.InfoCardsInspectKey.hint",
          scope: "world",
          config: !1,
          default: "t",
          type: String
        },
        get() {
          return FoundryAdapter.getTidySetting("itemCardsFixKey");
        }
      },
      //Show trait labels
      showTraitLabels: {
        options: {
          name: "TIDY5E.Settings.ShowTraitLabels.name",
          hint: "TIDY5E.Settings.ShowTraitLabels.hint",
          scope: "world",
          config: !1,
          default: !0,
          type: Boolean
        },
        get() {
          return FoundryAdapter.getTidySetting("showTraitLabels");
        }
      },
      showClassList: {
        options: {
          name: "TIDY5E.Settings.ShowClassList.name",
          hint: "TIDY5E.Settings.ShowClassList.hint",
          scope: "client",
          config: !1,
          default: !0,
          type: Boolean
        },
        get() {
          return FoundryAdapter.getTidySetting("showClassList");
        }
      },
      animateInspiration: {
        options: {
          name: "TIDY5E.Settings.InspirationAnimation.name",
          hint: "TIDY5E.Settings.InspirationAnimation.hint",
          scope: "client",
          config: !1,
          default: !0,
          type: Boolean
        },
        get() {
          return FoundryAdapter.getTidySetting("animateInspiration");
        }
      },
      hideIfZero: {
        options: {
          name: "TIDY5E.Settings.HideIfZero.name",
          hint: "TIDY5E.Settings.HideIfZero.hint",
          scope: "client",
          config: !1,
          default: !1,
          type: Boolean
        },
        get() {
          return FoundryAdapter.getTidySetting("hideIfZero");
        }
      },
      showInspirationOnHover: {
        options: {
          name: "TIDY5E.Settings.ShowInspirationOnHover.name",
          hint: "TIDY5E.Settings.ShowInspirationOnHover.hint",
          scope: "client",
          config: !1,
          default: !1,
          type: Boolean
        },
        get() {
          return FoundryAdapter.getTidySetting("showInspirationOnHover");
        }
      },
      showExhaustionOnHover: {
        options: {
          name: "TIDY5E.Settings.ShowExhaustionOnHover.name",
          hint: "TIDY5E.Settings.ShowExhaustionOnHover.hint",
          scope: "client",
          config: !1,
          default: !1,
          type: Boolean
        },
        get() {
          return FoundryAdapter.getTidySetting("showExhaustionOnHover");
        }
      },
      useHpBar: {
        options: {
          name: "TIDY5E.Settings.UseHpBar.name",
          hint: "TIDY5E.Settings.UseHpBar.hint",
          scope: "client",
          config: !1,
          default: !0,
          type: Boolean
        },
        get() {
          return FoundryAdapter.getTidySetting("useHpBar");
        }
      },
      useHpOverlay: {
        options: {
          name: "TIDY5E.Settings.UseHpOverlay.name",
          hint: "TIDY5E.Settings.UseHpOverlay.hint",
          scope: "client",
          config: !1,
          default: !0,
          type: Boolean
        },
        get() {
          return FoundryAdapter.getTidySetting("useHpOverlay");
        }
      },
      toggleEmptyCharacterSkills: {
        options: {
          name: "TIDY5E.Settings.ToggleEmptyCharacterSkills.name",
          hint: "TIDY5E.Settings.ToggleEmptyCharacterSkills.hint",
          scope: "client",
          config: !1,
          default: !1,
          type: Boolean
        },
        get() {
          return FoundryAdapter.getTidySetting("toggleEmptyCharacterSkills");
        }
      },
      toggleEmptyCharacterTraits: {
        options: {
          name: "TIDY5E.Settings.ToggleEmptyCharacterTraits.name",
          hint: "TIDY5E.Settings.ToggleEmptyCharacterTraits.hint",
          scope: "client",
          config: !1,
          default: !1,
          type: Boolean
        },
        get() {
          return FoundryAdapter.getTidySetting("toggleEmptyCharacterTraits");
        }
      },
      moveTraitsBelowCharacterResources: {
        options: {
          name: "TIDY5E.Settings.MoveTraitsBelowResources.name",
          hint: "TIDY5E.Settings.MoveTraitsBelowResources.hint",
          scope: "client",
          config: !1,
          default: !1,
          type: Boolean
        },
        get() {
          return FoundryAdapter.getTidySetting("moveTraitsBelowCharacterResources");
        }
      },
      showEquippedAmmoOnly: {
        options: {
          name: "TIDY5E.Settings.ShowEquippedAmmoOnly.name",
          hint: "TIDY5E.Settings.ShowEquippedAmmoOnly.hint",
          scope: "client",
          config: !1,
          default: !1,
          type: Boolean
        },
        get() {
          return FoundryAdapter.getTidySetting("showEquippedAmmoOnly");
        }
      },
      initialNpcSheetTab: {
        options: {
          name: "TIDY5E.Settings.InitialSheetTab.name",
          hint: "TIDY5E.Settings.InitialSheetTab.hint",
          scope: "world",
          config: !1,
          type: String,
          choices: /* @__PURE__ */ __name(() => TabManager.getTabsAsConfigOptions(NpcSheetRuntime.getAllRegisteredTabs()), "choices"),
          default: CONSTANTS.TAB_NPC_ABILITIES
        },
        get() {
          return FoundryAdapter.getTidySetting("initialNpcSheetTab");
        }
      },
      defaultNpcSheetTabs: {
        options: {
          name: "TIDY5E.Settings.DefaultSheetTabs.name",
          hint: "TIDY5E.Settings.DefaultSheetTabs.hint",
          scope: "world",
          config: !1,
          type: Array,
          default: [
            CONSTANTS.TAB_NPC_ABILITIES,
            CONSTANTS.TAB_NPC_SPELLBOOK,
            CONSTANTS.TAB_NPC_EFFECTS,
            CONSTANTS.TAB_NPC_BIOGRAPHY,
            CONSTANTS.TAB_NPC_JOURNAL
          ]
        },
        get() {
          return FoundryAdapter.getTidySetting("defaultNpcSheetTabs");
        }
      },
      useClassicControlsForNpc: {
        options: {
          name: "TIDY5E.Settings.UseClassicControls.name",
          hint: "TIDY5E.Settings.UseClassicControls.hint",
          scope: "client",
          config: !1,
          default: !0,
          type: Boolean
        },
        get() {
          return FoundryAdapter.getTidySetting("useClassicControlsForNpc");
        }
      },
      moveTraitsBelowNpcResources: {
        options: {
          name: "TIDY5E.Settings.MoveTraitsBelowResources.name",
          hint: "TIDY5E.Settings.MoveTraitsBelowResources.hint",
          scope: "client",
          config: !1,
          default: !1,
          type: Boolean
        },
        get() {
          return FoundryAdapter.getTidySetting("moveTraitsBelowNpcResources");
        }
      },
      useHpBarNpc: {
        options: {
          name: "TIDY5E.Settings.UseHpBar.name",
          hint: "TIDY5E.Settings.UseHpBar.hint",
          scope: "client",
          config: !1,
          default: !0,
          type: Boolean
        },
        get() {
          return FoundryAdapter.getTidySetting("useHpBarNpc");
        }
      },
      useHpOverlayNpc: {
        options: {
          name: "TIDY5E.Settings.UseHpOverlay.name",
          hint: "TIDY5E.Settings.UseHpOverlay.hint",
          scope: "client",
          config: !1,
          default: !0,
          type: Boolean
        },
        get() {
          return FoundryAdapter.getTidySetting("useHpOverlayNpc");
        }
      },
      alwaysShowNpcTraits: {
        options: {
          name: "TIDY5E.Settings.AlwaysShowTraits.name",
          hint: "TIDY5E.Settings.AlwaysShowTraits.hint",
          scope: "client",
          config: !1,
          default: !1,
          type: Boolean
        },
        get() {
          return FoundryAdapter.getTidySetting("alwaysShowNpcTraits");
        }
      },
      alwaysShowNpcSkills: {
        options: {
          name: "TIDY5E.Settings.AlwaysShowSkills.name",
          hint: "TIDY5E.Settings.AlwaysShowSkills.hint",
          scope: "client",
          config: !1,
          default: !1,
          type: Boolean
        },
        get() {
          return FoundryAdapter.getTidySetting("alwaysShowNpcSkills");
        }
      },
      showSpellbookTabNpc: {
        options: {
          name: "TIDY5E.Settings.ShowNPCSpellbookTab.name",
          hint: "TIDY5E.Settings.ShowNPCSpellbookTab.hint",
          scope: "client",
          config: !1,
          default: !0,
          type: Boolean
        },
        get() {
          return FoundryAdapter.getTidySetting("showSpellbookTabNpc");
        }
      },
      initialVehicleSheetTab: {
        options: {
          name: "TIDY5E.Settings.InitialSheetTab.name",
          hint: "TIDY5E.Settings.InitialSheetTab.hint",
          scope: "world",
          config: !1,
          type: String,
          choices: /* @__PURE__ */ __name(() => TabManager.getTabsAsConfigOptions(VehicleSheetRuntime.getAllRegisteredTabs()), "choices"),
          default: CONSTANTS.TAB_VEHICLE_ATTRIBUTES
        },
        get() {
          return FoundryAdapter.getTidySetting("initialVehicleSheetTab");
        }
      },
      defaultVehicleSheetTabs: {
        options: {
          name: "TIDY5E.Settings.DefaultSheetTabs.name",
          hint: "TIDY5E.Settings.DefaultSheetTabs.hint",
          scope: "world",
          config: !1,
          type: Array,
          default: [
            CONSTANTS.TAB_VEHICLE_ATTRIBUTES,
            CONSTANTS.TAB_VEHICLE_CARGO_AND_CREW,
            CONSTANTS.TAB_VEHICLE_EFFECTS,
            CONSTANTS.TAB_VEHICLE_DESCRIPTION
          ]
        },
        get() {
          return FoundryAdapter.getTidySetting("defaultVehicleSheetTabs");
        }
      },
      useClassicControlsForVehicle: {
        options: {
          name: "TIDY5E.Settings.UseClassicControls.name",
          hint: "TIDY5E.Settings.UseClassicControls.hint",
          scope: "client",
          config: !1,
          default: !0,
          type: Boolean
        },
        get() {
          return FoundryAdapter.getTidySetting("useClassicControlsForVehicle");
        }
      },
      useHpBarVehicle: {
        options: {
          name: "TIDY5E.Settings.UseHpBar.name",
          hint: "TIDY5E.Settings.UseHpBar.hint",
          scope: "client",
          config: !1,
          default: !0,
          type: Boolean
        },
        get() {
          return FoundryAdapter.getTidySetting("useHpBarVehicle");
        }
      },
      useHpOverlayVehicle: {
        options: {
          name: "TIDY5E.Settings.UseHpOverlay.name",
          hint: "TIDY5E.Settings.UseHpOverlay.hint",
          scope: "client",
          config: !1,
          default: !0,
          type: Boolean
        },
        get() {
          return FoundryAdapter.getTidySetting("useHpOverlayVehicle");
        }
      },
      showPlayerName: {
        options: {
          name: "TIDY5E.Settings.ShowPlayerName.name",
          hint: "TIDY5E.Settings.ShowPlayerName.hint",
          scope: "world",
          config: !1,
          default: !1,
          type: Boolean
        },
        get() {
          return FoundryAdapter.getTidySetting("showPlayerName");
        }
      },
      // Expanded Sheet
      showExpandedLimitedView: {
        options: {
          name: "TIDY5E.Settings.ShowExpandedLimitedView.name",
          hint: "TIDY5E.Settings.ShowExpandedLimitedView.hint",
          scope: "world",
          config: !1,
          default: !1,
          type: Boolean
        },
        get() {
          return FoundryAdapter.getTidySetting("showExpandedLimitedView");
        }
      },
      useCircularPortraitStyle: {
        options: {
          name: "TIDY5E.Settings.UseCircularPortraitStyle.name",
          hint: "TIDY5E.Settings.UseCircularPortraitStyle.hint",
          scope: "world",
          config: !1,
          type: String,
          choices: {
            [CONSTANTS.CIRCULAR_PORTRAIT_OPTION_NONE]: "TIDY5E.Settings.UseCircularPortraitStyle.none",
            [CONSTANTS.CIRCULAR_PORTRAIT_OPTION_CHARACTER]: "TIDY5E.Settings.UseCircularPortraitStyle.pc",
            [CONSTANTS.CIRCULAR_PORTRAIT_OPTION_NPCVEHICLE]: "TIDY5E.Settings.UseCircularPortraitStyle.npc",
            [CONSTANTS.CIRCULAR_PORTRAIT_OPTION_ALL]: "TIDY5E.Settings.UseCircularPortraitStyle.all"
          },
          default: CONSTANTS.CIRCULAR_PORTRAIT_OPTION_ALL
        },
        get() {
          return FoundryAdapter.getTidySetting("useCircularPortraitStyle");
        }
      },
      useTotalSheetLock: {
        options: {
          name: "TIDY5E.Settings.UseTotalSheetLock.name",
          hint: "TIDY5E.Settings.UseTotalSheetLock.hint",
          scope: "world",
          config: !1,
          default: !1,
          type: Boolean
        },
        get() {
          return FoundryAdapter.getTidySetting("useTotalSheetLock");
        }
      },
      permanentlyUnlockCharacterSheetForGm: {
        options: {
          name: "TIDY5E.Settings.PermanentlyUnlockCharacterSheetForGM.name",
          hint: "TIDY5E.Settings.PermanentlyUnlockCharacterSheetForGM.hint",
          scope: "world",
          config: !1,
          default: !1,
          type: Boolean
        },
        get() {
          return FoundryAdapter.getTidySetting("permanentlyUnlockCharacterSheetForGm");
        }
      },
      limitEffectsManagementToGm: {
        options: {
          name: "TIDY5E.Settings.LimitEffectsManagementToGM.name",
          hint: "TIDY5E.Settings.LimitEffectsManagementToGM.hint",
          scope: "world",
          config: !1,
          default: !1,
          type: Boolean
        },
        get() {
          return FoundryAdapter.getTidySetting("limitEffectsManagementToGm");
        }
      },
      hideDeathSavesFromPlayers: {
        options: {
          name: "TIDY5E.Settings.HideDeathSavesFromPlayers.name",
          hint: "TIDY5E.Settings.HideDeathSavesFromPlayers.hint",
          scope: "world",
          config: !1,
          default: !1,
          type: Boolean
        },
        get() {
          return FoundryAdapter.getTidySetting("hideDeathSavesFromPlayers");
        }
      },
      defaultDeathSaveRoll: {
        options: {
          name: "TIDY5E.Settings.DefaultDeathSaveRoll.name",
          hint: "TIDY5E.Settings.DefaultDeathSaveRoll.hint",
          scope: "world",
          config: !1,
          default: CONST.DICE_ROLL_MODES.PUBLIC,
          type: String,
          choices: {
            [CONST.DICE_ROLL_MODES.PUBLIC]: "CHAT.RollPublic",
            [CONST.DICE_ROLL_MODES.PRIVATE]: "CHAT.RollPrivate",
            [CONST.DICE_ROLL_MODES.BLIND]: "CHAT.RollBlind",
            [CONST.DICE_ROLL_MODES.SELF]: "CHAT.RollSelf"
          }
        },
        get() {
          return FoundryAdapter.getTidySetting("defaultDeathSaveRoll");
        }
      },
      useCharacterEncumbranceBar: {
        options: {
          name: "TIDY5E.Settings.UseCharacterEncumbranceBar.name",
          hint: "TIDY5E.Settings.UseCharacterEncumbranceBar.hint",
          scope: "world",
          config: !1,
          default: !0,
          type: Boolean
        },
        get() {
          return FoundryAdapter.getTidySetting("useCharacterEncumbranceBar");
        }
      },
      useNpcEncumbranceBar: {
        options: {
          name: "TIDY5E.Settings.UseNPCEncumbranceBar.name",
          hint: "TIDY5E.Settings.UseNPCEncumbranceBar.hint",
          scope: "world",
          config: !1,
          default: !1,
          type: Boolean
        },
        get() {
          return FoundryAdapter.getTidySetting("useNpcEncumbranceBar");
        }
      },
      useVehicleEncumbranceBar: {
        options: {
          name: "TIDY5E.Settings.UseVehicleEncumbranceBar.name",
          hint: "TIDY5E.Settings.UseVehicleEncumbranceBar.hint",
          scope: "world",
          config: !1,
          default: !0,
          type: Boolean
        },
        get() {
          return FoundryAdapter.getTidySetting("useVehicleEncumbranceBar");
        }
      },
      useExhaustion: {
        options: {
          name: "TIDY5E.Settings.UseExhaustion.name",
          hint: "TIDY5E.Settings.UseExhaustion.hint",
          scope: "world",
          config: !1,
          default: !0,
          type: Boolean
        },
        get() {
          return FoundryAdapter.getTidySetting("useExhaustion");
        }
      },
      useCharacterInspiration: {
        options: {
          name: "TIDY5E.Settings.UseInspiration.name",
          hint: "TIDY5E.Settings.UseInspiration.hint",
          scope: "world",
          config: !1,
          default: !0,
          type: Boolean
        },
        get() {
          return FoundryAdapter.getTidySetting("useCharacterInspiration");
        }
      },
      useVehicleMotion: {
        options: {
          name: "TIDY5E.Settings.UseVehicleMotion.name",
          hint: "TIDY5E.Settings.UseVehicleMotion.hint",
          scope: "world",
          config: !1,
          default: !0,
          type: Boolean
        },
        get() {
          return FoundryAdapter.getTidySetting("useVehicleMotion");
        }
      },
      showNpcRestInChat: {
        options: {
          name: "TIDY5E.Settings.ShowNPCRestInChat.name",
          hint: "TIDY5E.Settings.ShowNPCRestInChat.hint",
          scope: "world",
          config: !1,
          default: !0,
          type: Boolean
        },
        get() {
          return FoundryAdapter.getTidySetting("showNpcRestInChat");
        }
      },
      showNpcActorLinkMarker: {
        options: {
          name: "TIDY5E.Settings.ShowNPCActorLinkMarker.name",
          hint: "TIDY5E.Settings.ShowNPCActorLinkMarker.hint",
          scope: "world",
          config: !1,
          type: String,
          choices: {
            default: "TIDY5E.Settings.ShowNPCActorLinkMarker.default",
            unlinked: "TIDY5E.Settings.ShowNPCActorLinkMarker.unlinked",
            both: "TIDY5E.Settings.ShowNPCActorLinkMarker.both"
          },
          default: "default"
        },
        get() {
          return FoundryAdapter.getTidySetting("showNpcActorLinkMarker");
        }
      },
      showActiveEffectsMarker: {
        options: {
          name: "TIDY5E.Settings.ShowActiveEffectsMarker.name",
          hint: "TIDY5E.Settings.ShowActiveEffectsMarker.hint",
          scope: "world",
          config: !1,
          default: !1,
          type: Boolean
        },
        get() {
          return FoundryAdapter.getTidySetting("showActiveEffectsMarker");
        }
      },
      permanentlyUnlockNpcSheetForGm: {
        options: {
          name: "TIDY5E.Settings.PermanentlyUnlockNPCSheetForGM.name",
          hint: "TIDY5E.Settings.PermanentlyUnlockNPCSheetForGM.hint",
          scope: "world",
          config: !1,
          default: !1,
          type: Boolean
        },
        get() {
          return FoundryAdapter.getTidySetting("permanentlyUnlockNpcSheetForGm");
        }
      },
      permanentlyUnlockVehicleSheetForGm: {
        options: {
          name: "TIDY5E.Settings.PermanentlyUnlockVehicleSheetForGM.name",
          hint: "TIDY5E.Settings.PermanentlyUnlockVehicleSheetForGM.hint",
          scope: "world",
          config: !1,
          default: !1,
          type: Boolean
        },
        get() {
          return FoundryAdapter.getTidySetting("permanentlyUnlockVehicleSheetForGm");
        }
      },
      lockMoneyChanges: {
        options: {
          name: "TIDY5E.Settings.LockMoneyChanges.name",
          hint: "TIDY5E.Settings.LockMoneyChanges.hint",
          scope: "world",
          config: !1,
          default: !1,
          type: Boolean
        },
        get() {
          return FoundryAdapter.getTidySetting("lockMoneyChanges");
        }
      },
      lockExpChanges: {
        options: {
          name: "TIDY5E.Settings.LockExpChanges.name",
          hint: "TIDY5E.Settings.LockExpChanges.hint",
          scope: "world",
          config: !1,
          default: !1,
          type: Boolean
        },
        get() {
          return FoundryAdapter.getTidySetting("lockExpChanges");
        }
      },
      lockHpMaxChanges: {
        options: {
          name: "TIDY5E.Settings.LockHpMaxChanges.name",
          hint: "TIDY5E.Settings.LockHpMaxChanges.hint",
          scope: "world",
          config: !1,
          default: !1,
          type: Boolean
        },
        get() {
          return FoundryAdapter.getTidySetting("lockHpMaxChanges");
        }
      },
      lockLevelSelector: {
        options: {
          name: "TIDY5E.Settings.LockLevelSelector.name",
          hint: "TIDY5E.Settings.LockLevelSelector.hint",
          scope: "world",
          config: !1,
          default: !1,
          type: Boolean
        },
        get() {
          return FoundryAdapter.getTidySetting("lockLevelSelector");
        }
      },
      lockConfigureSheet: {
        options: {
          name: "TIDY5E.Settings.LockConfigureSheet.name",
          hint: "TIDY5E.Settings.LockConfigureSheet.hint",
          scope: "world",
          config: !1,
          default: !1,
          type: Boolean
        },
        get() {
          return FoundryAdapter.getTidySetting("lockConfigureSheet");
        }
      },
      lockItemQuantity: {
        options: {
          name: "TIDY5E.Settings.LockItemQuantity.name",
          hint: "TIDY5E.Settings.LockItemQuantity.hint",
          scope: "world",
          config: !1,
          default: !1,
          type: Boolean
        },
        get() {
          return FoundryAdapter.getTidySetting("lockItemQuantity");
        }
      },
      allowCantripsToBePrepared: {
        options: {
          name: "TIDY5E.Settings.AllowCantripsToBePrepared.name",
          hint: "TIDY5E.Settings.AllowCantripsToBePrepared.hint",
          scope: "world",
          config: !1,
          default: !1,
          type: Boolean
        },
        get() {
          return FoundryAdapter.getTidySetting("allowCantripsToBePrepared");
        }
      },
      useMulticlassSpellbookFilter: {
        options: {
          name: "TIDY5E.Settings.UseMulticlassSpellbookFilter.name",
          hint: "TIDY5E.Settings.UseMulticlassSpellbookFilter.hint",
          scope: "client",
          config: !1,
          default: !1,
          type: Boolean
        },
        get() {
          return FoundryAdapter.getTidySetting("useMulticlassSpellbookFilter");
        }
      },
      useSpellClassFilterIcons: {
        options: {
          name: "TIDY5E.Settings.UseSpellClassIcons.name",
          hint: "TIDY5E.Settings.UseSpellClassIcons.hint",
          scope: "client",
          config: !1,
          default: !1,
          type: Boolean
        },
        get() {
          return FoundryAdapter.getTidySetting("useSpellClassFilterIcons");
        }
      },
      allowHpMaxOverride: {
        options: {
          name: "TIDY5E.Settings.AllowHpMaxOverride.name",
          hint: "TIDY5E.Settings.AllowHpMaxOverride.hint",
          scope: "world",
          config: !1,
          default: !1,
          type: Boolean
        },
        get() {
          return FoundryAdapter.getTidySetting("allowHpMaxOverride");
        }
      },
      actionListLimitActionsToCantrips: {
        options: {
          name: "TIDY5E.Settings.ActionListLimitActionsToCantrips.name",
          hint: "TIDY5E.Settings.ActionListLimitActionsToCantrips.hint",
          scope: "client",
          config: !1,
          default: !1,
          type: Boolean
        },
        get() {
          return FoundryAdapter.getTidySetting("actionListLimitActionsToCantrips");
        }
      },
      actionListIncludeMinuteLongSpellsAsActions: {
        options: {
          name: "TIDY5E.Settings.ActionListIncludeMinuteLongSpellsAsActions.name",
          hint: "TIDY5E.Settings.ActionListIncludeMinuteLongSpellsAsActions.hint",
          scope: "client",
          config: !1,
          default: !0,
          type: Boolean
        },
        get() {
          return FoundryAdapter.getTidySetting("actionListIncludeMinuteLongSpellsAsActions");
        }
      },
      actionListIncludeSpellsWithActiveEffects: {
        options: {
          name: "TIDY5E.Settings.ActionListIncludeSpellsWithActiveEffects.name",
          hint: "TIDY5E.Settings.ActionListIncludeSpellsWithActiveEffects.hint",
          scope: "client",
          config: !1,
          default: !0,
          type: Boolean
        },
        get() {
          return FoundryAdapter.getTidySetting("actionListIncludeSpellsWithActiveEffects");
        }
      },
      actionListIncludeConsumables: {
        options: {
          name: "TIDY5E.Settings.ActionListIncludeConsumables.name",
          hint: "TIDY5E.Settings.ActionListIncludeConsumables.hint",
          scope: "client",
          config: !1,
          default: !0,
          type: Boolean
        },
        get() {
          return FoundryAdapter.getTidySetting("actionListIncludeConsumables");
        }
      },
      exhaustionConfig: {
        options: {
          name: "TIDY5E.WorldSettings.Exhaustion.name",
          hint: "TIDY5E.WorldSettings.Exhaustion.hint",
          scope: "world",
          config: !1,
          default: getDefaultExhaustionConfig(),
          type: Object
        },
        get() {
          return FoundryAdapter.getTidySetting("exhaustionConfig");
        }
      },
      vehicleExhaustionConfig: {
        options: {
          name: "TIDY5E.WorldSettings.VehicleExhaustion.name",
          hint: "TIDY5E.WorldSettings.VehicleExhaustion.hint",
          scope: "world",
          config: !1,
          default: getDefaultExhaustionConfig(),
          type: Object
        },
        get() {
          return FoundryAdapter.getTidySetting("vehicleExhaustionConfig");
        }
      },
      includeTidySectionFieldsInDefaultSheets: {
        options: {
          name: "TIDY5E.WorldSettings.IncludeTidySectionFieldsInDefaultSheets.name",
          hint: "TIDY5E.WorldSettings.IncludeTidySectionFieldsInDefaultSheets.hint",
          scope: "world",
          config: !1,
          default: !0,
          type: Boolean
        },
        get() {
          return FoundryAdapter.getTidySetting("includeTidySectionFieldsInDefaultSheets");
        }
      },
      itemIdentificationPermission: {
        options: {
          name: "TIDY5E.WorldSettings.ItemIdentificationPermission.name",
          hint: "TIDY5E.WorldSettings.ItemIdentificationPermission.hint",
          scope: "world",
          type: String,
          default: CONSTANTS.SHEET_SETTINGS_OPTION_GM_AND_OWNERS,
          config: !1,
          choices: {
            [CONSTANTS.SHEET_SETTINGS_OPTION_GM_AND_OWNERS]: "TIDY5E.WorldSettings.ItemIdentificationPermission.options.GmAndOwners",
            [CONSTANTS.SHEET_SETTINGS_OPTION_GM_ONLY]: "TIDY5E.WorldSettings.ItemIdentificationPermission.options.GmOnly"
          }
        },
        get() {
          return FoundryAdapter.getTidySetting("itemIdentificationPermission");
        }
      },
      includeFlagsInSpellScrollCreation: {
        options: {
          name: "TIDY5E.WorldSettings.IncludeFlagsInSpellScrollCreation.name",
          hint: "TIDY5E.WorldSettings.IncludeFlagsInSpellScrollCreation.hint",
          scope: "world",
          type: Boolean,
          default: !1,
          config: !1
        },
        get() {
          return FoundryAdapter.getTidySetting("includeFlagsInSpellScrollCreation");
        }
      },
      colorPickerEnabled: {
        options: {
          name: "TIDY5E.Settings.ColorPickerEnabled.name",
          hint: "TIDY5E.Settings.ColorPickerEnabled.hint",
          scope: "client",
          type: Boolean,
          default: !1,
          config: !1
        },
        get() {
          return FoundryAdapter.getTidySetting("colorPickerEnabled");
        }
      },
      colorPickerPrimaryAccent: {
        options: {
          name: "TIDY5E.Settings.ColorPickerPrimaryAccent.name",
          scope: "client",
          type: String,
          default: defaultLightTheme.variables["--t5e-primary-accent-color"],
          config: !1
        },
        get() {
          return FoundryAdapter.getTidySetting("colorPickerPrimaryAccent");
        },
        representsCssVariable: "--t5e-primary-accent-color"
      },
      colorPickerHpBar: {
        options: {
          name: "TIDY5E.Settings.ColorPickerHpBar.name",
          scope: "client",
          type: String,
          default: defaultLightTheme.variables["--t5e-hp-bar-color"],
          config: !1
        },
        get() {
          return FoundryAdapter.getTidySetting("colorPickerHpBar");
        },
        representsCssVariable: "--t5e-hp-bar-color"
      },
      colorPickerEquipped: {
        options: {
          name: "TIDY5E.Settings.ColorPickerEquipped.name",
          scope: "client",
          type: String,
          default: defaultLightTheme.variables["--t5e-equipped-background"],
          config: !1
        },
        get() {
          return FoundryAdapter.getTidySetting("colorPickerEquipped");
        },
        representsCssVariable: "--t5e-equipped-background"
      },
      colorPickerEquippedOutline: {
        options: {
          name: "TIDY5E.Settings.ColorPickerEquippedOutline.name",
          scope: "client",
          type: String,
          default: defaultLightTheme.variables["--t5e-equipped-item-grid-tile-outline-color"],
          config: !1
        },
        get() {
          return FoundryAdapter.getTidySetting("colorPickerEquippedOutline");
        },
        representsCssVariable: "--t5e-equipped-item-grid-tile-outline-color"
      },
      colorPickerEquippedAccent: {
        options: {
          name: "TIDY5E.Settings.ColorPickerEquippedAccent.name",
          scope: "client",
          type: String,
          default: defaultLightTheme.variables["--t5e-equipped-item-grid-tile-accent-color"],
          config: !1
        },
        get() {
          return FoundryAdapter.getTidySetting("colorPickerEquippedAccent");
        },
        representsCssVariable: "--t5e-equipped-item-grid-tile-accent-color"
      },
      colorPickerPrepared: {
        options: {
          name: "TIDY5E.Settings.ColorPickerPrepared.name",
          scope: "client",
          type: String,
          default: defaultLightTheme.variables["--t5e-prepared-background"],
          config: !1
        },
        get() {
          return FoundryAdapter.getTidySetting("colorPickerPrepared");
        },
        representsCssVariable: "--t5e-prepared-background"
      },
      colorPickerPreparedOutline: {
        options: {
          name: "TIDY5E.Settings.ColorPickerPreparedOutline.name",
          scope: "client",
          type: String,
          default: defaultLightTheme.variables["--t5e-prepared-item-grid-tile-outline-color"],
          config: !1
        },
        get() {
          return FoundryAdapter.getTidySetting("colorPickerPreparedOutline");
        },
        representsCssVariable: "--t5e-prepared-item-grid-tile-outline-color"
      },
      colorPickerPreparedAccent: {
        options: {
          name: "TIDY5E.Settings.ColorPickerPreparedAccent.name",
          scope: "client",
          type: String,
          default: defaultLightTheme.variables["--t5e-prepared-item-grid-tile-accent-color"],
          config: !1
        },
        get() {
          return FoundryAdapter.getTidySetting("colorPickerPreparedAccent");
        },
        representsCssVariable: "--t5e-prepared-item-grid-tile-accent-color"
      },
      colorPickerPact: {
        options: {
          name: "TIDY5E.Settings.ColorPickerPact.name",
          scope: "client",
          type: String,
          default: defaultLightTheme.variables["--t5e-pact-background"],
          config: !1
        },
        get() {
          return FoundryAdapter.getTidySetting("colorPickerPact");
        },
        representsCssVariable: "--t5e-pact-background"
      },
      colorPickerPactOutline: {
        options: {
          name: "TIDY5E.Settings.ColorPickerPactOutline.name",
          scope: "client",
          type: String,
          default: defaultLightTheme.variables["--t5e-pact-outline-color"],
          config: !1
        },
        get() {
          return FoundryAdapter.getTidySetting("colorPickerPactOutline");
        },
        representsCssVariable: "--t5e-pact-outline-color"
      },
      colorPickerPactAccent: {
        options: {
          name: "TIDY5E.Settings.ColorPickerPactAccent.name",
          scope: "client",
          type: String,
          default: defaultLightTheme.variables["--t5e-pact-accent-color"],
          config: !1
        },
        get() {
          return FoundryAdapter.getTidySetting("colorPickerPactAccent");
        },
        representsCssVariable: "--t5e-pact-accent-color"
      },
      colorPickerAtWill: {
        options: {
          name: "TIDY5E.Settings.ColorPickerAtWill.name",
          scope: "client",
          type: String,
          default: defaultLightTheme.variables["--t5e-atwill-background"],
          config: !1
        },
        get() {
          return FoundryAdapter.getTidySetting("colorPickerAtWill");
        },
        representsCssVariable: "--t5e-atwill-background"
      },
      colorPickerAtWillOutline: {
        options: {
          name: "TIDY5E.Settings.ColorPickerAtWillOutline.name",
          scope: "client",
          type: String,
          default: defaultLightTheme.variables["--t5e-atwill-outline-color"],
          config: !1
        },
        get() {
          return FoundryAdapter.getTidySetting("colorPickerAtWillOutline");
        },
        representsCssVariable: "--t5e-atwill-outline-color"
      },
      colorPickerAtWillAccent: {
        options: {
          name: "TIDY5E.Settings.ColorPickerAtWillAccent.name",
          scope: "client",
          type: String,
          default: defaultLightTheme.variables["--t5e-atwill-accent-color"],
          config: !1
        },
        get() {
          return FoundryAdapter.getTidySetting("colorPickerAtWillAccent");
        },
        representsCssVariable: "--t5e-atwill-accent-color"
      },
      colorPickerRitualOnly: {
        options: {
          name: "TIDY5E.Settings.ColorPickerRitualOnly.name",
          scope: "client",
          type: String,
          default: defaultLightTheme.variables["--t5e-ritual-only-background"],
          config: !1
        },
        get() {
          return FoundryAdapter.getTidySetting("colorPickerRitualOnly");
        },
        representsCssVariable: "--t5e-ritual-only-background"
      },
      colorPickerRitualOnlyOutline: {
        options: {
          name: "TIDY5E.Settings.ColorPickerRitualOnlyOutline.name",
          scope: "client",
          type: String,
          default: defaultLightTheme.variables["--t5e-ritual-only-outline-color"],
          config: !1
        },
        get() {
          return FoundryAdapter.getTidySetting("colorPickerRitualOnlyOutline");
        },
        representsCssVariable: "--t5e-ritual-only-outline-color"
      },
      colorPickerRitualOnlyAccent: {
        options: {
          name: "TIDY5E.Settings.ColorPickerRitualOnlyAccent.name",
          scope: "client",
          type: String,
          default: defaultLightTheme.variables["--t5e-ritual-only-accent-color"],
          config: !1
        },
        get() {
          return FoundryAdapter.getTidySetting("colorPickerRitualOnlyAccent");
        },
        representsCssVariable: "--t5e-ritual-only-accent-color"
      },
      colorPickerInnate: {
        options: {
          name: "TIDY5E.Settings.ColorPickerInnate.name",
          scope: "client",
          type: String,
          default: defaultLightTheme.variables["--t5e-innate-background"],
          config: !1
        },
        get() {
          return FoundryAdapter.getTidySetting("colorPickerInnate");
        },
        representsCssVariable: "--t5e-innate-background"
      },
      colorPickerInnateOutline: {
        options: {
          name: "TIDY5E.Settings.ColorPickerInnateOutline.name",
          scope: "client",
          type: String,
          default: defaultLightTheme.variables["--t5e-innate-outline"],
          config: !1
        },
        get() {
          return FoundryAdapter.getTidySetting("colorPickerInnateOutline");
        },
        representsCssVariable: "--t5e-innate-outline"
      },
      colorPickerInnateAccent: {
        options: {
          name: "TIDY5E.Settings.ColorPickerInnateAccent.name",
          scope: "client",
          type: String,
          default: defaultLightTheme.variables["--t5e-innate-accent"],
          config: !1
        },
        get() {
          return FoundryAdapter.getTidySetting("colorPickerInnateAccent");
        },
        representsCssVariable: "--t5e-innate-accent"
      },
      colorPickerAlwaysPrepared: {
        options: {
          name: "TIDY5E.Settings.ColorPickerAlwaysPrepared.name",
          scope: "client",
          type: String,
          default: defaultLightTheme.variables["--t5e-alwaysprepared-background"],
          config: !1
        },
        get() {
          return FoundryAdapter.getTidySetting("colorPickerAlwaysPrepared");
        },
        representsCssVariable: "--t5e-alwaysprepared-background"
      },
      colorPickerAlwaysPreparedOutline: {
        options: {
          name: "TIDY5E.Settings.ColorPickerAlwaysPreparedOutline.name",
          scope: "client",
          type: String,
          default: defaultLightTheme.variables["--t5e-alwaysprepared-outline-color"],
          config: !1
        },
        get() {
          return FoundryAdapter.getTidySetting("colorPickerAlwaysPreparedOutline");
        },
        representsCssVariable: "--t5e-alwaysprepared-outline-color"
      },
      colorPickerAlwaysPreparedAccent: {
        options: {
          name: "TIDY5E.Settings.ColorPickerAlwaysPreparedAccent.name",
          scope: "client",
          type: String,
          default: defaultLightTheme.variables["--t5e-alwaysprepared-accent-color"],
          config: !1
        },
        get() {
          return FoundryAdapter.getTidySetting("colorPickerAlwaysPreparedAccent");
        },
        representsCssVariable: "--t5e-alwaysprepared-accent-color"
      },
      colorPickerScrollbarThumb: {
        options: {
          name: "TIDY5E.Settings.ColorPickerScrollbarThumb.name",
          scope: "client",
          type: String,
          default: defaultLightTheme.variables["--t5e-scrollbar-thumb-color"],
          config: !1
        },
        get() {
          return FoundryAdapter.getTidySetting("colorPickerScrollbarThumb");
        },
        representsCssVariable: "--t5e-scrollbar-thumb-color"
      },
      colorPickerScrollbarTrack: {
        options: {
          name: "TIDY5E.Settings.ColorPickerScrollbarTrack.name",
          scope: "client",
          type: String,
          default: defaultLightTheme.variables["--t5e-scrollbar-track-color"],
          config: !1
        },
        get() {
          return FoundryAdapter.getTidySetting("colorPickerScrollbarTrack");
        },
        representsCssVariable: "--t5e-scrollbar-track-color"
      },
      colorPickerMagicAccent: {
        options: {
          name: "TIDY5E.Settings.ColorPickerMagicAccent.name",
          scope: "client",
          type: String,
          default: defaultLightTheme.variables["--t5e-magic-accent-color"],
          config: !1
        },
        get() {
          return FoundryAdapter.getTidySetting("colorPickerMagicAccent");
        },
        representsCssVariable: "--t5e-magic-accent-color"
      },
      // Icons
      useTidySpellSchoolIcons: {
        options: {
          name: "TIDY5E.Settings.UseTidySpellSchoolIcons.name",
          hint: "TIDY5E.Settings.UseTidySpellSchoolIcons.hint",
          scope: "world",
          type: Boolean,
          default: !0,
          config: !1
        },
        get() {
          return FoundryAdapter.getTidySetting("useTidySpellSchoolIcons");
        }
      },
      debug: {
        options: {
          name: "TIDY5E.Settings.Debug.name",
          hint: "TIDY5E.Settings.Debug.hint",
          scope: "client",
          config: !0,
          default: !1,
          type: Boolean,
          requiresReload: !0
        },
        get() {
          return FoundryAdapter.getTidySetting("debug");
        }
      }
    }
  };
}
__name(createSettings, "createSettings");
let SettingsProvider;
function initSettings() {
  SettingsProvider = createSettings();
  for (let menu of Object.entries(SettingsProvider.menus))
    FoundryAdapter.registerTidyMenu(menu[0], menu[1].options);
  const debouncedSettingStoreRefresh = FoundryAdapter.debounce(
    () => {
      set(_settings, proxy(getCurrentSettings()));
    },
    100
  );
  for (let setting of Object.entries(SettingsProvider.settings)) {
    const options = {
      ...setting[1].options,
      onChange: /* @__PURE__ */ __name((...args) => {
        debouncedSettingStoreRefresh(), setting[1].options.onChange?.(...args);
      }, "onChange")
    };
    FoundryAdapter.registerTidySetting(setting[0], options);
  }
  SettingsProvider.settings.colorScheme.options.onChange(SettingsProvider.settings.colorScheme.get()), set(_settings, proxy(getCurrentSettings())), Hooks.on("closeSettingsConfig", () => {
    set(_settings, proxy(getCurrentSettings()));
  });
}
__name(initSettings, "initSettings");
const FoundryAdapter = {
  deepClone(obj) {
    return foundry.utils.deepClone(obj);
  },
  userIsGm() {
    return game.user.isGM;
  },
  getTidySetting(settingName) {
    return game.settings.get(CONSTANTS.MODULE_ID, settingName);
  },
  async setTidySetting(key, value) {
    await game.settings.set(CONSTANTS.MODULE_ID, key, value);
  },
  registerTidySetting(key, data) {
    game.settings.register(CONSTANTS.MODULE_ID, key, data);
  },
  registerTidyMenu(key, data) {
    game.settings.registerMenu(CONSTANTS.MODULE_ID, key, data);
  },
  getGameSetting(namespace, settingName) {
    return game.settings.get(namespace, settingName);
  },
  getSystemSetting(settingName) {
    return FoundryAdapter.getGameSetting(
      CONSTANTS.DND5E_SYSTEM_ID,
      settingName
    );
  },
  async setGameSetting(namespace, key, value) {
    await game.settings.set(namespace, key, value);
  },
  onGetActiveEffectContextOptions(func) {
    Hooks.on("dnd5e.getActiveEffectContextOptions", func);
  },
  getTemplate(templateName) {
    return `modules/${CONSTANTS.MODULE_ID}/templates/${templateName}`;
  },
  localize(value, options) {
    return options ? game.i18n.format(value, options) : game.i18n.localize(value);
  },
  // TODO: Extract a dedicated ActiveEffectManager or the like
  addEffect(effectType, owner) {
    const isActor = owner instanceof Actor, effectData = {
      label: isActor ? game.i18n.localize("DND5E.EffectNew") : owner.name,
      icon: isActor ? "icons/svg/aura.svg" : owner.img,
      origin: owner.uuid,
      "duration.rounds": effectType === "temporary" ? 1 : void 0,
      disabled: effectType === "inactive"
    };
    if (TidyHooks.tidy5eSheetsPreCreateActiveEffect(
      owner,
      effectData,
      game.user.id
    ))
      return owner.createEmbeddedDocuments("ActiveEffect", [effectData]);
  },
  canPrepareSpell(item) {
    return item.system.preparation?.mode !== CONSTANTS.SPELL_PREPARATION_MODE_ATWILL && item.system.preparation?.mode !== CONSTANTS.SPELL_PREPARATION_MODE_INNATE && item.system.preparation?.mode !== CONSTANTS.SPELL_PREPARATION_MODE_ALWAYS && item.system.preparation?.mode !== CONSTANTS.SPELL_PREPARATION_MODE_PACT && (item.system.level !== 0 || settings.value.allowCantripsToBePrepared);
  },
  /**
   *
   * @param content           - the editor content to include
   * @param targetDataField   - the data field to update when this editor is saved
   * @param editable          - whether the editor should allow editing
   * @returns
   */
  createEditorHtml(content, targetDataField, editable) {
    return HandlebarsHelpers.editor(content, {
      hash: {
        target: targetDataField,
        button: !0,
        engine: "prosemirror",
        collaborate: !1,
        editable
      }
    });
  },
  mergeObject(original, ...args) {
    return foundry.utils.mergeObject(original, ...args);
  },
  expandObject(data) {
    return foundry.utils.expandObject(data);
  },
  isEmpty(obj) {
    return foundry.utils.isEmpty(obj);
  },
  getClassIdentifier(item) {
    return item.system.identifier || item.name.slugify({ strict: !0 });
  },
  getClassAndSubclassSummaries(actor) {
    return actor.items.reduce(
      (map, item) => {
        if (item.type === "class") {
          const identifier = FoundryAdapter.getClassIdentifier(item), data = map.get(identifier) ?? {};
          data.class = item.name, data.level = item.system.levels?.toString(), map.set(identifier, data);
        }
        if (item.type === "subclass" && item.system.classIdentifier !== void 0) {
          const data = map.get(item.system.classIdentifier) ?? {};
          data.subclass = item.name, item.system.classIdentifier !== void 0 && map.set(item.system.classIdentifier, data);
        }
        return map;
      },
      /* @__PURE__ */ new Map()
    );
  },
  getActorCharacterSummaryEntries(actorContext) {
    const entries = [];
    return actorContext.system.details.race?.name ? entries.push(actorContext.system.details.race.name) : actorContext.system.details.race && entries.push(actorContext.system.details.race), actorContext.system.details.background?.name ? entries.push(actorContext.system.details.background.name) : actorContext.system.details.background && entries.push(actorContext.system.details.background), actorContext.system.details.alignment && entries.push(actorContext.system.details.alignment), entries;
  },
  getCurrentLang() {
    return game.i18n.lang;
  },
  editOnMiddleClick(event2, entityWithSheet) {
    event2.button === CONSTANTS.MOUSE_BUTTON_AUXILIARY && entityWithSheet.sheet.isEditable && (event2.preventDefault(), event2.stopImmediatePropagation(), entityWithSheet.sheet.render(!0));
  },
  createItem({ type, ...data }, actor) {
    if (type === "class" && actor.system.details.level + 1 > CONFIG.DND5E.maxLevel) {
      const error2 = game.i18n.format("DND5E.MaxCharacterLevelExceededWarn", {
        max: CONFIG.DND5E.maxLevel
      });
      return ui.notifications.error(error2), null;
    }
    if ((CONFIG.Item.dataModels[type]?.metadata.singleton ?? !1) && actor.itemTypes[type].length) {
      const error2 = FoundryAdapter.localize("DND5E.ActorWarningSingleton", {
        itemType: type,
        actorType: actor.type
      });
      return ui.notifications.error(error2), null;
    }
    const itemData = foundry.utils.mergeObject(
      {
        name: FoundryAdapter.localize("DND5E.ItemNew", {
          type: FoundryAdapter.localize(
            CONFIG.Item.typeLabels[type]
          )
        }),
        type
      },
      foundry.utils.expandObject({ ...data })
    );
    if (TidyHooks.tidy5eSheetsPreCreateItem(actor, itemData, game.user.id))
      return actor.createEmbeddedDocuments("Item", [itemData]);
  },
  async onLevelChange(event2, item, actor) {
    if (event2.preventDefault(), !event2.currentTarget?.value === void 0)
      return;
    const delta = Number(event2.currentTarget.value), classId = item.id;
    if (!delta || !classId)
      return;
    const classItem = actor.items.get(classId);
    if (!game.settings.get("dnd5e", "disableAdvancements")) {
      const manager = dnd5e.applications.advancement.AdvancementManager.forLevelChange(
        actor,
        classId,
        delta
      );
      if (manager.steps.length) {
        if (delta > 0) return manager.render(!0);
        try {
          if (await dnd5e.applications.advancement.AdvancementConfirmationDialog.forLevelDown(
            classItem
          )) return manager.render(!0);
        } catch {
          return;
        }
      }
    }
    return classItem.update({
      "system.levels": classItem.system.levels + delta
    });
  },
  getSpellComponentLabels() {
    return Array.from(CONFIG.DND5E.validProperties.spell).reduce((prev, curr) => {
      const config = CONFIG.DND5E.itemProperties[curr];
      return "abbreviation" in config && (prev[config.abbreviation] = config.label), prev;
    }, {});
  },
  getProperty(obj, path) {
    return foundry.utils.getProperty(obj, path);
  },
  getInventoryRowClasses(item, ctx, extras) {
    const itemClasses = [];
    return item?.system?.properties?.has("mgc") && itemClasses.push("magic-item"), ctx?.attunement?.cls && !FoundryAdapter.concealDetails(item) && itemClasses.push(ctx.attunement.cls), item?.system?.equipped && itemClasses.push("equipped"), extras?.length && itemClasses.push(...extras), itemClasses.join(" ");
  },
  getSpellRowClasses(spell) {
    const classes = [];
    return spell.system.preparation.mode === CONSTANTS.SPELL_PREPARATION_MODE_PREPARED && (spell.system.level > 0 || settings.value.allowCantripsToBePrepared) && classes.push("preparable"), spell.system.preparation.prepared && classes.push("prepared"), spell.system.preparation.mode === CONSTANTS.SPELL_PREPARATION_MODE_ALWAYS && classes.push("always-prepared"), spell.system.preparation.mode === CONSTANTS.SPELL_PREPARATION_MODE_PACT && classes.push("pact"), spell.system.preparation.mode === CONSTANTS.SPELL_PREPARATION_MODE_ATWILL && classes.push("at-will"), spell.system.preparation.mode === CONSTANTS.SPELL_PREPARATION_MODE_RITUAL && classes.push("ritual-only"), spell.system.preparation.mode === CONSTANTS.SPELL_PREPARATION_MODE_INNATE && classes.push("innate"), classes.join(" ");
  },
  getSpellAttackModAndTooltip(context) {
    let actor = context.actor, formula = Roll.replaceFormulaData(
      actor.system.bonuses.rsak.attack,
      actor.getRollData(),
      { missing: 0, warn: !1 }
    ), prof = actor.system.attributes.prof ?? 0, spellAbility = context.system.attributes.spellcasting, abilityMod = (spellAbility != "" ? actor.system.abilities[spellAbility].mod : 0) ?? 0, spellAttackMod = prof + abilityMod, spellAttackText = spellAttackMod > 0 ? "+" + spellAttackMod : spellAttackMod, spellAttackTextTooltip = `${prof} (prof.)+${abilityMod} (${spellAbility})`;
    return {
      mod: spellAttackText,
      bonus: formula,
      modTooltip: spellAttackTextTooltip
    };
  },
  cycleProficiency(actor, key, currentValue, systemFieldName, reverse = !1) {
    if (currentValue == null)
      return Promise.resolve(void 0);
    const levels = [0, 1, 0.5, 2], next = levels.indexOf(currentValue) + (reverse ? 3 : 1);
    return actor.update({
      [`system.${systemFieldName}.${key}.value`]: levels[next % levels.length]
    });
  },
  getProficiencyIconClass(level) {
    const icons = {
      0: "far fa-circle",
      0.5: "fas fa-adjust",
      1: "fas fa-check",
      2: "fas fa-check-double"
    };
    return icons[level] || icons[0];
  },
  getSpellImageUrl(context, spell) {
    if (!settings.value.useSpellClassFilterIcons)
      return spell.img;
    const sourceClass = spell.system.sourceClass;
    return (sourceClass && "actorClassesToImages" in context ? context.actorClassesToImages[sourceClass] : void 0) ?? spell.img;
  },
  searchActors(searchCriteria, actors) {
    return new Set(
      actors.filter((actor) => FoundryAdapter.searchActor(searchCriteria, actor)).map((actor) => actor.uuid)
    );
  },
  searchActor(searchCriteria, actor) {
    return searchCriteria.trim() === "" || actor.name.toLowerCase().includes(searchCriteria.toLowerCase());
  },
  searchItems(searchCriteria, items) {
    return new Set(
      items.filter((item) => FoundryAdapter.searchItem(item, searchCriteria)).map((item) => item.uuid)
    );
  },
  searchItem(item, searchCriteria) {
    return searchCriteria.trim() === "" || item.system.identified === !1 && item.system.unidentified?.name?.toLowerCase().includes(searchCriteria.toLowerCase()) || item.system.identified !== !1 && item.name.toLowerCase().includes(searchCriteria.toLowerCase());
  },
  searchEffects(searchCriteria, effects) {
    return new Set(
      effects.filter(
        (effect2) => searchCriteria.trim() === "" || effect2.name.toLowerCase().includes(searchCriteria.toLowerCase())
      ).map((effect2) => effect2.id)
    );
  },
  searchActivities(searchCriteria, activities) {
    return new Set(
      activities.filter(
        (activities2) => searchCriteria.trim() === "" || activities2.name.toLowerCase().includes(searchCriteria.toLowerCase())
      ).map((activities2) => activities2.uuid)
    );
  },
  getFilteredActionItems(searchCriteria, items) {
    return items.filter(
      (x2) => searchCriteria.trim() === "" || x2.item?.name?.toLowerCase().includes(searchCriteria.toLowerCase())
    );
  },
  getAllClassesDropdownOptions(spellClassFilterAdditionalClassesText = "") {
    const allClasses = Object.entries(
      CONSTANTS.DND5E_CLASSES
    ).map((x2) => ({
      value: x2[0],
      text: x2[1]
    }));
    if (spellClassFilterAdditionalClassesText?.trim() !== "") {
      const additionalClasses = spellClassFilterAdditionalClassesText.split(",").reduce((arr, x2) => {
        const pieces = x2.split("|");
        return pieces.length !== 2 || arr.push({
          value: pieces[0],
          text: pieces[1]
        }), arr;
      }, []);
      allClasses.push(...additionalClasses);
    }
    return allClasses.sort((a2, b2) => a2.text.localeCompare(b2.text, game.i18n.lang)), allClasses;
  },
  parseAdditionalClassesDropDownItems(spellClassFilterAdditionalClassesText) {
    return spellClassFilterAdditionalClassesText.split(",").reduce((arr, x2) => {
      const pieces = x2.split("|");
      return pieces.length !== 2 || arr.push({
        value: pieces[0],
        text: pieces[1]
      }), arr;
    }, []);
  },
  removeConfigureSettingsButtonWhenLockedForNonGm(buttons) {
    if (FoundryAdapter.shouldLockConfigureSheet()) {
      const configureSheetButtonIndex = buttons.findIndex(
        (b2) => b2.class.includes("configure-sheet")
      );
      configureSheetButtonIndex >= 0 && buttons.splice(configureSheetButtonIndex, 1);
    }
    return buttons;
  },
  getNewCargo() {
    return { name: "", quantity: 1 };
  },
  getWeightUnit() {
    return FoundryAdapter.localize(
      `DND5E.Abbreviation${game.settings.get("dnd5e", "metricWeightUnits") ? "Kg" : "Lbs"}`
    );
  },
  isActiveEffectContextFavorited(context, actor) {
    if (!actor)
      return !1;
    const effect2 = FoundryAdapter.getEffect({
      document: actor,
      effectId: context.id,
      parentId: context.parentId
    });
    return FoundryAdapter.isEffectFavorited(effect2, actor);
  },
  getEffectActor(effect2) {
    return (
      // Item-Owned
      effect2.parent?.actor ?? // Actor-Owned
      effect2.parent
    );
  },
  isEffectFavorited(effect2, actor) {
    if (actor?.documentName === CONSTANTS.DOCUMENT_NAME_ACTOR && "favorites" in actor.system) {
      const relativeUuid = effect2.getRelativeUUID(actor);
      return actor.system.favorites.some((f2) => f2.id === relativeUuid);
    }
  },
  async toggleFavoriteEffect(effect2) {
    const actor = FoundryAdapter.getEffectActor(effect2);
    if (!actor || !actor.system?.addFavorite)
      return;
    FoundryAdapter.isEffectFavorited(effect2, actor) ? await actor.system.removeFavorite(effect2.getRelativeUUID(actor)) : await actor.system.addFavorite({
      type: "effect",
      id: effect2.getRelativeUUID(actor)
    });
  },
  isItemFavorited(document2) {
    const actor = document2.actor;
    if (actor && "favorites" in actor.system) {
      const relativeUuid = document2.getRelativeUUID(actor);
      return actor.system.hasFavorite(relativeUuid);
    }
    return !1;
  },
  isActivityFavorited(activity) {
    const actor = activity.actor;
    return actor && "favorites" in actor.system ? actor.system.hasFavorite(activity.relativeUUID) : !1;
  },
  async toggleFavoriteItem(document2) {
    const actor = document2.actor;
    if (!actor || !actor.system?.addFavorite)
      return;
    FoundryAdapter.isItemFavorited(document2) ? await actor.system.removeFavorite(document2.getRelativeUUID(actor)) : await actor.system.addFavorite({
      type: "item",
      id: document2.getRelativeUUID(actor)
    });
  },
  async toggleFavoriteActivity(activity) {
    const actor = activity.actor;
    if (!actor || !actor.system?.addFavorite)
      return;
    FoundryAdapter.isActivityFavorited(activity) ? await actor.system.removeFavorite(activity.relativeUUID) : await actor.system.addFavorite({
      type: "activity",
      id: activity.relativeUUID
    });
  },
  isSheetUnlocked(document2) {
    return document2.isOwner && TidyFlags.allowEdit.get(document2) || FoundryAdapter.userIsGm() && settings.value.permanentlyUnlockCharacterSheetForGm && document2.type === CONSTANTS.SHEET_TYPE_CHARACTER || FoundryAdapter.userIsGm() && settings.value.permanentlyUnlockNpcSheetForGm && document2.type === CONSTANTS.SHEET_TYPE_NPC || FoundryAdapter.userIsGm() && settings.value.permanentlyUnlockVehicleSheetForGm && document2.type === CONSTANTS.SHEET_TYPE_VEHICLE;
  },
  allowCharacterEffectsManagement(actor) {
    return settings.value.limitEffectsManagementToGm && FoundryAdapter.userIsGm() || !settings.value.limitEffectsManagementToGm && actor.isOwner;
  },
  shouldLockMoneyChanges() {
    return !FoundryAdapter.userIsGm() && settings.value.lockMoneyChanges;
  },
  shouldLockExpChanges() {
    return !FoundryAdapter.userIsGm() && settings.value.lockExpChanges;
  },
  shouldLockHpMaxChanges() {
    return !FoundryAdapter.userIsGm() && settings.value.lockHpMaxChanges;
  },
  shouldLockLevelSelector() {
    return !FoundryAdapter.userIsGm() && settings.value.lockLevelSelector;
  },
  shouldLockConfigureSheet() {
    return !FoundryAdapter.userIsGm() && settings.value.lockConfigureSheet;
  },
  shouldLockItemQuantity() {
    return !FoundryAdapter.userIsGm() && settings.value.lockItemQuantity;
  },
  showLimitedSheet(actor) {
    const showLimitedSheet = !FoundryAdapter.userIsGm() && actor.limited;
    return actor.type === CONSTANTS.SHEET_TYPE_CHARACTER ? showLimitedSheet && !settings.value.showExpandedLimitedView : showLimitedSheet;
  },
  flattenObject(obj) {
    return foundry.utils.flattenObject(obj || {});
  },
  getGameItem(id) {
    return game.items.get(id);
  },
  getGameActor(id) {
    return game.actors.get(id);
  },
  getModule(moduleId) {
    return game.modules.get(moduleId);
  },
  debounce(callback, delay2) {
    return foundry.utils.debounce(callback, delay2);
  },
  roll(formula, rollData, rollFnOptions = {}) {
    return new Roll(formula, rollData).roll(rollFnOptions);
  },
  renderCreatureTypeConfig(document2) {
    const documentToUpdate = document2.system.details?.race?.id ? document2.system.details.race : document2, keyPath = documentToUpdate.type === CONSTANTS.ITEM_TYPE_RACE ? (
      // A species document
      "type"
    ) : (
      // An actor without a species
      "details.type"
    ), options = {
      document: documentToUpdate,
      keyPath
    };
    return new dnd5e.applications.shared.CreatureTypeConfig(options).render(
      !0
    );
  },
  playDiceSound() {
    return foundry.audio.AudioHelper.play({ src: CONFIG.sounds.dice });
  },
  calculateAverageFromFormula(formula) {
    let term = new Roll(formula).terms;
    debug(`tidy5e-npc | activateListeners | term: ${term}`);
    let averageString = "";
    for (let i2 = 0; i2 < term.length; i2++)
      switch (term[i2].constructor.name) {
        case "Die": {
          averageString += Math.floor(
            (term[i2].faces * term[i2].number + term[i2].number) / 2
          );
          break;
        }
        case "OperatorTerm": {
          averageString += term[i2].operator;
          break;
        }
        case "NumericTerm": {
          averageString += term[i2].number;
          break;
        }
      }
    debug(`tidy5e-npc | activateListeners | averageString: ${averageString}`);
    let average = 0;
    for (averageString = averageString.replace(/\s/g, "").match(/[+\-]?([0-9\.\s]+)/g) ?? []; averageString.length; )
      average += parseFloat(averageString.shift());
    return debug(`tidy5e-npc | activateListeners | average: ${average}`), average;
  },
  enrichHtml(value, options) {
    return TextEditor.enrichHTML(value, options);
  },
  createContextMenu(...args) {
    return new FloatingContextMenu(...args);
  },
  createAdvancementSelectionDialog(item) {
    return game.dnd5e.applications.advancement.AdvancementSelection.createDialog(
      item
    );
  },
  deleteAdvancement(advancementItemId, item) {
    if (item.isEmbedded && !game.settings.get("dnd5e", "disableAdvancements")) {
      let manager = dnd5e.applications.advancement.AdvancementManager.forDeletedAdvancement(
        item.actor,
        item.id,
        advancementItemId
      );
      if (manager.steps.length) return manager.render(!0);
    }
    return item.deleteAdvancement(advancementItemId);
  },
  modifyAdvancementChoices(advancementLevel, item) {
    let manager = dnd5e.applications.advancement.AdvancementManager.forModifyChoices(
      item.actor,
      item.id,
      Number(advancementLevel)
    );
    manager.steps.length && manager.render(!0);
  },
  editAdvancement(advancementItemId, item) {
    const advancement = item.advancement.byId[advancementItemId];
    return new advancement.constructor.metadata.apps.config(advancement).render(
      !0
    );
  },
  async renderSheetFromUuid(uuid) {
    (await fromUuid(uuid))?.sheet?.render(!0);
  },
  renderImagePopout(...args) {
    return new ImagePopout(...args).render(!0);
  },
  browseFilePicker(...args) {
    return new FilePicker(...args).browse();
  },
  renderArmorConfig(document2) {
    return new dnd5e.applications.actor.ArmorClassConfig({ document: document2 }).render(
      !0
    );
  },
  renderInitiativeConfig(document2) {
    return new dnd5e.applications.actor.InitiativeConfig({
      document: document2
    }).render(!0);
  },
  renderAbilityConfig(document2, key) {
    return new dnd5e.applications.actor.AbilityConfig({
      document: document2,
      key
    }).render(!0);
  },
  renderMovementSensesConfig(document2, type) {
    return new dnd5e.applications.shared.MovementSensesConfig({
      document: document2,
      type
    }).render(!0);
  },
  renderHitPointsDialog(document2) {
    return new dnd5e.applications.actor.HitPointsConfig({ document: document2 }).render(
      !0
    );
  },
  renderHitDiceConfig(document2) {
    return new dnd5e.applications.actor.HitDiceConfig({ document: document2 }).render(
      !0
    );
  },
  dialogConfirm(...args) {
    return Dialog.confirm(...args);
  },
  renderActorSheetFlags(actor) {
    return new dnd5e.applications.actor.ActorSheetFlags(actor).render(!0);
  },
  renderToolsConfig(document2) {
    return new dnd5e.applications.actor.ToolsConfig({
      document: document2,
      trait: "tool"
    }).render(!0);
  },
  renderTraitsConfig(document2, trait) {
    return new dnd5e.applications.actor.TraitsConfig({
      document: document2,
      trait
    }).render(!0);
  },
  renderWeaponsConfig(actor) {
    return new dnd5e.applications.actor.WeaponsConfig({
      document: actor,
      trait: "weapon"
    }).render({ force: !0 });
  },
  renderSkillToolConfig(document2, trait, key) {
    return new dnd5e.applications.actor.SkillToolConfig({
      document: document2,
      trait,
      key
    }).render(!0);
  },
  renderSourceConfig(document2, keyPath) {
    return new dnd5e.applications.SourceConfig(
      { document: document2 },
      {
        keyPath
      }
    ).render(!0);
  },
  async onActorItemDelete(actor, item) {
    if (!game.settings.get("dnd5e", "disableAdvancements")) {
      const manager = dnd5e.applications.advancement.AdvancementManager.forDeletedItem(
        actor,
        item.id
      );
      if (manager.steps.length)
        try {
          const shouldRemoveAdvancements = await dnd5e.applications.advancement.AdvancementConfirmationDialog.forDelete(
            item
          );
          return shouldRemoveAdvancements ? manager.render(!0) : item.delete({ shouldRemoveAdvancements });
        } catch {
          return;
        }
    }
    return item.deleteDialog();
  },
  getActivationTypeLabel(activationType) {
    return activationType === "other" ? FoundryAdapter.localize("DND5E.ActionOther") : game.dnd5e.config.abilityActivationTypes[activationType];
  },
  lookupDamageType(type) {
    return game.dnd5e.config.damageTypes[type]?.label;
  },
  lookupHealingType(type) {
    return game.dnd5e.config.healingTypes[type];
  },
  lookupAbility(abbr) {
    return game.dnd5e.config.abilities[abbr];
  },
  actorTryUseItem(item, event2) {
    const config = { legacy: !1, event: event2 };
    TidyHooks.tidy5eSheetsActorPreUseItem(item, config) !== !1 && item.use(config);
  },
  onActorItemButtonContextMenu(item, options) {
    TidyHooks.tidy5eSheetsActorItemUseContextMenu(item, options);
  },
  /**
   * Fires appropriate hooks related to tab selection and reports whether tab selection was cancelled.
   * @param app the associated sheets
   * @param newTabId the new tab ID to select
   * @returns `true` to indicate proceeding with tab change; `false` to halt tab change
   */
  onTabSelecting(app, newTabId) {
    return TidyHooks.tidy5eSheetsPreSelectTab(
      app,
      FoundryAdapter.getElementFromAppV1OrV2(app.element),
      {
        currentTab: app.currentTabId,
        newTab: newTabId
      }
    ) ? (setTimeout(() => {
      TidyHooks.tidy5eSheetsSelectTab(
        app,
        FoundryAdapter.getElementFromAppV1OrV2(app.element),
        newTabId
      );
    }), !0) : !1;
  },
  getElementFromAppV1OrV2(element2) {
    return "get" in element2 ? element2.get(0) : element2;
  },
  getAbilitiesAsDropdownOptions(abilities) {
    try {
      return Object.entries(abilities).map(([key, { label }]) => ({
        value: key,
        text: label
      }));
    } catch (e2) {
      return error(
        "An error occurred while mapping abilities as dropdown items",
        !1,
        e2
      ), debug("Dropdown mapping error troubleshooting info", { abilities }), [];
    }
  },
  countPreparedSpells(items) {
    return items.filter(
      (item) => item.type === CONSTANTS.ITEM_TYPE_SPELL && item.system.level > 0 && item.system.preparation.mode === CONSTANTS.SPELL_PREPARATION_MODE_PREPARED && item.system.preparation.prepared
    ).length;
  },
  concealDetails(item) {
    return !game.user.isGM && item?.system?.identified === !1;
  },
  getIdentifiedName(item) {
    if (!FoundryAdapter.userIsGm() || item?.system?.identified !== !1)
      return item.name;
    try {
      return FoundryAdapter.localize("TIDY5E.GMOnly.Message", {
        message: item.toJSON().name
      });
    } catch (e2) {
      return error(
        "An error occurred while getting the identified name of this item for the GM",
        !1,
        e2
      ), "";
    }
  },
  async toggleCondition(document2, condition) {
    const existing = document2.effects.get(
      dnd5e.utils.staticID(`dnd5e${condition.id}`)
    );
    if (existing)
      return existing.delete();
    const effect2 = await ActiveEffect.implementation.fromStatusEffect(
      condition.id
    );
    return ActiveEffect.implementation.create(effect2, {
      parent: document2,
      keepId: !0
    });
  },
  getEffect({
    document: document2,
    effectId,
    parentId
  }) {
    let effect2 = document2.effects?.get(effectId);
    if (effect2)
      return effect2;
    const parentDocument = document2.items.get(parentId);
    return effect2 = parentDocument?.effects?.get(effectId), effect2 ?? FoundryAdapter.tryGetLegacyTransferredEffect(parentDocument, effectId);
  },
  /** Last-ditch effort to find an effect by ID in a given document. */
  tryGetLegacyTransferredEffect(document2, effectId) {
    return document2?.allApplicableEffects?.().find((e2) => e2.id === effectId);
  },
  canUseItem(item) {
    return !(!item.actor || !item.actor.isOwner || item.actor.pack);
  },
  useClassicControls(document2) {
    return document2.type === CONSTANTS.SHEET_TYPE_CHARACTER && settings.value.useClassicControlsForCharacter || document2.type === CONSTANTS.SHEET_TYPE_NPC && settings.value.useClassicControlsForNpc || document2.type === CONSTANTS.SHEET_TYPE_VEHICLE && settings.value.useClassicControlsForVehicle || // Temporary stopgap: When we don't recognize a supported document for Classic Controls options, fall back to the character user setting
    settings.value.useClassicControlsForCharacter;
  },
  attunementContextApplicable: {
    icon: "fa-sun",
    cls: "not-attuned",
    title: "ERROR: This should be replaced with valid attunement type text"
  },
  attunementContextAttune: {
    icon: "fa-sun",
    cls: "attuned",
    title: "DND5E.AttunementAttuned"
  },
  isAttunementApplicable(item) {
    return !!CONFIG.DND5E.attunementTypes[item.system.attunement];
  },
  getAttunementContext(item) {
    return FoundryAdapter.isAttunementApplicable(item) && !item.system.attuned ? {
      ...FoundryAdapter.attunementContextApplicable,
      title: CONFIG.DND5E.attunementTypes[item.system.attunement]
    } : item.system.attunement && item.system.attuned ? FoundryAdapter.attunementContextAttune : void 0;
  },
  async identifyAllItemsForContainer(container, items) {
    const updates = items.map((i2) => ({
      _id: i2.id,
      "system.identified": !0
    }));
    await Item.updateDocuments(updates, {
      parent: container.actor,
      pack: container.pack
    });
  },
  async markAllItemsAsUnidentifiedForContainer(container, items) {
    const updates = items.map((i2) => ({
      _id: i2.id,
      "system.identified": !1
    }));
    await Item.updateDocuments(updates, {
      parent: container.actor,
      pack: container.pack
    });
  },
  canIdentify(item) {
    return FoundryAdapter.userIsGm() || settings.value.itemIdentificationPermission === CONSTANTS.SHEET_SETTINGS_OPTION_GM_AND_OWNERS && item.isOwner;
  },
  getJqueryWrappedElement(el) {
    return globalThis.$(el);
  },
  openSpellSlotsConfig(document2) {
    new dnd5e.applications.actor.SpellSlotsConfig({ document: document2 }).render(!0);
  },
  openSummonConfig(item) {
    new dnd5e.applications.item.SummoningConfig(item).render(!0);
  },
  openDamagesConfig(document2, trait) {
    new dnd5e.applications.actor.DamagesConfig({ document: document2, trait }).render(
      !0
    );
  },
  openConcentrationConfig(document2) {
    new dnd5e.applications.actor.ConcentrationConfig({
      document: document2
    }).render(!0);
  },
  openStartingEquipmentConfig(item) {
    new dnd5e.applications.item.StartingEquipmentConfig(item).render(!0);
  },
  isConcentrationEffect(effect2, app) {
    return app.document instanceof dnd5e.documents.Actor5e && app._concentration?.effects.has(effect2);
  },
  activateEditors(node, sheet, bindSecrets = !0) {
    try {
      const nodes = node.matches(
        CONSTANTS.TEXT_EDITOR_ACTIVATION_ELEMENT_SELECTOR
      ) ? [node] : Array.from(
        node.querySelectorAll(
          CONSTANTS.TEXT_EDITOR_ACTIVATION_ELEMENT_SELECTOR
        )
      );
      for (let editorDiv of nodes)
        sheet._activateEditor(editorDiv);
      bindSecrets && sheet._secrets.forEach((s2) => s2.bind(node));
    } catch (e2) {
      error("An error occurred while activating text editors", !1, e2), debug("Text editor error trobuleshooting info", { node, sheet });
    }
  },
  async renderFromUuid(uuid, force = !0) {
    return (await fromUuid(uuid))?.sheet?.render(force);
  },
  /**
   * Stack identical consumables when a new one is dropped rather than creating a duplicate item.
   */
  onDropStackConsumablesForActor(actor, itemData, { container = null }, event2) {
    const droppedSourceId = itemData._stats?.compendiumSource ?? itemData.flags.core?.sourceId;
    if (itemData.type !== "consumable" || !droppedSourceId)
      return null;
    const similarItem = actor.sourcedItems.get(droppedSourceId, { legacy: !1 })?.filter(
      (i2) => i2.system.container === container && i2.name === itemData.name
    )?.first();
    return similarItem ? similarItem.update({
      "system.quantity": similarItem.system.quantity + Math.max(itemData.system.quantity, 1)
    }) : null;
  },
  /**
   * Handle a drop event for an existing embedded Item to sort that Item relative to its siblings
   */
  onSortItemForActor(actor, event2, itemData) {
    const sourceSection = foundry.utils.getProperty(
      itemData,
      TidyFlags.section.prop
    ), targetSection = event2.target?.closest('[data-tidy-section-key][data-custom-section="true"]')?.getAttribute("data-tidy-section-key"), isMovedToNewSection = !isNil(targetSection?.trim(), "") && sourceSection !== targetSection, isMovedToDefaultSection = !isNil(sourceSection?.trim(), "") && isNil(targetSection?.trim(), ""), items = actor.items, source2 = items.get(itemData._id), eventTarget = event2.target;
    if (!(eventTarget instanceof HTMLElement))
      return;
    const dropTarget = eventTarget.closest("[data-item-id]");
    if (!dropTarget) return;
    const target = items.get(dropTarget.dataset.itemId);
    if (source2.id === target.id) return;
    const siblings = [];
    for (let el of Array.from(dropTarget.parentElement.children))
      if (el instanceof HTMLElement) {
        const siblingId = el.dataset.itemId;
        siblingId && siblingId !== source2.id && siblings.push(items.get(el.dataset.itemId));
      }
    const updateData = SortingHelpers.performIntegerSort(source2, {
      target,
      siblings
    }).map((u2) => {
      const update2 = u2.update;
      return update2._id = u2.target._id, update2._id === source2.id && (isMovedToNewSection ? update2[TidyFlags.section.prop] = targetSection : isMovedToDefaultSection && (update2[TidyFlags.section.unsetProp] = null)), update2;
    });
    return actor.updateEmbeddedDocuments("Item", updateData);
  },
  formatCr(cr) {
    return dnd5e.utils.formatCR(cr);
  },
  formatNumber(num) {
    return dnd5e.utils.formatNumber(num);
  },
  // TODO: Consolidate uses changed to one function
  handleItemUsesChanged(event2, item) {
    const value = processInputChangeDelta(
      event2.currentTarget.value,
      item,
      "system.uses.value"
    ), uses = clamp(0, value, item.system.uses.max);
    return event2.currentTarget.value = uses.toString(), item.update({ "system.uses.spent": item.system.uses.max - uses });
  },
  handleActivityUsesChanged(event2, activity) {
    const value = processInputChangeDelta(
      event2.currentTarget.value,
      activity,
      "uses.value"
    ), uses = clamp(0, value, activity.uses.max);
    return event2.currentTarget.value = uses.toString(), activity.update({ "system.uses.spent": activity.uses.max - uses });
  },
  // TEMP: Find better home
  groupSelectOptions(entries) {
    const groupMap = {};
    for (let [key, value] of entries) {
      let groupMapKey = typeof value == "object" && "group" in value ? value.group ?? "" : "";
      (groupMap[groupMapKey] ??= []).push([key, value]);
    }
    return Object.entries(groupMap);
  },
  getFilteredClassOrOriginal(actor) {
    return FoundryAdapter.getFilteredClassOrNull(actor) ?? actor.items.get(actor.system.details.originalClass) ?? actor.itemTypes.class[0];
  },
  getFilteredClassOrNull(actor) {
    return actor.itemTypes.class.find(
      (c2) => c2.system.identifier === TidyFlags.classFilter.get(actor)
    );
  },
  getSpellcastingInfo(actor, spells) {
    const currentFilteredClass = FoundryAdapter.getFilteredClassOrOriginal(actor);
    return {
      currentFilteredClass,
      prepared: {
        value: currentFilteredClass?.system?.spellcasting?.preparation?.value ?? 0,
        max: currentFilteredClass?.system?.spellcasting?.preparation?.max ?? 0
      },
      calculations: calculateSpellAttackAndDc(actor, currentFilteredClass)
    };
  },
  getSaveAbilityAbbreviation(save2) {
    return save2.ability?.size ? save2.ability.size === 1 ? CONFIG.DND5E.abilities[save2.ability.first()]?.abbreviation : FoundryAdapter.localize("DND5E.AbbreviationDC") : null;
  }
};
function initRuntime() {
  ItemFilterRuntime.init();
}
__name(initRuntime, "initRuntime");
var root_2$2 = /* @__PURE__ */ template('<i class="new-icon fas fa-star svelte-3ahmis"></i>'), on_click$2 = /* @__PURE__ */ __name((_, migration) => get(migration).onClick(), "on_click$2"), root_3$2 = /* @__PURE__ */ template('<hr class="svelte-3ahmis">'), root_1$4 = /* @__PURE__ */ template('<li class="flex-row small-gap"><!> <button type="button" class="inline-transparent-button highlight-on-hover"><span> </span></button> <!></li>'), on_click_1$1 = /* @__PURE__ */ __name((__1, confirm) => confirm(), "on_click_1$1"), root$9 = /* @__PURE__ */ template('<div class="flex-column"><p class="svelte-3ahmis"><!> <i class="fas fa-question-circle"></i></p> <ul class="svelte-3ahmis"></ul> <div class="button-bar flex-row no-gap svelte-3ahmis"><button type="button"> </button></div></div>');
function MigrationNotification($$anchor, $$props) {
  push($$props, !1);
  const localize = FoundryAdapter.localize, confirm = getContext("confirm"), migrationsConfirmedTally = settings.value.migrationsConfirmationTally, migrations = [
    {
      label: localize("TIDY5E.Settings.Migrations.NpcExhaustion.sectionTitle"),
      migrationTallyVersion: 6,
      onClick: /* @__PURE__ */ __name(() => new BulkMigrationsApplication(CONSTANTS.TAB_MIGRATIONS_NPC_EXHAUSTION).render(!0), "onClick")
    },
    {
      label: localize("TIDY5E.Settings.Migrations.SpellClassToSourceClass.sectionTitle"),
      migrationTallyVersion: 5,
      onClick: /* @__PURE__ */ __name(() => new BulkMigrationsApplication(CONSTANTS.TAB_MIGRATIONS_SPELL_CLASS_TO_SOURCE_CLASS).render(!0), "onClick")
    },
    {
      label: localize("TIDY5E.Settings.Migrations.BondsIdealsFlawsToSystem.sectionTitle"),
      migrationTallyVersion: 5,
      onClick: /* @__PURE__ */ __name(() => new BulkMigrationsApplication(CONSTANTS.TAB_MIGRATIONS_BONDS_IDEALS_FLAWS_TO_SYSTEM).render(!0), "onClick")
    },
    {
      label: localize("TIDY5E.Settings.Migrations.FavoritesToSystem.sectionTitle"),
      migrationTallyVersion: 4,
      onClick: /* @__PURE__ */ __name(() => new BulkMigrationsApplication(CONSTANTS.TAB_MIGRATIONS_FAVORITES_TO_SYSTEM).render(!0), "onClick")
    },
    {
      label: localize("TIDY5E.Settings.Migrations.CcssToTidy.sectionTitle"),
      migrationTallyVersion: 3,
      onClick: /* @__PURE__ */ __name(() => new BulkMigrationsApplication(CONSTANTS.TAB_MIGRATIONS_CCSS_TO_TIDY).render(!0), "onClick")
    },
    {
      label: localize("TIDY5E.Settings.Migrations.NpcDeathSaves.sectionTitle"),
      migrationTallyVersion: 2,
      onClick: /* @__PURE__ */ __name(() => new BulkMigrationsApplication(CONSTANTS.TAB_MIGRATIONS_NPC_DEATH).render(!0), "onClick")
    },
    {
      label: localize("TIDY5E.Settings.Migrations.CharacterBiography.sectionTitle"),
      migrationTallyVersion: 1,
      onClick: /* @__PURE__ */ __name(() => new BulkMigrationsApplication(CONSTANTS.TAB_MIGRATIONS_CHARACTER_BIOGRAPHY).render(!0), "onClick")
    }
  ];
  init();
  var div = root$9(), p2 = child(div), node = child(p2);
  html(node, () => localize("TIDY5E.Settings.Migrations.Notification.Explanation", { boldStart: "<b>", boldEnd: "</b>" }));
  var i2 = sibling(node, 2);
  template_effect(() => set_attribute(i2, "data-tooltip", localize("TIDY5E.Settings.Migrations.Notification.Explanation2")));
  var ul = sibling(p2, 2);
  each(ul, 5, () => migrations, index, ($$anchor2, migration) => {
    var li = root_1$4();
    const isNew = /* @__PURE__ */ derived_safe_equal(() => migrationsConfirmedTally < get(migration).migrationTallyVersion);
    var node_1 = child(li);
    {
      var consequent = /* @__PURE__ */ __name(($$anchor3) => {
        var i_1 = root_2$2();
        append($$anchor3, i_1);
      }, "consequent");
      if_block(node_1, ($$render) => {
        get(isNew) && $$render(consequent);
      });
    }
    var button = sibling(node_1, 2);
    button.__click = [on_click$2, migration];
    var span = child(button), text2 = child(span), node_2 = sibling(button, 2);
    {
      var consequent_1 = /* @__PURE__ */ __name(($$anchor3) => {
        var hr = root_3$2();
        append($$anchor3, hr);
      }, "consequent_1");
      if_block(node_2, ($$render) => {
        get(isNew) && $$render(consequent_1);
      });
    }
    template_effect(() => {
      toggle_class(li, "new", get(isNew)), set_text(text2, get(migration).label);
    }), append($$anchor2, li);
  });
  var div_1 = sibling(ul, 2), button_1 = child(div_1);
  button_1.__click = [on_click_1$1, confirm];
  var text_1 = child(button_1);
  template_effect(() => set_text(text_1, localize("TIDY5E.Settings.Migrations.Notification.Button.DoNotShowAgain"))), append($$anchor, div), pop();
}
__name(MigrationNotification, "MigrationNotification");
delegate(["click"]);
const MigrationTally = 6;
class MigrationNotificationFormApplication extends SvelteFormApplicationBase {
  static {
    __name(this, "MigrationNotificationFormApplication");
  }
  static get defaultOptions() {
    return {
      ...super.defaultOptions,
      height: "auto",
      width: 400,
      classes: [
        ...super.defaultOptions.classes,
        "migration-notifications",
        "app-v1",
        CONSTANTS.SHEET_LAYOUT_CLASSIC
      ],
      resizable: !0
    };
  }
  get title() {
    return FoundryAdapter.localize(
      "TIDY5E.Settings.Migrations.Notification.Title"
    );
  }
  createComponent(node) {
    return mount(MigrationNotification, {
      target: node,
      context: /* @__PURE__ */ new Map([["confirm", this.confirm.bind(this)]])
    });
  }
  confirm() {
    FoundryAdapter.setTidySetting(
      "migrationsConfirmationTally",
      MigrationTally
    ), this.close(), ui.notifications.info(
      FoundryAdapter.localize(
        "TIDY5E.Settings.Migrations.Notification.DoNotShowAgain.ConfirmMessage"
      ),
      { permanent: !0 }
    );
  }
}
class PopoutModuleIntegration {
  static {
    __name(this, "PopoutModuleIntegration");
  }
  get moduleId() {
    return "popout";
  }
  init() {
    this.setCorrectContextMenuPosition();
  }
  setCorrectContextMenuPosition() {
    Hooks.on(
      "tidy5e-sheet.prepareFloatingContextMenuPosition",
      (info) => {
        const appIdAttribute = info.target.closest("[data-appId]")?.getAttribute("data-appId"), appId = parseInt(appIdAttribute ?? "");
        if (!PopoutModule.singleton.poppedOut.has(appId))
          return;
        const poppedOutBody = PopoutModule.singleton.poppedOut.get(appId).window.document.body;
        info.insertTarget = poppedOutBody, poppedOutBody.addEventListener(
          "click",
          () => {
            ui.context?.close(), poppedOutBody.querySelectorAll("[data-context-menu]").forEach((el) => el.classList.remove("context"));
          },
          { once: !0 }
        );
      }
    );
  }
}
class CustomCharacterSheetsModuleIntegration {
  static {
    __name(this, "CustomCharacterSheetsModuleIntegration");
  }
  get moduleId() {
    return "custom-character-sheet-sections";
  }
  init(api) {
    Hooks.on(
      "custom-character-sheet-sections.preCustomSectionGetData",
      (data) => !api.isTidy5eSheet(data.actor.sheet)
    );
  }
}
var root_1$3 = /* @__PURE__ */ template('<button type="button" class="pip"><i></i></button>'), root$8 = /* @__PURE__ */ template('<div class="pips"><!> <span aria-hidden="true" style="display: none" class="pip-end"></span></div>');
function Pips($$anchor, $$props) {
  push($$props, !0);
  let total = prop($$props, "total", 3, 5), selected = prop($$props, "selected", 3, 0);
  function onPipClick(index2) {
    if (selected() === index2 + 1) {
      $$props.onChange?.(selected() - 1);
      return;
    }
    $$props.onChange?.(index2 + 1);
  }
  __name(onPipClick, "onPipClick");
  let pipArray = /* @__PURE__ */ derived(() => Array(total()));
  var div = root$8(), node = child(div);
  each(node, 17, () => get(pipArray), index, ($$anchor2, $$item, i2) => {
    var button = root_1$3();
    button.__click = () => onPipClick(i2), template_effect(() => {
      toggle_class(button, "inactive", selected() < i2 + 1), toggle_class(button, "active", selected() >= i2 + 1), toggle_class(button, "last-selected", selected() === i2 + 1);
    }), append($$anchor2, button);
  }), append($$anchor, div), pop();
}
__name(Pips, "Pips");
delegate(["click"]);
const DRAKKENHEIM_CORE_CONSTANTS = {
  MODULE_ID: "drakkenheim-core",
  CONTAMINATION_LEVEL_FLAG_PROP: "flags.drakkenheim.contamination"
};
var root_1$2 = /* @__PURE__ */ template('<tr><td class="symptom"> </td></tr>'), root$7 = /* @__PURE__ */ template('<div class="scroll-container"><div class="description"> </div> <table class="contamination-table"><thead><tr><th class="symptom"> </th></tr></thead><tbody></tbody></table> <!></div>');
function DrakkenheimCoreContaminationTab($$anchor, $$props) {
  push($$props, !0);
  const context = /* @__PURE__ */ derived(getSheetContext);
  let contanimationLevel = /* @__PURE__ */ derived(() => FoundryAdapter.getProperty(get(context).actor, DRAKKENHEIM_CORE_CONSTANTS.CONTAMINATION_LEVEL_FLAG_PROP) ?? 0), levels = /* @__PURE__ */ derived(() => Array.fromRange(6, 1));
  async function onContaminationLevelChanged(level) {
    await get(context).actor.update({
      [DRAKKENHEIM_CORE_CONSTANTS.CONTAMINATION_LEVEL_FLAG_PROP]: level
    });
  }
  __name(onContaminationLevelChanged, "onContaminationLevelChanged");
  const localize = FoundryAdapter.localize;
  var div = root$7(), div_1 = child(div), text2 = child(div_1);
  template_effect(() => set_text(text2, localize("DRAKKENHEIM.ContaminationTable")));
  var table = sibling(div_1, 2), thead = child(table), tr = child(thead), th = child(tr), text_1 = child(th);
  template_effect(() => set_text(text_1, localize("DRAKKENHEIM.ContaminationSymptoms")));
  var tbody = sibling(thead);
  each(tbody, 21, () => get(levels), index, ($$anchor2, level) => {
    var tr_1 = root_1$2(), td = child(tr_1), text_2 = child(td);
    template_effect(() => set_text(text_2, localize(`DRAKKENHEIM.ContaminationEffect${get(level)}`))), template_effect(() => toggle_class(tr_1, "active", get(level) <= get(contanimationLevel))), append($$anchor2, tr_1);
  });
  var node = sibling(table, 2);
  Pips(node, {
    get total() {
      return get(levels).length;
    },
    get selected() {
      return get(contanimationLevel);
    },
    onChange: /* @__PURE__ */ __name((ev) => onContaminationLevelChanged(ev), "onChange")
  }), append($$anchor, div), pop();
}
__name(DrakkenheimCoreContaminationTab, "DrakkenheimCoreContaminationTab");
class DrakkenheimCoreModuleIntegration {
  static {
    __name(this, "DrakkenheimCoreModuleIntegration");
  }
  get moduleId() {
    return "drakkenheim-core";
  }
  init(api) {
    Promise.resolve({                                       });
    const contaminationTab = new api.models.SvelteTab({
      title: /* @__PURE__ */ __name(() => FoundryAdapter.localize("DRAKKENHEIM.Contamination"), "title"),
      tabId: "drakkenheim-contamination-tab",
      component: DrakkenheimCoreContaminationTab,
      getContext(context) {
        return context;
      }
    });
    api.registerCharacterTab(contaminationTab, { layout: "classic" }), api.registerNpcTab(contaminationTab, { layout: "classic" });
  }
}
class TidyCustomSectionsInDefaultItemSheetIntegration {
  static {
    __name(this, "TidyCustomSectionsInDefaultItemSheetIntegration");
  }
  init(api) {
    Hooks.on("renderItemSheet5e", (app) => {
      if (!settings.value.includeTidySectionFieldsInDefaultSheets || [
        CONSTANTS.ITEM_TYPE_RACE,
        CONSTANTS.ITEM_TYPE_BACKGROUND,
        CONSTANTS.ITEM_TYPE_CLASS,
        CONSTANTS.ITEM_TYPE_SUBCLASS
      ].includes(app.document.type))
        return;
      const inputIdPrefix = foundry.utils.randomID(), section = foundry.utils.getProperty(app.document, TidyFlags.section.prop) ?? "", actionSection = foundry.utils.getProperty(app.document, TidyFlags.actionSection.prop) ?? "", customSectionId = `i-${inputIdPrefix}-tidy-5e-custom-section`, customActionSectionId = `i-${inputIdPrefix}-tidy-5e-custom-action-section`, html2 = `
          <fieldset>
            <legend>${FoundryAdapter.localize("TIDY5E.Tidy5eSettings")}</legend>
            <div class="form-group custom-section">
              <label for="${customSectionId}">
                ${FoundryAdapter.localize("TIDY5E.Section.Label")}
              </label>
              <div class="form-fields">
                <input
                  type="text"
                  name="${TidyFlags.section.prop}"
                  id="${customSectionId}"
                  value=""
                />
              </div>
            </div>
            <div class="form-group custom-action-section">
              <label for="${customActionSectionId}">
                ${FoundryAdapter.localize("TIDY5E.Section.ActionLabel")}
              </label>
              <div class="form-fields">
                <input
                  type="text"
                  name="${TidyFlags.actionSection.prop}"
                  id="${customActionSectionId}"
                  value=""
                />
              </div>
            </div>
          </fieldset>`, element2 = FoundryAdapter.getElementFromAppV1OrV2(app.element);
      element2.querySelector(".tab.details")?.insertAdjacentHTML("beforeend", html2);
      const sectionInput = element2.querySelector(
        `#${customSectionId}`
      );
      sectionInput && (sectionInput.value = section);
      const actionSectionInput = element2.querySelector(
        `#${customActionSectionId}`
      );
      actionSectionInput && (actionSectionInput.value = actionSection);
    });
  }
}
class ThirdPartyIntegrationBase {
  static {
    __name(this, "ThirdPartyIntegrationBase");
  }
}
const Coloris = (() => {
  /*!
  * Copyright (c) 2021-2024 Momo Bassit.
  * Licensed under the MIT License (MIT)
  * https://github.com/mdbassit/Coloris
  * Version: 0.24.0
  * NPM: https://github.com/melloware/coloris-npm
  */
  return ((window2, document2, Math2, undefined$1) => {
    const ctx = document2.createElement("canvas").getContext("2d"), currentColor = { r: 0, g: 0, b: 0, h: 0, s: 0, v: 0, a: 1 };
    let container, picker, colorArea, colorMarker, colorPreview, colorValue, clearButton, closeButton, hueSlider, hueMarker, alphaSlider, alphaMarker, currentEl, currentFormat, oldColor, keyboardNav, colorAreaDims = {};
    const settings2 = {
      el: "[data-coloris]",
      parent: "body",
      theme: "default",
      themeMode: "light",
      rtl: !1,
      wrap: !0,
      margin: 2,
      format: "hex",
      formatToggle: !1,
      swatches: [],
      swatchesOnly: !1,
      alpha: !0,
      forceAlpha: !1,
      focusInput: !0,
      selectInput: !1,
      inline: !1,
      defaultColor: "#000000",
      clearButton: !1,
      clearLabel: "Clear",
      closeButton: !1,
      closeLabel: "Close",
      onChange: /* @__PURE__ */ __name(() => undefined$1, "onChange"),
      a11y: {
        open: "Open color picker",
        close: "Close color picker",
        clear: "Clear the selected color",
        marker: "Saturation: {s}. Brightness: {v}.",
        hueSlider: "Hue slider",
        alphaSlider: "Opacity slider",
        input: "Color value field",
        format: "Color format",
        swatch: "Color swatch",
        instruction: "Saturation and brightness selector. Use up, down, left and right arrow keys to select."
      }
    }, instances = {};
    let currentInstanceId = "", defaultInstance = {}, hasInstance = !1;
    function configure(options) {
      if (typeof options == "object")
        for (const key in options)
          switch (key) {
            case "el":
              bindFields(options.el), options.wrap !== !1 && wrapFields(options.el);
              break;
            case "parent":
              container = options.parent instanceof HTMLElement ? options.parent : document2.querySelector(options.parent), container && (container.appendChild(picker), settings2.parent = options.parent, container === document2.body && (container = undefined$1));
              break;
            case "themeMode":
              settings2.themeMode = options.themeMode, options.themeMode === "auto" && window2.matchMedia && window2.matchMedia("(prefers-color-scheme: dark)").matches && (settings2.themeMode = "dark");
            // The lack of a break statement is intentional
            case "theme":
              options.theme && (settings2.theme = options.theme), picker.className = "clr-picker clr-" + settings2.theme + " clr-" + settings2.themeMode, settings2.inline && updatePickerPosition();
              break;
            case "rtl":
              settings2.rtl = !!options.rtl, Array.from(document2.getElementsByClassName("clr-field")).forEach((field) => field.classList.toggle("clr-rtl", settings2.rtl));
              break;
            case "margin":
              options.margin *= 1, settings2.margin = isNaN(options.margin) ? settings2.margin : options.margin;
              break;
            case "wrap":
              options.el && options.wrap && wrapFields(options.el);
              break;
            case "formatToggle":
              settings2.formatToggle = !!options.formatToggle, getEl("clr-format").style.display = settings2.formatToggle ? "block" : "none", settings2.formatToggle && (settings2.format = "auto");
              break;
            case "swatches":
              if (Array.isArray(options.swatches)) {
                const swatchesContainer = getEl("clr-swatches"), swatches = document2.createElement("div");
                swatchesContainer.textContent = "", options.swatches.forEach((swatch, i2) => {
                  const button = document2.createElement("button");
                  button.setAttribute("type", "button"), button.setAttribute("id", "clr-swatch-" + i2), button.setAttribute("aria-labelledby", "clr-swatch-label clr-swatch-" + i2), button.style.color = swatch, button.textContent = swatch, swatches.appendChild(button);
                }), options.swatches.length && swatchesContainer.appendChild(swatches), settings2.swatches = options.swatches.slice();
              }
              break;
            case "swatchesOnly":
              settings2.swatchesOnly = !!options.swatchesOnly, picker.setAttribute("data-minimal", settings2.swatchesOnly);
              break;
            case "alpha":
              settings2.alpha = !!options.alpha, picker.setAttribute("data-alpha", settings2.alpha);
              break;
            case "inline":
              if (settings2.inline = !!options.inline, picker.setAttribute("data-inline", settings2.inline), settings2.inline) {
                const defaultColor = options.defaultColor || settings2.defaultColor;
                currentFormat = getColorFormatFromStr(defaultColor), updatePickerPosition(), setColorFromStr(defaultColor);
              }
              break;
            case "clearButton":
              typeof options.clearButton == "object" && (options.clearButton.label && (settings2.clearLabel = options.clearButton.label, clearButton.innerHTML = settings2.clearLabel), options.clearButton = options.clearButton.show), settings2.clearButton = !!options.clearButton, clearButton.style.display = settings2.clearButton ? "block" : "none";
              break;
            case "clearLabel":
              settings2.clearLabel = options.clearLabel, clearButton.innerHTML = settings2.clearLabel;
              break;
            case "closeButton":
              settings2.closeButton = !!options.closeButton, settings2.closeButton ? picker.insertBefore(closeButton, colorPreview) : colorPreview.appendChild(closeButton);
              break;
            case "closeLabel":
              settings2.closeLabel = options.closeLabel, closeButton.innerHTML = settings2.closeLabel;
              break;
            case "a11y":
              const labels = options.a11y;
              let update2 = !1;
              if (typeof labels == "object")
                for (const label in labels)
                  labels[label] && settings2.a11y[label] && (settings2.a11y[label] = labels[label], update2 = !0);
              if (update2) {
                const openLabel = getEl("clr-open-label"), swatchLabel = getEl("clr-swatch-label");
                openLabel.innerHTML = settings2.a11y.open, swatchLabel.innerHTML = settings2.a11y.swatch, closeButton.setAttribute("aria-label", settings2.a11y.close), clearButton.setAttribute("aria-label", settings2.a11y.clear), hueSlider.setAttribute("aria-label", settings2.a11y.hueSlider), alphaSlider.setAttribute("aria-label", settings2.a11y.alphaSlider), colorValue.setAttribute("aria-label", settings2.a11y.input), colorArea.setAttribute("aria-label", settings2.a11y.instruction);
              }
              break;
            default:
              settings2[key] = options[key];
          }
    }
    __name(configure, "configure");
    function setVirtualInstance(selector, options) {
      typeof selector == "string" && typeof options == "object" && (instances[selector] = options, hasInstance = !0);
    }
    __name(setVirtualInstance, "setVirtualInstance");
    function removeVirtualInstance(selector) {
      delete instances[selector], Object.keys(instances).length === 0 && (hasInstance = !1, selector === currentInstanceId && resetVirtualInstance());
    }
    __name(removeVirtualInstance, "removeVirtualInstance");
    function attachVirtualInstance(element2) {
      if (hasInstance) {
        const unsupportedOptions = ["el", "wrap", "rtl", "inline", "defaultColor", "a11y"];
        for (let selector in instances) {
          const options = instances[selector];
          if (element2.matches(selector)) {
            currentInstanceId = selector, defaultInstance = {}, unsupportedOptions.forEach((option) => delete options[option]);
            for (let option in options)
              defaultInstance[option] = Array.isArray(settings2[option]) ? settings2[option].slice() : settings2[option];
            configure(options);
            break;
          }
        }
      }
    }
    __name(attachVirtualInstance, "attachVirtualInstance");
    function resetVirtualInstance() {
      Object.keys(defaultInstance).length > 0 && (configure(defaultInstance), currentInstanceId = "", defaultInstance = {});
    }
    __name(resetVirtualInstance, "resetVirtualInstance");
    function bindFields(selector) {
      selector instanceof HTMLElement && (selector = [selector]), Array.isArray(selector) ? selector.forEach((field) => {
        addListener(field, "click", openPicker), addListener(field, "input", updateColorPreview);
      }) : (addListener(document2, "click", selector, openPicker), addListener(document2, "input", selector, updateColorPreview));
    }
    __name(bindFields, "bindFields");
    function openPicker(event2) {
      settings2.inline || (attachVirtualInstance(event2.target), currentEl = event2.target, oldColor = currentEl.value, currentFormat = getColorFormatFromStr(oldColor), picker.classList.add("clr-open"), updatePickerPosition(), setColorFromStr(oldColor), (settings2.focusInput || settings2.selectInput) && (colorValue.focus({ preventScroll: !0 }), colorValue.setSelectionRange(currentEl.selectionStart, currentEl.selectionEnd)), settings2.selectInput && colorValue.select(), (keyboardNav || settings2.swatchesOnly) && getFocusableElements().shift().focus(), currentEl.dispatchEvent(new Event("open", { bubbles: !0 })));
    }
    __name(openPicker, "openPicker");
    function updatePickerPosition() {
      if (!picker || !currentEl && !settings2.inline) return;
      const parent = container, scrollY = window2.scrollY, pickerWidth = picker.offsetWidth, pickerHeight = picker.offsetHeight, reposition = { left: !1, top: !1 };
      let parentStyle, parentMarginTop, parentBorderTop, offset = { x: 0, y: 0 };
      if (parent && (parentStyle = window2.getComputedStyle(parent), parentMarginTop = parseFloat(parentStyle.marginTop), parentBorderTop = parseFloat(parentStyle.borderTopWidth), offset = parent.getBoundingClientRect(), offset.y += parentBorderTop + scrollY), !settings2.inline) {
        const coords = currentEl.getBoundingClientRect();
        let left = coords.x, top = scrollY + coords.y + coords.height + settings2.margin;
        parent ? (left -= offset.x, top -= offset.y, left + pickerWidth > parent.clientWidth && (left += coords.width - pickerWidth, reposition.left = !0), top + pickerHeight > parent.clientHeight - parentMarginTop && pickerHeight + settings2.margin <= coords.top - (offset.y - scrollY) && (top -= coords.height + pickerHeight + settings2.margin * 2, reposition.top = !0), top += parent.scrollTop) : (left + pickerWidth > document2.documentElement.clientWidth && (left += coords.width - pickerWidth, reposition.left = !0), top + pickerHeight - scrollY > document2.documentElement.clientHeight && pickerHeight + settings2.margin <= coords.top && (top = scrollY + coords.y - pickerHeight - settings2.margin, reposition.top = !0)), picker.classList.toggle("clr-left", reposition.left), picker.classList.toggle("clr-top", reposition.top), picker.style.left = left + "px", picker.style.top = top + "px", offset.x += picker.offsetLeft, offset.y += picker.offsetTop;
      }
      colorAreaDims = {
        width: colorArea.offsetWidth,
        height: colorArea.offsetHeight,
        x: colorArea.offsetLeft + offset.x,
        y: colorArea.offsetTop + offset.y
      };
    }
    __name(updatePickerPosition, "updatePickerPosition");
    function wrapFields(selector) {
      selector instanceof HTMLElement ? wrapColorField(selector) : Array.isArray(selector) ? selector.forEach(wrapColorField) : document2.querySelectorAll(selector).forEach(wrapColorField);
    }
    __name(wrapFields, "wrapFields");
    function wrapColorField(field) {
      const parentNode = field.parentNode;
      if (!parentNode.classList.contains("clr-field")) {
        const wrapper = document2.createElement("div");
        let classes = "clr-field";
        (settings2.rtl || field.classList.contains("clr-rtl")) && (classes += " clr-rtl"), wrapper.innerHTML = '<button type="button" aria-labelledby="clr-open-label"></button>', parentNode.insertBefore(wrapper, field), wrapper.className = classes, wrapper.style.color = field.value, wrapper.appendChild(field);
      }
    }
    __name(wrapColorField, "wrapColorField");
    function updateColorPreview(event2) {
      const parent = event2.target.parentNode;
      parent.classList.contains("clr-field") && (parent.style.color = event2.target.value);
    }
    __name(updateColorPreview, "updateColorPreview");
    function closePicker(revert) {
      if (currentEl && !settings2.inline) {
        const prevEl = currentEl;
        revert && (currentEl = undefined$1, oldColor !== prevEl.value && (prevEl.value = oldColor, prevEl.dispatchEvent(new Event("input", { bubbles: !0 })))), setTimeout(() => {
          oldColor !== prevEl.value && prevEl.dispatchEvent(new Event("change", { bubbles: !0 }));
        }), picker.classList.remove("clr-open"), hasInstance && resetVirtualInstance(), prevEl.dispatchEvent(new Event("close", { bubbles: !0 })), settings2.focusInput && prevEl.focus({ preventScroll: !0 }), currentEl = undefined$1;
      }
    }
    __name(closePicker, "closePicker");
    function setColorFromStr(str) {
      const rgba = strToRGBA(str), hsva = RGBAtoHSVA(rgba);
      updateMarkerA11yLabel(hsva.s, hsva.v), updateColor(rgba, hsva), hueSlider.value = hsva.h, picker.style.color = "hsl(" + hsva.h + ", 100%, 50%)", hueMarker.style.left = hsva.h / 360 * 100 + "%", colorMarker.style.left = colorAreaDims.width * hsva.s / 100 + "px", colorMarker.style.top = colorAreaDims.height - colorAreaDims.height * hsva.v / 100 + "px", alphaSlider.value = hsva.a * 100, alphaMarker.style.left = hsva.a * 100 + "%";
    }
    __name(setColorFromStr, "setColorFromStr");
    function getColorFormatFromStr(str) {
      const format = str.substring(0, 3).toLowerCase();
      return format === "rgb" || format === "hsl" ? format : "hex";
    }
    __name(getColorFormatFromStr, "getColorFormatFromStr");
    function pickColor(color) {
      color = color !== undefined$1 ? color : colorValue.value, currentEl && (currentEl.value = color, currentEl.dispatchEvent(new Event("input", { bubbles: !0 }))), settings2.onChange && settings2.onChange.call(window2, color, currentEl), document2.dispatchEvent(new CustomEvent("coloris:pick", { detail: { color, currentEl } }));
    }
    __name(pickColor, "pickColor");
    function setColorAtPosition(x2, y2) {
      const hsva = {
        h: hueSlider.value * 1,
        s: x2 / colorAreaDims.width * 100,
        v: 100 - y2 / colorAreaDims.height * 100,
        a: alphaSlider.value / 100
      }, rgba = HSVAtoRGBA(hsva);
      updateMarkerA11yLabel(hsva.s, hsva.v), updateColor(rgba, hsva), pickColor();
    }
    __name(setColorAtPosition, "setColorAtPosition");
    function updateMarkerA11yLabel(saturation, value) {
      let label = settings2.a11y.marker;
      saturation = saturation.toFixed(1) * 1, value = value.toFixed(1) * 1, label = label.replace("{s}", saturation), label = label.replace("{v}", value), colorMarker.setAttribute("aria-label", label);
    }
    __name(updateMarkerA11yLabel, "updateMarkerA11yLabel");
    function getPointerPosition(event2) {
      return {
        pageX: event2.changedTouches ? event2.changedTouches[0].pageX : event2.pageX,
        pageY: event2.changedTouches ? event2.changedTouches[0].pageY : event2.pageY
      };
    }
    __name(getPointerPosition, "getPointerPosition");
    function moveMarker(event2) {
      const pointer = getPointerPosition(event2);
      let x2 = pointer.pageX - colorAreaDims.x, y2 = pointer.pageY - colorAreaDims.y;
      container && (y2 += container.scrollTop), setMarkerPosition(x2, y2), event2.preventDefault(), event2.stopPropagation();
    }
    __name(moveMarker, "moveMarker");
    function moveMarkerOnKeydown(offsetX, offsetY) {
      let x2 = colorMarker.style.left.replace("px", "") * 1 + offsetX, y2 = colorMarker.style.top.replace("px", "") * 1 + offsetY;
      setMarkerPosition(x2, y2);
    }
    __name(moveMarkerOnKeydown, "moveMarkerOnKeydown");
    function setMarkerPosition(x2, y2) {
      x2 = x2 < 0 ? 0 : x2 > colorAreaDims.width ? colorAreaDims.width : x2, y2 = y2 < 0 ? 0 : y2 > colorAreaDims.height ? colorAreaDims.height : y2, colorMarker.style.left = x2 + "px", colorMarker.style.top = y2 + "px", setColorAtPosition(x2, y2), colorMarker.focus();
    }
    __name(setMarkerPosition, "setMarkerPosition");
    function updateColor(rgba, hsva) {
      rgba === void 0 && (rgba = {}), hsva === void 0 && (hsva = {});
      let format = settings2.format;
      for (const key in rgba)
        currentColor[key] = rgba[key];
      for (const key in hsva)
        currentColor[key] = hsva[key];
      const hex = RGBAToHex(currentColor), opaqueHex = hex.substring(0, 7);
      switch (colorMarker.style.color = opaqueHex, alphaMarker.parentNode.style.color = opaqueHex, alphaMarker.style.color = hex, colorPreview.style.color = hex, colorArea.style.display = "none", colorArea.offsetHeight, colorArea.style.display = "", alphaMarker.nextElementSibling.style.display = "none", alphaMarker.nextElementSibling.offsetHeight, alphaMarker.nextElementSibling.style.display = "", format === "mixed" ? format = currentColor.a === 1 ? "hex" : "rgb" : format === "auto" && (format = currentFormat), format) {
        case "hex":
          colorValue.value = hex;
          break;
        case "rgb":
          colorValue.value = RGBAToStr(currentColor);
          break;
        case "hsl":
          colorValue.value = HSLAToStr(HSVAtoHSLA(currentColor));
          break;
      }
      document2.querySelector('.clr-format [value="' + format + '"]').checked = !0;
    }
    __name(updateColor, "updateColor");
    function setHue() {
      const hue = hueSlider.value * 1, x2 = colorMarker.style.left.replace("px", "") * 1, y2 = colorMarker.style.top.replace("px", "") * 1;
      picker.style.color = "hsl(" + hue + ", 100%, 50%)", hueMarker.style.left = hue / 360 * 100 + "%", setColorAtPosition(x2, y2);
    }
    __name(setHue, "setHue");
    function setAlpha() {
      const alpha = alphaSlider.value / 100;
      alphaMarker.style.left = alpha * 100 + "%", updateColor({ a: alpha }), pickColor();
    }
    __name(setAlpha, "setAlpha");
    function HSVAtoRGBA(hsva) {
      const saturation = hsva.s / 100, value = hsva.v / 100;
      let chroma = saturation * value, hueBy60 = hsva.h / 60, x2 = chroma * (1 - Math2.abs(hueBy60 % 2 - 1)), m2 = value - chroma;
      chroma = chroma + m2, x2 = x2 + m2;
      const index2 = Math2.floor(hueBy60) % 6, red = [chroma, x2, m2, m2, x2, chroma][index2], green = [x2, chroma, chroma, x2, m2, m2][index2], blue = [m2, m2, x2, chroma, chroma, x2][index2];
      return {
        r: Math2.round(red * 255),
        g: Math2.round(green * 255),
        b: Math2.round(blue * 255),
        a: hsva.a
      };
    }
    __name(HSVAtoRGBA, "HSVAtoRGBA");
    function HSVAtoHSLA(hsva) {
      const value = hsva.v / 100, lightness = value * (1 - hsva.s / 100 / 2);
      let saturation;
      return lightness > 0 && lightness < 1 && (saturation = Math2.round((value - lightness) / Math2.min(lightness, 1 - lightness) * 100)), {
        h: hsva.h,
        s: saturation || 0,
        l: Math2.round(lightness * 100),
        a: hsva.a
      };
    }
    __name(HSVAtoHSLA, "HSVAtoHSLA");
    function RGBAtoHSVA(rgba) {
      const red = rgba.r / 255, green = rgba.g / 255, blue = rgba.b / 255, xmax = Math2.max(red, green, blue), xmin = Math2.min(red, green, blue), chroma = xmax - xmin, value = xmax;
      let hue = 0, saturation = 0;
      return chroma && (xmax === red && (hue = (green - blue) / chroma), xmax === green && (hue = 2 + (blue - red) / chroma), xmax === blue && (hue = 4 + (red - green) / chroma), xmax && (saturation = chroma / xmax)), hue = Math2.floor(hue * 60), {
        h: hue < 0 ? hue + 360 : hue,
        s: Math2.round(saturation * 100),
        v: Math2.round(value * 100),
        a: rgba.a
      };
    }
    __name(RGBAtoHSVA, "RGBAtoHSVA");
    function strToRGBA(str) {
      const regex = /^((rgba)|rgb)[\D]+([\d.]+)[\D]+([\d.]+)[\D]+([\d.]+)[\D]*?([\d.]+|$)/i;
      let match, rgba;
      return ctx.fillStyle = "#000", ctx.fillStyle = str, match = regex.exec(ctx.fillStyle), match ? rgba = {
        r: match[3] * 1,
        g: match[4] * 1,
        b: match[5] * 1,
        a: match[6] * 1
      } : (match = ctx.fillStyle.replace("#", "").match(/.{2}/g).map((h2) => parseInt(h2, 16)), rgba = {
        r: match[0],
        g: match[1],
        b: match[2],
        a: 1
      }), rgba;
    }
    __name(strToRGBA, "strToRGBA");
    function RGBAToHex(rgba) {
      let R = rgba.r.toString(16), G = rgba.g.toString(16), B = rgba.b.toString(16), A = "";
      if (rgba.r < 16 && (R = "0" + R), rgba.g < 16 && (G = "0" + G), rgba.b < 16 && (B = "0" + B), settings2.alpha && (rgba.a < 1 || settings2.forceAlpha)) {
        const alpha = rgba.a * 255 | 0;
        A = alpha.toString(16), alpha < 16 && (A = "0" + A);
      }
      return "#" + R + G + B + A;
    }
    __name(RGBAToHex, "RGBAToHex");
    function RGBAToStr(rgba) {
      return !settings2.alpha || rgba.a === 1 && !settings2.forceAlpha ? "rgb(" + rgba.r + ", " + rgba.g + ", " + rgba.b + ")" : "rgba(" + rgba.r + ", " + rgba.g + ", " + rgba.b + ", " + rgba.a + ")";
    }
    __name(RGBAToStr, "RGBAToStr");
    function HSLAToStr(hsla) {
      return !settings2.alpha || hsla.a === 1 && !settings2.forceAlpha ? "hsl(" + hsla.h + ", " + hsla.s + "%, " + hsla.l + "%)" : "hsla(" + hsla.h + ", " + hsla.s + "%, " + hsla.l + "%, " + hsla.a + ")";
    }
    __name(HSLAToStr, "HSLAToStr");
    function init2() {
      document2.getElementById("clr-picker") || (container = undefined$1, picker = document2.createElement("div"), picker.setAttribute("id", "clr-picker"), picker.className = "clr-picker", picker.innerHTML = '<input id="clr-color-value" name="clr-color-value" class="clr-color" type="text" value="" spellcheck="false" aria-label="' + settings2.a11y.input + '">' + ('<div id="clr-color-area" class="clr-gradient" role="application" aria-label="' + settings2.a11y.instruction + '">') + '<div id="clr-color-marker" class="clr-marker" tabindex="0"></div></div><div class="clr-hue">' + ('<input id="clr-hue-slider" name="clr-hue-slider" type="range" min="0" max="360" step="1" aria-label="' + settings2.a11y.hueSlider + '">') + '<div id="clr-hue-marker"></div></div><div class="clr-alpha">' + ('<input id="clr-alpha-slider" name="clr-alpha-slider" type="range" min="0" max="100" step="1" aria-label="' + settings2.a11y.alphaSlider + '">') + '<div id="clr-alpha-marker"></div><span></span></div><div id="clr-format" class="clr-format"><fieldset class="clr-segmented">' + ("<legend>" + settings2.a11y.format + "</legend>") + '<input id="clr-f1" type="radio" name="clr-format" value="hex"><label for="clr-f1">Hex</label><input id="clr-f2" type="radio" name="clr-format" value="rgb"><label for="clr-f2">RGB</label><input id="clr-f3" type="radio" name="clr-format" value="hsl"><label for="clr-f3">HSL</label><span></span></fieldset></div><div id="clr-swatches" class="clr-swatches"></div>' + ('<button type="button" id="clr-clear" class="clr-clear" aria-label="' + settings2.a11y.clear + '">' + settings2.clearLabel + "</button>") + '<div id="clr-color-preview" class="clr-preview">' + ('<button type="button" id="clr-close" class="clr-close" aria-label="' + settings2.a11y.close + '">' + settings2.closeLabel + "</button>") + "</div>" + ('<span id="clr-open-label" hidden>' + settings2.a11y.open + "</span>") + ('<span id="clr-swatch-label" hidden>' + settings2.a11y.swatch + "</span>"), document2.body.appendChild(picker), colorArea = getEl("clr-color-area"), colorMarker = getEl("clr-color-marker"), clearButton = getEl("clr-clear"), closeButton = getEl("clr-close"), colorPreview = getEl("clr-color-preview"), colorValue = getEl("clr-color-value"), hueSlider = getEl("clr-hue-slider"), hueMarker = getEl("clr-hue-marker"), alphaSlider = getEl("clr-alpha-slider"), alphaMarker = getEl("clr-alpha-marker"), bindFields(settings2.el), wrapFields(settings2.el), addListener(picker, "mousedown", (event2) => {
        picker.classList.remove("clr-keyboard-nav"), event2.stopPropagation();
      }), addListener(colorArea, "mousedown", (event2) => {
        addListener(document2, "mousemove", moveMarker);
      }), addListener(colorArea, "contextmenu", (event2) => {
        event2.preventDefault();
      }), addListener(colorArea, "touchstart", (event2) => {
        document2.addEventListener("touchmove", moveMarker, { passive: !1 });
      }), addListener(colorMarker, "mousedown", (event2) => {
        addListener(document2, "mousemove", moveMarker);
      }), addListener(colorMarker, "touchstart", (event2) => {
        document2.addEventListener("touchmove", moveMarker, { passive: !1 });
      }), addListener(colorValue, "change", (event2) => {
        const value = colorValue.value;
        if (currentEl || settings2.inline) {
          const color = value === "" ? value : setColorFromStr(value);
          pickColor(color);
        }
      }), addListener(clearButton, "click", (event2) => {
        pickColor(""), closePicker();
      }), addListener(closeButton, "click", (event2) => {
        pickColor(), closePicker();
      }), addListener(getEl("clr-format"), "click", ".clr-format input", (event2) => {
        currentFormat = event2.target.value, updateColor(), pickColor();
      }), addListener(picker, "click", ".clr-swatches button", (event2) => {
        setColorFromStr(event2.target.textContent), pickColor(), settings2.swatchesOnly && closePicker();
      }), addListener(document2, "mouseup", (event2) => {
        document2.removeEventListener("mousemove", moveMarker);
      }), addListener(document2, "touchend", (event2) => {
        document2.removeEventListener("touchmove", moveMarker);
      }), addListener(document2, "mousedown", (event2) => {
        keyboardNav = !1, picker.classList.remove("clr-keyboard-nav"), closePicker();
      }), addListener(document2, "keydown", (event2) => {
        const key = event2.key, target = event2.target, shiftKey = event2.shiftKey;
        if (key === "Escape" ? closePicker(!0) : ["Tab", "ArrowUp", "ArrowDown", "ArrowLeft", "ArrowRight"].includes(key) && (keyboardNav = !0, picker.classList.add("clr-keyboard-nav")), key === "Tab" && target.matches(".clr-picker *")) {
          const focusables = getFocusableElements(), firstFocusable = focusables.shift(), lastFocusable = focusables.pop();
          shiftKey && target === firstFocusable ? (lastFocusable.focus(), event2.preventDefault()) : !shiftKey && target === lastFocusable && (firstFocusable.focus(), event2.preventDefault());
        }
      }), addListener(document2, "click", ".clr-field button", (event2) => {
        hasInstance && resetVirtualInstance(), event2.target.nextElementSibling.dispatchEvent(new Event("click", { bubbles: !0 }));
      }), addListener(colorMarker, "keydown", (event2) => {
        const movements = {
          ArrowUp: [0, -1],
          ArrowDown: [0, 1],
          ArrowLeft: [-1, 0],
          ArrowRight: [1, 0]
        };
        Object.keys(movements).includes(event2.key) && (moveMarkerOnKeydown(...movements[event2.key]), event2.preventDefault());
      }), addListener(colorArea, "click", moveMarker), addListener(hueSlider, "input", setHue), addListener(alphaSlider, "input", setAlpha));
    }
    __name(init2, "init");
    function getFocusableElements() {
      return Array.from(picker.querySelectorAll("input, button")).filter((node) => !!node.offsetWidth);
    }
    __name(getFocusableElements, "getFocusableElements");
    function getEl(id) {
      return document2.getElementById(id);
    }
    __name(getEl, "getEl");
    function addListener(context, type, selector, fn) {
      const matches = Element.prototype.matches || Element.prototype.msMatchesSelector;
      typeof selector == "string" ? context.addEventListener(type, (event2) => {
        matches.call(event2.target, selector) && fn.call(event2.target, event2);
      }) : (fn = selector, context.addEventListener(type, fn));
    }
    __name(addListener, "addListener");
    function DOMReady(fn, args) {
      args = args !== undefined$1 ? args : [], document2.readyState !== "loading" ? fn(...args) : document2.addEventListener("DOMContentLoaded", () => {
        fn(...args);
      });
    }
    __name(DOMReady, "DOMReady"), NodeList !== undefined$1 && NodeList.prototype && !NodeList.prototype.forEach && (NodeList.prototype.forEach = Array.prototype.forEach);
    function setColor(color, target) {
      currentEl = target, oldColor = currentEl.value, attachVirtualInstance(target), currentFormat = getColorFormatFromStr(color), updatePickerPosition(), setColorFromStr(color), pickColor(), oldColor !== color && currentEl.dispatchEvent(new Event("change", { bubbles: !0 }));
    }
    __name(setColor, "setColor");
    const Coloris2 = (() => {
      const methods = {
        init: init2,
        set: configure,
        wrap: wrapFields,
        close: closePicker,
        setInstance: setVirtualInstance,
        setColor,
        removeInstance: removeVirtualInstance,
        updatePosition: updatePickerPosition,
        ready: DOMReady
      };
      function Coloris3(options) {
        DOMReady(() => {
          options && (typeof options == "string" ? bindFields(options) : configure(options));
        });
      }
      __name(Coloris3, "Coloris");
      for (const key in methods)
        Coloris3[key] = function() {
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)
            args[_key] = arguments[_key];
          DOMReady(methods[key], args);
        };
      return DOMReady(() => {
        window2.addEventListener("resize", (event2) => {
          Coloris3.updatePosition();
        }), window2.addEventListener("scroll", (event2) => {
          Coloris3.updatePosition();
        });
      }), Coloris3;
    })();
    return Coloris2.coloris = Coloris2, Coloris2;
  })(window, document, Math);
})();
Coloris.coloris;
Coloris.init;
Coloris.set;
Coloris.wrap;
Coloris.close;
Coloris.setInstance;
Coloris.removeInstance;
Coloris.updatePosition;
class ColorisThirdPartyIntegration extends ThirdPartyIntegrationBase {
  static {
    __name(this, "ColorisThirdPartyIntegration");
  }
  name = "Coloris";
  init(_api) {
    Promise.resolve({            }), Coloris.init(), Coloris.coloris({
      el: ".coloris",
      formatToggle: !0,
      swatches: [
        "rgba(58, 116, 126, 1)",
        "rgba(60, 179, 113, 0.3)",
        "rgba(25, 94, 59, 1)",
        "rgba(144, 238, 144, 1)",
        "rgba(255, 99, 71, 0.3)",
        "rgba(139, 0, 0, 1)",
        "rgba(255, 160, 122, 1)",
        "rgba(102, 205, 170, 0.3)",
        "rgba(0, 100, 0, 1)",
        "rgba(152, 251, 152, 1)",
        "rgba(221, 160, 221, 0.3)",
        "rgba(138, 43, 226, 1)",
        "rgba(255, 182, 193, 1)",
        "rgba(255, 165, 0, 0.3)",
        "rgba(184, 134, 11, 1)",
        "rgba(255, 215, 0, 1)"
      ]
    }), effect_root(() => {
      const theme = getThemeOrDefault(settings.value.colorScheme);
      Coloris({ themeMode: theme.type });
    });
  }
}
function setupIntegrations(api) {
  setupSystemIntegrations(api), setupModuleIntegrations(api), setupThirdPartyIntegrations(api);
}
__name(setupIntegrations, "setupIntegrations");
const systemIntegrations = [
  new TidyCustomSectionsInDefaultItemSheetIntegration()
  // Add other system integrations here
];
function setupSystemIntegrations(api) {
  systemIntegrations.forEach((systemIntegration) => {
    try {
      systemIntegration.init(api);
    } catch (e2) {
      error("System integration failed", !1, e2);
    }
  });
}
__name(setupSystemIntegrations, "setupSystemIntegrations");
const moduleIntegrations = [
  new PopoutModuleIntegration(),
  new CustomCharacterSheetsModuleIntegration(),
  new DrakkenheimCoreModuleIntegration()
  // Add other module integrations here
];
function setupModuleIntegrations(api) {
  moduleIntegrations.forEach((m2) => {
    try {
      game.modules.get(m2.moduleId)?.active && m2.init(api);
    } catch (e2) {
      error(`Module integration failed for ${m2.moduleId}`, !1, e2);
    }
  });
}
__name(setupModuleIntegrations, "setupModuleIntegrations");
const thirdPartyIntegrations = [
  new ColorisThirdPartyIntegration()
];
function setupThirdPartyIntegrations(api) {
  thirdPartyIntegrations.forEach((m2) => {
    try {
      m2.init(api);
    } catch (e2) {
      error(`Module integration failed for third party script ${m2.name}`, !1, e2);
    }
  });
}
__name(setupThirdPartyIntegrations, "setupThirdPartyIntegrations");
function initKeybindings() {
  registerSheetLockToggleKeybinding(), registerHeaderMenuToggleKeybinding();
}
__name(initKeybindings, "initKeybindings");
function registerSheetLockToggleKeybinding() {
  game.keybindings.register(CONSTANTS.MODULE_ID, "toggleSheetLock", {
    name: "TIDY5E.Keybindings.ToggleSheetLock.Name",
    hint: "TIDY5E.Keybindings.ToggleSheetLock.Hint",
    onDown: /* @__PURE__ */ __name(async () => {
      const tidyApi = Tidy5eSheetsApi._getApi();
      if (!ui.activeWindow || !tidyApi.isTidy5eSheet(ui.activeWindow))
        return;
      const sheetDocument = ui.activeWindow.document;
      if (!sheetDocument)
        return;
      const allowEdit = TidyFlags.allowEdit.get(sheetDocument);
      await TidyFlags.allowEdit.set(sheetDocument, !allowEdit);
    }, "onDown"),
    onUp: /* @__PURE__ */ __name(() => {
    }, "onUp"),
    precedence: CONST.KEYBINDING_PRECEDENCE.NORMAL
  });
}
__name(registerSheetLockToggleKeybinding, "registerSheetLockToggleKeybinding");
function registerHeaderMenuToggleKeybinding() {
  game.keybindings.register(CONSTANTS.MODULE_ID, "toggleHeaderMenu", {
    name: "TIDY5E.Keybindings.ToggleHeaderMenu.Name",
    hint: "TIDY5E.Keybindings.ToggleHeaderMenu.Hint",
    onDown: /* @__PURE__ */ __name(async () => {
      const tidyApi = Tidy5eSheetsApi._getApi();
      !ui.activeWindow || !tidyApi.isTidy5eSheet(ui.activeWindow) || ui.activeWindow.toggleControls?.();
    }, "onDown"),
    onUp: /* @__PURE__ */ __name(() => {
    }, "onUp"),
    precedence: CONST.KEYBINDING_PRECEDENCE.NORMAL,
    editable: [
      {
        key: "KeyB",
        modifiers: ["Alt"]
      }
    ]
  });
}
__name(registerHeaderMenuToggleKeybinding, "registerHeaderMenuToggleKeybinding");
class DebugTools {
  static {
    __name(this, "DebugTools");
  }
  static onReady(api) {
    if (settings.value.debug) {
      async function onDebugButtonClick(app) {
        ui.notifications.info(`${app.document.name} written to the console.`), console.log(app.document), console.log(await app.document.sheet.getData());
      }
      __name(onDebugButtonClick, "onDebugButtonClick"), Hooks.on("getActorSheetHeaderButtons", (app, buttons) => {
        buttons.unshift({
          label: "Tidy Debug Button",
          class: "tidy-debug-button",
          icon: "fas fa-broom",
          onclick() {
            onDebugButtonClick(app);
          }
        });
      });
      const controlRegistrationParams = {
        controls: [
          {
            async onClickAction(event2) {
              ui.notifications.info(
                `${this.document.name} written to the console.`
              ), console.log(this.document), console.log(await this.document.sheet._prepareContext());
            },
            icon: "fas fa-broom",
            label: "Tidy Debug Button"
          }
        ]
      };
      api.registerItemHeaderControls(controlRegistrationParams), api.registerActorHeaderControls(controlRegistrationParams);
    }
  }
}
var root$6 = /* @__PURE__ */ template('<div class="item-image-border"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 112 107" preserveAspectRatio="xMidYMid meet" fill="none"><path d="M111.5 98.5V7.5L105 1H102" stroke="var(--filigree-border-color, var(--t5e-color-gold))"></path><path d="M0.5 98.5V7.5L7 1H10" stroke="var(--filigree-border-color, var(--t5e-color-gold))"></path><path d="M0.500009 8.5L0.500001 99.5L7 106L10 106" stroke="var(--filigree-border-color, var(--t5e-color-gold))"></path><path d="M111.5 8.5L111.5 99.5L105 106L102 106" stroke="var(--filigree-border-color, var(--t5e-color-gold))"></path><path d="M3 8.5L10 1.5H102L109 8.5V98.5L102 105.5H10L3 98.5V8.5Z" stroke="var(--filigree-border-color, var(--t5e-color-gold))" stroke-width="2"></path><path d="M101.5 1C105.5 4 110.5 2.5 110.5 2.5C110.5 2.5 109.5 5 109.5 10" stroke="var(--filigree-border-color, var(--t5e-color-gold))"></path><path d="M10.5 1C6.5 4 1.5 2.5 1.5 2.5C1.5 2.5 2.5 5 2.5 10" stroke="var(--filigree-border-color, var(--t5e-color-gold))"></path><path d="M101.5 106C105.5 103 110.5 104.5 110.5 104.5C110.5 104.5 109.5 102 109.5 97" stroke="var(--filigree-border-color, var(--t5e-color-gold))"></path><path d="M10.5 106C6.5 103 1.5 104.5 1.5 104.5C1.5 104.5 2.5 102 2.5 97" stroke="var(--filigree-border-color, var(--t5e-color-gold))"></path></svg></div>');
function ItemImageBorder($$anchor) {
  var div = root$6();
  append($$anchor, div);
}
__name(ItemImageBorder, "ItemImageBorder");
var root$5 = /* @__PURE__ */ template('<label class="field-toggle"><svg class="checked-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><path d="M438.6 105.4c12.5 12.5 12.5 32.8 0 45.3l-256 256c-12.5 12.5-32.8 12.5-45.3 0l-128-128c-12.5-12.5-12.5-32.8 0-45.3s32.8-12.5 45.3 0L160 338.7 393.4 105.4c12.5-12.5 32.8-12.5 45.3 0z"></path></svg> <svg class="unchecked-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 384 512"><path d="M342.6 150.6c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L192 210.7 86.6 105.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3L146.7 256 41.4 361.4c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0L192 301.3 297.4 406.6c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3L237.3 256 342.6 150.6z"></path></svg> <svg class="thumb" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path d="M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512z"></path></svg> <input type="checkbox" class="toggle hidden"></label>');
function FieldToggle($$anchor, $$props) {
  let checked = prop($$props, "checked", 3, !1), onchange = prop($$props, "onchange", 3, void 0);
  var label = root$5(), input = sibling(child(label), 6);
  input.__change = function(...$$args) {
    onchange()?.apply(this, $$args);
  }, template_effect(() => set_checked(input, checked())), append($$anchor, label);
}
__name(FieldToggle, "FieldToggle");
delegate(["change"]);
var root_1$1 = /* @__PURE__ */ template("<i></i>"), root_3$1 = /* @__PURE__ */ template("<i></i>"), root$4 = /* @__PURE__ */ template('<label class="pill pill-switch"><span><span class="pill-switch-icon-container"><!> <!></span> <span class="pill-switch-icon-container"><!> <!></span> <!></span> <!></label>');
function PillSwitch($$anchor, $$props) {
  push($$props, !0);
  let checked = prop($$props, "checked", 11, !1), checkedIconClass = prop($$props, "checkedIconClass", 3, void 0), checkedSvgSrc = prop($$props, "checkedSvgSrc", 3, void 0), uncheckedIconClass = prop($$props, "uncheckedIconClass", 3, void 0), uncheckedSvgSrc = prop($$props, "uncheckedSvgSrc", 3, void 0), onchange = prop($$props, "onchange", 3, void 0);
  var label = root$4(), span = child(label), span_1 = child(span), node = child(span_1);
  {
    var consequent = /* @__PURE__ */ __name(($$anchor2) => {
      var i2 = root_1$1();
      template_effect(() => set_class(i2, clsx(checkedIconClass()))), append($$anchor2, i2);
    }, "consequent");
    if_block(node, ($$render) => {
      checkedIconClass() && $$render(consequent);
    });
  }
  var node_1 = sibling(node, 2);
  {
    var consequent_1 = /* @__PURE__ */ __name(($$anchor2) => {
      Dnd5eIcon($$anchor2, {
        class: "fa-fw",
        get src() {
          return checkedSvgSrc();
        }
      });
    }, "consequent_1");
    if_block(node_1, ($$render) => {
      checkedSvgSrc() && $$render(consequent_1);
    });
  }
  var span_2 = sibling(span_1, 2), node_2 = child(span_2);
  {
    var consequent_2 = /* @__PURE__ */ __name(($$anchor2) => {
      var i_1 = root_3$1();
      template_effect(() => set_class(i_1, clsx(uncheckedIconClass()))), append($$anchor2, i_1);
    }, "consequent_2");
    if_block(node_2, ($$render) => {
      uncheckedIconClass() && $$render(consequent_2);
    });
  }
  var node_3 = sibling(node_2, 2);
  {
    var consequent_3 = /* @__PURE__ */ __name(($$anchor2) => {
      Dnd5eIcon($$anchor2, {
        class: "fa-fw",
        get src() {
          return uncheckedSvgSrc();
        }
      });
    }, "consequent_3");
    if_block(node_3, ($$render) => {
      uncheckedSvgSrc() && $$render(consequent_3);
    });
  }
  var node_4 = sibling(span_2, 2);
  snippet(node_4, () => $$props.children ?? noop);
  var node_5 = sibling(span, 2);
  FieldToggle(node_5, {
    get checked() {
      return checked();
    },
    get onchange() {
      return onchange();
    }
  }), template_effect(() => {
    toggle_class(span_1, "hidden", !checked()), toggle_class(span_2, "hidden", checked());
  }), append($$anchor, label), pop();
}
__name(PillSwitch, "PillSwitch");
var root_2$1 = /* @__PURE__ */ template("<li><!></li>"), root_4$1 = /* @__PURE__ */ template("<li><!></li>"), root_6$1 = /* @__PURE__ */ template('<li class="pill"><i class="fas fa-search"></i> <span class="label"> </span></li>'), root_9 = /* @__PURE__ */ template('<li class="pill"> </li>'), root_10$1 = /* @__PURE__ */ template('<li class="pill"> </li>'), root_11$1 = /* @__PURE__ */ template('<li class="pill"> </li>'), root_8$1 = /* @__PURE__ */ template('<h4> </h4> <ul class="pills inverse"><!> <!> <!></ul>', 1), root_13 = /* @__PURE__ */ template('<div class="document-name"> </div>'), root$3 = /* @__PURE__ */ template('<aside class="sidebar"><div class="item-image-rarity-container"><div class="item-image-container"><img class="item-image"> <!></div> <div class="item-rarity"><span> </span></div></div> <ul class="pills inverse stacked"><li><!></li> <!> <!></ul> <div><h4> </h4> <ul class="pills inverse flexcol"><li class="pill"><span class="lighter"> </span></li></ul></div> <!></aside> <main class="item-content"><div class="flex-row extra-small-gap align-items-center"><!></div> <div class="item-header-summary"><div class="item-type text-lighter"> </div> <div class="item-header-summary-separator" role="presentation"></div> <div class="item-value"><i></i> <span class="item-value-number"><span class="text-default"> </span> <span class="item-value-denomination text-lighter"> </span></span></div> <div class="item-header-summary-separator" role="presentation"></div> <div class="item-weight"><i class="fas fa-weight-hanging item-weight-icon text-lightest"></i> <span class="item-weight-value"> </span></div></div> <!> <hr class="golden-fade"> <!></main>', 1);
function ContainerSheet($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getContainerSheetHightouchContext);
  const localize = FoundryAdapter.localize;
  let selectedTabId = state(proxy(CONSTANTS.TAB_CONTAINER_CONTENTS)), identifiedText = /* @__PURE__ */ derived(() => get(context).system.identified ? localize("DND5E.Identified") : localize("DND5E.Unidentified.Title")), rarityText = /* @__PURE__ */ derived(() => (
    //@ts-expect-error
    CONFIG.DND5E.itemRarity[get(context).system.rarity]?.titleCase() ?? ""
  )), rarityColorVariable = /* @__PURE__ */ derived(() => `--t5e-color-rarity-${get(context).system.rarity?.slugify() ?? ""}`), denomination = /* @__PURE__ */ derived(() => CONFIG.DND5E.currencies[get(context).system.price.denomination]), itemValueText = /* @__PURE__ */ derived(() => FoundryAdapter.formatNumber(get(context).system.price?.value));
  var fragment = root$3(), aside = first_child(fragment), div = child(aside), div_1 = child(div), img = child(div_1), node = sibling(img, 2);
  ItemImageBorder(node);
  var div_2 = sibling(div_1, 2), span = child(div_2), text$1 = child(span), ul = sibling(div, 2), li = child(ul), node_1 = child(li);
  PillSwitch(node_1, {
    get checked() {
      return get(context).system.equipped;
    },
    checkedIconClass: "fas fa-hand-fist equip-icon fa-fw",
    uncheckedIconClass: "far fa-hand fa-fw",
    onchange: /* @__PURE__ */ __name((ev) => console.log(get(context).item.update({ "system.equipped": ev.currentTarget?.checked })), "onchange"),
    children: /* @__PURE__ */ __name(($$anchor2, $$slotProps) => {
      var text_1 = text();
      template_effect(() => set_text(text_1, localize("DND5E.Equipped"))), append($$anchor2, text_1);
    }, "children"),
    $$slots: { default: !0 }
  });
  var node_2 = sibling(li, 2);
  {
    var consequent = /* @__PURE__ */ __name(($$anchor2) => {
      var li_1 = root_2$1(), node_3 = child(li_1);
      PillSwitch(node_3, {
        get checked() {
          return get(context).system.attuned;
        },
        checkedIconClass: "fas fa-sun equip-icon fa-fw",
        uncheckedIconClass: "fas fa-sun equip-icon fa-fw",
        onchange: /* @__PURE__ */ __name((ev) => console.log(get(context).item.update({ "system.attuned": ev.currentTarget?.checked })), "onchange"),
        children: /* @__PURE__ */ __name(($$anchor3, $$slotProps) => {
          var text_2 = text();
          template_effect(() => set_text(text_2, localize("DND5E.Attuned"))), append($$anchor3, text_2);
        }, "children"),
        $$slots: { default: !0 }
      }), append($$anchor2, li_1);
    }, "consequent");
    if_block(node_2, ($$render) => {
      FoundryAdapter.isAttunementApplicable(get(context).item) && $$render(consequent);
    });
  }
  var node_4 = sibling(node_2, 2);
  {
    var consequent_1 = /* @__PURE__ */ __name(($$anchor2) => {
      var li_2 = root_4$1(), node_5 = child(li_2);
      PillSwitch(node_5, {
        get checked() {
          return get(context).system.identified;
        },
        checkedIconClass: "fas fa-search fa-fw",
        uncheckedIconClass: "fas fa-search fa-fw",
        onchange: /* @__PURE__ */ __name((ev) => console.log(get(context).item.update({ "system.identified": ev.currentTarget?.checked })), "onchange"),
        children: /* @__PURE__ */ __name(($$anchor3, $$slotProps) => {
          var text_3 = text();
          template_effect(() => set_text(text_3, localize("DND5E.Identified"))), append($$anchor3, text_3);
        }, "children"),
        $$slots: { default: !0 }
      }), append($$anchor2, li_2);
    }, "consequent_1"), alternate = /* @__PURE__ */ __name(($$anchor2) => {
      var li_3 = root_6$1(), span_1 = sibling(child(li_3), 2), text_4 = child(span_1);
      template_effect(() => set_text(text_4, get(identifiedText))), append($$anchor2, li_3);
    }, "alternate");
    if_block(node_4, ($$render) => {
      get(context).unlocked ? $$render(consequent_1) : $$render(alternate, !1);
    });
  }
  var div_3 = sibling(ul, 2), h4 = child(div_3), text_5 = child(h4);
  template_effect(() => set_text(text_5, localize("TIDY5E.Section.LabelPl")));
  var ul_1 = sibling(h4, 2), li_4 = child(ul_1), span_2 = child(li_4), text_6 = child(span_2);
  template_effect(() => set_text(text_6, localize("DND5E.Inventory")));
  var node_6 = sibling(div_3, 2);
  {
    var consequent_5 = /* @__PURE__ */ __name(($$anchor2) => {
      var fragment_4 = comment(), node_7 = first_child(fragment_4);
      {
        var consequent_4 = /* @__PURE__ */ __name(($$anchor3) => {
          var fragment_5 = root_8$1(), h4_1 = first_child(fragment_5);
          const stringified_text = /* @__PURE__ */ derived(() => localize("DND5E.Attack") ?? ""), stringified_text_1 = /* @__PURE__ */ derived(() => localize("DND5E.Damage") ?? "");
          var text_7 = child(h4_1);
          template_effect(() => set_text(text_7, `${get(stringified_text)}/${get(stringified_text_1)}`));
          var ul_2 = sibling(h4_1, 2), node_8 = child(ul_2);
          {
            var consequent_2 = /* @__PURE__ */ __name(($$anchor4) => {
              var li_5 = root_9(), text_8 = child(li_5);
              template_effect(() => set_text(text_8, get(context).labels.save)), append($$anchor4, li_5);
            }, "consequent_2");
            if_block(node_8, ($$render) => {
              get(context).labels.save && $$render(consequent_2);
            });
          }
          var node_9 = sibling(node_8, 2);
          {
            var consequent_3 = /* @__PURE__ */ __name(($$anchor4) => {
              var li_6 = root_10$1(), text_9 = child(li_6);
              template_effect(() => set_text(text_9, `${get(context).labels.toHit ?? ""}
            ${localize("DND5E.ToHit") ?? ""}`)), append($$anchor4, li_6);
            }, "consequent_3");
            if_block(node_9, ($$render) => {
              get(context).labels.toHit && $$render(consequent_3);
            });
          }
          var node_10 = sibling(node_9, 2);
          each(node_10, 17, () => get(context).labels.damages ?? [], index, ($$anchor4, damage) => {
            var li_7 = root_11$1();
            const label = /* @__PURE__ */ derived(() => get(damage).label);
            var text_10 = child(li_7);
            template_effect(() => set_text(text_10, get(label))), append($$anchor4, li_7);
          }), template_effect(() => ul_2.inert = get(context).concealDetails), append($$anchor3, fragment_5);
        }, "consequent_4");
        if_block(node_7, ($$render) => {
          (get(context).labels.toHit || get(context).labels.damages.length) && $$render(consequent_4);
        });
      }
      append($$anchor2, fragment_4);
    }, "consequent_5");
    if_block(node_6, ($$render) => {
      get(context).concealDetails || $$render(consequent_5);
    });
  }
  var main = sibling(aside, 2), div_4 = child(main), node_11 = child(div_4);
  {
    var consequent_6 = /* @__PURE__ */ __name(($$anchor2) => {
      TextInput($$anchor2, {
        field: "name",
        get document() {
          return get(context).item;
        },
        get value() {
          return get(context).item.name;
        },
        class: "document-name"
      });
    }, "consequent_6"), alternate_1 = /* @__PURE__ */ __name(($$anchor2) => {
      var div_5 = root_13(), text_11 = child(div_5);
      template_effect(() => set_text(text_11, get(context).item.name ?? "")), append($$anchor2, div_5);
    }, "alternate_1");
    if_block(node_11, ($$render) => {
      get(context).unlocked ? $$render(consequent_6) : $$render(alternate_1, !1);
    });
  }
  var div_6 = sibling(div_4, 2), div_7 = child(div_6), text_12 = child(div_7), div_8 = sibling(div_7, 4), i2 = child(div_8), span_3 = sibling(i2, 2), span_4 = child(span_3), text_13 = child(span_4), span_5 = sibling(span_4, 2), text_14 = child(span_5), div_9 = sibling(div_8, 4), span_6 = sibling(child(div_9), 2), text_15 = child(span_6), node_12 = sibling(div_6, 2);
  Tabs(node_12, {
    get tabs() {
      return get(context).tabs;
    },
    cssClass: "item-tabs",
    get sheet() {
      return get(context).item.sheet;
    },
    get selectedTabId() {
      return get(selectedTabId);
    },
    set selectedTabId($$value) {
      set(selectedTabId, proxy($$value));
    }
  });
  var node_13 = sibling(node_12, 4);
  TabContents(node_13, {
    get tabs() {
      return get(context).tabs;
    },
    get selectedTabId() {
      return get(selectedTabId);
    }
  }), template_effect(() => {
    set_attribute(aside, "style", `
    --t5e-item-rarity-color: var(${get(rarityColorVariable) ?? ""}, var(--t5e-color-gold)); 
    --filigree-border-color: var(${get(rarityColorVariable) ?? ""}, var(--t5e-color-gold))`), set_attribute(img, "src", get(context).item.img), set_attribute(img, "alt", get(context).item.name), set_text(text$1, get(rarityText)), set_text(text_12, get(context).itemType ?? ""), set_class(i2, `currency ${get(context).system?.price?.denomination ?? "" ?? ""}`), set_attribute(i2, "aria-label", get(denomination)?.label ?? ""), set_text(text_13, get(itemValueText)), set_text(text_14, get(denomination)?.abbreviation ?? ""), set_text(text_15, get(context).system.weight?.value);
  }), append($$anchor, fragment), pop();
}
__name(ContainerSheet, "ContainerSheet");
var on_click$1 = /* @__PURE__ */ __name((_, $$props) => FoundryAdapter.renderSourceConfig($$props.document, $$props.keyPath), "on_click$1"), root_1 = /* @__PURE__ */ template('<button type="button"><i class="fas fa-cog"></i></button>'), root$2 = /* @__PURE__ */ template('<div class="configurable-source"><span class="source-text truncate"> </span> <!></div>');
function ConfigurableSource($$anchor, $$props) {
  push($$props, !0);
  let buttonClass = prop($$props, "buttonClass", 3, "");
  const localize = FoundryAdapter.localize;
  var div = root$2(), span = child(div), text2 = child(span), node = sibling(span, 2);
  {
    var consequent = /* @__PURE__ */ __name(($$anchor2) => {
      var button = root_1();
      button.__click = [on_click$1, $$props], template_effect(() => set_attribute(button, "title", localize("DND5E.SOURCE.Action.Configure"))), template_effect(() => set_class(button, `configure-source ${buttonClass() ?? ""}`)), append($$anchor2, button);
    }, "consequent");
    if_block(node, ($$render) => {
      $$props.unlocked && $$render(consequent);
    });
  }
  template_effect(() => {
    set_attribute(span, "title", $$props.sourceText ?? ""), set_text(text2, $$props.sourceText ?? "");
  }), append($$anchor, div), pop();
}
__name(ConfigurableSource, "ConfigurableSource");
delegate(["click"]);
var root$1 = /* @__PURE__ */ template("<!> <!>", 1);
function ItemHeaderStart($$anchor, $$props) {
  push($$props, !0);
  const context = /* @__PURE__ */ derived(getContainerSheetHightouchContext);
  let sourceText = /* @__PURE__ */ derived(() => get(context).editable ? get(context).system.source?.label || game.i18n.localize("DND5E.SOURCE.FIELDS.source.label") : get(context).system.source?.label);
  var fragment = root$1(), node = first_child(fragment);
  SheetHeaderEditModeToggle(node, { class: "header-control" });
  var node_1 = sibling(node, 2);
  ConfigurableSource(node_1, {
    get document() {
      return get(context).document;
    },
    keyPath: "system.source",
    get sourceText() {
      return get(sourceText);
    },
    get unlocked() {
      return get(context).unlocked;
    },
    buttonClass: "header-control unbutton"
  }), append($$anchor, fragment), pop();
}
__name(ItemHeaderStart, "ItemHeaderStart");
class Tidy5eContainerSheetHightouch extends DragAndDropMixin(SvelteApplicationMixin(foundry.applications.sheets.ItemSheetV2)) {
  static {
    __name(this, "Tidy5eContainerSheetHightouch");
  }
  currentTabId = void 0;
  searchFilters = /* @__PURE__ */ new Map();
  expandedItems = /* @__PURE__ */ new Map();
  expandedItemData = /* @__PURE__ */ new Map();
  inlineToggleService = new InlineToggleService();
  itemFilterService;
  #messageBus = state(proxy({ message: void 0 }));
  get messageBus() {
    return get(this.#messageBus);
  }
  set messageBus(value) {
    set(this.#messageBus, proxy(value));
  }
  constructor(...args) {
    super(...args), this.itemFilterService = new ItemFilterService({}, this.item);
  }
  static DEFAULT_OPTIONS = {
    classes: [
      CONSTANTS.MODULE_ID,
      "sheet",
      "item",
      CONSTANTS.ITEM_TYPE_CONTAINER,
      "app-v2",
      "hightouch"
    ],
    tag: "form",
    window: {
      frame: !0,
      positioned: !0,
      resizable: !0,
      controls: []
    },
    position: { width: 560, height: 560 },
    actions: {},
    dragDrop: [{ dropSelector: "form" }],
    submitOnClose: !1
  };
  _createComponent(node) {
    const context = /* @__PURE__ */ new Map([
      [
        CONSTANTS.SVELTE_CONTEXT.CONTEXT,
        this._context
      ],
      [
        CONSTANTS.SVELTE_CONTEXT.CURRENT_TAB_ID,
        this.currentTabId
      ],
      [
        CONSTANTS.SVELTE_CONTEXT.MESSAGE_BUS,
        this.messageBus
      ],
      [
        CONSTANTS.SVELTE_CONTEXT.INLINE_TOGGLE_SERVICE,
        this.inlineToggleService
      ],
      [
        CONSTANTS.SVELTE_CONTEXT.ITEM_FILTER_SERVICE,
        this.itemFilterService
      ],
      [
        CONSTANTS.SVELTE_CONTEXT.ON_FILTER,
        this.itemFilterService.onFilter.bind(this.itemFilterService)
      ],
      [
        CONSTANTS.SVELTE_CONTEXT.ON_FILTER_CLEAR_ALL,
        this.itemFilterService.onFilterClearAll.bind(this.itemFilterService)
      ],
      [
        CONSTANTS.SVELTE_CONTEXT.SEARCH_FILTERS,
        new Map(this.searchFilters)
      ]
    ]), component2 = mount(ContainerSheet, { target: node, context }), html2 = globalThis.$(this.element);
    return initTidy5eContextMenu(this, html2), FoundryAdapter.createContextMenu(html2, ".activity[data-activity-id]", [], {
      onOpen: /* @__PURE__ */ __name((element2) => {
        const itemId = element2.closest("[data-item-id]")?.dataset.itemId, item = this.document.type === "container" ? this.document.system.getContainedItem(itemId) : this.document.items.get(itemId);
        !item || item instanceof Promise || element2.closest("[data-activity-id]") && dnd5e.documents.activity.UtilityActivity.onContextMenu(item, element2);
      }, "onOpen")
    }), component2;
  }
  _createAdditionalComponents(node) {
    const windowHeader = this.element.querySelector(".window-header");
    return [mount(ItemHeaderStart, {
      target: windowHeader,
      anchor: windowHeader.querySelector(".window-title"),
      context: /* @__PURE__ */ new Map([
        [
          CONSTANTS.SVELTE_CONTEXT.CONTEXT,
          this._context
        ]
      ])
    })];
  }
  async _prepareContext(options) {
    const rollData = this.item.getRollData(), enrichmentOptions = {
      secrets: this.item.isOwner,
      relativeTo: this.item,
      rollData
    }, enriched = {
      description: await TextEditor.enrichHTML(this.item.system.description.value, enrichmentOptions),
      unidentified: await TextEditor.enrichHTML(this.item.system.unidentified?.description, enrichmentOptions),
      chat: await TextEditor.enrichHTML(this.item.system.description.chat, enrichmentOptions)
    }, isIdentifiable = "identified" in this.item.system, itemDescriptions = [];
    itemDescriptions.push({
      enriched: enriched.description,
      content: this.document.system.description.value,
      field: "system.description.value",
      label: FoundryAdapter.localize("DND5E.Description")
    }), isIdentifiable && FoundryAdapter.userIsGm() && itemDescriptions.push({
      enriched: enriched.unidentified,
      content: this.document.system.unidentified.description,
      field: "system.unidentified.description",
      label: FoundryAdapter.localize("DND5E.DescriptionUnidentified")
    }), itemDescriptions.push({
      enriched: enriched.chat,
      content: this.document.system.description.chat,
      field: "system.description.chat",
      label: FoundryAdapter.localize("DND5E.DescriptionChat")
    });
    const contentsSortMode = SheetPreferencesService.getByType(this.item.type).tabs?.[CONSTANTS.TAB_CONTAINER_CONTENTS]?.sort ?? "m";
    let utilities = {
      [CONSTANTS.TAB_CONTAINER_CONTENTS]: {
        utilityToolbarCommands: [
          {
            title: FoundryAdapter.localize("SIDEBAR.SortModeAlpha"),
            iconClass: "fa-solid fa-arrow-down-a-z fa-fw",
            execute: /* @__PURE__ */ __name(async () => {
              await SheetPreferencesService.setDocumentTypeTabPreference(this.item.type, CONSTANTS.TAB_CONTAINER_CONTENTS, "sort", "m"), this.render();
            }, "execute"),
            visible: contentsSortMode === "a"
          },
          {
            title: FoundryAdapter.localize("SIDEBAR.SortModeManual"),
            iconClass: "fa-solid fa-arrow-down-short-wide fa-fw",
            execute: /* @__PURE__ */ __name(async () => {
              await SheetPreferencesService.setDocumentTypeTabPreference(this.item.type, CONSTANTS.TAB_CONTAINER_CONTENTS, "sort", "a"), this.render();
            }, "execute"),
            visible: contentsSortMode === "m"
          },
          {
            title: FoundryAdapter.localize("TIDY5E.Utilities.ConfigureSections"),
            iconClass: "fas fa-cog",
            execute: /* @__PURE__ */ __name(({ context: context2, sections }) => {
              new DocumentTabSectionConfigApplication({
                document: context2.item,
                // Provide a way to build the necessary config, perhaps within the application constructor. We've got all the info we need in order to perform the operation.
                sections,
                tabId: CONSTANTS.TAB_CONTAINER_CONTENTS,
                tabTitle: ItemSheetRuntime.getTabTitle(CONSTANTS.TAB_CONTAINER_CONTENTS)
              }).render(!0);
            }, "execute")
          }
        ]
      }
    };
    const editable = this.isEditable, unlocked = FoundryAdapter.isSheetUnlocked(this.item) && editable, context = {
      capacity: await this.item.system.computeCapacity(),
      concealDetails: !game.user.isGM && this.document.system.identified === !1,
      config: CONFIG.DND5E,
      containerContents: await Container.getContainerContents(this.item),
      customContent: [],
      document: this.document,
      editable,
      enriched,
      filterData: this.itemFilterService.getDocumentItemFilterData(),
      filterPins: ItemFilterRuntime.defaultFilterPins[this.item.type],
      identifiedName: FoundryAdapter.getIdentifiedName(this.item),
      isContainer: !0,
      isIdentifiable,
      isIdentified: this.document.system.identified !== !1,
      isPhysical: this.document.system.hasOwnProperty("quantity"),
      item: this.item,
      itemContext: await Container.getContainerItemContext(this.item),
      itemDescriptions,
      itemOverrides: new Set(this._getItemOverrides()),
      items: Array.from(await this.item.system.contents),
      // @ts-expect-error
      itemType: game.i18n.localize(CONFIG.Item.typeLabels[this.item.type]),
      labels: this.document.labels,
      lockItemQuantity: FoundryAdapter.shouldLockItemQuantity(),
      lockMoneyChanges: FoundryAdapter.shouldLockMoneyChanges(),
      owner: this.item.isOwner,
      properties: { active: [], object: {}, options: [] },
      rollData,
      source: this.document.toObject().system,
      system: this.document.system,
      tabs: [],
      utilities,
      unlocked
    };
    context.properties = {
      active: [],
      object: Object.fromEntries((this.document.system.properties ?? []).map((p2) => [p2, !0])),
      options: (this.document.system.validProperties ?? []).reduce(
        (arr, k) => {
          const { label } = CONFIG.DND5E.itemProperties[k];
          return arr.push({
            label,
            value: k,
            selected: this.item._source.system.properties?.includes(k)
          }), arr;
        },
        []
      ).sort((a2, b2) => a2.label.localeCompare(b2.label, game.i18n.lang))
    }, context.customContent = await ItemSheetRuntime.getContent(context);
    const eligibleCustomTabs = ItemSheetRuntime.getCustomItemTabs(context), customTabs = await TabManager.prepareTabsForRender(context, eligibleCustomTabs);
    return context.tabs = // TODO: Eliminate null forgiving operator and temp field when items are fully converted.
    ItemSheetRuntime.sheets[this.item.type]?.tempHightouchTabs() ?? [], context.tabs.push(...customTabs), TidyHooks.tidy5eSheetsPreConfigureSections(this, this.element, context), context;
  }
  /**
   * Retrieve the list of fields that are currently modified by Active Effects on the Item.
   */
  _getItemOverrides() {
    const overrides = Object.keys(foundry.utils.flattenObject(this.item.overrides ?? {}));
    return this.item.system.getItemOverrides?.(overrides), "properties" in this.item.system && dnd5e.documents.ActiveEffect5e.addOverriddenChoices(this.item, "system.properties", "system.properties", overrides), "damage" in this.item.system && foundry.utils.getProperty(this.item.overrides, "system.damage.parts") && (overrides.push("damage-control"), Array.fromRange(this.item.system.damage.parts.length).forEach((index2) => overrides.push(`system.damage.parts.${index2}.0`, `system.damage.parts.${index2}.1`))), overrides;
  }
  /* -------------------------------------------- */
  /*  Rendering Life-Cycle Methods                */
  /* -------------------------------------------- */
  _onRender(context, options) {
    super._onRender(context, options), TidyHooks.tidy5eSheetsRenderItemSheet(this, this.element, context, !!options.isFirstRender);
  }
  /* -------------------------------------------- */
  /*  Drag and Drop                               */
  /* -------------------------------------------- */
  /** @inheritDoc */
  async _onDrop(event2) {
    const data = TextEditor.getDragEventData(event2);
    if (!["Item", "Folder"].includes(data.type))
      return super._onDrop(event2);
    if (TidyHooks.dnd5eDropItemSheetData(this.item, this, data) !== !1)
      return data.type === "Folder" ? this._onDropFolder(event2, data) : this._onDropItem(event2, data);
  }
  /* -------------------------------------------- */
  async _onDropFolder(event2, data) {
    const folder = await Folder.implementation.fromDropData(data);
    if (!this.item.isOwner || folder.type !== "Item") return [];
    let recursiveWarning = !1;
    const parentContainers = await this.item.system.allContainers(), containers = /* @__PURE__ */ new Set();
    let items = await Promise.all(folder.contents.map(async (item) => {
      if (item instanceof Item || (item = await fromUuid(item.uuid)), item.system.container !== this.item.id) {
        if (this.item.uuid === item.uuid || parentContainers.includes(item)) {
          recursiveWarning = !0;
          return;
        }
        return item.type === "container" && containers.add(item.id), item;
      }
    }));
    if (items = items.filter((i2) => i2 && !containers.has(i2.system.container)), recursiveWarning && ui.notifications.warn("DND5E.ContainerRecursiveError", { localize: !0 }), !items.length) return [];
    const toCreate = await dnd5e.documents.Item5e.createWithContents(items, {
      container: this.item,
      transformAll: /* @__PURE__ */ __name((itemData) => {
        const options = {};
        return settings.value.includeFlagsInSpellScrollCreation && (options.flags = itemData.flags), itemData.type === "spell" ? dnd5e.documents.Item5e.createScrollFromSpell(itemData, options) : itemData;
      }, "transformAll")
    });
    return this.item.folder && toCreate.forEach((d2) => d2.folder = this.item.folder.id), dnd5e.documents.Item5e.createDocuments(toCreate, {
      pack: this.item.pack,
      parent: this.item.parent,
      keepId: !0
    });
  }
  /* -------------------------------------------- */
  async _onDropItem(event2, data) {
    const item = await Item.implementation.fromDropData(data);
    if (!this.item.isOwner || !item) return !1;
    if (item.system.container === this.item.id)
      return this._onSortItem(event2, item);
    const parentContainers = await this.item.system.allContainers();
    if (this.item.uuid === item.uuid || parentContainers.includes(item)) {
      ui.notifications.error("DND5E.ContainerRecursiveError", { localize: !0 });
      return;
    }
    if (item.actor === this.item.actor && item.pack === this.item.pack)
      return item.update({
        folder: this.item.folder,
        "system.container": this.item.id
      });
    const toCreate = await dnd5e.documents.Item5e.createWithContents([item], {
      container: this.item,
      transformAll: /* @__PURE__ */ __name((itemData) => {
        const options = {};
        return settings.value.includeFlagsInSpellScrollCreation && (options.flags = itemData.flags), itemData.type === "spell" ? dnd5e.documents.Item5e.createScrollFromSpell(itemData, options) : itemData;
      }, "transformAll")
    });
    return this.item.folder && toCreate.forEach((d2) => d2.folder = this.item.folder.id), dnd5e.documents.Item5e.createDocuments(toCreate, {
      pack: this.item.pack,
      parent: this.item.actor,
      keepId: !0
    });
  }
  /* -------------------------------------------- */
  /**
   * Handle a drop event for an existing contained Item to sort it relative to its siblings.
   */
  async _onSortItem(event2, item) {
    const dropTarget = event2.target.closest("[data-item-id]");
    if (!dropTarget) return;
    const contents = await this.item.system.contents, target = contents.get(dropTarget.dataset.itemId);
    if (item.id === target.id) return;
    const siblings = [];
    for (const el of Array.from(dropTarget.parentElement.children))
      if (el instanceof HTMLElement) {
        const siblingId = el.dataset.itemId;
        siblingId && siblingId !== item.id && siblings.push(contents.get(siblingId));
      }
    const updateData = SortingHelpers.performIntegerSort(item, { target, siblings }).map((u2) => {
      const update2 = u2.update;
      return update2._id = u2.target.id, update2;
    });
    Item.updateDocuments(updateData, { pack: this.item.pack, parent: this.item.actor });
  }
}
function preventNewlines(node) {
  node.addEventListener("keypress", (ev) => {
    if (ev.key === "Enter")
      return ev.preventDefault(), !1;
  }), node.addEventListener("change", (ev) => {
    const currentTarget = ev.currentTarget;
    (currentTarget instanceof HTMLInputElement || currentTarget instanceof HTMLTextAreaElement) && (currentTarget.value = currentTarget.value?.replaceAll(`
`, ""));
  });
}
__name(preventNewlines, "preventNewlines");
var on_click = /* @__PURE__ */ __name((ev, selectTheme) => selectTheme(CONSTANTS.THEME_ID_DEFAULT_LIGHT), "on_click"), on_click_1 = /* @__PURE__ */ __name((ev, selectTheme) => selectTheme(CONSTANTS.THEME_ID_DEFAULT_DARK), "on_click_1"), on_click_2 = /* @__PURE__ */ __name((_, inverse) => set(inverse, !1), "on_click_2"), on_click_3 = /* @__PURE__ */ __name((__1, inverse) => set(inverse, !0), "on_click_3"), root_2 = /* @__PURE__ */ template('<div class="document-name"> </div>'), root_3 = /* @__PURE__ */ template(
  `<label><input type="radio" name="icon-menu-test" value="1"> Test Option
              1</label> <label><input type="radio" name="icon-menu-test" value="2"> Test Option
              2</label>`,
  1
), root_4 = /* @__PURE__ */ template('<i class="fas fa-hand"></i>'), root_6 = /* @__PURE__ */ template('<i class="fas fa-hand"></i>'), root_8 = /* @__PURE__ */ template('<i class="fas fa-hand"></i>'), root_10 = /* @__PURE__ */ template('<i class="fas fa-hand"></i>'), root_11 = /* @__PURE__ */ template('<span class="hide-before-850 svelte-bjx61y">Action</span> <span class="show-before-850 svelte-bjx61y">A</span>', 1), root_20 = /* @__PURE__ */ template('<i class="fas fa-broom"></i> Tidy', 1), root_21 = /* @__PURE__ */ template('<i class="fas fa-broom"></i> Tidy', 1), root_22 = /* @__PURE__ */ template('<i class="fas fa-broom"></i> Tidy', 1), root_23 = /* @__PURE__ */ template('<i class="fas fa-broom"></i> Tidy', 1), root_24 = /* @__PURE__ */ template("<!> Tidy", 1), root_25 = /* @__PURE__ */ template("<!> Tidy", 1), root_26 = /* @__PURE__ */ template("<!> Tidy", 1), root_27 = /* @__PURE__ */ template("<!> Tidy", 1), root = /* @__PURE__ */ template('<aside class="sidebar inverse"><div class="sidebar-contents svelte-bjx61y"><h4>Theme</h4> <div style="display: flex; flex-direction: column; gap: 0.25rem"><label for="light-mode-toggle"><input id="light-mode-toggle" type="radio" name="theme-selector"> </label> <label for="dark-mode-toggle"><input id="dark-mode-toggle" type="radio" name="theme-selector"> </label></div> <h4>Inversion</h4> <div style="display: flex; flex-direction: column; gap: 0.25rem"><label for="default-mode-toggle"><input id="default-mode-toggle" type="radio" name="inversion-mode-selector"> Default</label> <label for="inverse-mode-toggle"><input id="inverse-mode-toggle" type="radio" name="inversion-mode-selector"> Inverse</label></div></div></aside> <div class="item-content"><div class="controls-gallery svelte-bjx61y"><div class="span-all svelte-bjx61y"><!></div> <div class="span-all svelte-bjx61y"><!></div> <div class="span-all svelte-bjx61y"><!></div> <div class="svelte-bjx61y"><!></div> <fieldset class="vertical-gallery svelte-bjx61y"><legend class="svelte-bjx61y">Button / Attention</legend> Anchor <a class="button active"><i class="fas fa-edit"></i> Edit Details</a> Button <button class="active"><i class="fas fa-edit"></i> Edit Details</button></fieldset> <fieldset class="vertical-gallery svelte-bjx61y"><legend class="svelte-bjx61y">Button / Default</legend> Anchor <a class="button"><i class="fas fa-edit"></i> Edit Details</a> Button <button><i class="fas fa-edit"></i> Edit Details</button></fieldset> <fieldset style="display: flex; gap: 0.5rem;" class="svelte-bjx61y"><legend class="svelte-bjx61y">Button / Icon Only</legend> <div class="vertical-gallery svelte-bjx61y">Anchors <a class="button icon-button"><i class="fas fa-hand"></i></a> <a class="button icon-button active"><i class="fas fa-hand"></i></a> <a class="button icon-button disabled"><i class="fas fa-hand"></i></a> <a class="button icon-button active disabled"><i class="fas fa-hand"></i></a></div> <div class="vertical-gallery svelte-bjx61y">Buttons <button class="icon-button"><i class="fas fa-hand"></i></button> <button class="icon-button active"><i class="fas fa-hand"></i></button> <button class="icon-button disabled"><i class="fas fa-hand"></i></button> <button class="icon-button active disabled"><i class="fas fa-hand"></i></button></div></fieldset> <fieldset class="svelte-bjx61y"><legend class="svelte-bjx61y">Button / Icon Only Menu</legend> <div class="wrapped-gallery svelte-bjx61y"><!> <!> <!> <!></div></fieldset> <fieldset class="svelte-bjx61y"><legend class="svelte-bjx61y">Button / Edit Description</legend> <a class="button icon-button"><i class="fa-solid fa-feather"></i></a> <a class="button icon-button disabled"><i class="fa-solid fa-feather"></i></a></fieldset> <fieldset class="span-all svelte-bjx61y"><legend class="svelte-bjx61y">Button / Group</legend> <div><span>Change the sheet size to see the options show/hide dynamically.</span></div> <div class="button-group"><!> <!> <!> <!> <!></div></fieldset> <fieldset class="wrapped-gallery svelte-bjx61y"><legend class="svelte-bjx61y">Button / Toggle</legend> <div class="vertical-gallery svelte-bjx61y"><!> <!> <!> <!></div> <div class="vertical-gallery svelte-bjx61y"><!> <!> <!> <!></div> <div class="vertical-gallery svelte-bjx61y"><!> <!> <!> <!></div></fieldset> <fieldset class="svelte-bjx61y"><legend class="svelte-bjx61y">Category / Spell context icon</legend></fieldset> <fieldset class="svelte-bjx61y"><legend class="svelte-bjx61y">Data / Spell Components</legend> <ul class="unlist spell-components"><li class="spell-component">V</li> <li class="spell-component">S</li> <li class="spell-component">M</li> <li class="spell-component-special">R</li> <li class="spell-component-special">C</li></ul></fieldset> <fieldset class="svelte-bjx61y"><legend class="svelte-bjx61y">Data / Time</legend> <div class="time"><div class="title">Action</div> <div class="subtitle">Ritual</div></div></fieldset> <fieldset class="svelte-bjx61y"><legend class="svelte-bjx61y">Data / Uses</legend></fieldset> <fieldset class="svelte-bjx61y"><legend class="svelte-bjx61y">Enricher</legend></fieldset> <fieldset class="svelte-bjx61y"><legend class="svelte-bjx61y">Field</legend></fieldset> <fieldset class="svelte-bjx61y"><legend class="svelte-bjx61y">Filigree box</legend></fieldset> <fieldset class="svelte-bjx61y"><legend class="svelte-bjx61y">Input / Checkbox</legend> <label for="checkbox-test-1" class="checkbox"><input type="checkbox"> Property</label> <label for="checkbox-test-2" class="checkbox"><input type="checkbox" checked> Property</label> <label for="checkbox-test-3" class="checkbox"><input type="checkbox" disabled> Property</label> <label for="checkbox-test-4" class="checkbox"><input type="checkbox" checked disabled> Property</label></fieldset> <fieldset class="vertical-gallery svelte-bjx61y"><legend class="svelte-bjx61y">Input / Radio</legend> <ul class="unlist"><li><input type="radio" name="test" id="test-1"> <label for="test-1">Property</label></li> <li><input type="radio" name="test" id="test-2"> <label for="test-2">Property</label></li> <li><input type="radio" name="test" id="test-2" disabled> <label for="test-3">Property <br>with line breaks</label></li></ul></fieldset> <fieldset class="vertical-gallery svelte-bjx61y"><legend class="svelte-bjx61y">Input / Search</legend> <!> <!></fieldset> <fieldset class="vertical-gallery svelte-bjx61y"><legend class="svelte-bjx61y">Input / Select</legend> <select><option></option><option>Attunement Required</option><option>Attunement Optional</option><option>No Attunement Required</option><option>Absolutely Cursed 💀</option></select> <select><option></option><option selected>Attunement Required</option><option>Attunement Optional</option><option>No Attunement Required</option><option>Absolutely Cursed 💀</option></select> <select disabled><option></option><option>Attunement Required</option><option>Attunement Optional</option><option>No Attunement Required</option><option>Absolutely Cursed 💀</option></select> <select disabled><option></option><option selected>Attunement Required</option><option>Attunement Optional</option><option>No Attunement Required</option><option>Absolutely Cursed 💀</option></select></fieldset> <fieldset class="svelte-bjx61y"><legend class="svelte-bjx61y">Input / Switch - Field Toggle</legend> <!> <!></fieldset> <fieldset class="vertical-gallery svelte-bjx61y"><legend class="svelte-bjx61y">Input / Text</legend> <input type="text" value="Value" placeholder="Aha! You found me! The hidden placeholder!"> <input type="text" placeholder="A placeholder here"> <input type="text" value="Value" placeholder="Aha! You found me! The hidden placeholder!" disabled> <input type="text" placeholder="A placeholder here" disabled></fieldset> <fieldset class="vertical-gallery svelte-bjx61y"><legend class="svelte-bjx61y">Input / Text with Icon</legend> <div class="input-group"><i class="fa-solid fa-cube"></i> <input type="text" value="Value"></div> <div class="input-group"><i class="fa-solid fa-cube"></i> <input type="text" value="Value" disabled></div></fieldset> <fieldset class="vertical-gallery svelte-bjx61y"><legend class="svelte-bjx61y">Input / Text with Label</legend> <div class="input-group"><i class="currency gp" aria-label="gp"></i> <input type="text" value="Value"> <span>GP</span></div> <div class="input-group"><i class="currency gp" aria-label="gp"></i> <input type="text" value="Value" disabled> <span>GP</span></div> <div class="input-group right"><i class="currency gp" aria-label="gp"></i> <input type="text" value="Value"> <span>GP</span></div> <div class="input-group right"><i class="currency gp" aria-label="gp"></i> <input type="text" value="Value" disabled> <span>GP</span></div></fieldset> <fieldset class="svelte-bjx61y"><legend class="svelte-bjx61y">Pill</legend> <ul class="pills unlist"><li class="pill">Label</li> <li class="pill negative">Label <span><span class="lighter">-</span>1</span></li> <li class="pill positive">Label <span><span class="lighter">+</span>1</span></li></ul></fieldset> <fieldset class="svelte-bjx61y"><legend class="svelte-bjx61y">Pill / Readonly</legend> <ul class="pills"><li class="pill">Panache <span><span class="lighter">+</span>10</span></li> <li class="pill"><i class="fas fa-broom"></i> Tidy 5e</li> <li class="pill"><!> Big Concentrate</li></ul></fieldset> <fieldset class="svelte-bjx61y"><legend class="svelte-bjx61y">Pill / Switch</legend> Fontawesome <!> SVG <!></fieldset> <fieldset style="max-width: 75rem;" class="svelte-bjx61y"><legend class="svelte-bjx61y">Form Example</legend> <div class="form-group"><label>Spell Level</label> <div class="form-fields"><select><option>Cantrip</option></select></div></div> <div class="form-group"><label>Spell School</label> <div class="form-fields"><select><option>Abjuration</option></select></div></div> <div class="form-group stacked checkbox-grid checkbox-grid-3"><label>Spell Components</label> <div class="form-fields"><label class="checkbox"><input type="checkbox"> <span>Property</span></label> <label class="checkbox"><input type="checkbox"> <span>Property</span></label> <label class="checkbox"><input type="checkbox"> <span>Property</span></label> <label class="checkbox"><input type="checkbox"> <span>Property</span></label> <label class="checkbox"><input type="checkbox"> <span>Property</span></label> <label class="checkbox"><input type="checkbox"> <span>Property</span></label> <label class="checkbox"><input type="checkbox"> <span>Property</span></label> <label class="checkbox"><input type="checkbox"> <span>Property</span></label> <label class="checkbox"><input type="checkbox"> <span>Property</span></label> <label class="checkbox"><input type="checkbox"> <span>Property</span></label> <label class="checkbox"><input type="checkbox"> <span>Property</span></label> <label class="checkbox"><input type="checkbox"> <span>Property</span></label> <label class="checkbox"><input type="checkbox"> <span>Property</span></label></div></div> <div class="form-group split-group"><label>Spellcasting Materials</label> <div class="form-fields"><div class="form-group label-top"><label>Supply</label> <div class="form-fields"><input type="number" value="0" min="0" step="any" placeholder="0"></div></div> <div class="form-group label-top"><label class="label-icon currency gp" aria-label="Cost (GP)">Cost</label> <div class="form-fields"><input type="number" value="0" min="0" step="any" placeholder="—"></div></div> <div class="form-group checkbox"><div class="form-fields"><input type="checkbox"></div> <label>Consumed</label></div></div></div> <div class="form-group"><label role="presentation"></label> <div class="form-fields"><textarea rows="2" value="A tiny ball of bat guano and sulfur" class="full-width" aria-multiline="false"></textarea></div></div> <div class="form-group"><label>Spell Preparation Mode</label> <div class="form-fields"><input type="checkbox"> <select><option></option></select></div></div> <div class="form-group split-group"><label>Casting Time</label> <div class="form-fields"><div class="form-group label-top"><label>Cost</label> <div class="form-fields"><select name="system.activation.type"><optgroup label="Standard"><option>Action</option><option>Bonus Action</option><option>Reaction</option></optgroup><optgroup label="Time"><option>Minutes</option><option>Hours</option><option>Days</option></optgroup><optgroup label="Monster"><option>Legendary Action</option><option>Mythic Action</option><option>Lair Action</option></optgroup><optgroup label="Vehicle"><option>Crew Action</option></optgroup><option>Special</option><option>None</option></select></div></div></div> <input type="text" name="system.activation.condition" value="" placeholder="Activation Condition" class="full-width"></div> <div class="form-group split-group"><label>Range</label> <div class="form-fields"><div class="form-group label-top"><label>Value</label> <div class="form-fields"><input type="text" name="system.range.value" value="150"></div></div> <div class="form-group label-top"><label>Units</label> <div class="form-fields"><select name="system.range.units"><option>Self</option><option>Touch</option><option>Special</option><option>Any</option><optgroup label="Distance"><option>Feet</option><option>Miles</option><option>Meters</option><option>Kilometers</option></optgroup></select></div></div></div> <input type="text" name="system.range.special" value="" placeholder="Special Range" class="full-width"></div> <div class="form-group split-group"><label>Duration</label> <div class="form-fields"><div class="form-group label-top"><label>Time</label> <div class="form-fields"><select><option>Instantaneous</option><option>Special</option><optgroup label="Time"><option>Turns</option> <option>Rounds</option> <option>Minutes</option> <option>Hours</option> <option>Days</option> <option>Months</option> <option>Years</option></optgroup><optgroup label="Permanent"><option>Until Dispelled</option> <option>Until Dispelled or Triggered</option> <option>Permanent</option></optgroup></select></div></div></div></div> <div class="form-group split-group"><label>Type</label> <div class="form-fields"><div class="form-group label-top"><label>Amount</label> <div class="form-fields"><input type="text" value="" placeholder="Every"></div></div> <div class="form-group label-top"><label>Type</label> <div class="form-fields"><select><option></option><option>Self</option><option>Ally</option><option>Enemy</option><option>Creature</option><option>Object</option><option>Space</option><option>Creature or Object</option><option>Any</option><option>Willing Creature</option></select></div></div></div></div> <div class="form-group"><label>Choose Targets</label> <div class="form-fields"><span style="display: flex; align-items: center;"><input type="checkbox"></span></div> <div class="form-group" style="flex-basis: 100%"><label role="presentation"></label> <p class="hint" style="flex-basis: auto; flex: 3;">When targeting an area, can the user choose who it affects?</p></div></div> <div class="form-group"><label>Shape</label> <div class="form-fields"><select><option></option><option>Cone</option><option>Cube</option><option>Cylinder</option><option>Emanation</option><option>Line</option><option>Sphere</option><hr><option>Circle</option><option>Square</option><option>Wall</option></select></div></div> <div class="form-group split-group"><label>Dimensions</label> <div class="form-fields"><div class="form-group label-top"><label>Radius</label> <div class="form-fields"><input type="text" value="20"></div></div> <div class="form-group label-top"><label>Units</label> <div class="form-fields"><select><option></option><option>Feet</option><option>Miles</option><option>Meters</option><option>Kilometers</option></select></div></div></div></div> <div class="form-group split-group"><label>Multiple</label> <div class="form-fields"><div class="form-group label-top"><label>Amount</label> <div class="form-fields"><input type="text" value="" placeholder="1"></div></div></div></div> <div class="form-group split-group"><label>Limited Uses</label> <div class="form-fields"><div class="form-group label-top"><label>Spent</label> <div class="form-fields"><input type="number" value="0" min="0" step="1"></div></div> <div class="form-group label-top"><label>Max</label> <div class="form-fields"><input type="text" value=""></div></div></div></div> <div class="form-group custom-section"><label for="i-o8WdxHamTy4ZvN3n-tidy-5e-custom-section">Section</label> <div class="form-fields"><input type="text" id="i-o8WdxHamTy4ZvN3n-tidy-5e-custom-section" value=""></div></div> <div class="form-group custom-action-section"><label for="i-o8WdxHamTy4ZvN3n-tidy-5e-custom-action-section">Action Section</label> <div class="form-fields"><input type="text" id="i-o8WdxHamTy4ZvN3n-tidy-5e-custom-action-section" value=""></div></div></fieldset></div></div>', 1);
function ItemDebugSheet($$anchor, $$props) {
  push($$props, !0);
  let context = /* @__PURE__ */ derived(getSheetContext), theme = /* @__PURE__ */ derived(() => getThemeOrDefault(settings.value.colorScheme)), inverse = state(!1), selectedTabId = state("hallo-tab");
  function selectTheme(themeId) {
    game.settings.set(CONSTANTS.MODULE_ID, "colorScheme", themeId);
  }
  __name(selectTheme, "selectTheme");
  var fragment = root(), aside = first_child(fragment), div = child(aside), div_1 = sibling(child(div), 2), label = child(div_1), input = child(label);
  input.__click = [on_click, selectTheme];
  var text$1 = sibling(input);
  text$1.nodeValue = ` ${game.i18n.localize("TIDY5E.Settings.SheetTheme.light") ?? ""}`;
  var label_1 = sibling(label, 2), input_1 = child(label_1);
  input_1.__click = [on_click_1, selectTheme];
  var text_1 = sibling(input_1);
  text_1.nodeValue = ` ${game.i18n.localize("TIDY5E.Settings.SheetTheme.dark") ?? ""}`;
  var div_2 = sibling(div_1, 4), label_2 = child(div_2), input_2 = child(label_2);
  input_2.__click = [on_click_2, inverse];
  var label_3 = sibling(label_2, 2), input_3 = child(label_3);
  input_3.__click = [on_click_3, inverse];
  var div_3 = sibling(aside, 2), div_4 = child(div_3), div_5 = child(div_4), node = child(div_5);
  {
    var consequent = /* @__PURE__ */ __name(($$anchor2) => {
      TextInput($$anchor2, {
        field: "name",
        get document() {
          return get(context).item;
        },
        get value() {
          return get(context).item.name;
        },
        class: "document-name"
      });
    }, "consequent"), alternate = /* @__PURE__ */ __name(($$anchor2) => {
      var div_6 = root_2(), text_2 = child(div_6);
      template_effect(() => set_text(text_2, get(context).item.name ?? "")), append($$anchor2, div_6);
    }, "alternate");
    if_block(node, ($$render) => {
      get(context).unlocked ? $$render(consequent) : $$render(alternate, !1);
    });
  }
  var div_7 = sibling(div_5, 2), node_1 = child(div_7);
  Tabs(node_1, {
    get tabs() {
      return get(context).tabs;
    },
    cssClass: "item-tabs",
    get sheet() {
      return get(context).item.sheet;
    },
    get selectedTabId() {
      return get(selectedTabId);
    },
    set selectedTabId($$value) {
      set(selectedTabId, proxy($$value));
    }
  });
  var div_8 = sibling(div_7, 2), node_2 = child(div_8);
  TabContents(node_2, {
    get tabs() {
      return get(context).tabs;
    },
    get selectedTabId() {
      return get(selectedTabId);
    }
  });
  var div_9 = sibling(div_8, 2), node_3 = child(div_9);
  ItemDescriptions(node_3, {
    get document() {
      return get(context).document;
    },
    get itemDescriptions() {
      return get(context).itemDescriptions;
    }
  });
  var fieldset = sibling(div_9, 8), div_10 = sibling(child(fieldset), 2), node_4 = child(div_10);
  ButtonWithOptionPanel(node_4, {
    class: "icon-button",
    options: /* @__PURE__ */ __name(($$anchor2) => {
      var fragment_2 = root_3();
      append($$anchor2, fragment_2);
    }, "options"),
    children: /* @__PURE__ */ __name(($$anchor2, $$slotProps) => {
      var i2 = root_4();
      append($$anchor2, i2);
    }, "children"),
    $$slots: { options: !0, default: !0 }
  });
  var node_5 = sibling(node_4, 2);
  ButtonWithOptionPanel(node_5, {
    class: "icon-button",
    active: !0,
    options: /* @__PURE__ */ __name(($$anchor2) => {
      var text_3 = text("O hai 🙋‍♀️");
      append($$anchor2, text_3);
    }, "options"),
    children: /* @__PURE__ */ __name(($$anchor2, $$slotProps) => {
      var i_1 = root_6();
      append($$anchor2, i_1);
    }, "children"),
    $$slots: { options: !0, default: !0 }
  });
  var node_6 = sibling(node_5, 2);
  ButtonWithOptionPanel(node_6, {
    class: "icon-button",
    disabled: !0,
    options: /* @__PURE__ */ __name(($$anchor2) => {
      var text_4 = text("O hai 🙋‍♀️");
      append($$anchor2, text_4);
    }, "options"),
    children: /* @__PURE__ */ __name(($$anchor2, $$slotProps) => {
      var i_2 = root_8();
      append($$anchor2, i_2);
    }, "children"),
    $$slots: { options: !0, default: !0 }
  });
  var node_7 = sibling(node_6, 2);
  ButtonWithOptionPanel(node_7, {
    class: "icon-button active",
    disabled: !0,
    active: !0,
    options: /* @__PURE__ */ __name(($$anchor2) => {
      var text_5 = text("O hai 🙋‍♀️");
      append($$anchor2, text_5);
    }, "options"),
    children: /* @__PURE__ */ __name(($$anchor2, $$slotProps) => {
      var i_3 = root_10();
      append($$anchor2, i_3);
    }, "children"),
    $$slots: { options: !0, default: !0 }
  });
  var fieldset_1 = sibling(fieldset, 4), div_11 = sibling(child(fieldset_1), 4), node_8 = child(div_11);
  ToggleButton(node_8, {
    children: /* @__PURE__ */ __name(($$anchor2, $$slotProps) => {
      var fragment_3 = root_11();
      append($$anchor2, fragment_3);
    }, "children"),
    $$slots: { default: !0 }
  });
  var node_9 = sibling(node_8, 2);
  ToggleButton(node_9, {
    checked: !0,
    children: /* @__PURE__ */ __name(($$anchor2, $$slotProps) => {
      var text_6 = text("Bonus Action");
      append($$anchor2, text_6);
    }, "children"),
    $$slots: { default: !0 }
  });
  var node_10 = sibling(node_9, 2);
  ToggleButton(node_10, {
    class: "hide-before-1000",
    children: /* @__PURE__ */ __name(($$anchor2, $$slotProps) => {
      var text_7 = text("Reaction");
      append($$anchor2, text_7);
    }, "children"),
    $$slots: { default: !0 }
  });
  var node_11 = sibling(node_10, 2);
  ToggleButton(node_11, {
    class: "hide-before-950",
    children: /* @__PURE__ */ __name(($$anchor2, $$slotProps) => {
      var text_8 = text("Can Use");
      append($$anchor2, text_8);
    }, "children"),
    $$slots: { default: !0 }
  });
  var node_12 = sibling(node_11, 2);
  ToggleButton(node_12, {
    class: "hide-before-900",
    children: /* @__PURE__ */ __name(($$anchor2, $$slotProps) => {
      var text_9 = text("Magical");
      append($$anchor2, text_9);
    }, "children"),
    $$slots: { default: !0 }
  });
  var fieldset_2 = sibling(fieldset_1, 2), div_12 = sibling(child(fieldset_2), 2), node_13 = child(div_12);
  ToggleButton(node_13, {
    checked: !1,
    children: /* @__PURE__ */ __name(($$anchor2, $$slotProps) => {
      var text_10 = text("Tidy");
      append($$anchor2, text_10);
    }, "children"),
    $$slots: { default: !0 }
  });
  var node_14 = sibling(node_13, 2);
  ToggleButton(node_14, {
    checked: !0,
    children: /* @__PURE__ */ __name(($$anchor2, $$slotProps) => {
      var text_11 = text("Tidy");
      append($$anchor2, text_11);
    }, "children"),
    $$slots: { default: !0 }
  });
  var node_15 = sibling(node_14, 2);
  ToggleButton(node_15, {
    checked: !1,
    disabled: !0,
    children: /* @__PURE__ */ __name(($$anchor2, $$slotProps) => {
      var text_12 = text("Tidy");
      append($$anchor2, text_12);
    }, "children"),
    $$slots: { default: !0 }
  });
  var node_16 = sibling(node_15, 2);
  ToggleButton(node_16, {
    checked: !0,
    disabled: !0,
    children: /* @__PURE__ */ __name(($$anchor2, $$slotProps) => {
      var text_13 = text("Tidy");
      append($$anchor2, text_13);
    }, "children"),
    $$slots: { default: !0 }
  });
  var div_13 = sibling(div_12, 2), node_17 = child(div_13);
  ToggleButton(node_17, {
    checked: !1,
    children: /* @__PURE__ */ __name(($$anchor2, $$slotProps) => {
      var fragment_4 = root_20();
      append($$anchor2, fragment_4);
    }, "children"),
    $$slots: { default: !0 }
  });
  var node_18 = sibling(node_17, 2);
  ToggleButton(node_18, {
    checked: !0,
    children: /* @__PURE__ */ __name(($$anchor2, $$slotProps) => {
      var fragment_5 = root_21();
      append($$anchor2, fragment_5);
    }, "children"),
    $$slots: { default: !0 }
  });
  var node_19 = sibling(node_18, 2);
  ToggleButton(node_19, {
    checked: !1,
    disabled: !0,
    children: /* @__PURE__ */ __name(($$anchor2, $$slotProps) => {
      var fragment_6 = root_22();
      append($$anchor2, fragment_6);
    }, "children"),
    $$slots: { default: !0 }
  });
  var node_20 = sibling(node_19, 2);
  ToggleButton(node_20, {
    checked: !0,
    disabled: !0,
    children: /* @__PURE__ */ __name(($$anchor2, $$slotProps) => {
      var fragment_7 = root_23();
      append($$anchor2, fragment_7);
    }, "children"),
    $$slots: { default: !0 }
  });
  var div_14 = sibling(div_13, 2), node_21 = child(div_14);
  ToggleButton(node_21, {
    checked: !1,
    children: /* @__PURE__ */ __name(($$anchor2, $$slotProps) => {
      var fragment_8 = root_24(), node_22 = first_child(fragment_8);
      Dnd5eIcon(node_22, {
        src: "systems/dnd5e/icons/svg/statuses/concentrating.svg"
      }), append($$anchor2, fragment_8);
    }, "children"),
    $$slots: { default: !0 }
  });
  var node_23 = sibling(node_21, 2);
  ToggleButton(node_23, {
    checked: !0,
    children: /* @__PURE__ */ __name(($$anchor2, $$slotProps) => {
      var fragment_9 = root_25(), node_24 = first_child(fragment_9);
      Dnd5eIcon(node_24, {
        src: "systems/dnd5e/icons/svg/statuses/concentrating.svg"
      }), append($$anchor2, fragment_9);
    }, "children"),
    $$slots: { default: !0 }
  });
  var node_25 = sibling(node_23, 2);
  ToggleButton(node_25, {
    checked: !1,
    disabled: !0,
    children: /* @__PURE__ */ __name(($$anchor2, $$slotProps) => {
      var fragment_10 = root_26(), node_26 = first_child(fragment_10);
      Dnd5eIcon(node_26, {
        src: "systems/dnd5e/icons/svg/statuses/concentrating.svg"
      }), append($$anchor2, fragment_10);
    }, "children"),
    $$slots: { default: !0 }
  });
  var node_27 = sibling(node_25, 2);
  ToggleButton(node_27, {
    checked: !0,
    disabled: !0,
    children: /* @__PURE__ */ __name(($$anchor2, $$slotProps) => {
      var fragment_11 = root_27(), node_28 = first_child(fragment_11);
      Dnd5eIcon(node_28, {
        src: "systems/dnd5e/icons/svg/statuses/concentrating.svg"
      }), append($$anchor2, fragment_11);
    }, "children"),
    $$slots: { default: !0 }
  });
  var fieldset_3 = sibling(fieldset_2, 18), ul = sibling(child(fieldset_3), 2), li = child(ul), input_4 = child(li);
  set_checked(input_4, !0);
  var fieldset_4 = sibling(fieldset_3, 2), node_29 = sibling(child(fieldset_4), 2);
  Search(node_29, {});
  var node_30 = sibling(node_29, 2);
  Search(node_30, { disabled: !0 });
  var fieldset_5 = sibling(fieldset_4, 2), select = sibling(child(fieldset_5), 2), option = child(select);
  option.value = ((option.__value = "") == null, "");
  var option_1 = sibling(option);
  option_1.value = (option_1.__value = "1") == null ? "" : "1";
  var option_2 = sibling(option_1);
  option_2.value = (option_2.__value = "2") == null ? "" : "2";
  var option_3 = sibling(option_2);
  option_3.value = (option_3.__value = "3") == null ? "" : "3";
  var option_4 = sibling(option_3);
  option_4.value = (option_4.__value = "4") == null ? "" : "4";
  var select_1 = sibling(select, 2), option_5 = child(select_1);
  option_5.value = ((option_5.__value = "") == null, "");
  var option_6 = sibling(option_5);
  option_6.value = (option_6.__value = "1") == null ? "" : "1";
  var option_7 = sibling(option_6);
  option_7.value = (option_7.__value = "2") == null ? "" : "2";
  var option_8 = sibling(option_7);
  option_8.value = (option_8.__value = "3") == null ? "" : "3";
  var option_9 = sibling(option_8);
  option_9.value = (option_9.__value = "4") == null ? "" : "4";
  var select_2 = sibling(select_1, 2), option_10 = child(select_2);
  option_10.value = ((option_10.__value = "") == null, "");
  var option_11 = sibling(option_10);
  option_11.value = (option_11.__value = "1") == null ? "" : "1";
  var option_12 = sibling(option_11);
  option_12.value = (option_12.__value = "2") == null ? "" : "2";
  var option_13 = sibling(option_12);
  option_13.value = (option_13.__value = "3") == null ? "" : "3";
  var option_14 = sibling(option_13);
  option_14.value = (option_14.__value = "4") == null ? "" : "4";
  var select_3 = sibling(select_2, 2), option_15 = child(select_3);
  option_15.value = ((option_15.__value = "") == null, "");
  var option_16 = sibling(option_15);
  option_16.value = (option_16.__value = "1") == null ? "" : "1";
  var option_17 = sibling(option_16);
  option_17.value = (option_17.__value = "2") == null ? "" : "2";
  var option_18 = sibling(option_17);
  option_18.value = (option_18.__value = "3") == null ? "" : "3";
  var option_19 = sibling(option_18);
  option_19.value = (option_19.__value = "4") == null ? "" : "4";
  var fieldset_6 = sibling(fieldset_5, 2), node_31 = sibling(child(fieldset_6), 2);
  FieldToggle(node_31, {});
  var node_32 = sibling(node_31, 2);
  FieldToggle(node_32, { checked: !0 });
  var fieldset_7 = sibling(fieldset_6, 10), ul_1 = sibling(child(fieldset_7), 2), li_1 = sibling(child(ul_1), 4), node_33 = child(li_1);
  Dnd5eIcon(node_33, {
    src: "systems/dnd5e/icons/svg/statuses/concentrating.svg"
  });
  var fieldset_8 = sibling(fieldset_7, 2), node_34 = sibling(child(fieldset_8), 2);
  PillSwitch(node_34, {
    get checked() {
      return get(context).system.equipped;
    },
    checkedIconClass: "fas fa-hand-fist equip-icon fa-fw",
    uncheckedIconClass: "far fa-hand fa-fw",
    onchange: /* @__PURE__ */ __name((ev) => console.log(get(context).item.update({ "system.equipped": ev.currentTarget.checked })), "onchange"),
    children: /* @__PURE__ */ __name(($$anchor2, $$slotProps) => {
      var text_14 = text("Equipped");
      append($$anchor2, text_14);
    }, "children"),
    $$slots: { default: !0 }
  });
  var node_35 = sibling(node_34, 2);
  PillSwitch(node_35, {
    get checked() {
      return get(context).system.attuned;
    },
    checkedSvgSrc: "systems/dnd5e/icons/svg/statuses/concentrating.svg",
    uncheckedSvgSrc: "systems/dnd5e/icons/svg/statuses/concentrating.svg",
    onchange: /* @__PURE__ */ __name((ev) => console.log(get(context).item.update({ "system.attuned": ev.currentTarget.checked })), "onchange"),
    children: /* @__PURE__ */ __name(($$anchor2, $$slotProps) => {
      var text_15 = text("Attuned");
      append($$anchor2, text_15);
    }, "children"),
    $$slots: { default: !0 }
  });
  var fieldset_9 = sibling(fieldset_8, 2), div_15 = sibling(child(fieldset_9), 10), div_16 = sibling(child(div_15), 2), textarea = child(div_16);
  action(textarea, ($$node) => preventNewlines?.($$node));
  var div_17 = sibling(div_15, 4), div_18 = sibling(child(div_17), 2), div_19 = child(div_18), div_20 = sibling(child(div_19), 2), select_4 = child(div_20), optgroup = child(select_4), option_20 = child(optgroup);
  option_20.value = (option_20.__value = "action") == null ? "" : "action";
  var option_21 = sibling(option_20);
  option_21.value = (option_21.__value = "bonus") == null ? "" : "bonus";
  var option_22 = sibling(option_21);
  option_22.value = (option_22.__value = "reaction") == null ? "" : "reaction";
  var optgroup_1 = sibling(optgroup), option_23 = child(optgroup_1);
  option_23.value = (option_23.__value = "minute") == null ? "" : "minute";
  var option_24 = sibling(option_23);
  option_24.value = (option_24.__value = "hour") == null ? "" : "hour";
  var option_25 = sibling(option_24);
  option_25.value = (option_25.__value = "day") == null ? "" : "day";
  var optgroup_2 = sibling(optgroup_1), option_26 = child(optgroup_2);
  option_26.value = (option_26.__value = "legendary") == null ? "" : "legendary";
  var option_27 = sibling(option_26);
  option_27.value = (option_27.__value = "mythic") == null ? "" : "mythic";
  var option_28 = sibling(option_27);
  option_28.value = (option_28.__value = "lair") == null ? "" : "lair";
  var optgroup_3 = sibling(optgroup_2), option_29 = child(optgroup_3);
  option_29.value = (option_29.__value = "crew") == null ? "" : "crew";
  var option_30 = sibling(optgroup_3);
  option_30.value = (option_30.__value = "special") == null ? "" : "special";
  var option_31 = sibling(option_30);
  option_31.value = ((option_31.__value = "") == null, "");
  var div_21 = sibling(div_17, 2), div_22 = sibling(child(div_21), 2), div_23 = sibling(child(div_22), 2), div_24 = sibling(child(div_23), 2), select_5 = child(div_24), option_32 = child(select_5);
  option_32.value = (option_32.__value = "self") == null ? "" : "self";
  var option_33 = sibling(option_32);
  option_33.value = (option_33.__value = "touch") == null ? "" : "touch";
  var option_34 = sibling(option_33);
  option_34.value = (option_34.__value = "spec") == null ? "" : "spec";
  var option_35 = sibling(option_34);
  option_35.value = (option_35.__value = "any") == null ? "" : "any";
  var optgroup_4 = sibling(option_35), option_36 = child(optgroup_4);
  option_36.value = (option_36.__value = "ft") == null ? "" : "ft";
  var option_37 = sibling(option_36);
  option_37.value = (option_37.__value = "mi") == null ? "" : "mi";
  var option_38 = sibling(option_37);
  option_38.value = (option_38.__value = "m") == null ? "" : "m";
  var option_39 = sibling(option_38);
  option_39.value = (option_39.__value = "km") == null ? "" : "km";
  var div_25 = sibling(div_21, 2), div_26 = sibling(child(div_25), 2), div_27 = child(div_26), div_28 = sibling(child(div_27), 2), select_6 = child(div_28), option_40 = child(select_6);
  option_40.value = (option_40.__value = "inst") == null ? "" : "inst";
  var option_41 = sibling(option_40);
  option_41.value = (option_41.__value = "spec") == null ? "" : "spec";
  var optgroup_5 = sibling(option_41), option_42 = child(optgroup_5);
  option_42.value = (option_42.__value = "turn") == null ? "" : "turn";
  var option_43 = sibling(option_42, 2);
  option_43.value = (option_43.__value = "round") == null ? "" : "round";
  var option_44 = sibling(option_43, 2);
  option_44.value = (option_44.__value = "minute") == null ? "" : "minute";
  var option_45 = sibling(option_44, 2);
  option_45.value = (option_45.__value = "hour") == null ? "" : "hour";
  var option_46 = sibling(option_45, 2);
  option_46.value = (option_46.__value = "day") == null ? "" : "day";
  var option_47 = sibling(option_46, 2);
  option_47.value = (option_47.__value = "month") == null ? "" : "month";
  var option_48 = sibling(option_47, 2);
  option_48.value = (option_48.__value = "year") == null ? "" : "year";
  var optgroup_6 = sibling(optgroup_5), option_49 = child(optgroup_6);
  option_49.value = (option_49.__value = "disp") == null ? "" : "disp";
  var option_50 = sibling(option_49, 2);
  option_50.value = (option_50.__value = "dstr") == null ? "" : "dstr";
  var option_51 = sibling(option_50, 2);
  option_51.value = (option_51.__value = "perm") == null ? "" : "perm";
  var div_29 = sibling(div_25, 2), div_30 = sibling(child(div_29), 2), div_31 = sibling(child(div_30), 2), div_32 = sibling(child(div_31), 2), select_7 = child(div_32), option_52 = child(select_7);
  option_52.value = ((option_52.__value = "") == null, "");
  var option_53 = sibling(option_52);
  option_53.value = (option_53.__value = "self") == null ? "" : "self";
  var option_54 = sibling(option_53);
  option_54.value = (option_54.__value = "ally") == null ? "" : "ally";
  var option_55 = sibling(option_54);
  option_55.value = (option_55.__value = "enemy") == null ? "" : "enemy";
  var option_56 = sibling(option_55);
  option_56.value = (option_56.__value = "creature") == null ? "" : "creature";
  var option_57 = sibling(option_56);
  option_57.value = (option_57.__value = "object") == null ? "" : "object";
  var option_58 = sibling(option_57);
  option_58.value = (option_58.__value = "space") == null ? "" : "space";
  var option_59 = sibling(option_58);
  option_59.value = (option_59.__value = "creatureOrObject") == null ? "" : "creatureOrObject";
  var option_60 = sibling(option_59);
  option_60.value = (option_60.__value = "any") == null ? "" : "any";
  var option_61 = sibling(option_60);
  option_61.value = (option_61.__value = "willing") == null ? "" : "willing";
  var div_33 = sibling(div_29, 4), div_34 = sibling(child(div_33), 2), select_8 = child(div_34), option_62 = child(select_8);
  option_62.value = ((option_62.__value = "") == null, "");
  var option_63 = sibling(option_62);
  option_63.value = (option_63.__value = "cone") == null ? "" : "cone";
  var option_64 = sibling(option_63);
  option_64.value = (option_64.__value = "cube") == null ? "" : "cube";
  var option_65 = sibling(option_64);
  option_65.value = (option_65.__value = "cylinder") == null ? "" : "cylinder";
  var option_66 = sibling(option_65);
  option_66.value = (option_66.__value = "radius") == null ? "" : "radius";
  var option_67 = sibling(option_66);
  option_67.value = (option_67.__value = "line") == null ? "" : "line";
  var option_68 = sibling(option_67);
  option_68.value = (option_68.__value = "sphere") == null ? "" : "sphere";
  var option_69 = sibling(option_68, 2);
  option_69.value = (option_69.__value = "circle") == null ? "" : "circle";
  var option_70 = sibling(option_69);
  option_70.value = (option_70.__value = "square") == null ? "" : "square";
  var option_71 = sibling(option_70);
  option_71.value = (option_71.__value = "wall") == null ? "" : "wall";
  var div_35 = sibling(div_33, 2), div_36 = sibling(child(div_35), 2), div_37 = sibling(child(div_36), 2), div_38 = sibling(child(div_37), 2), select_9 = child(div_38), option_72 = child(select_9);
  option_72.value = ((option_72.__value = "") == null, "");
  var option_73 = sibling(option_72);
  option_73.value = (option_73.__value = "ft") == null ? "" : "ft";
  var option_74 = sibling(option_73);
  option_74.value = (option_74.__value = "mi") == null ? "" : "mi";
  var option_75 = sibling(option_74);
  option_75.value = (option_75.__value = "m") == null ? "" : "m";
  var option_76 = sibling(option_75);
  option_76.value = (option_76.__value = "km") == null ? "" : "km", template_effect(() => {
    set_value(input, CONSTANTS.THEME_ID_DEFAULT_LIGHT), set_checked(input, get(theme).id === CONSTANTS.THEME_ID_DEFAULT_LIGHT), set_value(input_1, CONSTANTS.THEME_ID_DEFAULT_DARK), set_checked(input_1, get(theme).id === CONSTANTS.THEME_ID_DEFAULT_DARK), set_value(input_2, CONSTANTS.VIEW_MODE_DEFAULT), set_checked(input_2, !get(inverse)), set_value(input_3, CONSTANTS.VIEW_MODE_INVERSE), set_checked(input_3, get(inverse)), toggle_class(div_3, "inverse", get(inverse));
  }), append($$anchor, fragment), pop();
}
__name(ItemDebugSheet, "ItemDebugSheet");
delegate(["click"]);
class Tidy5eItemDebugSheetHightouch extends SvelteApplicationMixin(foundry.applications.sheets.ItemSheetV2) {
  static {
    __name(this, "Tidy5eItemDebugSheetHightouch");
  }
  static DEFAULT_OPTIONS = {
    classes: [
      CONSTANTS.MODULE_ID,
      "sheet",
      "item",
      CONSTANTS.ITEM_TYPE_CONTAINER,
      "app-v2",
      "hightouch"
    ],
    tag: "form",
    window: {
      frame: !0,
      positioned: !0,
      resizable: !0,
      controls: []
    },
    position: { width: 1600, height: 2400 },
    actions: {},
    dragDrop: [{ dropSelector: "div" }],
    submitOnClose: !1
  };
  _createComponent(node) {
    return mount(ItemDebugSheet, {
      target: node,
      context: /* @__PURE__ */ new Map([
        [
          CONSTANTS.SVELTE_CONTEXT.CONTEXT,
          this._context
        ]
      ])
    });
  }
  _createAdditionalComponents(node) {
    const windowHeader = this.element.querySelector(".window-header");
    return [mount(ItemHeaderStart, {
      target: windowHeader,
      anchor: windowHeader.querySelector(".window-title"),
      context: /* @__PURE__ */ new Map([
        [
          CONSTANTS.SVELTE_CONTEXT.CONTEXT,
          this._context
        ]
      ])
    })];
  }
  async _prepareContext(options) {
    const rollData = this.document.getRollData(), enrichmentOptions = {
      secrets: this.document.isOwner,
      relativeTo: this.item,
      rollData
    }, enriched = {
      description: await TextEditor.enrichHTML(this.document.system.description.value, enrichmentOptions),
      unidentified: await TextEditor.enrichHTML(this.document.system.unidentified?.description, enrichmentOptions),
      chat: await TextEditor.enrichHTML(this.document.system.description.chat, enrichmentOptions)
    }, isIdentifiable = "identified" in this.document.system, itemDescriptions = [];
    return itemDescriptions.push({
      enriched: enriched.description,
      content: this.document.system.description.value,
      field: "system.description.value",
      label: FoundryAdapter.localize("DND5E.Description")
    }), isIdentifiable && FoundryAdapter.userIsGm() && itemDescriptions.push({
      enriched: enriched.unidentified,
      content: this.document.system.unidentified.description,
      field: "system.unidentified.description",
      label: FoundryAdapter.localize("DND5E.DescriptionUnidentified")
    }), itemDescriptions.push({
      enriched: enriched.chat,
      content: this.document.system.description.chat,
      field: "system.description.chat",
      label: FoundryAdapter.localize("DND5E.DescriptionChat")
    }), {
      document: this.document,
      editable: this.isEditable,
      item: this.document,
      itemDescriptions,
      system: this.document.system,
      tabs: [
        {
          content: {
            type: "html",
            html: "<h1>Hallo 👋</h1>",
            renderScheme: "handlebars"
          },
          id: "hallo-tab",
          title: "Say Hallo"
        },
        {
          content: {
            type: "html",
            html: "<h1>Welcome 🤝</h1>",
            renderScheme: "handlebars"
          },
          id: "welcome-tab",
          title: "Welcome"
        }
      ],
      unlocked: FoundryAdapter.isSheetUnlocked(this.document)
    };
  }
}
function initReadyHooks() {
  assignDroppedSpellsToClassFilter();
}
__name(initReadyHooks, "initReadyHooks");
function assignDroppedSpellsToClassFilter() {
  Hooks.on("createItem", (item) => {
    const parent = item.parent, api = Tidy5eSheetsApi._getApi();
    if (!parent?.sheet?.element || !api.isTidy5eSheet(parent.sheet) || item.type !== CONSTANTS.ITEM_TYPE_SPELL)
      return;
    const classFilter = TidyFlags.classFilter.get(parent);
    classFilter && item.update({
      "system.sourceClass": classFilter
    });
  });
}
__name(assignDroppedSpellsToClassFilter, "assignDroppedSpellsToClassFilter");
Hooks.once("init", () => {
  DocumentSheetConfig.registerSheet(Actor, CONSTANTS.DND5E_SYSTEM_ID, Tidy5eCharacterSheet, {
    types: [CONSTANTS.SHEET_TYPE_CHARACTER],
    label: "TIDY5E.Tidy5eCharacterSheetClassic"
  }), DocumentSheetConfig.registerSheet(Actor, CONSTANTS.DND5E_SYSTEM_ID, Tidy5eNpcSheet, {
    types: [CONSTANTS.SHEET_TYPE_NPC],
    label: "TIDY5E.Tidy5eNpcSheetClassic"
  }), DocumentSheetConfig.registerSheet(Actor, CONSTANTS.DND5E_SYSTEM_ID, Tidy5eVehicleSheet, {
    types: [CONSTANTS.SHEET_TYPE_VEHICLE],
    label: "TIDY5E.Tidy5eVehicleSheetClassic"
  });
  const supportedItemTypes = [
    CONSTANTS.ITEM_TYPE_BACKGROUND,
    CONSTANTS.ITEM_TYPE_CLASS,
    CONSTANTS.ITEM_TYPE_CONSUMABLE,
    CONSTANTS.ITEM_TYPE_EQUIPMENT,
    CONSTANTS.ITEM_TYPE_FACILITY,
    CONSTANTS.ITEM_TYPE_FEAT,
    CONSTANTS.ITEM_TYPE_LOOT,
    CONSTANTS.ITEM_TYPE_RACE,
    CONSTANTS.ITEM_TYPE_SPELL,
    CONSTANTS.ITEM_TYPE_SUBCLASS,
    CONSTANTS.ITEM_TYPE_TOOL,
    CONSTANTS.ITEM_TYPE_WEAPON
  ];
  DocumentSheetConfig.registerSheet(Item, CONSTANTS.DND5E_SYSTEM_ID, Tidy5eItemSheetClassic, {
    types: supportedItemTypes,
    label: "TIDY5E.Tidy5eItemSheetClassic"
  }), DocumentSheetConfig.registerSheet(Item, CONSTANTS.DND5E_SYSTEM_ID, Tidy5eContainerSheetClassic, {
    types: [CONSTANTS.SHEET_TYPE_CONTAINER],
    label: "TIDY5E.Tidy5eContainerSheetClassic"
  }), DocumentSheetConfig.registerSheet(Actor, CONSTANTS.DND5E_SYSTEM_ID, Tidy5eGroupSheetClassic, {
    types: [CONSTANTS.SHEET_TYPE_GROUP],
    label: "TIDY5E.Tidy5eGroupSheetClassic"
  }), initSettings(), initRuntime(), initKeybindings();
  const thisIsKGarsVisualOverhaulBranch = !1;
  settings.value.debug;
});
Hooks.once("ready", async () => {
  const tidy5eModule = FoundryAdapter.getModule(CONSTANTS.MODULE_ID), api = Tidy5eSheetsApi._getApi();
  tidy5eModule.api = api, TidyHooks.tidy5eSheetsReady(api), setupIntegrations(api), FoundryAdapter.userIsGm() && SettingsProvider.settings.migrationsConfirmationTally.get() < MigrationTally && new MigrationNotificationFormApplication().render(!0), initReadyHooks(), DebugTools.onReady(api);
});
//# sourceMappingURL=tidy5e-sheet.js.map
